language: scala
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.length >= 3\n        chars.toList.forall(c => chars.toList.count(_\
    \ == c) == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojcjgrxi.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n            && chars.toList.distinct.length == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz6fq3thy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val distinctCharsCount = distinctChars.size\n    \
    \    val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.diff(_)\
    \ == 0)\n        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyocgj8k5.scala:12:87\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_)\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                  Found:    (_$1 : Char)\n\e[31m   |\e[0m   \
    \                                 Required: scala.collection.Seq[Char]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660011823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val charsSet = chars.toSet\n        val happy = s.forall(x => charsSet.contains(x))\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfg6swjq.scala:11:52\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = s.forall(\e[36mx\e[0m => charsSet.contains(x))\n\e[31m\e[31m   |\e[0m  \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                                 Found:    (x : Char)\n\e[31m\
    \   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n       \
    \ happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1bz_0fq.scala:18)\n\tat Problem.main(tmpv1bz_0fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.size == 3\n        return happy\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2q0hsqkf.scala:18)\n\tat Problem.main(tmp2q0hsqkf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.forall(x => chars.take(3).forall(y => y != x))\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8923i0t.scala:18)\n\tat Problem.main(tmps8923i0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall {\n            case (c,v) => v.length >= 3 && v.distinct.length\
    \ == 3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7zt49065.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.size == chars.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiokm1zpu.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall(c => c.size == 3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2no812rd.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n       \
    \ happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1bz_0fq.scala:18)\n\tat Problem.main(tmpv1bz_0fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.length).forall(_.length >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1oacd_v.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz6lp2yw.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val charsSet = chars.toSet\n        val happy = s.toList.length >=\
    \ 3 && s.toList.forall(x => charsSet.contains(x))\n        happy\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6un_fi9f.scala:11:83\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = s.toList.length >= \e[31m3\e[0m && s.toList.forall(\e[36mx\e[0m => charsSet.contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                          Found:    (x : Char)\n\e[31m   |\e[0m             \
    \                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660011823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).mapValues(_.length).forall(_.length\
    \ >= 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpst2dcdb0.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.length).filter(_._2 >= 3).forall(x => x._1 == x._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy76wcqap.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.distinct.size == s.length / 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpev182m40.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp121ltt59.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.length).filter(_._2 >= 3).forall(x => x._1 == x._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy76wcqap.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).mapValues(_.length).filter(_._2 >= 3).forall(x\
    \ => x._1 == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoii83eli.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssaurksg.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3) && (chars.toList.groupBy(x => x).forall(x\
    \ => x._2.length >= 3) && (chars.toList.groupBy(x => x).forall(x => x._2.length\
    \ >= 3)))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7nrmegfm.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(3).contains(x))\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtzn57hs.scala:17)\n\tat Problem.main(tmpjtzn57hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.forall(c => chars.count(_ == c) == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc91n5aqy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3) && (chars.toList.groupBy(x => x).forall(x\
    \ => x._2.length >= 3) && (chars.toList.groupBy(x => x).forall(x => x._2.length\
    \ >= 3)))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvi56arg1.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.size).filter(_._2 >= 3).forall(x => x._1 == x._2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpap31a0jn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.size == chars.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiokm1zpu.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.distinct.forall(x => chars.indexOf(x) == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ypu1dtr.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val charsSet\
    \ = chars.toSet\n        val charsSetSize = charsSet.size\n        val happy =\
    \ charsSetSize >= 3 && charsSet.forall(x => charsSet.count(y => x == y) == 3)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7w9svs6b.scala:18)\n\tat Problem.main(tmp7w9svs6b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.take(3).forall(y => y != x))\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjjkt4j1.scala:17)\n\tat Problem.main(tmppjjkt4j1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        if\
    \ (s.length < 3 || chars.distinct().length != s.length)\n            return false\n\
    \        for (i <- 0 until s.length - 2) {\n            if (s.charAt(i) != s.charAt(i\
    \ + 1) || s.charAt(i) != s.charAt(i + 2))\n                return false\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfmwvrixs.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.size == chars.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpco1wnjey.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val n = s.length\n        if (n < 3) return true\n\
    \        val set = mutable.Set[Char]()\n        for (i <- 0 until n) {\n     \
    \       val c = s.charAt(i)\n            if (set.contains(c)) {\n            \
    \    return false\n            }\n            set += c\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp528z_4lm.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mset\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvd11jno.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.take(x+1).distinct.length == 3)\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy57q698h.scala:17)\n\tat Problem.main(tmpy57q698h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.size).forall(x => x >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6kmxa_9.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3 && _._2.forall(x => !chars.contains(x))).length\
    \ == chars.length\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp42pkgsq.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val isHappy\
    \ = len >= 3\n        val isHappyConsecutiveDistinct = distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \        isHappy && isHappyConsecutiveDistinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx4s2wlcj.scala:13:81\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36misHappyConsecutiveDistinct\e\
    [0m = distinctChars.forall(distinctChars.diff(_).isEmpty)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                    Found:    (_$1\
    \ : Char)\n\e[31m   |\e[0m                                    Required: scala.collection.Seq[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val charsSet = chars.toSet\n        val happy = s.toString.length >=\
    \ 3 && s.toString.forall(charsSet.contains)\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7i02xj2r.scala:11:64\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = s.toString.length >= \e[31m3\e[0m && s.toString.forall(charsSet.contains)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \    Found:    (elem : Char)\n\e[31m   |\e[0m                                \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyh8cw49g.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvd11jno.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.take(3).forall(y => y != x))\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjjkt4j1.scala:17)\n\tat Problem.main(tmppjjkt4j1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val happy = s.toCharArray.take(3).forall(x => chars.contains(x))\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0a8bw3q.scala:10:69\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = s.toCharArray.take(\e[31m3\e[0m).forall(\e[36mx\e[0m => chars.contains(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \            Found:    (x : Char)\n\e[31m   |\e[0m                           \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(3).contains(x))\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtzn57hs.scala:17)\n\tat Problem.main(tmpjtzn57hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n        val happy =\
    \ s.length >= 3 && charsSet.size == 3\n        val distinctChars = chars.toList.distinct\n\
    \        val distinctCharsSet = distinctChars.toSet\n        val happy2 = s.length\
    \ >= 3 && charsSet.size == 3 && distinctCharsSet.size == 3\n        val happy3\
    \ = s.length >= 3 && charsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3\n        val happy4 = s.length >= 3 && charsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3\n        val\
    \ happy5 = s.length >= 3 && charsSet.size == 3 && distinctCharsSet.size == 3 &&\
    \ distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3\n        val happy6 = s.length >= 3 && charsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3\n        val happy7 = s.length >= 3 && charsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3\n        val happy8 = s.length >= 3 && charsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3\n        val happy9 = s.length >= 3 && charsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3\n        val happy10 = s.length >= 3 && charsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size\
    \ == 3 && distinctCharsSet.size == 3 && distinctCharsSet.size == 3 \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvtyilb4.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.distinct.size\
    \ == s.length && chars.toList.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc9hvnexv.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = mutable.Set[Char]()\n        chars.foreach { c =>\n\
    \            distinctChars += c\n        }\n        chars.length >= 3\n      \
    \  distinctChars.size == chars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26mw7zvw.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp26mw7zvw.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660011831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3) && chars.toList.forall(x => x._2.distinct.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxv0f2kky.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n        val charsSetSize\
    \ = charsSet.size\n        val charsSetIterator = charsSet.iterator\n        val\
    \ charsSetIteratorSize = charsSetIterator.size\n        val charsSetIteratorIterator\
    \ = charsSetIterator.iterator\n        val charsSetIteratorIteratorSize = charsSetIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIterator = charsSetIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorSize = charsSetIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyqvyo9or.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyqvyo9or.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(c => c).mapValues(_.length).filter(_._2 >= 3).forall(x\
    \ => x._1 == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4r3kf1a7.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).mapValues(_.length).filter(_._2 >= 3).forall(x\
    \ => x._1 == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoii83eli.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.groupBy(x => x).forall(x => x._2.size == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_hwnvms.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = mutable.Set[String]()\n        val\
    \ happyCount = 3\n        val len = s.length\n        val chars = s.toCharArray\n\
    \        for(i <- 0 until len) {\n            if(happyCount > 0 && chars(i) ==\
    \ chars(i+1)) {\n                happyCount -= 1\n            } else if(happyCount\
    \ > 0 && chars(i) == chars(i+2)) {\n                happyCount -= 1\n        \
    \    } else if(happyCount > 0 && chars(i) == chars(i+3)) {\n                happyCount\
    \ -= 1\n            } else {\n                happy += chars(i)\n            }\n\
    \        }\n        happy.size == len && happy.forall(x => happy.count(_ == x)\
    \ == happyCount)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdel59msr.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdel59msr.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                happyCount -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ -= is not a member of Int - did you mean happyCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdel59msr.scala:17:27 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                happyCount -= \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value -=\
    \ is not a member of Int - did you mean happyCount.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdel59msr.scala:19:27 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                happyCount -= \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value -=\
    \ is not a member of Int - did you mean happyCount.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660011839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val isHappy\
    \ = len >= 3 && distinctChars.size == chars.length - 3\n        isHappy\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3j_20any.scala:18)\n\tat Problem.main(tmp3j_20any.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val distinctCharsCount = distinctChars.length\n  \
    \      val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.init)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wngw5ie.scala:12:82\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.init)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                       Found:    Array[Char]\n\e[31m   |\e[0m               \
    \                                Required: Char => Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660011838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall { case (k, v) => v.length >= 3 && v.forall(x => !chars.contains(x))\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"))\
    \ == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcuynk3f.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            chars += s.charAt(i)\n     \
    \   chars.toList.length >= 3\n            && chars.toList.distinct.size == chars.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmuzh0n9.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(x).distinct.size == 1)\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph020l3b_.scala:17)\n\tat Problem.main(tmph020l3b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3\n        val happyChars = chars.takeWhile(_ != '\\0')\n        val\
    \ happyDistinctChars = happyChars.distinct\n        val happyAllDistinctChars\
    \ = happyDistinctChars.forall(distinctChars.contains)\n        happyAllDistinctChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwj6on2j_.scala:13:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mhappyChars\e[0m = chars.takeWhile(_\
    \ != \e[31m'\\0'\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m               octal escape literals are\
    \ unsupported: use \\u0000 instead\n1 error found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val counts = mutable.HashMap[Char, Int]()\n   \
    \     for (c <- chars) {\n            counts(c) = counts.getOrElse(c, 0) + 1\n\
    \        }\n        val happy = s.length >= 3 && counts.forall(c => c >= 3)\n\
    \        val distinctLetters = counts.filter(_._2 > 1).map(_._1).distinct\n  \
    \      happy && distinctLetters.size == chars.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19_uk1t2.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660011836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(3).contains(x))\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtzn57hs.scala:17)\n\tat Problem.main(tmpjtzn57hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = mutable.Set[String]()\n        for(i\
    \ <- 0 until s.length){\n            if(i % 3 == 0){\n                val str\
    \ = s.substring(i, i + 3)\n                if(happy.contains(str)){\n        \
    \            return false\n                }\n                happy.add(str)\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2_ovi_7.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s.toCharArray)\n\
    \        val distinctChars = chars.distinct\n        val happy = chars.length\
    \ >= 3 && distinctChars.forall(c => chars.drop(3).contains(c))\n        happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp252s8n3t.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).values.toList.forall(c => c.size == 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuja2vdky.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.take(3).distinct.contains(x))\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfh0sbwbx.scala:17)\n\tat Problem.main(tmpfh0sbwbx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n        val happy =\
    \ s.toList.length >= 3 && s.toList.forall(x => charsSet.contains(x))\n       \
    \ happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppq_dbjis.scala:18)\n\tat Problem.main(tmppq_dbjis.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpre7j9ves.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.size).forall(x => x >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6kmxa_9.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n            && chars.toList.distinct.length == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwntmhts.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s.toCharArray)\n\
    \        val distinctChars = mutable.Set[Char]()\n        chars.foreach { c =>\n\
    \            if (distinctChars.contains(c))\n                return false\n  \
    \          distinctChars += c\n        }\n        return chars.length >= 3 &&\
    \ distinctChars.size == chars.length / 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpce9a7aeh.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpce9a7aeh.scala:10:28 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660011839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val n = chars.length\n\
    \        val distinctChars = chars.distinct\n        val happy = n >= 3 && distinctChars.forall(x\
    \ => chars(n-3) == x)\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hkl1qq5.scala:18)\n\tat Problem.main(tmp6hkl1qq5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.size == chars.length - 3\n        return happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7evj27l7.scala:18)\n\tat Problem.main(tmp7evj27l7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = mutable.Set[Char]()\n        chars.takeWhile(chars.headOption\
    \ match {\n            case Some(c) => distinctChars += c\n            case None\
    \ => true\n        }).forall(distinctChars.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5v4s2166.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5v4s2166.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660011840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val charsCount\
    \ = chars.length\n        val distinctChars = chars.distinct\n        val distinctCharsCount\
    \ = distinctChars.length\n        val isHappy = charsCount >= 3 && distinctCharsCount\
    \ >= 3\n        return isHappy\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lpo5mak.scala:24)\n\tat Problem.main(tmp_lpo5mak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(3).forall(y => x == y))\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89b8350c.scala:17)\n\tat Problem.main(tmp89b8350c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = s.toList\n        val happyLen =\
    \ happy.size\n        val distinctLetters = happy.distinct\n        val happyStringLen\
    \ = happy.size\n        val happyStringDistinctLetters = happy.distinct\n    \
    \    val happyStringDistinctLettersLen = happy.distinct\n        val happyStringDistinctLettersDistinctLetters\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersLen =\
    \ happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLetters\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersLen\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLetters\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersLen\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLetters\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersLen\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLetters\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersLen\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLetters\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersLen\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersDistinctLettersLen\
    \ = happy.distinct\n        val happyStringDistinctLettersDistinctLettersDistinctLettersDist\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprvtzw786.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprvtzw786.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660011844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.size == chars.toList.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiokm1zpu.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall { case (k, v) => v.length >= 3 && v.forall(c => k != c) }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp940oyj1m.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.forall(y\
    \ => chars.contains(y)))\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa4cp44m.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).mapValues(_.length).forall(_.length\
    \ >= 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6gvbdedn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall { case (c, n) => n >= 3 && chars.count(_ == c) == 1 }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjig4hn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n \
    \       chars.size == 3 && chars.distinct.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp324g2qfb.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbj2snhy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n            && chars.toList.distinct.length == chars.toList.length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq0hs_4x_.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.forall(c => chars.count(_ == c) == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc91n5aqy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogt9ybo5.scala:11:81\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = chars.length >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \        Found:    (_$1 : Char)\n\e[31m   |\e[0m                             \
    \       Required: scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).filter(_._2.length >= 3).map(_._1).forall(x\
    \ => chars.count(_ == x) == 3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4f8o07u.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(distinctChars.diff(_)\
    \ == 0)\n        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6y_7pw3c.scala:11:81\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = chars.length >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_)\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                            Found:    (_$1 : Char)\n\e[31m   |\e[0m         \
    \                           Required: scala.collection.Seq[Char]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660011848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.distinct.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1i3hdrp.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.length).forall(_.length >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1oacd_v.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek00gfu9.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.subsetOf(Set('a','e','i','o','u','A','E','I','O','U'))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkxmki03y.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val isHappy\
    \ = len >= 3 && distinctChars.forall(x => chars.take(3).forall(y => y != x))\n\
    \        isHappy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpublurfo_.scala:18)\n\tat Problem.main(tmpublurfo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = mutable.ListBuffer[String]()\n  \
    \      for(i <- 0 until s.length){\n            if(s.length - i >= 3){\n     \
    \           val str = s.substring(i, i + 3)\n                if(happy.contains(str)){\n\
    \                    return false\n                }\n                happy.append(str)\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp29vnoim4.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s)\n        val\
    \ distinctChars = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(3).contains(x))\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9z330yf.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.size == s.length\
    \ && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4gibytnw.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogt9ybo5.scala:11:81\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = chars.length >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \        Found:    (_$1 : Char)\n\e[31m   |\e[0m                             \
    \       Required: scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(3).contains(x))\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtzn57hs.scala:17)\n\tat Problem.main(tmpjtzn57hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(c => c).mapValues(_.size).filter(_._2 >= 3).forall(x\
    \ => x._1 == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbv9c5jlg.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall(c => c.length >= 3).forall(c => c.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkxhgb0g.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).forall(c => c.size == 3 && c.forall(c => c.distinct))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp82jxo3uf.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).mapValues(_.length).forall(x => x >= 3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlq2rm8c.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).mapValues(_.length).forall(_.length\
    \ >= 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpst2dcdb0.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = chars.distinct\n        val happy = chars.length >=\
    \ 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n        happy\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpclpgs61v.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(_.toInt).forall\
    \ { case (k, v) => v.length >= 3 && v.forall(_.toInt != k) }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpciitcyss.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n        val charsSetSize\
    \ = charsSet.size\n        val charsSetIterator = charsSet.iterator\n        val\
    \ charsSetIteratorSize = charsSetIterator.size\n        val charsSetIteratorIterator\
    \ = charsSetIterator.iterator\n        val charsSetIteratorIteratorSize = charsSetIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIterator = charsSetIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorSize = charsSetIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize =\
    \ charsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp009isjsm.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp009isjsm.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp009isjsm.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp009isjsm.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: B"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val distinctCharsCount = distinctChars.length\n  \
    \      val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidpabsxb.scala:12:87\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \              Found:    (_$1 : Char)\n\e[31m   |\e[0m                       \
    \             Required: scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s)\n        val\
    \ len = chars.length\n        val isHappy = len >= 3 && chars.distinct.forall(x\
    \ => chars.drop(3).contains(x))\n        chars.clear()\n        isHappy\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp77otwzuf.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).forall { case (k, v) => v.length >= 3 &&\
    \ v.forall(x => !chars.contains(x)) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqr1t7e0m.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3\n        val happyChars = chars.takeWhile(_ != '\\0')\n        val\
    \ happyDistinctChars = happyChars.distinct\n        val happyAllDistinctChars\
    \ = happyDistinctChars.forall(distinctChars.contains)\n        happyAllDistinctChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwj6on2j_.scala:13:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mhappyChars\e[0m = chars.takeWhile(_\
    \ != \e[31m'\\0'\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m               octal escape literals are\
    \ unsupported: use \\u0000 instead\n1 error found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val charsSet\
    \ = chars.toSet\n        val distinctChars = chars.distinct\n        val distinctCharsSet\
    \ = distinctChars.toSet\n        val distinctCharsSetSize = distinctCharsSet.size\n\
    \        val happy = chars.length >= 3 && distinctCharsSetSize >= 3\n        return\
    \ happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79o54nd9.scala:25)\n\tat Problem.main(tmp79o54nd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.length).filter(_._2 >= 3).forall { case (c, n) => c != n }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvhndnik.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall {\n            case (k, v) => v.length >= 3 && v.forall(x => !chars.contains(x))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkp_j66zu.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyh8cw49g.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).map(_._2.length).forall(x => x == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq27_474_.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.distinct.size == chars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4a53kyrg.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.groupBy(identity).mapValues(_.length).forall(_.length\
    \ >= 3) && chars.toList.groupBy(identity).forall(_.distinct.length == 3)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfdquetn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = s.toList\n        val happyLength\
    \ = happy.length\n        if (happyLength < 3) false\n        else {\n       \
    \     val distinctLetters = happy.distinct\n            val distinctLettersLength\
    \ = distinctLetters.length\n            if (distinctLettersLength != 3) false\n\
    \            else {\n                val lastLetter = happy(distinctLettersLength\
    \ - 1)\n                val firstLetter = happy(0)\n                val lastThreeLetters\
    \ = happy.takeRight(3).distinct\n                val firstThreeLetters = happy.take(3).distinct\n\
    \                if (lastLetter == firstLetter && lastLetter == lastThreeLetters\
    \ && firstLetter == firstThreeLetters) true\n                else false\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpri6jkzgc.scala:21:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (lastLetter == firstLetter\
    \ && lastLetter == lastThreeLetters && firstLetter == firstThreeLetters) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Values of types Char and List[Char] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpri6jkzgc.scala:21:83 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (lastLetter == firstLetter\
    \ && lastLetter == lastThreeLetters && firstLetter == firstThreeLetters) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    Values of types Char and List[Char] cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = mutable.Set[Char]()\n        val happy = chars.takeWhile(chars.headOption\
    \ match {\n            case None => false\n            case Some(c) => distinctChars.contains(c)\n\
    \        }).forall(chars.tail.headOption match {\n            case None => true\n\
    \            case Some(c) => distinctChars.contains(c)\n        })\n        happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoo6f28sn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpoo6f28sn.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660011852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).forall(c\
    \ => c.length >= 3 && c.distinct.length == 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8vmww8r.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).forall(_.size\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjageenr3.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93x5oznn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp121ltt59.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s.toCharArray)\n\
    \        val distinctChars = chars.distinct\n        val happy = chars.length\
    \ >= 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n        happy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nptwowr.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpek00gfu9.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2aclkf4.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.length).forall(_.length >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1oacd_v.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n        val charsSetSize\
    \ = charsSet.size\n        val charsSetIterator = charsSet.iterator\n        val\
    \ charsSetIteratorSize = charsSetIterator.size\n        val charsSetIteratorIterator\
    \ = charsSetIterator.iterator\n        val charsSetIteratorIteratorSize = charsSetIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIterator = charsSetIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorSize = charsSetIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyqvyo9or.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyqvyo9or.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = mutable.Set[Char]()\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) != s.charAt(i+1) && s.charAt(i)\
    \ != s.charAt(i+2))\n                happy = happy.union(s.charAt(i).toChar)\n\
    \        happy.size == 3 && happy.distinct.size == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy4vglyzb.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpy4vglyzb.scala:12:22 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                happy = happy.union(s.charAt(i).toChar)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val happy\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val n = s.length\n        val arr = new Array[String](n)\n\
    \        for(i <- 0 until n) {\n            arr(i) = s(i)\n        }\n       \
    \ val distinctLetters = arr.distinct\n        val happy = arr.length >= 3 && distinctLetters.forall(x\
    \ => arr.count(_ == x) == 3)\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe76oba5d.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            arr(i) = s(i)\n\e\
    [31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m   |\e[0m           \
    \          Found:    Char\n\e[31m   |\e[0m                     Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val charsLen\
    \ = chars.length\n        val distinctChars = chars.distinct\n        val distinctCharsLen\
    \ = distinctChars.length\n        val happy = charsLen >= 3 && distinctCharsLen\
    \ >= 3\n        val happyString = chars.mkString.toString.toList\n        val\
    \ happyStringLen = happyString.length\n        val happyStringDistinct = happyString.distinct\n\
    \        val happyStringDistinctLen = happyStringDistinct.length\n        val\
    \ happyStringDistinctDistinct = happyStringDistinct.distinct\n        val happyStringDistinctDistinctLen\
    \ = happyStringDistinctDistinct.length\n        val happyStringDistinctDistinctDistinct\
    \ = happyStringDistinctDistinct.distinct\n        val happyStringDistinctDistinctDistinctLen\
    \ = happyStringDistinctDistinctDistinct.length\n        val happyStringDistinctDistinctDistinctDistinct\
    \ = happyStringDistinctDistinctDistinct.distinct\n        val happyStringDistinctDistinctDistinctDistinctLen\
    \ = happyStringDistinctDistinctDistinctDistinct.length\n        val happyStringDistinctDistinctDistinctDistinctDistinct\
    \ = happyStringDistinctDistinctDistinctDistinct.distinct\n        val happyStringDistinctDistinctDistinctDistinctLen\
    \ = happyStringDistinctDistinctDistinctDistinct.length\n        val happyStringDistinctDistinctDistinctDistinctDistinct\
    \ = happyStringDistinctDistinctDistinctDistinct.distinct\n        val happyStringDistinctDistinctDistinctDistinctLen\
    \ = happyStringDistinctDistinctDistinctDistinct.length\n        val happyStringDistinctDistinctDistinctDistinctDistinct\
    \ = happyStringDistinctDistinctDistinctDistinct.distinct\n        val happyStringDistinctDistinctDistinctDistinctLen\
    \ = happyStringDistinctDistinctDistinctDistinct.length\n        val happyStringDistinctDistinctDistinctDistinctDistinct\
    \ = happyStringDistinctDistinctDistinctDistinct.distinct\n        val happyStringDistinctDistinctDistinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpptixllk7.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpptixllk7.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhappyStringDistinctDistinctDistinctDistinctLen\e[0m = happyStringDistinctDistinctDistinctDistinct.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhappyStringDistinctDistinctDistinctDistinctLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mhappyStringDistinctDistinctDistinctDistinctLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpptixllk7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mhappyStringDistinctDistinctDistinctDistinctDistinct\e\
    [0m = happyStringDistinctDistinctDistinctDistinct.distinct\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhappyStringDistinctDistinctDistinctDistinctDistinct is already\
    \ defined as \e[33mvalue\e[0m \e[35mhappyStringDistinctDistinctDistinctDistinctDistinct\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpptixllk7.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhappyStringDistinctDistinctDistinctDistinctLen\e\
    [0m = happyStringDistinctDistinctDistinctDistinct.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhappyStringDistinctDistinctDistinctDistinctLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mhappyStringDistinctDistinctDistinctDistinctLen\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660011859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n        chars.toList.forall(c => chars.toList.count(_ == c) == 3)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvmovey4w.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.distinct.size == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyh8cw49g.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList\
    \ match {\n            case Nil => true\n            case _ => chars.toList.forall(c\
    \ => chars.count(_ == c) == 3)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwowkfv9.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = chars.distinct\n        val happy = chars.length >=\
    \ 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n        happy\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpclpgs61v.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93x5oznn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n            && chars.toList.distinct.length == 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwntmhts.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.distinct.length == chars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwgskin3.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n        chars.toList.forall(x => chars.count(_ == x) == 3)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpispcdck7.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = mutable.Set[Char]()\n        chars.foreach { c =>\n\
    \            if (distinctChars.contains(c)) {\n                distinctChars.remove(c)\n\
    \            } else {\n                distinctChars += c\n            }\n   \
    \     }\n        chars.length >= 3 && distinctChars.size == chars.length\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg2ji7o7t.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpg2ji7o7t.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660011857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.length).filter(_._2 >= 3).forall(x => x._1.distinct().length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn1t7eu2.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3\n        val happyConsecutiveDistinct = distinctChars.forall(distinctChars.diff(_)\
    \ == 0)\n        happy && happyConsecutiveDistinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66zwbuw3.scala:13:79\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mhappyConsecutiveDistinct\e\
    [0m = distinctChars.forall(distinctChars.diff(_) == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \            ^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (_$1 : Char)\n\e[31m   |\e[0m                                    Required:\
    \ scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        if(s.length < 3 || chars.distinct.length != 3){\n            return false\n\
    \        }\n        for(i <- 0 until s.length){\n            val j = i + 3\n \
    \           if(j < s.length && chars.distinct.contains(s.charAt(i))){\n      \
    \          chars.remove(s.charAt(i))\n            }\n        }\n        return\
    \ chars.distinct.length == 3\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmj0ducnn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.toSet.length >= 3\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n\
    \    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"aabb\")) ==\
    \ (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpus3bmn_p.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbj2snhy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).filter(_._2.length >= 3).map(_._2.length).forall(x\
    \ => x == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprd5_awfy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val distinctChars = chars.distinct\n        val\
    \ happy = s.length >= 3 && distinctChars.forall(x => chars.indexOf(x) == chars.lastIndexOf(x))\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0d8epzme.scala:18)\n\tat Problem.main(tmp0d8epzme.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz6lp2yw.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val happy = mutable.ListBuffer[String]()\n  \
    \      val chars = s.toCharArray\n        var i = 0\n        while (i < chars.length)\
    \ {\n            if (chars(i) == chars(i+1)) {\n                happy.append(chars(i))\n\
    \                i += 1\n            } else {\n                happy.clear()\n\
    \                i = 0\n            }\n        }\n        happy.length >= 3 &&\
    \ happy.forall(_.distinct).isEmpty\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_lvzu7v5.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mhappy\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpogt9ybo5.scala:11:81\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = chars.length >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \        Found:    (_$1 : Char)\n\e[31m   |\e[0m                             \
    \       Required: scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.distinct.length == chars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfjhk7afu.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.forall(c => chars.count(_ == c) == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc91n5aqy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.distinct.length >= 3 && chars.toList.distinct.forall(_.isLetter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlzl24ae.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(c\
    \ => c).mapValues(_.size).forall(_.toLong >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprkk5uoxy.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall(x => x._2.length >= 3) && chars.toList.groupBy(x => x).forall(x\
    \ => x._2.length >= 3 && x._2.distinct.length == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp27sq7nxa.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.take(3).forall(y => y != x))\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjjkt4j1.scala:17)\n\tat Problem.main(tmppjjkt4j1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = chars.distinct\n        val happy = chars.size >= 3\
    \ && distinctChars.forall(x => chars.count(_ == x) == 3)\n        happy\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpewix8x_l.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        if\
    \ (chars.length < 3 || chars.distinct.length != 3)\n            return false\n\
    \        val charsSet = chars.toSet\n        for (i <- 0 until chars.length -\
    \ 3)\n            if (!charsSet.contains(chars(i + 1) + chars(i + 2) + chars(i\
    \ + 3)))\n                return false\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywi2ybfk.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == 3 && chars.distinct.size == 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\")) ==\
    \ (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpka4mec9e.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.forall(x => chars.take(3).forall(y => x != y))\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspa7hctu.scala:18)\n\tat Problem.main(tmpspa7hctu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).forall {\n            case (k, v) => v.length >= 3 && v.forall(x => chars.contains(x))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiobs97b1.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).filter(_._2.length >= 3).forall(x => x._2.length\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsro2aqa7.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2aclkf4.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n\
    \        chars.toList.groupBy(x => x).mapValues(_.length).forall(x => x >= 3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlq2rm8c.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = Array('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val charsSet = chars.toSet\n        val charsSetSize\
    \ = charsSet.size\n        val charsSetIterator = charsSet.iterator\n        val\
    \ charsSetIteratorSize = charsSetIterator.size\n        val charsSetIteratorIterator\
    \ = charsSetIterator.iterator\n        val charsSetIteratorIteratorSize = charsSetIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIterator = charsSetIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorSize = charsSetIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) ==\
    \ (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyqvyo9or.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyqvyo9or.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660011835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).map(_._2.length).forall(_.toInt\
    \ == 3)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dpkz3iu.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).mapValues(_.length).forall(x => x >= 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gm579gb.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ArrayBuffer(s.toCharArray)\n\
    \        val distinctChars = mutable.Set[Char]()\n        chars.foreach { c =>\n\
    \            if (distinctChars.contains(c)) {\n                distinctChars.remove(c)\n\
    \            } else {\n                distinctChars += c\n            }\n   \
    \     }\n        chars.length >= 3 && distinctChars.size == chars.length\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpydrx9njp.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer(s.toCharArray)\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpydrx9njp.scala:10:28 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mdistinctChars\e[0m = mutable.Set[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660011863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93x5oznn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val n = chars.length\n\
    \        val distinctChars = chars.distinct\n        val happy = if (n < 3) false\
    \ else true\n        val happyChars = happy\n        val happyStrings = happyChars\
    \ && (distinctChars.toList.length >= 3)\n        val happyStringsCount = happyStrings.count(_\
    \ == true)\n        val happyStringsCount2 = happyStrings.count(_ == false)\n\
    \        val happyStringsCount3 = happyStrings.count(_ == null)\n        val happyStringsCount4\
    \ = happyStrings.count(_ == 0)\n        val happyStringsCount5 = happyStrings.count(_\
    \ == 1)\n        val happyStringsCount6 = happyStrings.count(_ == 2)\n       \
    \ val happyStringsCount7 = happyStrings.count(_ == 3)\n        val happyStringsCount8\
    \ = happyStrings.count(_ == 4)\n        val happyStringsCount9 = happyStrings.count(_\
    \ == 5)\n        val happyStringsCount10 = happyStrings.count(_ == 6)\n      \
    \  val happyStringsCount11 = happyStrings.count(_ == 7)\n        val happyStringsCount12\
    \ = happyStrings.count(_ == 8)\n        val happyStringsCount13 = happyStrings.count(_\
    \ == 9)\n        val happyStringsCount14 = happyStrings.count(_ == 10)\n     \
    \   val happyStringsCount15 = happyStrings.count(_ == 11)\n        val happyStringsCount16\
    \ = happyStrings.count(_ == 12)\n        val happyStringsCount17 = happyStrings.count(_\
    \ == 13)\n        val happyStringsCount18 = happyStrings.count(_ == 14)\n    \
    \    val happyStringsCount19 = happyStrings.count(_ == 15)\n        val happyStringsCount20\
    \ = happyStrings.count(_ == 16)\n        val happyStringsCount21 = happyStrings.count(_\
    \ == 17)\n        val happyStringsCount22 = happyStrings.count(_ == 18)\n    \
    \    val happyStringsCount23 = happyStrings.count(_ == 19)\n        val happyStringsCount24\
    \ = happyStrings.count(_ == 20)\n        val happyStringsCount25 = happyStrings.count(_\
    \ == 21)\n        val happyStringsCount26 = happyStrings.count(_ == 22)\n    \
    \    val happyStringsCount27 = happyStrings.count(_ == 23)\n        val happyStringsCount28\
    \ = happyStrings.count(_ == 24)\n        val happyStringsCount29 = happyStrings.count(_\
    \ == 25)\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1kj9v49.scala:15:45 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mhappyStringsCount\e[0m =\
    \ happyStrings.count(_ == \e[31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                value count is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc1kj9v49.scala:16:46 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mhappyStringsCount2\e[0m = happyStrings.count(_\
    \ == \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ count is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1kj9v49.scala:17:46\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mhappyStringsCount3\e[0m = happyStrings.count(_ == \e[31mnull\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value count is not a member of Boolean\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1kj9v49.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mhappyStringsCount4\e[0m\
    \ = happyStrings.count(_ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 value count is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpc1kj9v49.scala:19:46 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhappyStringsCount5\e[0m = happyStrings.count(_\
    \ == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value count is not a member\
    \ of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1kj9v49.scala:20:46\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mhappyStringsCount6\e[0m = happyStrings.count(_ == \e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                 ^"
  stdout: ''
  timestamp: 1660011866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.size\
    \ == chars.length - 3\n        happy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_sudmcv.scala:17)\n\tat Problem.main(tmpx_sudmcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"a\"\
    )) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2aclkf4.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char](s)\n   \
    \     val distinctChars = chars.distinct\n        val happy = chars.length >=\
    \ 3 && distinctChars.size == chars.length - 3\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8c2uz75.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.distinct.length == 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbenk5psf.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.HashSet[Char]()\n       \
    \ for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.size\
    \ == s.length && chars.forall(x => chars.count(_ == x) == 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9sqkwzu_.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.indexOf(x) == chars.lastIndexOf(x))\n        happy\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1pu200px.scala:21)\n\tat Problem.main(tmp1pu200px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(identity).forall(c\
    \ => c.length >= 3 && c.distinct.length == 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hryy_l1.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val distinctCharsCount = distinctChars.length\n  \
    \      val happy = distinctCharsCount >= 3 && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \        happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidpabsxb.scala:12:87\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mhappy\e\
    [0m = distinctCharsCount >= \e[31m3\e[0m && distinctChars.forall(distinctChars.diff(_).isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \              Found:    (_$1 : Char)\n\e[31m   |\e[0m                       \
    \             Required: scala.collection.Seq[Char]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660011853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for (i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.toList.distinct.length == chars.toList.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n  \
    \  assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n\
    \    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"adb\")) ==\
    \ (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93x5oznn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.length\
    \ >= 3 && chars.distinct.size == chars.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"aa\"))\
    \ == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy8gsfzn.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val len =\
    \ chars.length\n        val distinctChars = chars.distinct\n        val happy\
    \ = len >= 3 && distinctChars.forall(x => chars.drop(3).contains(x))\n       \
    \ happy\n    }\n    def main(args: Array[String]) = {\n    assert(isHappy((\"\
    a\")) == (false));\n    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"\
    abcd\")) == (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1bz_0fq.scala:18)\n\tat Problem.main(tmpv1bz_0fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = s.toCharArray\n        val distinctChars\
    \ = chars.distinct\n        val happy = chars.length >= 3 && distinctChars.forall(x\
    \ => chars.drop(x).distinct.size == 1)\n        happy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n    assert(isHappy((\"\
    aa\")) == (false));\n    assert(isHappy((\"abcd\")) == (true));\n    assert(isHappy((\"\
    aabb\")) == (false));\n    assert(isHappy((\"adb\")) == (true));\n    assert(isHappy((\"\
    xyy\")) == (false));\n    assert(isHappy((\"iopaxpoi\")) == (true));\n    assert(isHappy((\"\
    iopaxioi\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph020l3b_.scala:17)\n\tat Problem.main(tmph020l3b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660011840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // Your task is to check if the string\
    \ is happy or not.\n    // A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    // For example:\n    def isHappy(s :\
    \ String) : Boolean = {\n        val chars = mutable.ListBuffer[Char]()\n    \
    \    for(i <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.groupBy(x\
    \ => x).filter(_._2.length >= 3).forall(x => x._2.distinct.length == 3)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isHappy((\"a\")) == (false));\n\
    \    assert(isHappy((\"aa\")) == (false));\n    assert(isHappy((\"abcd\")) ==\
    \ (true));\n    assert(isHappy((\"aabb\")) == (false));\n    assert(isHappy((\"\
    adb\")) == (true));\n    assert(isHappy((\"xyy\")) == (false));\n    assert(isHappy((\"\
    iopaxpoi\")) == (true));\n    assert(isHappy((\"iopaxioi\")) == (false));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbg4ngz7i.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660011822
