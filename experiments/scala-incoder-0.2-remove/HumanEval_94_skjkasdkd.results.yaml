language: scala
name: HumanEval_94_skjkasdkd
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 117 != 0).filter(_\
    \ % 121 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_ % 137 != 0).filter(_\
    \ % 139 !=0).filter(_ % 143 != 0).filter(_ % 147 !=0).filter(_ % 151 != 0).filter(_\
    \ % 153 != 0).filter(_ % 155 != 0).filter(_ % 157 !=0).filter(_ % 159 != 0).filter(_\
    \ % 163 != 0).filter(_ % 167 !=0).filter(_ % 173 != 0).filter(_ % 177 !=0).filter(_\
    \ % 181 != 0).filter(_ % 183 != 0).filter(_ % 185 != 0).filter(_ % 187 != 0).filter(_\
    \ % 191 != 0).filter(_ % 193 != 0).filter(_ % 195 != 0).filter(_ % 197 !=0).filter(_\
    \ % 199 != 0).filter(_ % 203 != 0).filter(_ % 207 !=0).filter(_ % 211 != 0).filter(_\
    \ % 213 != 0).filter(_ % 215 != 0).filter(_ % 217 != 0).filter(_ % 219 != 0).filter(_\
    \ % 223 != 0).filter(_ % 227 != 0).filter(_ % 229 != 0).filter(_ % 233 != 0).filter(_\
    \ % 237 != 0).filter(_ % 241 != 0).filter(_ % 243 != 0).filter(_ % 245 != 0).filter(_\
    \ % 247 !=0).filter(_ % 251 != 0).filter(_ % 253 != 0).filter(_ % 255 !=0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx3_7flui.scala:8:1613 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).filter(_ % \e[31m3\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m != \e[31m0\e[0m).filter(_ % \e[31m7\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m != \e[31m0\e[0m).filter(_ % \e[31m13\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m != \e[31m0\e[0m).filter(_ % \e[31m19\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m != \e[31m0\e[0m).filter(_ % \e[31m29\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m != \e[31m0\e[0m).filter(_ % \e[31m37\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m != \e[31m0\e[0m).filter(_ % \e[31m43\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m != \e[31m0\e[0m).filter(_ % \e[31m51\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m53\e[0m != \e[31m0\e[0m).filter(_ % \e[31m59\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m61\e[0m != \e[31m0\e[0m).filter(_ % \e[31m67\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m71\e[0m != \e[31m0\e[0m).filter(_ % \e[31m73\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m79\e[0m != \e[31m0\e[0m).filter(_ % \e[31m83\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m89\e[0m != \e[31m0\e[0m).filter(_ % \e[31m97\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m101\e[0m != \e[31m0\e[0m).filter(_ % \e[31m103\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m105\e[0m != \e[31m0\e[0m).filter(_ % \e[31m107\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m != \e[31m0\e[0m).filter(_ % \e[31m113\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m117\e[0m != \e[31m0\e[0m).filter(_ % \e[31m121\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m != \e[31m0\e[0m).filter(_ % \e[31m131\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m != \e[31m0\e[0m).filter(_ % \e[31m139\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m != \e[31m0\e[0m).filter(_ % \e[31m147\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m != \e[31m0\e[0m).filter(_ % \e[31m153\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m155\e[0m != \e[31m0\e[0m).filter(_ % \e[31m157\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m != \e[31m0\e[0m).filter(_ % \e[31m163\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m173\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m18"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxnr8za0.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => math.log10(x)).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrdprb9v.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.pow(10,\
    \ x)).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4tf3uvp2.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (sumOfDigits\
    \ : Double)\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsds5o425.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt).toList\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x21bdpf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt).toList\n\e[31m\e\
    [31m  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                                     Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzjob4j9.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt)\n\e[31m\e[31m\
    \  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                                  Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val max = primes.max\n\
    \        val sum = 0\n        primes.foreach(x => sum += x.toString.toInt)\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8y5u_on.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        primes.foreach(\e[36mx\e[0m => sum += x.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(x => x % 10).sum\n  \
    \      sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_g96t0g.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesSet = primes.toSet\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl9oohdas.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl9oohdas.scala:11)\n\
    \tat Problem$.main(tmpl9oohdas.scala:15)\n\tat Problem.main(tmpl9oohdas.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var max = 0\n        var sum = 0\n       \
    \ var primes = mutable.Set[Long]()\n        for(i <- 0 until lst.size) {\n   \
    \         val prime = lst.filter(_ % i == 0).length\n            primes += prime\n\
    \            if(prime > max) {\n                max = prime\n                sum\
    \ = lst.filter(_ % prime == 0).sum\n            }\n        }\n        sum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbc9qci9a.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbc9qci9a.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                sum = lst.filter(_ % prime == \e[31m0\e\
    [0m).sum\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m   |\e[0m    \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 393 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_\
    \ % 421 == 0).filter(_ % 431 == 0).filter(_ % 433 == 0).filter(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpruupuwao.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpruupuwao.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt).toList\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x21bdpf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt).toList\n\e[31m\e\
    [31m  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                                     Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => math.log10(x)).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpif0t8lqj.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var max = 0\n        var sum = 0\n       \
    \ var prime = 0\n        var primeSum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            prime = lst.filter(_ % i == 0).size\n            primeSum +=\
    \ prime\n            if(prime > max) {\n                max = prime\n        \
    \        sum = primeSum\n            }\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.skjkasdkd$$anonfun$1$$anonfun$1(tmpa0aubrmj.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd$$anonfun$1(tmpa0aubrmj.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.skjkasdkd(tmpa0aubrmj.scala:19)\n\
    \tat Problem$.main(tmpa0aubrmj.scala:23)\n\tat Problem.main(tmpa0aubrmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt).toList\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x21bdpf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt).toList\n\e[31m\e\
    [31m  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                                     Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt)\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = largestPrime.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpea0lh_sq.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt)\n\e[31m\e[31m\
    \  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                                  Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpea0lh_sq.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var maxPrime = 0\n        var sum = 0\n  \
    \      for(i <- lst) {\n            val isPrime = i.toInt == 2\n            if(isPrime)\
    \ {\n                sum += i.toInt\n            } else {\n                val\
    \ primeFactors = lst.filter(_ % i == 0)\n                if(primeFactors.isEmpty)\
    \ {\n                    maxPrime = i.toInt\n                } else {\n      \
    \              val maxFactor = primeFactors.max\n                    if(maxFactor\
    \ > maxPrime) {\n                        maxPrime = maxFactor\n              \
    \      }\n                }\n            }\n        }\n        sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbq2t5yk.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                        maxPrime\
    \ = maxFactor\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    (maxFactor :\
    \ Long)\n\e[31m   |\e[0m                                   Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => math.pow(10, x)).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqhqtnva.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5n9ixut.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa5n9ixut.scala:10:39\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36msumOfDigits\e[0m = largestPrime.map(\e[36mx\e[0m => x.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => math.log10(x)).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrdprb9v.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largest = primes.max\n        val sumOfDigits = largest.map(x => x % 10).sum\n\
    \        return sumOfDigits\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1qpt1hfd.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_\
    \ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxvoh1667.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % \e[31m213\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m217\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(x => x % 10).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5rwinjt8.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(x\
    \ => x.toString.toInt).sum\n        return sumOfDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93o_88y3.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(x => x % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmphqskdsp0.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmphqskdsp0.scala:10)\n\
    \tat Problem$.main(tmphqskdsp0.scala:14)\n\tat Problem.main(tmphqskdsp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 377 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397 == 0).filter(_\
    \ % 401 == 0).filter(_ % 407 == 0).filter(_ % 413 == 0).filter(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwcj0vgl9.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwcj0vgl9.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_\
    \ % 369 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7_olgz81.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_olgz81.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9jbe6gb.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_mdex8z.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = lst.filter(x => isPrime(x)).map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcso7sdqu.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt).toSet\n\e[31m\e\
    [31m  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                                     Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcso7sdqu.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt).sum\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                          Not found: isPrime\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var largestPrime = 0\n        var sumOfDigits\
    \ = 0\n        for(i <- lst) {\n            val isPrime = i.toInt % largestPrime\
    \ == 0\n            if(!isPrime) {\n                largestPrime = i.toInt\n \
    \               sumOfDigits += i.toInt\n            }\n        }\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.skjkasdkd$$anonfun$1(tmpzj93i0j1.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.skjkasdkd(tmpzj93i0j1.scala:16)\n\
    \tat Problem$.main(tmpzj93i0j1.scala:20)\n\tat Problem.main(tmpzj93i0j1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpu5ath0vc.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpu5ath0vc.scala:11)\n\
    \tat Problem$.main(tmpu5ath0vc.scala:15)\n\tat Problem.main(tmpu5ath0vc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var max = 0\n        var sum = 0\n       \
    \ var primes = mutable.Set[Long]()\n        for(i <- lst) {\n            val prime\
    \ = primes.find(_ == i)\n            if(prime == None) {\n                primes\
    \ += i\n                sum += i\n                max = Math.max(max, i)\n   \
    \         }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxmvnfzx.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcxmvnfzx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcxmvnfzx.scala:16:36\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m                max = Math.max(max,\
    \ i)\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    (i : Long)\n\e[31m   |\e\
    [0m                                    Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val max = primes.max\n        val sum = 0\n        for\
    \ (i <- primes) {\n            sum += i.toString.toInt\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_tcctx_f.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_tcctx_f.scala:12:16 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            sum += i.toString.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu9n_pnn.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsu9n_pnn.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 117 != 0).filter(_\
    \ % 121 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_ % 137 != 0).filter(_\
    \ % 139 !=0).filter(_ % 143 != 0).filter(_ % 147 !=0).filter(_ % 151 != 0).filter(_\
    \ % 153 != 0).filter(_ % 155 != 0).filter(_ % 157 !=0).filter(_ % 159 != 0).filter(_\
    \ % 163 != 0).filter(_ % 167 !=0).filter(_ % 173 != 0).filter(_ % 177 !=0).filter(_\
    \ % 181 != 0).filter(_ % 183 != 0).filter(_ % 185 != 0).filter(_ % 187 != 0).filter(_\
    \ % 191 != 0).filter(_ % 193 != 0).filter(_ % 195 != 0).filter(_ % 197 !=0).filter(_\
    \ % 199 != 0).filter(_ % 203 != 0).filter(_ % 207 !=0).filter(_ % 211 != 0).filter(_\
    \ % 213 != 0).filter(_ % 215 != 0).filter(_ % 217 != 0).filter(_ % 219 != 0).filter(_\
    \ % 223 != 0).filter(_ % 227 != 0).filter(_ % 229 != 0).filter(_ % 233 != 0).filter(_\
    \ % 239 != 0).filter(_ % 241 != 0).filter(_ % 243 != 0).filter(_ % 245 != 0).filter(_\
    \ % 247 !=0).filter(_ % 251 != 0).filter(_ % 253 != 0).filter(_ % 255 !=0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgwyfcvyp.scala:8:1613 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).filter(_ % \e[31m3\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m != \e[31m0\e[0m).filter(_ % \e[31m7\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m != \e[31m0\e[0m).filter(_ % \e[31m13\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m != \e[31m0\e[0m).filter(_ % \e[31m19\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m != \e[31m0\e[0m).filter(_ % \e[31m29\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m != \e[31m0\e[0m).filter(_ % \e[31m37\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m != \e[31m0\e[0m).filter(_ % \e[31m43\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m != \e[31m0\e[0m).filter(_ % \e[31m51\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m53\e[0m != \e[31m0\e[0m).filter(_ % \e[31m59\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m61\e[0m != \e[31m0\e[0m).filter(_ % \e[31m67\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m71\e[0m != \e[31m0\e[0m).filter(_ % \e[31m73\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m79\e[0m != \e[31m0\e[0m).filter(_ % \e[31m83\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m89\e[0m != \e[31m0\e[0m).filter(_ % \e[31m97\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m101\e[0m != \e[31m0\e[0m).filter(_ % \e[31m103\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m105\e[0m != \e[31m0\e[0m).filter(_ % \e[31m107\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m != \e[31m0\e[0m).filter(_ % \e[31m113\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m117\e[0m != \e[31m0\e[0m).filter(_ % \e[31m121\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m != \e[31m0\e[0m).filter(_ % \e[31m131\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m != \e[31m0\e[0m).filter(_ % \e[31m139\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m != \e[31m0\e[0m).filter(_ % \e[31m147\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m != \e[31m0\e[0m).filter(_ % \e[31m153\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m155\e[0m != \e[31m0\e[0m).filter(_ % \e[31m157\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m != \e[31m0\e[0m).filter(_ % \e[31m163\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m173\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m18"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val max = primes.max\n        val sum = 0\n    \
    \    primes.foreach(x => sum += x)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfhp112s.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppfhp112s.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        primes.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                value += is not a member of Int - did you mean sum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largest = primes.max\n        val sumOfDigits = largest.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_q0ltq4l.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => math.pow(10, x)).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqhqtnva.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var max = 0\n        var sum = 0\n       \
    \ var prime = 0\n        for(i <- lst){\n            val isPrime = i.toString.toInt\n\
    \            val isPrime2 = isPrime.toString.toInt\n            val isPrime3 =\
    \ isPrime2.toString.toInt\n            val isPrime4 = isPrime3.toString.toInt\n\
    \            val isPrime5 = isPrime4.toString.toInt\n            val isPrime6\
    \ = isPrime5.toString.toInt\n            val isPrime7 = isPrime6.toString.toInt\n\
    \            val isPrime8 = isPrime7.toString.toInt\n            val isPrime9\
    \ = isPrime8.toString.toInt\n            val isPrime10 = isPrime9.toString.toInt\n\
    \            val isPrime11 = isPrime10.toString.toInt\n            val isPrime12\
    \ = isPrime11.toString.toInt\n            val isPrime13 = isPrime12.toString.toInt\n\
    \            val isPrime14 = isPrime13.toString.toInt\n            val isPrime15\
    \ = isPrime14.toString.toInt\n            val isPrime16 = isPrime15.toString.toInt\n\
    \            val isPrime17 = isPrime16.toString.toInt\n            val isPrime18\
    \ = isPrime17.toString.toInt\n            val isPrime19 = isPrime18.toString.toInt\n\
    \            val isPrime20 = isPrime19.toString.toInt\n            val isPrime21\
    \ = isPrime20.toString.toInt\n            val isPrime22 = isPrime21.toString.toInt\n\
    \            val isPrime23 = isPrime22.toString.toInt\n            val isPrime24\
    \ = isPrime23.toString.toInt\n            val isPrime25 = isPrime24.toString.toInt\n\
    \            val isPrime26 = isPrime25.toString.toInt\n            val isPrime27\
    \ = isPrime26.toString.toInt\n            val isPrime28 = isPrime27.toString.toInt\n\
    \            val isPrime29 = isPrime28.toString.toInt\n            val isPrime30\
    \ = isPrime29.toString.toInt\n            val isPrime31 = isPrime30.toString.toInt\n\
    \            val isPrime32 = isPrime31.toString.toInt\n            val isPrime33\
    \ = isPrime32.toString.toInt\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv8xr5kow.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv8xr5kow.scala:59:1\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpv8xr5kow.scala:47:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_\
    \ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 411 == 0).filter(_\
    \ % 413 == 0).filter(_ % 417 == 0).filter(_ % 419 == 0).\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplkreiqrk.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplkreiqrk.scala:9:5 ----------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m    }\n\e[31m\e[31m  |\e[0m     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\
    \e[31m  |\e[0m     Required: Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n\
    \        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpikbwwg6_.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 127 != 0).filter(_\
    \ % 131 != 0).filter(_ % 137 != 0).filter(_ % 139 !=0).filter(_ % 149 != 0).filter(_\
    \ % 151 != 0).filter(_ % 157 !=0).filter(_ % 163 !=0).filter(_ % 167 !=0).filter(_\
    \ % 173 !=0).filter(_ % 179 !=0).filter(_ % 181 !=0).filter(_ % 191 !=0).filter(_\
    \ % 193 !=0).filter(_ % 197 !=0).filter(_ % 199 !=0).filter(_ % 203 !=0).filter(_\
    \ % 207 !=0).filter(_ % 209 !=0).filter(_ % 211 !=0).filter(_ % 213 !=0).filter(_\
    \ % 217 !=0).filter(_ % 219 !=0).filter(_ % 223 !=0).filter(_ % 227 !=0).filter(_\
    \ % 229 !=0).filter(_ % 233 !=0).filter(_ % 239 !=0).filter(_ % 241 !=0).filter(_\
    \ % 243 !=0).filter(_ % 245 !=0).filter(_ % 247 !=0).filter(_ % 251 !=0).filter(_\
    \ % 253 !=0).filter(_ % 257 !=0).filter(_ % 259 !=0).filter(_ % 261 !=0).filter(_\
    \ % 263 !=0).filter(_ % 265 !=0).filter(_ % \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1q2hxnea.scala:8:1462 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).filter(_ % \e[31m3\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m != \e[31m0\e[0m).filter(_ % \e[31m7\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m != \e[31m0\e[0m).filter(_ % \e[31m13\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m != \e[31m0\e[0m).filter(_ % \e[31m19\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m != \e[31m0\e[0m).filter(_ % \e[31m29\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m != \e[31m0\e[0m).filter(_ % \e[31m37\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m != \e[31m0\e[0m).filter(_ % \e[31m43\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m != \e[31m0\e[0m).filter(_ % \e[31m51\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m53\e[0m != \e[31m0\e[0m).filter(_ % \e[31m59\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m61\e[0m != \e[31m0\e[0m).filter(_ % \e[31m67\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m71\e[0m != \e[31m0\e[0m).filter(_ % \e[31m73\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m79\e[0m != \e[31m0\e[0m).filter(_ % \e[31m83\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m89\e[0m != \e[31m0\e[0m).filter(_ % \e[31m97\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m101\e[0m != \e[31m0\e[0m).filter(_ % \e[31m103\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m105\e[0m != \e[31m0\e[0m).filter(_ % \e[31m107\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m != \e[31m0\e[0m).filter(_ % \e[31m113\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m != \e[31m0\e[0m).filter(_ % \e[31m131\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m != \e[31m0\e[0m).filter(_ % \e[31m139\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m149\e[0m != \e[31m0\e[0m).filter(_ % \e[31m151\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m163\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m173\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m181\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m193\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m199\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m203\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m207\e[0m !"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var largestPrime = 0\n        var sumOfDigits\
    \ = 0\n        var primes = mutable.Set[Long]()\n        for(i <- lst) {\n   \
    \         val isPrime = primes.contains(i)\n            if(isPrime) {\n      \
    \          sumOfDigits += i\n            }\n            else {\n             \
    \   primes += i\n                if(sumOfDigits > largestPrime) {\n          \
    \          largestPrime = sumOfDigits\n                }\n                sumOfDigits\
    \ = 0\n            }\n        }\n        largestPrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptj4v5rq6.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptj4v5rq6.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                sumOfDigits += i\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_mdex8z.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 39\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_moc4dbj.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_moc4dbj.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.size\n\
    \        val maxPrime = primes.max\n        val maxPrimeDigit = maxPrime.digits.sum\n\
    \        val maxPrimeDigitCount = maxPrimeDigit.size\n        val maxPrimeDigitSum\
    \ = maxPrimeDigit.sum\n        val maxPrimeDigitSumCount = maxPrimeDigitSum.size\n\
    \        val maxPrimeDigitSumSum = maxPrimeDigitSum.sum\n        val maxPrimeDigitSumSumCount\
    \ = maxPrimeDigitSumSum.size\n        val maxPrimeDigitSumSumSum = maxPrimeDigitSumSum.sum\n\
    \        val maxPrimeDigitSumSumSumCount = maxPrimeDigitSumSumSum.size\n     \
    \   val maxPrimeDigitSumSumSumSum = maxPrimeDigitSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumCount\
    \ = maxPrimeDigitSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSum =\
    \ maxPrimeDigitSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumCount\
    \ = maxPrimeDigitSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSum\
    \ = maxPrimeDigitSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumCount\
    \ = maxPrimeDigitSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSum\
    \ = maxPrimeDigitSumSumSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumSumCount\
    \ = maxPrimeDigitSumSumSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSumSum\
    \ = maxPrimeDigitSumSumSumSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumSumSumCount\
    \ = maxPrimeDigitSumSumSumSumSumSumSumSumSum.size\n        val maxPrimeDigitSumSumSumSumSumSumSumSumSum\
    \ = maxPrimeDigitSumSumSumSumSumSumSumSumSumSum.sum\n        val maxPrimeDigitSumSumSumSumSumSumSumSumSumCount\
    \ = maxPrimeDigitSumSumSumSumSumSumSumSumSumSumCount.size\n        val maxPrimeDigitSumSumSumSumSumSumSumSumSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2unyde5b.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2unyde5b.scala:11:37\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxPrimeDigit\e[0m = maxPrime.digits.sum\n\e[31m\e[31m   |\e[0m          \
    \                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \       value digits is not a member of Long\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp2unyde5b.scala:25:49 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxPrimeDigitSumSumSumSumSumSumSum\e[0m =\
    \ maxPrimeDigitSumSumSumSumSumSumSum.sum\n\e[31m\e[31m   |\e[0m              \
    \                                   ^\e[0m\n\e[31m   |\e[0m           Recursive\
    \ \e[33mvalue\e[0m \e[35mmaxPrimeDigitSumSumSumSumSumSumSum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2unyde5b.scala:27:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxPrimeDigitSumSumSumSumSumSumSumSum\e[0m = maxPrimeDigitSumSumSumSumSumSumSumSum.sum\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mmaxPrimeDigitSumSumSumSumSumSumSumSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2unyde5b.scala:29:55\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxPrimeDigitSumSumSumSumSumSumSumSumSum\e[0m = maxPrimeDigitSumSumSumSumSumSumSumSumSumSum.sum\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: maxPrimeDigitSumSumSumSumSumSumSumSumSumSum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Er"
  stdout: ''
  timestamp: 1660010395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var max = 0\n        var sum = 0\n       \
    \ for(i <- 0 until lst.size) {\n            val x = lst(i)\n            val y\
    \ = x\n            val primes = primes(y)\n            val prime = primes.head\n\
    \            val primeDigits = primes.tail\n            val digits = x % prime\n\
    \            val digitSum = digits.sum\n            val digitSumDigits = digitSum.toString.toInt\n\
    \            val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit + digitSumDigits\n            val digitSumDigit = digitSumDigits\
    \ % 10\n            val digitSumDigits = digitSumDigit + digitSumDigits\n    \
    \        val digitSumDigit = digitSumDigits % 10\n            val digitSumDigits\
    \ = digitSumDigit \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphn7sajo6.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphn7sajo6.scala:62:1\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmphn7sajo6.scala:50:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(x => x % 10).sum\n  \
    \      sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_g96t0g.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val primesSet = primes.toSet\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmp3wwmr730.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmp3wwmr730.scala:11)\n\
    \tat Problem$.main(tmp3wwmr730.scala:15)\n\tat Problem.main(tmp3wwmr730.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 113 == 0).filter(_\
    \ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_\
    \ % 149 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 201 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_\
    \ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1x7ex4li.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1x7ex4li.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m149\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_\
    \ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 413 == 0).filter(_\
    \ % 417 == 0).filter(_ % 423 == 0).filter(_ % 429 == 0).\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7kd82vt_.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7kd82vt_.scala:9:5 ----------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m    }\n\e[31m\e[31m  |\e[0m     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\
    \e[31m  |\e[0m     Required: Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010395
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpdvgy6csi.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpdvgy6csi.scala:10)\n\
    \tat Problem$.main(tmpdvgy6csi.scala:14)\n\tat Problem.main(tmpdvgy6csi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val max = primes.max\n\
    \        val sum = 0\n        primes.foreach(x => sum += x.toString.toInt)\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8y5u_on.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        primes.foreach(\e[36mx\e[0m => sum += x.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesSum = primes.sum\n\
    \        val primesDigits = primes.map(x => x - primesSum).filter(_ > 0)\n   \
    \     primesDigits.sum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjdy1wp2.scala:14)\n\tat Problem.main(tmpfjdy1wp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val max = primes.max\n\
    \        val sum = 0\n        primes.foreach(x => sum += x)\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt2dabfvl.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        primes.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                value += is not a member of Int - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 117 != 0).filter(_\
    \ % 121 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_ % 137 != 0).filter(_\
    \ % 139 !=0).filter(_ % 143 != 0).filter(_ % 147 !=0).filter(_ % 151 != 0).filter(_\
    \ % 153 != 0).filter(_ % 155 != 0).filter(_ % 157 !=0).filter(_ % 159 != 0).filter(_\
    \ % 163 != 0).filter(_ % 167 !=0).filter(_ % 173 != 0).filter(_ % 177 !=0).filter(_\
    \ % 181 != 0).filter(_ % 183 != 0).filter(_ % 185 != 0).filter(_ % 187 != 0).filter(_\
    \ % 191 != 0).filter(_ % 193 != 0).filter(_ % 195 != 0).filter(_ % 197 !=0).filter(_\
    \ % 199 != 0).filter(_ % 203 != 0).filter(_ % 207 !=0).filter(_ % 211 != 0).filter(_\
    \ % 213 != 0).filter(_ % 215 != 0).filter(_ % 217 !=0).filter(_ % 219 != 0).filter(_\
    \ % 223 != 0).filter(_ % 227 !=0).filter(_ % 229 != 0).filter(_ % 233 != 0).filter(_\
    \ % 237 !=0).filter(_ % 241 != 0).filter(_ % 243 != 0).filter(_ % 245 != 0).filter(_\
    \ % 247 !=0).filter(_ % 251 != 0).filter(_ % 253 != 0).filter(_ % 255 \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjtafgt3u.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjtafgt3u.scala:8:1587\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).filter(_ % \e[31m3\e[0m !=\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m != \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m11\e[0m != \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m17\e[0m != \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m23\e[0m != \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m31\e[0m != \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m41\e[0m != \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m47\e[0m != \e[31m0\e[0m).filter(_ % \e[31m51\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m53\e[0m != \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m61\e[0m != \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m71\e[0m != \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m79\e[0m != \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m89\e[0m != \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m != \e[31m0\e[0m).filter(_ % \e[31m101\e[0m != \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m != \e[31m0\e[0m).filter(_ % \e[31m105\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m107\e[0m != \e[31m0\e[0m).filter(_ % \e[31m109\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m != \e[31m0\e[0m).filter(_ % \e[31m117\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m121\e[0m != \e[31m0\e[0m).filter(_ % \e[31m127\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m != \e[31m0\e[0m).filter(_ % \e[31m137\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m143\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m151\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m153\e[0m != \e[31m0\e[0m).filter(_ % \e[31m155\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m159\e[0m"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 267 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 321 == 0).filter(_\
    \ % 323 == 0).filter(_ % 327 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 361 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp052wxkv_.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp052wxkv_.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 117 != 0).filter(_\
    \ % 121 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_ % 137 != 0).filter(_\
    \ % 139 !=0).filter(_ % 143 != 0).filter(_ % 147 !=0).filter(_ % 151 != 0).filter(_\
    \ % 153 != 0).filter(_ % 155 != 0).filter(_ % 157 !=0).filter(_ % 159 != 0).filter(_\
    \ % 163 != 0).filter(_ % 167 !=0).filter(_ % 173 != 0).filter(_ % 177 !=0).filter(_\
    \ % 181 != 0).filter(_ % 183 != 0).filter(_ % 185 != 0).filter(_ % 187 != 0).filter(_\
    \ % 191 !=0).filter(_ % 193 !=0).filter(_ % 195 !=0).filter(_ % 197 !=0).filter(_\
    \ % 199 !=0).filter(_ % 203 !=0).filter(_ % 207 !=0).filter(_ % 209 !=0).filter(_\
    \ % 211 !=0).filter(_ % 213 !=0).filter(_ % 215 !=0).filter(_ % 217 !=0).filter(_\
    \ % 219 !=0).filter(_ % 223 !=0).filter(_ % 227 !=0).filter(_ % 229 !=0).filter(_\
    \ % 233 !=0).filter(_ % 237 !=0).filter(_ % 239 !=0).filter(_ % 241 !=0).filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0m3suhrr.scala:9:5 ----------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m     ^\e[0m\n\e[31m  |\e[0m\
    \     Found:    Unit\n\e[31m  |\e[0m     Required: Long\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var max = 0\n        var sum = 0\n       \
    \ for(i <- lst){\n            val isPrime = i.toString.toInt\n            val\
    \ isPrime2 = isPrime.toString.toInt\n            if(isPrime2 > max){\n       \
    \         max = isPrime2\n            }\n        }\n        for(i <- lst){\n \
    \           val isPrime = i.toString.toInt\n            val isPrime2 = isPrime.toString.toInt\n\
    \            if(isPrime2 == max){\n                sum += isPrime2\n         \
    \   }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwpla98w2.scala:27)\n\tat Problem.main(tmpwpla98w2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsds5o425.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_\
    \ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 373 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1lkw4yja.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1lkw4yja.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp44kqvc12.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp44kqvc12.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoi18_gv9.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largest = primes.max\n        val sumOfDigits = largest.map(x => x % 10).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaqjvccht.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3l2wftut.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 393 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_\
    \ % 421 == 0).filter(_ % 431 == 0).filter(_ % 433 == 0).filter(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpruupuwao.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpruupuwao.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprojqeh7b.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val primesCount = primes.size\n        val largestPrime = primes.max\n    \
    \    val largestPrimeDigit = largestPrime % 10\n        val sumOfDigits = largestPrimeDigit\
    \ + primes.sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ydh7o0r.scala:16)\n\tat Problem.main(tmp4ydh7o0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toSet\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu9n_pnn.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toSet\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsu9n_pnn.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_\
    \ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 409\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy71kf5v2.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy71kf5v2.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxnr8za0.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largest = primes.max\n        val sumOfDigits = largest.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_q0ltq4l.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzjob4j9.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt)\n\e[31m\e[31m\
    \  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                                  Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 377 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbdk_08ga.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbdk_08ga.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 113 == 0).filter(_\
    \ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_\
    \ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 395 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqx59e01x.scala:9:5 ----------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m     ^\e[0m\n\e[31m  |\e[0m\
    \     Found:    Unit\n\e[31m  |\e[0m     Required: Long\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val primesCount = primes.count\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpdovjrk0f.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpdovjrk0f.scala:11)\n\
    \tat Problem$.main(tmpdovjrk0f.scala:15)\n\tat Problem.main(tmpdovjrk0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_\
    \ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 357 == 0).filter(_ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ks6v_xi.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ks6v_xi.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197"
  stdout: ''
  timestamp: 1660010408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxnr8za0.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(x => x % 10).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5rwinjt8.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3l2wftut.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzjob4j9.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt)\n\e[31m\e[31m\
    \  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                                  Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0)\n        val primesSet = primes.toSet\n       \
    \ val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$4(tmphedyaioc.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmphedyaioc.scala:11)\n\
    \tat Problem$.main(tmphedyaioc.scala:15)\n\tat Problem.main(tmphedyaioc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(x => x.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjtodboq.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map is\
    \ not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9jbe6gb.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 39\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppb0tfcvs.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb0tfcvs.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfibosrh_.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfibosrh_.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        return sumOfDigits\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3imzn3nh.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        return sumOfDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnc902ye8.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val primesCount = primes.size\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpl57u9x2l.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl57u9x2l.scala:11)\n\
    \tat Problem$.main(tmpl57u9x2l.scala:15)\n\tat Problem.main(tmpl57u9x2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprojqeh7b.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 39\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppb0tfcvs.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb0tfcvs.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$4(tmpc1quosxy.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpc1quosxy.scala:10)\n\
    \tat Problem$.main(tmpc1quosxy.scala:14)\n\tat Problem.main(tmpc1quosxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 127 != 0).filter(_\
    \ % 131 != 0).filter(_ % 137 != 0).filter(_ % 139 !=0).filter(_ % 143 != 0).filter(_\
    \ % 147 !=0).filter(_ % 151 != 0).filter(_ % 157 !=0).filter(_ % 163 != 0).filter(_\
    \ % 167 !=0).filter(_ % 173 != 0).filter(_ % 177 !=0).filter(_ % 183 != 0).filter(_\
    \ % 189 !=0).filter(_ % 193 != 0).filter(_ % 197 !=0).filter(_ % 203 != 0).filter(_\
    \ % 209 !=0).filter(_ % 213 !=0).filter(_ % 217 !=0).filter(_ % 223 != 0).filter(_\
    \ % 229 !=0).filter(_ % 233 !=0).filter(_ % 239 !=0).filter(_ % 243 !=0).filter(_\
    \ % 247 !=0).filter(_ % 251 !=0).filter(_ % 257 !=0).filter(_ % 263 !=0).filter(_\
    \ % 269 !=0).filter(_ % 273 !=0).filter(_ % 277 !=0).filter(_ % 283 !=0).filter(_\
    \ % 289 !=0).filter(_ % 293 !=0).filter(_ % 297 !=0).filter(_ % 301 !=0).filter(_\
    \ % 309 !=0).filter(_ % 313 !=0).filter(_ % 317 !=0).\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvt33nx9l.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvt33nx9l.scala:9:5 ----------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m    }\n\e[31m\e[31m  |\e[0m     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\
    \e[31m  |\e[0m     Required: Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 177 == 0).filter(_ % 183 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 267 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 321 == 0).filter(_\
    \ % 323 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 357 == 0).filter(_ % 361 == 0).filter(_ % 367 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 381 == 0).filter(_ % 38\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_v9w_v7_.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_v9w_v7_.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m183\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_mdex8z.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(x => x % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmphqskdsp0.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmphqskdsp0.scala:10)\n\
    \tat Problem$.main(tmphqskdsp0.scala:14)\n\tat Problem.main(tmphqskdsp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 105 != 0).filter(_\
    \ % 107 != 0).filter(_ % 109 != 0).filter(_ % 113 != 0).filter(_ % 117 != 0).filter(_\
    \ % 121 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_ % 137 != 0).filter(_\
    \ % 139 !=0).filter(_ % 143 != 0).filter(_ % 147 !=0).filter(_ % 151 != 0).filter(_\
    \ % 153 != 0).filter(_ % 155 != 0).filter(_ % 157 !=0).filter(_ % 159 != 0).filter(_\
    \ % 163 != 0).filter(_ % 167 !=0).filter(_ % 173 != 0).filter(_ % 177 !=0).filter(_\
    \ % 181 != 0).filter(_ % 183 != 0).filter(_ % 185 != 0).filter(_ % 187 != 0).filter(_\
    \ % 191 != 0).filter(_ % 193 != 0).filter(_ % 195 != 0).filter(_ % 197 !=0).filter(_\
    \ % 199 != 0).filter(_ % 203 != 0).filter(_ % 207 !=0).filter(_ % 211 != 0).filter(_\
    \ % 213 != 0).filter(_ % 215 != 0).filter(_ % 217 != 0).filter(_ % 219 != 0).filter(_\
    \ % 223 != 0).filter(_ % 227 != 0).filter(_ % 229 != 0).filter(_ % 233 != 0).filter(_\
    \ % 237 != 0).filter(_ % 241 != 0).filter(_ % 243 != 0).filter(_ % 245 != 0).filter(_\
    \ % 247 !=0).filter(_ % 251 != 0).filter(_ % 253 != 0).filter(_ % 255 !=0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx3_7flui.scala:8:1613 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).filter(_ % \e[31m3\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m != \e[31m0\e[0m).filter(_ % \e[31m7\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m != \e[31m0\e[0m).filter(_ % \e[31m13\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m != \e[31m0\e[0m).filter(_ % \e[31m19\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m != \e[31m0\e[0m).filter(_ % \e[31m29\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m != \e[31m0\e[0m).filter(_ % \e[31m37\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m != \e[31m0\e[0m).filter(_ % \e[31m43\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m != \e[31m0\e[0m).filter(_ % \e[31m51\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m53\e[0m != \e[31m0\e[0m).filter(_ % \e[31m59\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m61\e[0m != \e[31m0\e[0m).filter(_ % \e[31m67\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m71\e[0m != \e[31m0\e[0m).filter(_ % \e[31m73\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m79\e[0m != \e[31m0\e[0m).filter(_ % \e[31m83\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m89\e[0m != \e[31m0\e[0m).filter(_ % \e[31m97\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m101\e[0m != \e[31m0\e[0m).filter(_ % \e[31m103\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m105\e[0m != \e[31m0\e[0m).filter(_ % \e[31m107\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m != \e[31m0\e[0m).filter(_ % \e[31m113\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m117\e[0m != \e[31m0\e[0m).filter(_ % \e[31m121\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m != \e[31m0\e[0m).filter(_ % \e[31m131\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m != \e[31m0\e[0m).filter(_ % \e[31m139\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m != \e[31m0\e[0m).filter(_ % \e[31m147\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m != \e[31m0\e[0m).filter(_ % \e[31m153\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m155\e[0m != \e[31m0\e[0m).filter(_ % \e[31m157\e[0m !=\e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m != \e[31m0\e[0m).filter(_ % \e[31m163\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m173\e[0m != \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m !=\e[31m0\e[0m).filter(_ % \e[31m18"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_\
    \ % 217 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_\
    \ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_\
    \ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 409 == 0).filter(_ % 419 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_71ih0b8.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m213\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0)\n    \
    \    val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(x\
    \ => x % 10).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdw71zx7_.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(x => x.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjtodboq.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map is\
    \ not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxnr8za0.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(x => x % 10).sum\n  \
    \      return sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3toi6f4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x % \e[31m10\e[0m).sum\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 107 == 0).filter(_ % 113 == 0).filter(_ % 121 == 0).filter(_\
    \ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 143 == 0).filter(_\
    \ % 149 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_\
    \ % 169 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 197 == 0).filter(_ % 203 == 0).filter(_ % 209 == 0).filter(_\
    \ % 211 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 247 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 283 == 0).filter(_ % 289 == 0).filter(_\
    \ % 291 == 0).filter(_ % 297 == 0).filter(_ % 303 == 0).filter(_ % 309 == 0).filter(_\
    \ % 311 == 0).filter(_ % 317 == 0).filter(_ % 323 == 0).filter(_ % 329 == 0).filter(_\
    \ % 331 == 0).filter(_ % 337 == 0).filter(_ % 343 == 0).filter(_ % 349 == 0).filter(_\
    \ % 351 == 0).filter(_ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_\
    \ % 371 == 0).filter(_ % 377 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 391 == 0).filter(_ % 397 == 0).filter(_ % 403 == 0).filter(_ % 409\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgg8_me64.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgg8_me64.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m121\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m149\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m169\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m203\e[0m == \e[31m0\e[0m).filter(_ % \e[31m209"
  stdout: ''
  timestamp: 1660010411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_\
    \ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6tj0ocha.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6tj0ocha.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_\
    \ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3l2wftut.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(_.toString.toInt).sum\n        return sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpogdmu02p.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf01pyhsb.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.pow(10,\
    \ x)).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdg32lk_1.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpdvgy6csi.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpdvgy6csi.scala:10)\n\
    \tat Problem$.main(tmpdvgy6csi.scala:14)\n\tat Problem.main(tmpdvgy6csi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits + maxPrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9jbe6gb.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_\
    \ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_\
    \ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_\
    \ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_ % 359 == 0).filter(_\
    \ % 363 == 0).filter(_ % 369 == 0).filter(_ % 373 == 0).filter(_ % 377 == 0).filter(_\
    \ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj1cusr80.scala:8:1770 --------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m227\e[0m == \e[31m0\e[0m).filter(_ % \e"
  stdout: ''
  timestamp: 1660010412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpdvgy6csi.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpdvgy6csi.scala:10)\n\
    \tat Problem$.main(tmpdvgy6csi.scala:14)\n\tat Problem.main(tmpdvgy6csi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = lst.filter(_ % maxPrime\
    \ == 0).sum\n        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpdvgy6csi.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpdvgy6csi.scala:10)\n\
    \tat Problem$.main(tmpdvgy6csi.scala:14)\n\tat Problem.main(tmpdvgy6csi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val primesCount = primes.length\n        val maxPrime = primes.max\n      \
    \  val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$6(tmpqrhejzy9.scala:11)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpqrhejzy9.scala:11)\n\
    \tat Problem$.main(tmpqrhejzy9.scala:15)\n\tat Problem.main(tmpqrhejzy9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsds5o425.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largest = primes.max\n\
    \        val sumOfDigits = largest.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuxnr8za0.scala:10:34 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largest.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val max = primes.max\n\
    \        val sum = 0\n        primes.foreach(x => sum += x.toString.toInt)\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy8y5u_on.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        primes.foreach(\e[36mx\e[0m => sum += x.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = lst.filter(_ % maxPrime == 0).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$5(tmpl8dge09y.scala:10)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.skjkasdkd(tmpl8dge09y.scala:10)\n\
    \tat Problem$.main(tmpl8dge09y.scala:14)\n\tat Problem.main(tmpl8dge09y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7k_8xv4.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5n9ixut.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa5n9ixut.scala:10:39\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36msumOfDigits\e[0m = largestPrime.map(\e[36mx\e[0m => x.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprojqeh7b.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = lst.filter(x => isPrime(x)).map(x => x.toInt).sum\n        sumOfDigits + maxPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfibosrh_.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfibosrh_.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).sum\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: isPrime\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb47t5n6a.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 201 == 0).filter(_ % 207 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 359 == 0).filter(_\
    \ % 361 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 393 == 0).filter(_ % 397\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpntgpf2ay.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpntgpf2ay.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 107 != 0).filter(_\
    \ % 109 != 0).filter(_ % 113 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_\
    \ % 137 != 0).filter(_ % 139 !=0).filter(_ % 149 != 0).filter(_ % 151 != 0).filter(_\
    \ % 157 !=0).filter(_ % 163 !=0).filter(_ % 167 !=0).filter(_ % 173 !=0).filter(_\
    \ % 179 !=0).filter(_ % 181 !=0).filter(_ % 191 !=0).filter(_ % 193 !=0).filter(_\
    \ % 197 !=0).filter(_ % 199 !=0).filter(_ % 203 !=0).filter(_ % 207 !=0).filter(_\
    \ % 209 !=0).filter(_ % 211 !=0).filter(_ % 213 !=0).filter(_ % 217 !=0).filter(_\
    \ % 219 !=0).filter(_ % 223 !=0).filter(_ % 227 !=0).filter(_ % 229 !=0).filter(_\
    \ % 233 !=0).filter(_ % 239 !=0).filter(_ % 241 !=0).filter(_ % 243 !=0).filter(_\
    \ % 247 !=0).filter(_ % 251 !=0).filter(_ % 253 !=0).filter(_ % 257 !=0).filter(_\
    \ % 259 !=0).filter(_ % 261 !=0).filter(_ % 263 !=0).filter(_ % 265 !=0).filter(_\
    \ % 269 !=0).filter(_ % 271 !=0).filter(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6sjo5w4.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6sjo5w4.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x =>\
    \ x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7qdmbup.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m  |\e[0m                              \
    \       ^^^^^^^\e[0m\n\e[31m  |\e[0m                                     Not found:\
    \ isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt).toList\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        largestPrime + sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsds5o425.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  |\e\
    [0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                            Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 113 == 0).filter(_\
    \ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_ % 139 == 0).filter(_\
    \ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_ % 157 == 0).filter(_\
    \ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_ % 177 == 0).filter(_\
    \ % 183 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_\
    \ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_ % 211 == 0).filter(_\
    \ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_ % 227 == 0).filter(_\
    \ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_\
    \ % 243 == 0).filter(_ % 247 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 267 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 321 == 0).filter(_\
    \ % 323 == 0).filter(_ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_\
    \ % 351 == 0).filter(_ % 357 == 0).filter(_ % 361 == 0).filter(_ % 363 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 377 == 0).filter(_ % 38\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17j74f4y.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17j74f4y.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m183\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toString.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits\
    \ = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
    \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
    \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\
    \ == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
    \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
    \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\
    \ == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbzjob4j9.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toString.toInt)\n\e[31m\e[31m\
    \  |\e[0m                                     ^^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                                  Not found: isPrime\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0)\n        val largestPrime =\
    \ primes.max\n        val sumOfDigits = largestPrime.map(x => x.toString.toInt).sum\n\
    \        return sumOfDigits\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsz5e2h0f.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val max = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits + max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqatl01d.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val largestPrime = primes.max\n        val sumOfDigits\
    \ = largestPrime.map(x => x.toString.toInt).sum\n        sumOfDigits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ibifoem.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1ibifoem.scala:10:39 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value\
    \ map is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 177 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 203 == 0).filter(_ % 207 == 0).filter(_\
    \ % 209 == 0).filter(_ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_\
    \ % 221 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 357 == 0).filter(_ % 363 == 0).filter(_ % 369 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4qmhkxwm.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4qmhkxwm.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m177\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        var maxPrime = 0\n        var sum = 0\n  \
    \      var primes = mutable.Set[Long]()\n        for(i <- 0 until lst.size) {\n\
    \            val prime = lst.filter(_ % i == 0).length\n            if(prime >\
    \ maxPrime) {\n                maxPrime = prime\n                sum = prime *\
    \ i\n            }\n            primes += prime\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4vujakwu.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val maxPrime = primes.max\n\
    \        val sumOfDigits = primes.map(x => math.log10(x)).sum\n        sumOfDigits\
    \ + maxPrime\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrdprb9v.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val maxPrime = primes.max\n        val sumOfDigits = primes.map(x => math.log10(x)).sum\n\
    \        sumOfDigits + maxPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_xn9he6.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        sumOfDigits + maxPrime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 != 0).filter(_\
    \ % 3 != 0).filter(_ % 5 != 0).filter(_ % 7 != 0).filter(_ % 11 != 0).filter(_\
    \ % 13 != 0).filter(_ % 17 != 0).filter(_ % 19 != 0).filter(_ % 23 != 0).filter(_\
    \ % 29 != 0).filter(_ % 31 != 0).filter(_ % 37 != 0).filter(_ % 41 != 0).filter(_\
    \ % 43 != 0).filter(_ % 47 != 0).filter(_ % 51 != 0).filter(_ % 53 != 0).filter(_\
    \ % 59 != 0).filter(_ % 61 != 0).filter(_ % 67 != 0).filter(_ % 71 != 0).filter(_\
    \ % 73 != 0).filter(_ % 79 != 0).filter(_ % 83 != 0).filter(_ % 89 != 0).filter(_\
    \ % 97 != 0).filter(_ % 101 != 0).filter(_ % 103 != 0).filter(_ % 107 != 0).filter(_\
    \ % 109 != 0).filter(_ % 113 != 0).filter(_ % 127 != 0).filter(_ % 131 != 0).filter(_\
    \ % 137 != 0).filter(_ % 139 !=0).filter(_ % 149 != 0).filter(_ % 151 != 0).filter(_\
    \ % 157 !=0).filter(_ % 163 !=0).filter(_ % 167 !=0).filter(_ % 173 !=0).filter(_\
    \ % 179 !=0).filter(_ % 181 !=0).filter(_ % 191 !=0).filter(_ % 193 !=0).filter(_\
    \ % 197 !=0).filter(_ % 199 !=0).filter(_ % 203 !=0).filter(_ % 207 !=0).filter(_\
    \ % 209 !=0).filter(_ % 211 !=0).filter(_ % 213 !=0).filter(_ % 217 !=0).filter(_\
    \ % 219 !=0).filter(_ % 223 !=0).filter(_ % 227 !=0).filter(_ % 229 !=0).filter(_\
    \ % 233 !=0).filter(_ % 239 !=0).filter(_ % 241 !=0).filter(_ % 243 !=0).filter(_\
    \ % 247 !=0).filter(_ % 251 !=0).filter(_ % 253 !=0).filter(_ % 257 !=0).filter(_\
    \ % 263 !=0).filter(_ % 267 !=0).filter(_ % 269 !=0).filter(_ % 271 !=0).filter(_\
    \ % 277 !=0).filter(_ % 281 !=0).filter(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp85yyehh2.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp85yyehh2.scala:9:5\
    \ ----------------------\e[0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m\
    \     ^\e[0m\n\e[31m  |\e[0m     Found:    Unit\n\e[31m  |\e[0m     Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0)\n      \
    \  val largestPrime = primes.max\n        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n\
    \        sumOfDigits\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_mdex8z.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(_ % 2 == 0).filter(_\
    \ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ % 11 == 0).filter(_\
    \ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_ % 23 == 0).filter(_\
    \ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_ % 41 == 0).filter(_\
    \ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_ % 59 == 0).filter(_\
    \ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_ % 73 == 0).filter(_\
    \ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_ % 97 == 0).filter(_\
    \ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_ % 109 == 0).filter(_\
    \ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_ % 137 == 0).filter(_\
    \ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_ % 151 == 0).filter(_\
    \ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_ % 173 == 0).filter(_\
    \ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_ % 193 == 0).filter(_\
    \ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_ % 223 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_ % 357 == 0).filter(_\
    \ % 359 == 0).filter(_ % 363 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 377 == 0).filter(_ % 381 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 393 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_ % 40\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnq0fozmf.scala:9:4 -----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m    }\n\e[31m\e[31m  |\e[0m    ^\e[0m\n\e[31m  |\e[0m\
    \    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnq0fozmf.scala:8:1767\
    \ -------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e\
    [0m = lst.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m107\e[0m == \e[31m0\e[0m).filter(_ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
    \ : List[Long]) : Long = {\n        val primes = lst.filter(x => isPrime(x)).map(x\
    \ => x.toInt)\n        val maxPrime = primes.max\n        val sumOfDigits = primes.map(x\
    \ => x.toString.toInt).sum\n        sumOfDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
    \ 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong,\
    \ 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlt94dyf.scala:8:37 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m  |\e[0m \
    \                                    ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                         Not found: isPrime\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010370
