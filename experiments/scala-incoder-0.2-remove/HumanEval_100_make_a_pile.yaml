name: HumanEval_100_make_a_pile
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  \    // The first level has n stones.\n    // The number of stones in the next level\
  \ is:\n    // - the next odd number if n is odd.\n    // - the next even number\
  \ if n is even.\n    // Return the number of stones in each level in a list, where\
  \ element at index\n    // i represents the number of stones in the level (i+1).\n\
  \    // Examples:\n    def makeAPile(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
  \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
  \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
  \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
  \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val stones = mutable.ListBuffer(n)\n        stones.take(n).foreach(stones.updated(stones.indexOf(_)\
    \ + 1, stones.indexOf(_) + 1))\n        stones.toList", "        val stones =\
    \ List.fill(n / 2)(n / 2)\n        stones.takeRight(n % 2).reverse", "       \
    \ val stones = mutable.ListBuffer[Long]()\n        var stonesCount = 0\n     \
    \   var nextLevelCount = n\n        var nextLevelStones = 0\n        while (nextLevelCount\
    \ > 0) {\n            nextLevelStones = nextLevelCount % 2 == 0 ? nextLevelStones\
    \ + 1 : nextLevelStones\n            nextLevelCount /= 2\n            stones +=\
    \ nextLevelStones\n        }\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        stones += odd\n        stones += even\n\
    \        stones.toList", "        val stones = mutable.ListBuffer(n)\n       \
    \ stones.update(0, stones.size)\n        stones.update(1, stones.size)\n     \
    \   stones.update(1, stones.size)\n        stones.update(1, stones.size)\n   \
    \     stones.update(1, stones.size)\n        stones.update(1, stones.size)\n \
    \       stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.size)\n\
    \        stones.update(1, stones.size)\n        stones.update(1, stones.", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n / 2 else n * 3\n        stones", "        val stones =\
    \ mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n \
    \       stones += n / 4\n        stones += n / 8\n        stones += n / 16\n \
    \       stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones += n / 8589934592\n\
    \        stones += n / 17179869184\n        stones += n / 34359738368\n      \
    \  stones += n / 68719476736\n        stones += n / 137438953472\n        stones\
    \ += n / 274877906944\n        stones += n / 549755813888\n        stones += n\
    \ / 1099511627776\n        stones += n / 2199023255552\n        stones += n /\
    \ 4398046511104\n        stones += n / 8796093022208\n        stones += n / 17592186044416\n\
    \        stones += n / 35184372088832\n        stones += n / 70368744177664\n\
    \        stones += n / 140737488355328\n        stones += n / 281474976710656\n\
    \        stones += n / 562949953421312\n        stones += n / 1125899906842624\n\
    \        stones += n / 22517998136", "        val stones = List.fill(n / 2)(n\
    \ / 2)\n        if (n % 2 == 0) stones.updated(n / 2, n / 2)\n        else stones.updated(n\
    \ / 2, n / 2)", "        val stones = mutable.ListBuffer[Long]()\n        var\
    \ level = 0\n        var stoneCount = 0\n        while (stoneCount < n) {\n  \
    \          if (n % 2 == 0) {\n                stoneCount += stones.last\n    \
    \            stones += stoneCount\n            } else {\n                stoneCount\
    \ += stones.last\n                stones += stoneCount\n            }\n      \
    \      level += 1\n        }\n        stones.toList", "        val levels = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            levels += n\n       \
    \     i += 2\n        }\n        levels.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        stones\
    \ += n\n        while (stones.size < nextLevel) {\n            stones += stones.head\n\
    \        }\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        stones += even\n        stones +=\
    \ odd\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1 // next odd or even\
    \ number\n        stones += nextLevel\n        stones.toList", "        val stones\
    \ = mutable.ListBuffer(n)\n        val even = if (n % 2 == 0) n else n + 1;\n\
    \        val odd = if (n % 2 == 1) n else n + 1;\n        stones ++= makeAPile(even)\n\
    \        stones ++= makeAPile(odd)\n        stones.toList", "        val levels\
    \ = mutable.ListBuffer[Long]()\n        var level = 0\n        var nextLevel =\
    \ 0\n        var nextLevelCount = 0\n        while(nextLevelCount < n) {\n   \
    \         nextLevel = nextLevel + nextLevelCount\n            nextLevelCount =\
    \ nextLevelCount + (nextLevel % 2 == 0 ? 1 : 0)\n            levels += nextLevel\n\
    \        }\n        levels.toList", "        val levels = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        levels += odd\n        levels += even\n        levels.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n\
    \        stones += n / 4\n        stones += n / 8\n        stones += n / 16\n\
    \        stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones += n / 8589934592\n\
    \        stones += n / 17179869184\n        stones += n / 34359738368\n      \
    \  stones += n / 68719476736\n        stones += n / 137438953472\n        stones\
    \ += n / 274877906944\n        stones += n / 549755813888\n        stones += n\
    \ / 1099511627776\n        stones += n / 2199023255552\n        stones += n /\
    \ 4398046511104\n        stones += n / 8796093022208\n        stones += n / 17592186044416\n\
    \        stones += n / 35184372088832\n        stones += n / 70368744177664\n\
    \        stones += n / 140737488355328\n        stones += n / 281474976710656\n\
    \        stones += n / 562949953421312\n        stones += n / 1125899906842624\n\
    \        stones += n / 22517998136", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136", "        val levels = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        levels += even\n        levels +=\
    \ odd\n        levels.toList", "        val stones = mutable.ListBuffer(n)\n \
    \       stones.takeWhile(_ % 2 == 0).foreach(stones += _ + 1)\n        stones.takeWhile(_\
    \ % 2 == 1).foreach(stones += _ + 1)\n        stones.toList", "        val stones\
    \ = List.fill(n / 2)(n / 2)\n        stones.reverse.tail", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var stonesCount = 0\n        var currentLevel\
    \ = 0\n        var nextLevel = 0\n        while (stonesCount < n) {\n        \
    \    stones += nextLevel\n            nextLevel = nextLevel + if (n % 2 == 0)\
    \ 2 else 1\n            stonesCount += 1\n        }\n        stones.toList", " \
    \       val stones = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            stones += n\n            i += 2\n        }\n        stones.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           if (n % 2 == 0) {\n                stones += n\n                i\
    \ += 2\n            } else {\n                stones += n\n                i +=\
    \ 1\n            }\n        }\n        stones.toList", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0) n / 2 else 3\
    \ * n + 1\n        val odd = if (n % 2 == 1) n / 2 else 3 * n + 1\n        result\
    \ ++= makeAPile(even)\n        result ++= makeAPile(odd)\n        result.toList",
  "        val stones = mutable.ListBuffer(n)\n        val even = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else n / 2\n \
    \       stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n      \
    \  stones.toList", "        val stones = mutable.ListBuffer(n)\n        stones\
    \ ++= makeAPile(n/2, stones)\n        stones ++= makeAPile(n/2, stones)\n    \
    \    stones", "        val levels = mutable.ListBuffer[Long]()\n        val even\
    \ = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n\
    \ / 2 else 3 * n + 1\n        levels += even\n        levels += odd\n        levels.toList",
  "        val stones = mutable.ListBuffer(n)\n        val nextLevel = stones.takeWhile(_\
    \ % 2 == 0).length\n        stones ++= nextLevel until stones.length\n       \
    \ stones.toList", "        val list = mutable.ListBuffer[Long]()\n        val\
    \ odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n     \
    \   list += odd\n        list += even\n        list.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n / 2 else n\
    \ / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n        list +=\
    \ odd\n        list += even\n        list.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        stones += n\n        stones += odd\n\
    \        stones += even\n        stones.toList", "        val stones = mutable.ListBuffer(n)\n\
    \        stones ++= makeAPile(n/2, stones)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.head + 1 : stones.head\
    \ + 1\n        stones", "        val stones = mutable.ListBuffer[Long]()\n   \
    \     var i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n    \
    \            stones += n\n                i += 2\n            } else {\n     \
    \           stones += n\n                i += 1\n            }\n        }\n  \
    \      stones.toList", "        val stones = mutable.ListBuffer[Long]()\n    \
    \    stones += n\n        stones += n / 2\n        stones += n / 4\n        stones\
    \ += n / 8\n        stones += n / 16\n        stones += n / 32\n        stones\
    \ += n / 64\n        stones += n / 128\n        stones += n / 256\n        stones\
    \ += n / 512\n        stones += n / 1024\n        stones += n / 2048\n       \
    \ stones += n / 4096\n        stones += n / 8192\n        stones += n / 16384\n\
    \        stones += n / 32768\n        stones += n / 65536\n        stones += n\
    \ / 131072\n        stones += n / 262144\n        stones += n / 524288\n     \
    \   stones += n / 1048576\n        stones += n / 2097152\n        stones += n\
    \ / 4194304\n        stones += n / 8388608\n        stones += n / 16777216\n \
    \       stones += n / 33554432\n        stones += n / 67108864\n        stones\
    \ += n / 134217728\n        stones += n / 268435456\n        stones += n / 536870912\n\
    \        stones += n / 1073741824\n        stones += n / 2147483648\n        stones\
    \ += n / 4294967296\n        stones += n / 8589934592\n        stones += n / 17179869184\n\
    \        stones += n / 34359738368\n        stones += n / 68719476736\n      \
    \  stones += n / 137438953472\n        stones += n / 274877906944\n        stones\
    \ += n / 549755813888\n        stones += n / 1099511627776\n        stones +=\
    \ n / 2199023255552\n        stones += n / 4398046511104\n        stones += n\
    \ / 8796093022208\n        stones += n / 17592186044416\n        stones += n /\
    \ 35184372088832\n        stones += n / 70368744177664\n        stones += n /\
    \ 140737488355328\n        stones += n / 281474976710656\n        stones += n\
    \ / 562949953421312\n        stones += n / 1125899906842624\n        stones +=\
    \ n / 22517998136", "        val stones = mutable.ListBuffer[Long]()\n       \
    \ val even = if (n % 2 == 0) n / 2 else 3 * n + 2\n        val odd = if (n % 2\
    \ == 1) n / 2 else 3 * n + 1\n        stones += even\n        stones += odd\n\
    \        stones.toList", "        val stones = mutable.ListBuffer(n)\n       \
    \ val even = if (n % 2 == 0) n + 1 else n\n        val odd = if (n % 2 == 1) n\
    \ + 1 else n\n        stones ++= makeAPile(even)\n        stones ++= makeAPile(odd)\n\
    \        stones.toList", "        val stones = List.fill(n / 2)(n / 2)\n     \
    \   stones.takeWhile(_ % 2 == 0).drop(stones.takeWhile(_ % 2 == 1).length)", " \
    \       val stones = mutable.ListBuffer(n)\n        val nextLevel = stones.takeRight(stones.length)\n\
    \        val nextLevelCount = stones.drop(stones.length)\n        stones.takeRight(stones.length).foreach(stones\
    \ => nextLevelCount += stones)\n        nextLevel", "        val list = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        val nextLevel = if (n % 2 == 0) even\
    \ else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n     \
    \   val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        ", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        stones += n\n        stones += odd\n        stones += even\n  \
    \      stones.toList", "        val levels = mutable.ListBuffer[Long]()\n    \
    \    val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n\
    \ % 2 == 0) n / 2 else n / 2\n        levels += odd\n        levels += even\n\
    \        levels.toList", "        val list = mutable.ListBuffer[Long]()\n    \
    \    val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if (n\
    \ % 2 == 1) n / 2 else n / 2\n        for (i = 1 until n by 2) list.+= (i * odd)\n\
    \        for (i = 1 until n by 2) list.+= (i * even)\n        list.toList", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n / 2 else\
    \ n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n        for\
    \ (i <- 0 until n) {\n            if (i % 2 == 0) {\n                result.add(i)\n\
    \            } else {\n                result.add(odd)\n                result.add(even)\n\
    \            }\n        }\n        result.toList", "        val levels = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        while(nextLevel < n) {\n            nextLevel\
    \ = nextLevel + math.min(nextLevel, math.floor(n/2))\n            levels += nextLevel\n\
    \        }\n        levels.toList", "        val stones = List.fill(n / 2)(n /\
    \ 2)\n        stones.takeRight(n % 2).reverse", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        stones += odd\n        stones += even\n\
    \        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n  \
    \      stones += n\n        stones += n / 2\n        stones += n / 4\n       \
    \ stones += n / 8\n        stones += n / 16\n        stones += n / 32\n      \
    \  stones += n / 64\n        stones += n / 128\n        stones += n / 256\n  \
    \      stones += n / 512\n        stones += n / 1024\n        stones += n / 2048\n\
    \        stones += n / 4096\n        stones += n / 8192\n        stones += n /\
    \ 16384\n        stones += n / 32768\n        stones += n / 65536\n        stones\
    \ += n / 131072\n        stones += n / 262144\n        stones += n / 524288\n\
    \        stones += n / 1048576\n        stones += n / 2097152\n        stones\
    \ += n / 4194304\n        stones += n / 8388608\n        stones += n / 16777216\n\
    \        stones += n / 33554432\n        stones += n / 67108864\n        stones\
    \ += n / 134217728\n        stones += n / 268435456\n        stones += n / 536870912\n\
    \        stones += n / 1073741824\n        stones += n / 2147483648\n        stones\
    \ += n / 4294967296\n        stones += n / 8589934592\n        stones += n / 17179869184\n\
    \        stones += n / 34359738368\n        stones += n / 68719476736\n      \
    \  stones += n / 137438953472\n        stones += n / 274877906944\n        stones\
    \ += n / 549755813888\n        stones += n / 1099511627776\n        stones +=\
    \ n / 2199023255552\n        stones += n / 4398046511104\n        stones += n\
    \ / 8796093022208\n        stones += n / 17592186044416\n        stones += n /\
    \ 35184372088832\n        stones += n / 70368744177664\n        stones += n /\
    \ 140737488355328\n        stones += n / 281474976710656\n        stones += n\
    \ / 562949953421312\n        stones += n / 1125899906842624\n        stones +=\
    \ n / 22517998136", "        val levels = mutable.ListBuffer.empty[Long]\n   \
    \     val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        levels +=\
    \ nextLevel\n        val nextLevelCount = nextLevel\n        val nextLevelCount\
    \ = nextLevelCount / 2\n        levels += nextLevelCount\n        levels", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0).length\n        val odd = stones.takeWhile(_ % 2 == 1).length\n  \
    \      stones.drop(even).drop(odd).toList", "        val stones = mutable.ListBuffer(n)\n\
    \        stones.takeWhile(_ % 2 == 0).foreach(stones += _ + 1)\n        stones",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_ % 2 == 0).length\n\
    \        val odd = stones.takeWhile(_ % 2 == 1).length\n        stones.drop(even).take(odd).map(stones.length\
    \ +1)", "        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < n) {\n            stones += n\n            i += 2\n      \
    \  }\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        var level = 0\n        var nextLevel = 0\n        var nextOdd = 0\n \
    \       var nextEven = 0\n        while (nextLevel < n) {\n            nextLevel\
    \ = nextLevel + nextOdd + nextEven\n            nextOdd = nextOdd + 1\n      \
    \      nextEven = nextEven + 1\n            stones += nextLevel\n        }\n \
    \       stones.toList", "        val stones = mutable.ListBuffer[Long]()\n   \
    \     stones += n\n        stones += n / 2\n        stones += n / 4\n        stones\
    \ += n / 8\n        stones += n / 16\n        stones += n / 32\n        stones\
    \ += n / 64\n        stones += n / 128\n        stones += n / 256\n        stones\
    \ += n / 512\n        stones += n / 1024\n        stones += n / 2048\n       \
    \ stones += n / 4096\n        stones += n / 8192\n        stones += n / 16384\n\
    \        stones += n / 32768\n        stones += n / 65536\n        stones += n\
    \ / 131072\n        stones += n / 262144\n        stones += n / 524288\n     \
    \   stones += n / 1048576\n        stones += n / 2097152\n        stones += n\
    \ / 4194304\n        stones += n / 8388608\n        stones += n / 16777216\n \
    \       stones += n / 33554432\n        stones += n / 67108864\n        stones\
    \ += n / 134217728\n        stones += n / 268435456\n        stones += n / 536870912\n\
    \        stones += n / 1073741824\n        stones += n / 2147483648\n        stones\
    \ += n / 4294967296\n        stones += n / 8589934592\n        stones += n / 17179869184\n\
    \        stones += n / 34359738368\n        stones += n / 68719476736\n      \
    \  stones += n / 137438953472\n        stones += n / 274877906944\n        stones\
    \ += n / 549755813888\n        stones += n / 1099511627776\n        stones +=\
    \ n / 2199023255552\n        stones += n / 4398046511104\n        stones += n\
    \ / 8796093022208\n        stones += n / 17592186044416\n        stones += n /\
    \ 35184372088832\n        stones += n / 70368744177664\n        stones += n /\
    \ 140737488355328\n        stones += n / 281474976710656\n        stones += n\
    \ / 562949953421312\n        stones += n / 1125899906842624\n        stones +=\
    \ n / 22517998136", "        val levels = mutable.ListBuffer[Long]()\n       \
    \ val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n \
    \       levels += odd\n        levels += even\n        levels.toList", "     \
    \   val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n\n        stones += n\n        stones += n\n        stones += n\n      \
    \  stones += n\n        stones += n\n        stones += n\n        stones", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val odd = if (n %\
    \ 2 == 0) n / 2 else n / 2 + 1\n        val even = n / 2\n        result.add(odd)\n\
    \        result.add(even)\n        result", "        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        stones ++= makeAPile(even)\n        stones\
    \ ++= makeAPile(odd)\n        stones.toList", "        val levels = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            levels += i\n       \
    \     i += 2\n        }\n        levels.toList", "        val pile = mutable.ListBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / ", "        val\
    \ stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones +=\
    \ n / 2\n        stones += n / 4\n        stones += n / 8\n        stones += n\
    \ / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        while(nextLevel < n) {\n            nextLevelStones = nextLevel\
    \ % 2 == 0 ? nextLevelStones + 1 : nextLevelStones\n            nextLevel = nextLevel\
    \ + 1\n            stones += nextLevelStones\n        }\n        stones.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n\
    \        stones += n / 4\n        stones += n / 8\n        stones += n / 16\n\
    \        stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones += n / 8589934592\n\
    \        stones += n / 17179869184\n        stones += n / 34359738368\n      \
    \  stones += n / 68719476736\n        stones += n / 137438953472\n        stones\
    \ += n / 274877906944\n        stones += n / 549755813888\n        stones += n\
    \ / 1099511627776\n        stones += n / 2199023255552\n        stones += n /\
    \ 4398046511104\n        stones += n / 8796093022208\n        stones += n / 17592186044416\n\
    \        stones += n / 35184372088832\n        stones += n / 70368744177664\n\
    \        stones += n / 140737488355328\n        stones += n / 281474976710656\n\
    \        stones += n / 562949953421312\n        stones += n / 1125899906842624\n\
    \        stones += n / 22517998136", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        stones += n\n        stones += even\n\
    \        stones += odd\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = List.fill(n)(0)\n\
    \        stones.updated(n+1, stones.filter(_ % 2 == 1).sum)\n        stones.updated(n+1,\
    \ stones.filter(_ % 2 == 0).sum)\n        stones", "        val list = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else n / 2\n        list += even\n        list += odd\n \
    \       list.toList", "        val stones = mutable.ListBuffer[Long]()\n     \
    \   val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones += n\n   \
    \     stones += even\n        stones", "        val stones = List.fill(n / 2)(n\
    \ / 2)\n        stones.take(n / 2).filter(_ % 2 == 0).map(_ + 1)", "        val\
    \ stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones +=\
    \ n / 2\n        stones += n / 4\n        stones += n / 8\n        stones += n\
    \ / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2, stones)\n\
    \        stones ++= makeAPile(n/2, stones)\n        stones", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n\
    \        stones += n / 4\n        stones += n / 8\n        stones += n / 16\n\
    \        stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones += n / 8589934592\n\
    \        stones += n / 17179869184\n        stones += n / 34359738368\n      \
    \  stones += n / 68719476736\n        stones += n / 137438953472\n        stones\
    \ += n / 274877906944\n        stones += n / 549755813888\n        stones += n\
    \ / 1099511627776\n        stones += n / 2199023255552\n        stones += n /\
    \ 4398046511104\n        stones += n / 8796093022208\n        stones += n / 17592186044416\n\
    \        stones += n / 35184372088832\n        stones += n / 70368744177664\n\
    \        stones += n / 134969814552\n        stones += n / 2702159776480\n   \
    \     stones += n / 549755813888\n        stones += n / 1099511627776\n      \
    \  stones += n / 2199023255552", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.head + 1 : stones.head\
    \ + 1\n        stones", "        val levels = mutable.ListBuffer.empty[Long]\n\
    \        val even = if (n % 2 == 0) n else n + 1 // next even number\n       \
    \ val odd = if (n % 2 == 1) n else n + 1 // next odd number\n        levels +=\
    \ odd\n        levels += even\n        levels.toList", "        val stones = mutable.ListBuffer(n)\n\
    \        stones ++= makeAPile(n/2, stones)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones", "        val stones = List.fill(n / 2)(n / 2)\n  \
    \      stones.takeRight(n % 2)", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += if (n % 2 == 0) n else n + 2\n       \
    \ stones", "        val pile = mutable.ListBuffer.empty[Long]\n        pile.append(n)\n\
    \        pile.append(n / 2)\n        pile.append(n / 4)\n        pile.append(n\
    \ / 8)\n        pile.append(n / 16)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 64)\n        pile.append(n / 128)\n        pile.append(n / 256)\n        pile.append(n\
    \ / 512)\n        pile.append(n / 1024)\n        pile.append(n / 2048)\n     \
    \   pile.append(n / 4096)\n        pile.append(n / 8192)\n        pile.append(n\
    \ / 16384)\n        pile.append(n / 32768)\n        pile.append(n / 65536)\n \
    \       pile.append(n / 131072)\n        pile.append(n / 262144)\n        pile.append(n\
    \ / 524288)\n        pile.append(n / 1048576)\n        pile.append(n / 2097152)\n\
    \        pile.append(n / 4194304)\n        pile.append(n / 8388608)\n        pile.append(n\
    \ / 16777216)\n        pile.append(n / 33554432)\n        pile.append(n / 67108864)\n\
    \        pile.append(n / 134217728)\n        pile.append(n / 268435456)\n    \
    \    pile.append(n / 536870912)\n        pile.append(n / 1073741824)\n       \
    \ pile.append(n / 2147483648)\n        pile.append(n / 4294967296)\n        pile.append(n\
    \ / 8589934592)\n        pile.append(n / 17179869184)\n        pile.append(n /\
    \ 34359738368)\n        pile.append(n / 68719476736)\n        pile.append(n /\
    \ 137438953472)\n        pile.append(n / 274877906944)\n        pile.append(n\
    \ / 549755813888)\n        pile.append(n / 1099511627776)\n        pile.append(n\
    \ / 2199023255552)\n        pile.append(n / 4398046511104)\n        pile.append(n\
    \ / 8796093022208)\n        pile.append(n / 17592186044416)\n        pile.append(n\
    \ / 35184372088832)\n        pile.append(n ", "        val levels = mutable.ListBuffer[Long]()\n\
    \        var level = 0\n        while (level < n) {\n            levels += level\n\
    \            level += 1\n        }\n        levels.toList", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var level = 0\n        while(stones.size\
    \ < n) {\n            stones += level\n            level += 1\n        }\n   \
    \     stones.toList", "        val stones = mutable.ListBuffer[Long]()\n     \
    \   var i = 0\n        while(i < n) {\n            stones += n\n            i\
    \ += 2\n        }\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136", "        val list = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        list.add(odd)\n        list.add(even)\n\
    \        list.toList", "        val levels = mutable.ListBuffer[Long]()\n    \
    \    val oddLevel = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val evenLevel\
    \ = n / 2\n        levels += oddLevel\n        levels += evenLevel\n        levels.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            if (n % 2 == 0) {\n                stones += n\n    \
    \            i += 2\n            } else {\n                stones += n\n     \
    \           i += 1\n            }\n        }\n        stones.toList", "      \
    \  val stones = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0)\
    \ n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else 2 * n + 1\n\
    \        stones += even\n        stones += odd\n        stones.toList", "    \
    \    val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = List.fill(n / 2)(n / 2)\n        stones.takeWhile(_ % 2 ==\
    \ 0).drop(stones.takeWhile(_ % 2 == 1).length)", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 1374389534720\n        stones += n / 27487790694400\n       \
    \ stones += n / 54975581388832\n        stones += n / 109951162777600\n      \
    \  stones += n / 219902325555200", "        val stones = mutable.ListBuffer(n)\n\
    \        val even = stones.takeWhile(_ % 2 == 0)\n        val odd = stones.takeWhile(_\
    \ % 2 != 0)\n        val evenCount = even.count(_ > 0)\n        val oddCount =\
    \ odd.count(_ > 0)\n        val result = mutable.ListBuffer[Long]()\n        if\
    \ (n == 0) {\n            result.add(0)\n        } else {\n            result.add(evenCount)\n\
    \            result.add(oddCount)\n        }\n        return result.toList", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n\
    \        stones += n / 4\n        stones += n / 8\n        stones += n / 16\n\
    \        stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones += n / 8589934592\n\
    \        stones += n / 17179869184\n        stones += n / 34359738368\n      \
    \  stones += n / 68719476736\n        stones += n / 137438953472\n        stones\
    \ += n / 274877906944\n        stones += n / 549755813888\n        stones += n\
    \ / 1099511627776\n        stones += n / 2199023255552\n        stones += n /\
    \ 4398046511104\n        stones += n / 8796093022208\n        stones += n / 17592186044416\n\
    \        stones += n / 35184372088832\n        stones += n / 70368744177664\n\
    \        stones += n / 140737488355328\n        stones += n / 281474976710656\n\
    \        stones += n / 562949953421312\n        stones += n / 1125899906842624\n\
    \        stones += n / 22517998136", "        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else n / 2\n        stones ++= makeAPile(even)\n        stones\
    \ ++= makeAPile(odd)\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136", "        val levels = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        levels += odd\n        levels += even\n        levels.toList",
  "        val levels = mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < n) {\n            levels += n\n            i += 2\n        }\n        levels.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           if (n % 2 == 0) {\n                stones += n\n                i\
    \ += 2\n            } else {\n                stones += n\n                i +=\
    \ 3\n            }\n        }\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = mutable.ListBuffer(n)\n\
    \        stones.tail.foreach(stones.updated(stones.size - 1, stones.last))\n \
    \       stones.toList", "        val stones = mutable.ListBuffer[Long]()\n   \
    \     stones += n\n        stones += n / 2\n        stones += n / 4\n        stones\
    \ += n / 8\n        stones += n / 16\n        stones += n / 32\n        stones\
    \ += n / 64\n        stones += n / 128\n        stones += n / 256\n        stones\
    \ += n / 512\n        stones += n / 1024\n        stones += n / 2048\n       \
    \ stones += n / 4096\n        stones += n / 8192\n        stones += n / 16384\n\
    \        stones += n / 32768\n        stones += n / 65536\n        stones += n\
    \ / 131072\n        stones += n / 262144\n        stones += n / 524288\n     \
    \   stones += n / 1048576\n        stones += n / 2097152\n        stones += n\
    \ / 4194304\n        stones += n / 8388608\n        stones += n / 16777216\n \
    \       stones += n / 33554432\n        stones += n / 67108864\n        stones\
    \ += n / 134217728\n        stones += n / 268435456\n        stones += n / 536870912\n\
    \        stones += n / 1073741824\n        stones += n / 2147483648\n        stones\
    \ += n / 4294967296\n        stones += n / 8589934592\n        stones += n / 17179869184\n\
    \        stones += n / 34359738368\n        stones += n / 68719476736\n      \
    \  stones += n / 137438953472\n        stones += n / 274877906944\n        stones\
    \ += n / 549755813888\n        stones += n / 1099511627776\n        stones +=\
    \ n / 2199023255552\n        stones += n / 4398046511104\n        stones += n\
    \ / 8796093022208\n        stones += n / 17592186044416\n        stones += n /\
    \ 35184372088832\n        stones += n / 70368744177664\n        stones += n /\
    \ 140737488355328\n        stones += n / 281474976710656\n        stones += n\
    \ / 562949953421312\n        stones += n / 1125899906842624\n        stones +=\
    \ n / 22517998136", "        val levels = mutable.ListBuffer[Long]()\n       \
    \ var level = 0\n        var stones = 0\n        while (stones < n) {\n      \
    \      if (n % 2 == 0) {\n                levels += stones\n                stones\
    \ += 2\n            } else {\n                levels += stones\n             \
    \   stones += 3\n            }\n            level += 1\n        }\n        levels.toList",
  "        val stones = mutable.ListBuffer(n)\n        val even = stones.takeWhile(_\
    \ % 2 == 0)\n        val odd = stones.takeWhile(_ % 2 != 0)\n        odd.foreach(stones\
    \ += _ + 1)\n        even.foreach(stones += _)\n        stones", "        val\
    \ stones = mutable.ListBuffer(n)\n        stones.takeWhile(_ < n).foreach { stones\
    \ =>\n            stones.toLong match {\n                case x if x % 2 == 0\
    \ => stones.toLong + 2\n                case x if x % 2 == 1 => stones.toLong\
    \ + 1\n                case _ => stones.toLong\n            }\n        }", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val even = if (n\
    \ % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else\
    \ 3 * n + 1\n        val nextEven = if (even % 2 == 0) even / 2 else 3 * even\
    \ + 1\n        val nextOdd = if (odd % 2 == 1) odd / 2 else 3 * odd + 1\n    \
    \    val nextEvenOdd = if (nextEven % 2 == 1) nextEven / 2 else 3 * nextEven +\
    \ 1\n        val nextOddEven = if (nextOdd % 2 == 1) nextOdd / 2 else 3 * nextOdd\
    \ + 1\n        val nextEvenOddOdd = if (nextEvenOdd % 2 == 1) nextEvenOdd / 2\
    \ else 3 * nextEvenOdd + 1\n        val nextOddEvenOdd = if (nextOddEven % 2 ==\
    \ 1) nextOddEven / 2 else 3 * nextOddEven + 1\n        val nextEvenOddEvenOdd\
    \ = if (nextEvenOddOdd % 2 == 1) nextEvenOddOdd / 2 else 3 * nextEvenOddOdd +\
    \ 1\n        val nextOddEvenOddEven = if (nextOddEvenOddOdd % 2 == 1) nextOddEvenOddOdd\
    \ / 2 else 3 * nextOddEvenOddOdd + 1\n        val nextEvenOddEvenOddOdd = if (nextEvenOddEvenOddOdd\
    \ % 2 == 1) nextEvenOddEvenOddOdd / 2 else 3 * nextEvenOddEvenOddOdd + 1\n   \
    \     val nextOddEvenOddEvenOdd = if (nextOddEvenOddEvenOdd % 2 == 1) nextOddEvenOddEvenOdd\
    \ / 2 else 3 * nextOddEvenOddEvenOdd + 1\n        val nextEvenOddEvenOddEvenOdd\
    \ = if (nextEvenOddEvenOddEvenOdd % 2 == 1) nextEvenOddEvenOddEvenOdd / 2 else\
    \ 3 * nextEvenOddEvenOddEvenOdd + 1\n        val nextOddEvenOddEvenOddOdd = if\
    \ (nextOddEvenOddEvenOddOdd % 2 == 1) nextOddEvenOddEvenOddOdd / 2 else 3 * nextOddEvenOddEvenOddOdd\
    \ + 1\n        val nextEvenOddEvenOddEvenOddOdd = if (nextEvenOddEvenOddEvenOddOdd\
    \ % 2 == 1) nextEvenOddEvenOddEvenOddOdd ", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1 \n        val odd = if (n % 2\
    \ == 1) n else n + 1 \n        stones += n \n        stones += even\n        stones\
    \ += odd\n        stones.toList", "        val stones = mutable.ListBuffer(n)\n\
    \        val even = stones.filter(_ % 2 == 0)\n        val odd = stones.filter(_\
    \ % 2 != 0)\n        odd.foreach(stones += _ + 1)\n        even.foreach(stones\
    \ += _ + 1)\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        stones += odd\n        stones += even\n        stones", "     \
    \   val stones = mutable.ListBuffer[Long]()\n        var currentLevel = mutable.ListBuffer[Long]()\n\
    \        var currentLevelSize = n\n        var currentLevelIndex = 0\n       \
    \ while (currentLevelSize > 0) {\n            if (currentLevelSize % 2 == 0) {\n\
    \                currentLevel += currentLevelSize\n                currentLevelSize\
    \ /= 2\n            } else {\n                currentLevelSize /= 2\n        \
    \        currentLevel += currentLevelSize\n            }\n            currentLevelIndex\
    \ += 1\n        }\n        currentLevel.foreach(stones += _)\n        stones.toList",
  "        val list = mutable.ListBuffer[Long]()\n        val even = if (n % 2 ==\
    \ 0) n / 2 else 3 * n + 1\n        val odd = if (n % 2 == 0) n / 2 else 3 * n\n\
    \        val nextEven = if (even % 2 == 0) even / 2 else 3 * even + 1\n      \
    \  val nextOdd = if (odd % 2 == 0) odd / 2 else 3 * odd + 1\n        list += nextEven\n\
    \        list += nextOdd\n        list.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n\n        stones += n\n        stones\
    \ += n\n        stones += n\n        stones += n\n        stones", "        val\
    \ stones = List.fill(n / 2)(n / 2)\n        stones.dropRight(1).dropRight(1).map(n\
    \ => if (n % 2 == 0) n / 2 else n / 2 + 1)", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        stones += even\n        stones +=\
    \ odd\n        stones.toList", "        val stones = mutable.ListBuffer(n)\n \
    \       val nextLevel = stones.takeRight(stones.length)\n        val nextLevelCount\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount2 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount3 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount4 = stones.takeRight(stones.length).sum\n        val nextLevelCount5\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount6 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount7 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount8 = stones.takeRight(stones.length).sum\n        val nextLevelCount9\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount10 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount11 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount12 = stones.takeRight(stones.length).sum\n        val nextLevelCount13\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount14 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount15 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount16 = stones.takeRight(stones.length).sum\n        val nextLevelCount17\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount18 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount19 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount20 = stones.takeRight(stones.length).sum\n        val nextLevelCount21\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount22 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount23 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount24 = stones.takeRight(stones.length).sum\n        val nextLevelCount25\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount26 = stones.takeRight(stones.length).sum\n\
    \        val nextLevelCount27 = stones.takeRight(stones.length).sum\n        val\
    \ nextLevelCount28 = stones.takeRight(stones.length).sum\n        val nextLevelCount29\
    \ = stones.takeRight(stones.length).sum\n        val nextLevelCount30 = stone",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n else 2 * n\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136", "        val stones = mutable.ListBuffer(n)\n\
    \        stones.tail.foreach(stones.updated(stones.size - 1, stones.last))\n \
    \       stones.toList", "        val stones = mutable.ListBuffer(n)\n        stones\
    \ += n\n        stones.takeWhile(_ % 2 == 0).map(_ + 1).takeWhile(_ % 2 == 1).map(_\
    \ + 1).takeWhile(_ % 2 == 0).map(_ + 1)", "        val stones = List.fill(n /\
    \ 2)(n/2)\n        stones.takeWhile(_ % 2 == 0).drop(stones.takeWhile(_ % 2 ==\
    \ 1).length)", "        val stones = mutable.ListBuffer[Long]()\n        stones\
    \ += n\n        stones += if (n % 2 == 0) n / 2 else n * 3\n        stones", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n\
    \        stones += n / 4\n        stones += n / 8\n        stones += n / 16\n\
    \        stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones", "    \
    \    val stones = mutable.ListBuffer[Long]()\n        var nextLevel = 0\n    \
    \    var currentLevel = n / 2\n        while (currentLevel > 0) {\n          \
    \  nextLevel = nextLevel + currentLevel\n            if (nextLevel % 2 == 0) {\n\
    \                stones += nextLevel\n            }\n            else {\n    \
    \            stones += nextLevel + 1\n            }\n            currentLevel\
    \ = currentLevel / 2\n        }\n        stones.toList", "        val stones =\
    \ mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2, stones)\n        stones\
    \ ++= makeAPile(n/2, stones)\n        stones", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.head + 1 : stones.head\
    \ + 1\n        stones", "        val pile = mutable.ArrayBuffer(n)\n        pile.take(n).foreach(x\
    \ => pile.updated(x, pile(x) + 1))\n        pile.toList", "        val levels\
    \ = mutable.ListBuffer[Long]()\n        var currentLevel = mutable.ListBuffer[Long]()\n\
    \        var currentLevelSize = n\n        var currentLevelIndex = 0\n       \
    \ while (currentLevelSize > 0) {\n            if (currentLevelSize % 2 == 0) {\n\
    \                currentLevel += currentLevelSize\n                currentLevelSize\
    \ /= 2\n            } else {\n                currentLevel += currentLevelSize\
    \ / 2\n                currentLevelSize /= 2\n            }\n            levels\
    \ += currentLevel\n            currentLevelIndex += 1\n        }\n        levels.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var level = 0\n        var nextLevel =\
    \ 0\n        var nextLevelStones = 0\n        var nextLevelStonesEven = 0\n  \
    \      var nextLevelStonesOdd = 0\n        while(nextLevelStones < n && nextLevelStonesEven\
    \ < n && nextLevelStonesOdd < n) {\n            nextLevelStones = nextLevelStonesEven\n\
    \            nextLevelStonesEven = nextLevelStonesOdd\n            nextLevelStonesOdd\
    \ = nextLevelStones\n            nextLevelStones = nextLevelStones + nextLevelStonesEven\n\
    \            nextLevelStonesEven = nextLevelStonesEven + nextLevelStonesOdd\n\
    \            nextLevelStonesOdd = nextLevelStonesOdd + nextLevelStonesEven\n \
    \           stones += nextLevelStones\n            level = level + 1\n       \
    \ }\n        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 134969814552256\n        stones += n / 274877906944128\n    \
    \    stones += n / 549755813888128\n        stones += n / 1099511627776128\n \
    \       stones += n / 219902", "        val stones = mutable.ListBuffer(n)\n \
    \       stones.takeWhile(_ <= n).foreach(stones.update(_ + 1))\n        stones.toList",
  "        val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2, stones)\n\
    \        stones ++= makeAPile(n/2, stones)\n        stones", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0) n / 2 else\
    \ n / 2 + 1\n        stones += even\n        val odd = if (n % 2 == 1) n / 2 else\
    \ n / 2\n        stones += odd\n        stones.toList", "        val levels =\
    \ mutable.ListBuffer[Long]()\n        var currentLevel = 0\n        var currentLevelStones\
    \ = 0\n        var currentLevelStonesEven = 0\n        var currentLevelStonesOdd\
    \ = 0\n        var currentLevelStonesTotal = 0\n        var currentLevelStonesTotalEven\
    \ = 0\n        var currentLevelStonesTotalOdd = 0\n        var currentLevelStonesTotalEvenOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotal = 0\n        var currentLevelStonesTotalEvenOddTotalEven\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalOdd = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotal = 0\n     \
    \   var currentLevelStonesTotalEvenOddTotalOddTotalEven = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalEven = 0\n \
    \       var currentLevelStonesTotalEvenOddTotalOddTotalEvenOdd = 0\n        var\
    \ currentLevelStonesTotalEvenOddTotalEvenOddTotalOdd = 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOdd\
    \ = 0\n        var currentLevelStonesTotalEvenOddTotalEvenOddTotalEvenOdd = 0\n\
    \        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotal = 0\n   \
    \     var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven = 0\n  \
    \      var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven = 0\n \
    \       var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven = 0\n\
    \        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven = 0\n\
    \        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven = 0\n\
    \        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven = 0\n\
    \        var currentLevelStonesTotalEvenOddTotalEvenOddTotalOddTotalEven = 0\n\
    \        var currentLevelStonesTotalEvenOddTotalEvenOddTotalEvenOddTotalEven =\
    \ 0\n        var currentLevelStonesTotalEvenOddTotalOddTotalEvenOddTotalEven =\
    \ 0\n        var currentLevelStonesTotalEvenOddTotal", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 0) n / 2 else 3 * n\n        stones += n\n        stones += even\n\
    \        stones += odd\n        stones.toList", "        val levels = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        levels.append (odd)\n        levels.append (even)\n        levels",
  "        val levels = mutable.ListBuffer[Long]()\n        val even = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val odd = if (n % 2 == 1) n / 2 else n / 2\n\
    \        levels += even\n        levels += odd\n        levels.toList", "    \
    \    val list = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0)\
    \ n / 2 else n / 2 + 1\n        val even = n / 2\n        list += odd\n      \
    \  list += even\n        list.toList", "        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (i % 2 == 0) {\n \
    \               stones += n\n            } else {\n                stones += n\
    \ + 1\n            }\n            i += 1\n        }\n        stones.toList", " \
    \       val stones = List.fill(n / 2)(n / 2)\n        if (n % 2 == 0) {\n    \
    \        stones.dropRight(1)\n        } else {\n            stones.takeRight(1)\n\
    \        }", "        val pile = mutable.ListBuffer[Long]()\n        pile.append(n)\n\
    \        pile.append(n / 2)\n        pile.append(n / 4)\n        pile.append(n\
    \ / 8)\n        pile.append(n / 16)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 64)\n        pile.append(n / 128)\n        pile.append(n / 256)\n        pile.append(n\
    \ / 512)\n        pile.append(n / 1024)\n        pile.append(n / 2048)\n     \
    \   pile.append(n / 4096)\n        pile.append(n / 8192)\n        pile.append(n\
    \ / 16384)\n        pile.append(n / 32768)\n        pile.append(n / 65536)\n \
    \       pile.append(n / 131072)\n        pile.append(n / 262144)\n        pile.append(n\
    \ / 524288)\n        pile.append(n / 1048576)\n        pile.append(n / 2097152)\n\
    \        pile.append(n / 4194304)\n        pile.append(n / 8388608)\n        pile.append(n\
    \ / 16777216)\n        pile.append(n / 33554432)\n        pile.append(n / 67108864)\n\
    \        pile.append(n / 134217728)\n        pile.append(n / 268435456)\n    \
    \    pile.append(n / 536870912)\n        pile.append(n / 1073741824)\n       \
    \ pile.append(n / 2147483648)\n        pile.append(n / 4294967296)\n        pile.append(n\
    \ / 8589934592)\n        pile.append(n / 17179869184)\n        pile.append(n /\
    \ 34359738368)\n        pile.append(n / 68719476736)\n        pile.append(n /\
    \ 137438953472)\n        pile.append(n / 274877906944)\n        pile.append(n\
    \ / 549755813888)\n        pile.append(n / 1099511627776)\n        pile.append(n\
    \ / 2199023255552)\n        pile.append(n / 4398046511104)\n        pile.append(n\
    \ / 8796093022208)\n        pile.append(n / 17592186044416)\n        pile.append(n\
    \ / 35184372088832)\n        pile.append(n ", "        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2\
    \ == 1) n else n + 1;\n        stones += odd\n        stones += even\n       \
    \ stones.toList", "        val stones = mutable.ListBuffer[Long]()\n        stones\
    \ += n\n        stones += n / 2\n        stones += n / 4\n        stones += n\
    \ / 8\n        stones += n / 16\n        stones += n / 32\n        stones += n\
    \ / 64\n        stones += n / 128\n        stones += n / 256\n        stones +=\
    \ n / 512\n        stones += n / 1024\n        stones += n / 2048\n        stones\
    \ += n / 4096\n        stones += n / 8192\n        stones += n / 16384\n     \
    \   stones += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n\
    \        stones += n / 262144\n        stones += n / 524288\n        stones +=\
    \ n / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n\
    \        stones += n / 8388608\n        stones += n / 16777216\n        stones\
    \ += n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 140737488355328\n \
    \       stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998136", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones\
    \ += n / 16\n        stones += n / 32\n        stones += n / 64\n        stones\
    \ += n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0) n / 2 else\
    \ 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else 3 * n + 1\n        stones\
    \ += n\n        stones += even\n        stones += odd\n        stones.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        val even = if (n % 2 ==\
    \ 0) n else n + 1 \n        val odd = if (n % 2 == 1) n else n + 1 \n        stones\
    \ += odd\n        stones += even\n        stones.toList", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n / 2\n\
    \        stones += n / 4\n        stones += n / 8\n        stones += n / 16\n\
    \        stones += n / 32\n        stones += n / 64\n        stones += n / 128\n\
    \        stones += n / 256\n        stones += n / 512\n        stones += n / 1024\n\
    \        stones += n / 2048\n        stones += n / 4096\n        stones += n /\
    \ 8192\n        stones += n / 16384\n        stones += n / 32768\n        stones\
    \ += n / 65536\n        stones += n / 131072\n        stones += n / 262144\n \
    \       stones += n / 524288\n        stones += n / 1048576\n        stones +=\
    \ n / 2097152\n        stones += n / 4194304\n        stones += n / 8388608\n\
    \        stones += n / 16777216\n        stones += n / 33554432\n        stones\
    \ += n / 67108864\n        stones += n / 134217728\n        stones += n / 268435456\n\
    \        stones += n / 536870912\n        stones += n / 1073741824\n        stones\
    \ += n / 2147483648\n        stones += n / 4294967296\n        stones", "    \
    \    val stones = List.fill(n / 2)(n / 2)\n        stones.takeRight(n % 2).map(n\
    \ => n / 2)", "        val stones = List.fill(n / 2)(n / 2)\n        stones.takeWhile(_\
    \ % 2 == 0).take(n / 2).map(n => n / 2)", "        val stones = mutable.ListBuffer[Long]()\n\
    \        var stonesCount = n\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stonesCount % 2 == 0 ? stonesCount / 2 : stonesCount / 2 + 1\n        stones\
    \ += stonesCount\n        stonesCount += stonesCount % 2 == 0 ? stonesCount /\
    \ 2 : stonesCount / 2 + 1\n        stones += stonesCount\n        stonesCount\
    \ += stone", "        val stones = mutable.ListBuffer[Long]()\n        stones\
    \ += n\n        stones += n / 2\n        stones += n / 4\n        stones += n\
    \ / 8\n        stones += n / 16\n        stones += n / 32\n        stones += n\
    \ / 64\n        stones += n / 128\n        stones += n / 256\n        stones +=\
    \ n / 512\n        stones += n / 1024\n        stones += n / 2048\n        stones\
    \ += n / 4096\n        stones += n / 8192\n        stones += n / 16384\n     \
    \   stones += n / 32768\n        stones += n / 65536\n        stones += n / 131072\n\
    \        stones += n / 262144\n        stones += n / 524288\n        stones +=\
    \ n / 1048576\n        stones += n / 2097152\n        stones += n / 4194304\n\
    \        stones += n / 8388608\n        stones += n / 16777216\n        stones\
    \ += n / 33554432\n        stones += n / 67108864\n        stones += n / 134217728\n\
    \        stones += n / 268435456\n        stones += n / 536870912\n        stones\
    \ += n / 1073741824\n        stones += n / 2147483648\n        stones += n / 4294967296\n\
    \        stones += n / 8589934592\n        stones += n / 17179869184\n       \
    \ stones += n / 34359738368\n        stones += n / 68719476736\n        stones\
    \ += n / 137438953472\n        stones += n / 274877906944\n        stones += n\
    \ / 549755813888\n        stones += n / 1099511627776\n        stones += n / 2199023255552\n\
    \        stones += n / 4398046511104\n        stones += n / 8796093022208\n  \
    \      stones += n / 17592186044416\n        stones += n / 35184372088832\n  \
    \      stones += n / 70368744177664\n        stones += n / 134969814552\n    \
    \    stones += n / 274877906944\n        stones += n / 549755813888\n        stones\
    \ += n / 1099511627776\n        stones += n / 2199023255552\n", "        val stones\
    \ = List.fill(n - 1)(n - 1)\n        stones.takeWhile(_ % 2 == 0).map(n => n /\
    \ 2)", "        val stones = mutable.ListBuffer(n)\n        stones.takeWhile(_\
    \ < n).foreach { stones => stones += stones.toLong % 2 }\n        stones.toList",
  "        val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n else n + 2\n        stones", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val odd = if (n % 2 == 0) n / 2 else n /\
    \ 2 + 1\n        val even = n / 2\n        val nextLevel = if (n % 2 == 0) even\
    \ else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n     \
    \   val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % 2 == 0)\
    \ even else odd\n        val nextLevelCount = if (n % 2 == 0) even else odd\n\
    \        val nextLevelCount = if (n % 2 == 0) even else odd\n        val nextLevelCount\
    \ = if (n % 2 == 0) even else odd\n        val nextLevelCount = if (n % ", " \
    \       val stones = mutable.ListBuffer[Long]()\n        stones += n\n       \
    \ stones += n % 2 == 0 ? stones.last + 1 : stones.last + 1\n        stones", " \
    \       val stones = mutable.ListBuffer(n)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones ++= makeAPile(n/2, stones)\n        stones", "     \
    \   val stones = mutable.ListBuffer[Long]()\n        var nextLevel = n / 2\n \
    \       if (n % 2 == 0) {\n            nextLevel = nextLevel + 1\n        }\n\
    \        stones += nextLevel\n        while (nextLevel > 0) {\n            nextLevel\
    \ = nextLevel / 2\n            if (nextLevel % 2 == 0) {\n                nextLevel\
    \ = nextLevel + 1\n            }\n            stones += nextLevel\n        }\n\
    \        stones.toList", "        val stones = mutable.ListBuffer[Long]()\n  \
    \      stones += n\n        stones += n / 2\n        stones += n / 4\n       \
    \ stones += n / 8\n        stones += n / 16\n        stones += n / 32\n      \
    \  stones += n / 64\n        stones += n / 128\n        stones += n / 256\n  \
    \      stones += n / 512\n        stones += n / 1024\n        stones += n / 2048\n\
    \        stones += n / 4096\n        stones += n / 8192\n        stones += n /\
    \ 16384\n        stones += n / 32768\n        stones += n / 65536\n        stones\
    \ += n / 131072\n        stones += n / 262144\n        stones += n / 524288\n\
    \        stones += n / 1048576\n        stones += n / 2097152\n        stones\
    \ += n / 4194304\n        stones += n / 8388608\n        stones += n / 16777216\n\
    \        stones += n / 33554432\n        stones += n / 67108864\n        stones\
    \ += n / 134217728\n        stones += n / 268435456\n        stones += n / 536870912\n\
    \        stones += n / 1073741824\n        stones += n / 2147483648\n        stones\
    \ += n / 4294967296\n        stones += n / 8589934592\n        stones += n / 17179869184\n\
    \        stones += n / 34359738368\n        stones += n / 68719476736\n      \
    \  stones += n / 137438953472\n        stones += n / 274877906944\n        stones\
    \ += n / 549755813888\n        stones += n / 1099511627776\n        stones +=\
    \ n / 2199023255552\n        stones += n / 4398046511104\n        stones += n\
    \ / 8796093022208\n        stones += n / 17592186044416\n        stones += n /\
    \ 35184372088832\n        stones += n / 70368744177664\n        stones += n /\
    \ 134969814552\n        stones += n / 281474976710656\n        stones += n / 562949953421312\n\
    \        stones += n / 1125899906842624\n        stones += n / 22517998", "  \
    \      val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += n / 2\n        stones += n / 4\n        stones += n / 8\n        stones +=\
    \ n / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0) n / 2 else\
    \ 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else 3 * n + 1\n        stones\
    \ += even\n        stones += odd\n        stones.toList", "        val levels\
    \ = mutable.ListBuffer[Long]()\n        val even = if (n % 2 == 0) n / 2 else\
    \ 3 * n + 1\n        val odd = if (n % 2 == 1) n / 2 else 3 * n + 1\n        levels\
    \ += odd\n        levels += even\n        levels.toList", "        val stones\
    \ = List.fill(n / 2)(n / 2)\n        if (n % 2 == 0) {\n            stones.dropRight(1)\n\
    \        } else {\n            stones.dropRight(2)\n        }", "        val pile\
    \ = mutable.ListBuffer(n)\n        pile.append(n)\n        pile.append(n+1)\n\
    \        pile.append(n+2)\n        pile.append(n+3)\n        pile.append(n+4)\n\
    \        pile.append(n+5)\n        pile.append(n+6)\n        pile.append(n+7)\n\
    \        pile.append(n+8)\n        pile.append(n+9)\n        pile.append(n+10)\n\
    \        pile.append(n+11)\n        pile.append(n+12)\n        pile.append(n+13)\n\
    \        pile.append(n+14)\n        pile.append(n+15)\n        pile.append(n+16)\n\
    \        pile.append(n+17)\n        pile.append(n+18)\n        pile.append(n+19)\n\
    \        pile.append(n+20)\n        pile.append(n+21)\n        pile.append(n+22)\n\
    \        pile.append(n+23)\n        pile.append(n+24)\n        pile.append(n+25)\n\
    \        pile.append(n+26)\n        pile.append(n+27)\n        pile.append(n+28)\n\
    \        pile.append(n+29)\n        pile.append(n+30)\n        pile.append(n+31)\n\
    \        pile.append(n+32)\n        pile.append(n+33)\n        pile.append(n+34)\n\
    \        pile.append(n+35)\n        pile.append(n+36)\n        pile.append(n+37)\n\
    \        pile.append(n+38)\n        pile.append(n+39)\n        pile.append(n+40)\n\
    \        pile.append(n+41)\n        pile.append(n+42)\n        pile.append(n+43)\n\
    \        pile.append(n+44)\n        pile.append(n+45)\n        pile.append(n+46)\n\
    \        pile.append(n+47)\n        pile.append(n+48)\n        pile.append(n+49)\n\
    \        pile.append(n+50)\n        pile.append(n+51)\n        pile.append(n+52)\n\
    \        pile.append(n+53)\n        pile.append(n+54)\n        pile.append(n+55)\n\
    \        pile.append(n+56)\n        pile.append(n+57)\n        pile.append(n+58)\n\
    \        pi", "        val stones = mutable.ListBuffer[Long]()\n        var i\
    \ = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n              \
    \  stones += n\n                i += 2\n            } else {\n               \
    \ stones += n\n                i += 1\n            }\n        }\n        stones.toList",
  "        val levels = mutable.ListBuffer[Long]()\n        val odd = if (n % 2 ==\
    \ 0) n / 2 else n / 2 + 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n\
    \        levels.append (odd)\n        levels.append (even)\n        levels", " \
    \       val stones = mutable.ListBuffer(n)\n        stones.take(stones.length/2).foreach(stones.update(_+1))\n\
    \        stones.takeRight(stones.length/2).foreach(stones.update(_+1))\n     \
    \   stones.toList", "        val stones = mutable.ListBuffer[Long]()\n       \
    \ val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if (n % 2\
    \ == 0) n / 2 else n / 2\n        stones += odd\n        stones += even\n    \
    \    stones.toList", "        val stones = mutable.ListBuffer(n)\n        val\
    \ nextLevel = stones.takeWhile(_ % 2 == 0).length\n        stones += nextLevel\n\
    \        stones", "        val stones = mutable.ListBuffer(n)\n        stones\
    \ ++= makeAPile(n/2, stones)\n        stones ++= makeAPile(n/2, stones)\n    \
    \    stones", "        val levels = mutable.ListBuffer[Long]()\n        var nextLevel\
    \ = n / 2\n        while (nextLevel > 0) {\n            levels += nextLevel\n\
    \            nextLevel = nextLevel / 2\n        }\n        levels", "        val\
    \ stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones +=\
    \ n / 2\n        stones += n / 4\n        stones += n / 8\n        stones += n\
    \ / 16\n        stones += n / 32\n        stones += n / 64\n        stones +=\
    \ n / 128\n        stones += n / 256\n        stones += n / 512\n        stones\
    \ += n / 1024\n        stones += n / 2048\n        stones += n / 4096\n      \
    \  stones += n / 8192\n        stones += n / 16384\n        stones += n / 32768\n\
    \        stones += n / 65536\n        stones += n / 131072\n        stones +=\
    \ n / 262144\n        stones += n / 524288\n        stones += n / 1048576\n  \
    \      stones += n / 2097152\n        stones += n / 4194304\n        stones +=\
    \ n / 8388608\n        stones += n / 16777216\n        stones += n / 33554432\n\
    \        stones += n / 67108864\n        stones += n / 134217728\n        stones\
    \ += n / 268435456\n        stones += n / 536870912\n        stones += n / 1073741824\n\
    \        stones += n / 2147483648\n        stones += n / 4294967296\n        stones\
    \ += n / 8589934592\n        stones += n / 17179869184\n        stones += n /\
    \ 34359738368\n        stones += n / 68719476736\n        stones += n / 137438953472\n\
    \        stones += n / 274877906944\n        stones += n / 549755813888\n    \
    \    stones += n / 1099511627776\n        stones += n / 2199023255552\n      \
    \  stones += n / 4398046511104\n        stones += n / 8796093022208\n        stones\
    \ += n / 17592186044416\n        stones += n / 35184372088832\n        stones\
    \ += n / 70368744177664\n        stones += n / 140737488355328\n        stones\
    \ += n / 281474976710656\n        stones += n / 562949953421312\n        stones\
    \ += n / 1125899906842624\n        stones += n / 22517998136", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        stones += n\n        stones += n % 2 ==\
    \ 0 ? stones.last + 1 : stones.last + 1\n        stones", "        val stones\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           if (n % 2 == 0) {\n                stones += n\n                i\
    \ += 1\n            } else {\n                stones += ((n + i) % 2)\n      \
    \          i += 1\n            }\n        }\n        stones.toList", "       \
    \ val stones = mutable.ListBuffer[Long]()\n        stones += n\n        stones\
    \ += if (n % 2 == 0) n else n + 2\n        stones", "        val stones = mutable.ListBuffer(n)\n\
    \        val levels = mutable.ListBuffer[Long]()\n        val nextLevel = if (n\
    \ % 2 == 0) n / 2 else 3 * n + 1\n        stones += nextLevel\n        levels\
    \ += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n   \
    \     levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel\n\
    \        levels += nextLevel\n        levels += nextLevel\n        levels += nextLevel",
  "        val stones = mutable.ListBuffer[Long]()\n        var nextLevel = 0\n  \
    \      var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var\
    \ nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevel = 0\n       \
    \ var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones\
    \ = 0\n        var nextLevel = 0\n        var nextLevelStones = 0\n        var\
    \ nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevel = 0\n       \
    \ var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones\
    \ = 0\n        var nextLevel = 0\n        var nextLevelStones = 0\n        var\
    \ nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevel = 0\n       \
    \ var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones\
    \ = 0\n        var nextLevel = 0\n        var nextLevelStones = 0\n        var\
    \ nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n        var nextLevel\
    \ = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones = 0\n\
    \        var nextLevelOddStones = 0\n        var nextLevel = 0\n        var nextLevelStones\
    \ = 0\n        var nextLevelEvenStones = 0\n        var nextLevelOddStones = 0\n\
    \        var nextLevel = 0\n        var ", "        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.head + 1 : stones.head\
    \ + 1\n        stones", "        val stones = mutable.ListBuffer(n)\n        stones\
    \ ++= makeAPile(n/2, stones)\n        stones ++= makeAPile(n/2, stones)\n    \
    \    stones", "        val stones = mutable.ListBuffer(n)\n        stones += stones.head\n\
    \        stones += stones.tail.filter(_ % 2 == 1).length\n        stones += stones.tail.filter(_\
    \ % 2 == 0).length\n        stones", "        val stones = mutable.ListBuffer(n)\n\
    \        stones ++= makeAPile(n/2, stones)\n        stones ++= makeAPile(n/2,\
    \ stones)\n        stones.toList"]
stop_tokens:
- "\n    }\n"
