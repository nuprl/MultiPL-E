name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n \
    \       nums.count(x => x > 0)", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.count(y\
    \ => y > x))\n        numsSums.sum", "        val nums = arr.toSet\n        val\
    \ numsSum = nums.map(x => math.abs(x))\n        val numsSumSum = numsSum.sum\n\
    \        numsSumSum", "        val nums = arr.filter(_ > 0)\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.map(x => math.abs(x))\n\
    \        val numsSumsSorted = sums.filter(_ > 0)\n        numsSumsSorted.length",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        counts.values.map(_.size).sum",
  "        val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val maxCount = counts.maxBy(x\
    \ => x._2)\n        val maxNum = maxCount._1.toLong\n        val maxSum = maxCount._2.toLong\n\
    \        val numsAboveMax = nums.filter(x => x >= maxNum)\n        val numsBelowMax\
    \ = nums.filter(x => x < maxNum)\n        val numsAboveMaxSum = numsAboveMax.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsBelowMaxSum = numsBelowMax.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsAboveMaxSumAbs = numsAboveMaxSum.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsBelowMaxSumAbs = numsBelowMaxSum.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsAboveMaxSumAbsSum = numsAboveMaxSumAbs.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsBelowMaxSumAbsSum = numsBelowMaxSumAbs.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsAboveMaxSumAbsSumAbs = numsAboveMaxSumAbsSum.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsBelowMaxSumAbsSumAbs = numsBelowMaxSumAbsSum.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsAboveMaxSumAbsSumAbsSum = numsAboveMaxSumAbsSumAbs.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsBelowMaxSumAbsSumAbsSum = numsBelowMaxSumAbsSumAbs.map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsAboveMaxSumAbsSumAbsSumAbs =\
    \ numsAboveMaxSumAbsSumAbsSum.map(x => math.abs(x)).reduce(_ + _)\n        val\
    \ numsBelowMaxSumAbsSumAbsSumAbs = numsBelowMaxSumAbsSumAbs", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSum\
    \ = sums.filter(x => x > 0)\n        numsSum.count(x => x > 0)", "        val\
    \ nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n        val\
    \ numsSumSum = numsSum.sum\n        numsSumSum.toLong", "        val nums = arr.toSet\n\
    \        val numsSet = nums.toSeq\n        val numsSet2 = numsSet.map(x => if\
    \ (x < 0) -x else x)\n        val numsSet3 = numsSet2.map(x => if (x < 0) -x else\
    \ x)\n        val numsSet4 = numsSet3.map(x => if (x < 0) -x else x)\n       \
    \ val numsSet5 = numsSet4.map(x => if (x < 0) -x else x)\n        val numsSet6\
    \ = numsSet5.map(x => if (x < 0) -x else x)\n        val numsSet7 = numsSet6.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet8 = numsSet7.map(x => if (x < 0)\
    \ -x else x)\n        val numsSet9 = numsSet8.map(x => if (x < 0) -x else x)\n\
    \        val numsSet10 = numsSet9.map(x => if (x < 0) -x else x)\n        val\
    \ numsSet11 = numsSet10.map(x => if (x < 0) -x else x)\n        val numsSet12\
    \ = numsSet11.map(x => if (x < 0) -x else x)\n        val numsSet13 = numsSet12.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet14 = numsSet13.map(x => if (x <\
    \ 0) -x else x)\n        val numsSet15 = numsSet14.map(x => if (x < 0) -x else\
    \ x)\n        val numsSet16 = numsSet15.map(x => if (x < 0) -x else x)\n     \
    \   val numsSet17 = numsSet16.map(x => if (x < 0) -x else x)\n        val numsSet18\
    \ = numsSet17.map(x => if (x < 0) -x else x)\n        val numsSet19 = numsSet18.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet20 = numsSet19.map(x => if (x <\
    \ 0) -x else x)\n        val numsSet21 = numsSet20.map(x => if (x < 0) -x else\
    \ x)\n        val numsSet22 = numsSet21.map(x => if (x < 0) -x else x)\n     \
    \   val numsSet23 = numsSet22.map(x => if (x < 0) -x else x)\n        val numsSet24\
    \ = numsSet23.map(x => if (x < 0) -x else x)", "        val nums = arr.map(_.toInt)\n\
    \        val sums = nums.map(x => math.abs(x))\n        val count = sums.count(_\
    \ > 0)\n        count", "        var sum = 0L\n        var count = 0L\n      \
    \  for (i <- arr) {\n            sum += i\n            count += 1\n          \
    \  if (sum > 0) {\n                sum -= i\n            }\n        }\n      \
    \  count", "        var sum = 0\n        var count = 0\n        for (i <- 0 until\
    \ arr.length) {\n            sum += arr(i)\n            if (sum > 0) {\n     \
    \           count += 1\n            }\n        }\n        count", "        var\
    \ sum = 0L\n        var count = 0L\n        for (i <- arr) {\n            sum\
    \ += i\n            if (sum > 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        val nums = arr.filter(x => x >= 0)\n    \
    \    val sums = nums.map(x => math.abs(math.log10(x))).sum\n        sums.toLong",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = sums.toSet\n        val numsSumsSums = numsSums.map(x =>\
    \ math.abs(x))\n        val numsSumsSumsSums = numsSumsSums.map(x => math.abs(x))\n\
    \        val numsSumsSumsSumsSums = numsSumsSumsSums.map(x => math.abs(x))\n \
    \       val numsSumsSumsSumsSumsSums = numsSumsSumsSumsSums.map(x => math.abs(x))\n\
    \        val numsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSums.map(x =>\
    \ math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums =\
    \ numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x))\n   \
    \     val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x))\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSums",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val numsSum = sums.sum\n        numsSum", "        val nums = arr.map(_.toInt)\n\
    \        val sums = nums.map(x => math.abs(x))\n        val sumsSum = sums.sum\n\
    \        val numsSum = nums.sum\n        if (sumsSum > numsSum)\n            sumsSum\
    \ - numsSum\n        else\n            numsSum - sumsSum", "        val nums =\
    \ arr.toList\n        val sums = nums.map(x => if (x < 0) -x else x)\n       \
    \ val sumsSorted = sums.sortWith(_ < _)\n        val sumsSortedCount = sumsSorted.length\n\
    \        val numsSortedCount = nums.length\n        val numsSortedSum = nums.sum\n\
    \        val numsSortedSumCount = numsSortedSum / 10\n        val numsSortedSumCount2\
    \ = numsSortedSumCount * numsSortedCount\n        val numsSortedSumCount3 = numsSortedSumCount2\
    \ * numsSortedCount\n        val numsSortedSumCount4 = numsSortedSumCount3 * numsSortedCount\n\
    \        val numsSortedSumCount5 = numsSortedSumCount4 * numsSortedCount\n   \
    \     val numsSortedSumCount6 = numsSortedSumCount5 * numsSortedCount\n      \
    \  val numsSortedSumCount7 = numsSortedSumCount6 * numsSortedCount\n        val\
    \ numsSortedSumCount8 = numsSortedSumCount7 * numsSortedCount\n        val numsSortedSumCount9\
    \ = numsSortedSumCount8 * numsSortedCount\n        val numsSortedSumCount10 =\
    \ numsSortedSumCount9 * numsSortedCount\n        val numsSortedSumCount11 = numsSortedSumCount10\
    \ * numsSortedCount\n        val numsSortedSumCount12 = numsSortedSumCount11 *\
    \ numsSortedCount\n        val numsSortedSumCount13 = numsSortedSumCount12 * numsSortedCount\n\
    \        val numsSortedSumCount14 = numsSortedSumCount13 * numsSortedCount\n \
    \       val numsSortedSumCount15 = numsSortedSumCount14 * numsSortedCount\n  \
    \      val numsSortedSumCount16 = numsSortedSumCount15 * numsSortedCount\n   \
    \     val numsSortedSumCount17 = numsSortedSumCount16 * numsSortedCount\n    \
    \    val numsSortedSumCount18 = numsSortedSumCount17 * numsSortedCount\n     \
    \   val numsSortedSumCount19 = numsSortedSumCount18 * numsSortedCount\n      \
    \  val numsSortedSumCount20 = numsSortedSumCount19 * numsSortedCount\n       \
    \ val numsSortedSumCount21 = numsSortedSumCount20 * numsSortedCount\n        val\
    \ numsSortedSumCount22 = numsSortedSumCount21 * numsSortedCount\n        val num",
  "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n        val sums\
    \ = nums.map(x => math.pow(10, x.length))\n        val count = sums.foldLeft(0)((sum,\
    \ digit) => sum + digit)\n        count", "        val nums = arr.toSet\n    \
    \    val numsSum = arr.map(x => math.abs(x)).sum\n        nums.count(x => x >\
    \ 0 && numsSum - math.abs(x) > 0)", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_\
    \ > x).size)\n        numsSums.sum", "        val nums = arr.map(_.toInt)\n  \
    \      val sums = nums.map(x => if (x < 0) -x else x)\n        val counts = sums.groupBy(x\
    \ => x).mapValues(_.size)\n        counts.foldLeft(0)((acc, x) => acc + x)", " \
    \       val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n       \
    \ nums.count(_ > 0) - numsSum", "        val nums = arr.filter(x => x >= 0).map(x\
    \ => math.abs(x))\n        val sums = nums.map(x => math.pow(10, x.length))\n\
    \        val count = sums.foldLeft(0L) { (sum, num) => sum + num }\n        count",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val numsWithSum = sums.filter(_ > 0)\n        numsWithSum.length", " \
    \       val nums = arr.filter(_ > 0)\n        val sums = nums.map(_.toString.toInt)\n\
    \        val counts = sums.groupBy(_ % 10).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxSum = sums.max\n        val maxNum = nums.max\n\
    \        val minNum = nums.min\n        val minSum = sums.min\n        val minCount\
    \ = counts.min\n        val minMaxCount = counts.min\n        val minMaxSum =\
    \ sums.min\n        val minMaxNum = nums.min\n        val minMaxNums = nums.filter(_\
    \ > minMaxNum)\n        val minMaxSums = sums.filter(_ > minMaxSum)\n        val\
    \ minMaxCounts = counts.filter(_ > minMaxCount)\n        val minMaxSums = sums.filter(_\
    \ > minMaxSum)\n        val minMaxNums = nums.filter(_ > minMaxNum)\n        val\
    \ minMaxNumsCount = nums.filter(_ > minMaxNum)\n        val minMaxSumsCount =\
    \ sums.filter(_ > minMaxSum)\n        val minMaxNumsSum = nums.filter(_ > minMaxNum)\n\
    \        val minMaxSumsSum = sums.filter(_ > minMaxSum)\n        val minMaxNumsSumCount\
    \ = nums.filter(_ > minMaxNum)\n        val minMaxSumsSumCount = sums.filter(_\
    \ > minMaxSum)\n        val minMaxNumsSumCount = nums.filter(_ > minMaxNum)\n\
    \        val minMaxSumsSumCount = sums.filter(_ > minMaxSum)\n        val minMaxNumsSumCounts\
    \ = nums.filter(_ > minMaxNum)\n        val minMaxSumsSumCounts = sums.filter(_\
    \ > minMaxSum)\n        val minMaxNumsSumCountsCount = nums.filter(_ > minMaxNum)\n\
    \        val minMaxSumsSumCountsCount = sums.filter(_ > minMaxSum)\n        val\
    \ minMaxNumsSumCountsSum = nums.filter(_ > minMaxNum)\n        val minMaxSumsSumCountsSum\
    \ = sums.filter(_ > minMaxSum)\n        val minMaxNumsSumCountsSumCount = nums.filter(_\
    \ > minMaxNum)\n        val minMaxSumsSumCountsSumCount = sums.filter(_ > minMaxSum)\n\
    \        val minMaxNumsSumCountsSum", "        val nums = arr.toSet\n        val\
    \ numsSum = nums.map(x => math.abs(x)).sum\n        numsSum", "        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).reduce(_ + _)\n\
    \        nums.filter(x => x > 0).count(x => numsSum - math.abs(x) > 0)", "   \
    \     val nums = arr.map(x => if (x < 0) -x else x)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val count = sums.count(x => x > 0)\n        count",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n        val numsSumsSet3\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet4 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet5 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet6 = numsSums.map(x => math.abs(x))\n        val numsSumsSet7\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet8 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet9 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet10 = numsSums.map(x => math.abs(x))\n        val numsSumsSet11\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet12 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet13 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet14 = numsSums.map(x => math.abs(x))\n        val numsSumsSet15\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet16 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet17 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet18 = numsSums.map(x => math.abs(x))\n        val numsSumsSet19\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet20 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet21 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet22 = numsSums.map(x => math.abs(x))\n        val numsSumsSet23\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet24 = nums", "     \
    \   val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n     \
    \   val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n\
    \        val numsSumSum = numsSum.sum\n        numsSumSum.toLong", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = sums.toSet\n        val numsSumsNotNegative = numsSums.filter(_ >\
    \ 0)\n        val numsSumsNotNegativeCount = numsSumsNotNegative.size\n      \
    \  val numsSumsNotNegativeSum = numsSumsNotNegative.sum\n        val numsSumsNotNegativeSumCount\
    \ = numsSumsNotNegativeSum.size\n        val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n\
    \        val numsSumsNotNegativeSumCount = numsSumsNotNegativeSum.size\n     \
    \   val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n        val numsSumsNotNegativeSumCount\
    \ = numsSumsNotNegativeSum.size\n        val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n\
    \        val numsSumsNotNegativeSumCount = numsSumsNotNegativeSum.size\n     \
    \   val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n        val numsSumsNotNegativeSumCount\
    \ = numsSumsNotNegativeSum.size\n        val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n\
    \        val numsSumsNotNegativeSumCount = numsSumsNotNegativeSum.size\n     \
    \   val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n        val numsSumsNotNegativeSumCount\
    \ = numsSumsNotNegativeSum.size\n        val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n\
    \        val numsSumsNotNegativeSumCount = numsSumsNotNegativeSum.size\n     \
    \   val numsSumsNotNegativeSumSum = numsSumsNotNegativeSum.sum\n        val numsSumsNotNegativeSumCount\
    \ = numsSumsNotNegativeSum.size\n        val numsSumsNotNegativeSum = numsSumsNotNegativeSum.sum\n\
    \        val numsSumsNotNegativeSumCount = numsSumsNotNegativeSum.size\n     \
    \   val numsSumsNotNegativeSum = numsSumsNotNegativeSum.sum\n        val numsSumsNotNegativeSumCount\
    \ = numsSumsNotNegativeSum.size\n        val numsSumsNotNegativeSum = ", "   \
    \     val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n   \
    \     val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n        val sum\
    \ = nums.sum\n        val numsSum = nums.filter(x => x > 0).size\n        val\
    \ numsSum2 = nums.filter(x => x > 0).count(x => x > 0)\n        val numsSum3 =\
    \ nums.count(x => x > 0)\n        val numsSum4 = nums.count(x => x > 0 && x <\
    \ 0)\n        val numsSum5 = nums.count(x => x > 0 && x < 0)\n        val numsSum6\
    \ = nums.count(x => x > 0 && x < 0)\n        val numsSum7 = nums.count(x => x\
    \ > 0 && x < 0)\n        val numsSum8 = nums.count(x => x > 0 && x < 0)\n    \
    \    val numsSum9 = nums.count(x => x > 0 && x < 0)\n        val numsSum10 = nums.count(x\
    \ => x > 0 && x < 0)\n        val numsSum11 = nums.count(x => x > 0 && x < 0)\n\
    \        val numsSum12 = nums.count(x => x > 0 && x < 0)\n        val numsSum13\
    \ = nums.count(x => x > 0 && x < 0)\n        val numsSum14 = nums.count(x => x\
    \ > 0 && x < 0)\n        val numsSum15 = nums.count(x => x > 0 && x < 0)\n   \
    \     val numsSum16 = nums.count(x => x > 0 && x < 0)\n        val numsSum17 =\
    \ nums.count(x => x > 0 && x < 0)\n        val numsSum18 = nums.count(x => x >\
    \ 0 && x < 0)\n        val numsSum19 = nums.count(x => x > 0 && x < 0)\n     \
    \   val numsSum20 = nums.count(x => x > 0 && x < 0)\n        val numsSum21 = nums.count(x\
    \ => x > 0 && x < 0)\n        val numsSum22 = nums.count(x => x > 0 && x < 0)\n\
    \        val numsSum23 = nums.count(x => x > 0 && x < 0)\n        val numsSum24\
    \ = nums.count(x => x > 0 && x < 0)\n        val numsSum25 = nums.count(x => x\
    \ > 0 && x < 0)\n        val numsSum26 = nums.count(x => x > 0 && x < 0)\n   \
    \     val numsSum27 = nums.count(x => x > 0 && x < 0)\n        val numsSum28 =\
    \ nums.count(x => x > 0 && x < 0)\n        val numsSum29 = nums.count(x => x >\
    \ 0 && x < 0)\n        val numsSum30 = ", "        val nums = arr.toSet\n    \
    \    val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x =>\
    \ sums.filter(_ > x).length)\n        numsSums.sum", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val countsSorted = counts.toSeq.sortBy(_._2)\n    \
    \    val countsSortedSortedByKey = countsSorted.toSeq.sortBy(_._1)\n        val\
    \ countsSortedSortedByKeyReversed = countsSortedSortedByKey.reverse\n        countsSortedSortedByKeyReversed.head._2",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n\
    \        nums.filter(x => x > 0).count(x => numsSum - math.abs(x) > 0)", "   \
    \     var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n\
    \        if (sum > 0) {\n            sum\n        } else {\n            arr.takeWhile(x\
    \ => x < 0).sum\n        }", "        val nums = arr.toSet\n        val sums =\
    \ arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet\
    \ = nums.toSet\n        val numsSums = nums.map(x => math.abs(x))\n        val\
    \ numsSumsSet = numsSums.toSet\n        val numsSumsSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSet = numsSums.toSet\n   \
    \     val numsSumsSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSums.toSet\n        val\
    \ numsSumsSetSetSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSums.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n    \
    \    val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n        val\
    \ numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSums.toSet\n        val numsSumsSetSet",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val count = sums.count(_ > 0)\n        count", "        val nums = arr.filter(x\
    \ => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n        val counts\
    \ = sums.groupBy(x => math.abs(x))\n        val count = counts.mapValues(_.length).sum\n\
    \        count", "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n\
    \        val sums = nums.map(x => math.pow(10, x.length))\n        val count =\
    \ sums.foldLeft(0L) { (sum, num) => sum + num }\n        count", "        val\
    \ nums = arr.map(x => if (x < 0) -(x%10) else x%10)\n        val sums = nums.map(x\
    \ => if (x < 0) -(x) else x)\n        val count = sums.count(x => x > 0)\n   \
    \     count", "        val nums = arr.toSet\n        val numsSum = nums.foldLeft(0)((sum,\
    \ num) => sum + num % 10)\n        numsSum", "        val n = arr.size\n     \
    \   var sum = 0L\n        var count = 0L\n        for (i <- 0 until n) {\n   \
    \         sum += arr(i)\n            if (sum > 0) {\n                count +=\
    \ 1L\n            }\n        }\n        count", "        val nums = arr.filter(x\
    \ => x > 0).map(x => math.abs(x))\n        val sums = nums.map(x => math.pow(10,\
    \ x.length))\n        val counts = sums.map(x => math.ceil(x / x))\n        val\
    \ result = counts.sum\n        result", "        val nums = arr.toSet\n      \
    \  val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x =>\
    \ sums.filter(_ > x).length)\n        numsSums.sum", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val numsCount = counts.mapValues(x => x.size)\n   \
    \     val numsCountSum = numsCount.mapValues(x => x.sum)\n        val numsCountSumSum\
    \ = numsCountSum.mapValues(x => x.sum)\n        val numsCountSumSumSum = numsCountSumSum.mapValues(x\
    \ => x.sum)\n        numsCountSumSumSum.sum", "        var sum = 0\n        var\
    \ count = 0\n        for (i <- arr) {\n            sum += i\n            if (sum\
    \ > 0) {\n                count += 1\n            }\n        }\n        count",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n\
    \        nums.filter(_ > 0).count(x => numsSum - math.abs(x) > 0)", "        val\
    \ nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n        val\
    \ numsSumSet = numsSum.toSet\n        val numsSumSetCount = numsSumSet.count(x\
    \ => x > 0)\n        val numsSumSetCount2 = numsSumSet.count(x => x < 0)\n   \
    \     numsSumSetCount2 match {\n            case 0 => numsSumSetCount\n      \
    \      case 1 => numsSumSetCount\n            case 2 => numsSumSetCount\n    \
    \        case 3 => numsSumSetCount\n            case 4 => numsSumSetCount\n  \
    \          case 5 => numsSumSetCount\n            case 6 => numsSumSetCount\n\
    \            case 7 => numsSumSetCount\n            case 8 => numsSumSetCount\n\
    \            case 9 => numsSumSetCount\n            case 10 => numsSumSetCount\n\
    \            case 11 => numsSumSetCount\n            case 12 => numsSumSetCount\n\
    \            case 13 => numsSumSetCount\n            case 14 => numsSumSetCount\n\
    \            case 15 => numsSumSetCount\n            case 16 => numsSumSetCount\n\
    \            case 17 => numsSumSetCount\n            case 18 => numsSumSetCount\n\
    \            case 19 => numsSumSetCount\n            case 20 => numsSumSetCount\n\
    \            case 21 => numsSumSetCount\n            case 22 => numsSumSetCount\n\
    \            case 23 => numsSumSetCount\n            case 24 => numsSumSetCount\n\
    \            case 25 => numsSumSetCount\n            case 26 => numsSumSetCount\n\
    \            case 27 => numsSumSetCount\n            case 28 => numsSumSetCount\n\
    \            case 29 => numsSumSetCount\n            case 30 => numsSumSetCount\n\
    \            case 31 => numsSumSetCount\n            case 32 => numsSumSetCount\n\
    \            case 33 => numsSumSetCount\n            case 34 => numsSumSetCount\n\
    \            case 35 => numsSumSetCount\n            case 36 => numsSumSetCount\n\
    \            case 37 => numsSumSetCount\n            case 38 => numsSumSetCount\n\
    \            case 39 => numsSumSetCount\n            case 40 => numsSumSetCount\n\
    \            case 41 => numsSumSetCount\n            case 42 => numsSumSetCount\n\
    \            case 43 => numsSumSetCount\n            case 44 => numsSumSetCount\n\
    \            case 45 => numsSumSetCount\n            case 46 => numsSumSetCount\n\
    \            case 47 ", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.map(x => sums.count(y => y > x))\n\
    \        numsSums.sum", "        val nums = arr.toSet\n        val numsSum = arr.map(x\
    \ => if (x < 0) -x else x).sum\n        nums.count(x => x > 0 && numsSum - x >\
    \ 0)", "        val nums = arr.toSet\n        val numsSet = nums.toSeq\n     \
    \   val numsSetLen = numsSet.length\n        val numsSetSum = numsSet.sum\n  \
    \      val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigit",
  "        var count = 0L\n        for (i <- arr.indices) {\n            val digit\
    \ = arr(i) % 10\n            if (digit > 0) count += digit * Math.pow(10, arr.size\
    \ - i - 1)\n        }\n        count", "        val nums = arr.toSet\n       \
    \ val sums = arr.map(x => math.abs(x))\n        val numsSums = sums.toSet\n  \
    \      val numsSumsCount = numsSums.count(x => x > 0)\n        numsSumsCount",
  "        var sum = 0L\n        for (i <- arr) {\n            sum += i\n        }\n\
    \        sum", "        val nums = arr.map(_.toInt)\n        val sums = nums.map(x\
    \ => x.toString.toInt).map(_.sum)\n        sums.count(x => x > 0)", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = nums.map(x => sums.count(y => y > x))\n        numsSums.sum", " \
    \       var count = 0\n        for(i <- 0 until arr.length) {\n            val\
    \ digit = arr(i).abs\n            if(digit > 0) {\n                count += 1\n\
    \            }\n        }\n        count", "        val nums = arr.toSet\n   \
    \     val numsSum = arr.map(x => math.abs(x)).sum\n        nums.filter(x => x\
    \ > 0).count(x => numsSum - math.abs(x) > 0)", "        val nums = arr.toSet\n\
    \        val numsSum = arr.toList.map(_.toString.toInt).sum\n        nums.filter(num\
    \ => numsSum - num > 0).length", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x))\n        val numsSumSum = numsSum.map(x => math.abs(x))\n\
    \        val numsSumSumSum = numsSumSum.map(x => math.abs(x))\n        val numsSumSumSumSum\
    \ = numsSumSumSum.map(x => math.abs(x))\n        val numsSumSumSumSumSum = numsSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSum = numsSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x))\n   \
    \     val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSum", "        val\
    \ nums = arr.toSet\n        val numsCount = arr.count(x => x > 0)\n        val\
    \ numsSum = arr.count(x => x > 0 && x % 10 == 0)\n        numsCount - numsSum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val numsCount = arr.count(x => x > 0)\n \
    \       val numsSum = arr.count(x => x > 0 && x < 10)\n        val numsSum2 =\
    \ arr.count(x => x > 0 && x < 100)\n        val numsSum3 = arr.count(x => x >\
    \ 0 && x < 1000)\n        val numsSum4 = arr.count(x => x > 0 && x < 10000)\n\
    \        val numsSum5 = arr.count(x => x > 0 && x < 100000)\n        val numsSum6\
    \ = arr.count(x => x > 0 && x < 1000000)\n        val numsSum7 = arr.count(x =>\
    \ x > 0 && x < 10000000)\n        val numsSum8 = arr.count(x => x > 0 && x < 100000000)\n\
    \        val numsSum9 = arr.count(x => x > 0 && x < 1000000000)\n        val numsSum10\
    \ = arr.count(x => x > 0 && x < 10000000000)\n        val numsSum11 = arr.count(x\
    \ => x > 0 && x < 100000000000)\n        val numsSum12 = arr.count(x => x > 0\
    \ && x < 1000000000000)\n        val numsSum13 = arr.count(x => x > 0 && x < 1000000000000)\n\
    \        val numsSum14 = arr.count(x => x > 0 && x < 10000000000000)\n       \
    \ val numsSum15 = arr.count(x => x > 0 && x < 100000000000000)\n        val numsSum16\
    \ = arr.count(x => x > 0 && x < 1000000000000000)\n        val numsSum17 = arr.count(x\
    \ => x > 0 && x < 10000000000000000)\n        val numsSum18 = arr.count(x => x\
    \ > 0 && x < 100000000000000000)\n        val numsSum19 = arr.count(x => x > 0\
    \ && x < 100000000000000000)\n        val numsSum20 = arr.count(x => x > 0 &&\
    \ x < 1000000000000000000)\n        val numsSum21 = arr.count(x => x > 0 && x\
    \ < 10000000000000000000)\n        val numsSum22 = arr.count(x => x > 0 && x <\
    \ 100000000000000000000)\n        val numsSum23 = arr.count(x => x > 0 && x <\
    \ 100000000000000000000)\n        val numsSum24 = arr.count(x => x > 0 && x <\
    \ 1000000000000000000000)\n        val numsSum25 = arr.count(x => x > 0 && x <\
    \ 10000000000000000000000)\n        val numsSum26 = arr.count(x => x > 0 && x\
    \ < 100000000000000000000000)\n        val numsSum27 = arr.count(x => x > 0 &&\
    \ x < 1000000000000000000000000)\n        val numsSum28 = arr.count(x => x > 0\
    \ && x < 10000000000000000000000000)\n        ", "        val nums = arr.filter(x\
    \ => x >= 0)\n        val numsSum = nums.map(x => math.abs(x)).sum\n        numsSum",
  "        val nums = arr.toList\n        val numsSorted = nums.sortBy(_ % 10)\n \
    \       val numsSortedReversed = numsSorted.reverse\n        val numsSortedReversedSum\
    \ = numsSortedReversed.sum\n        val numsSortedReversedSumDigits = numsSortedReversedSum.toString.toInt\n\
    \        val numsSortedReversedSumDigitsLessThan0 = numsSortedReversedSumDigits\
    \ - numsSortedReversedSumDigits%10\n        val numsSortedReversedSumDigitsLessThan0IsNegative\
    \ = numsSortedReversedSumDigitsLessThan0 < 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative\
    \ = numsSortedReversedSumDigitsLessThan0IsNegative || numsSortedReversedSumDigitsLessThan0\
    \ > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative = numsSortedReversedSumDigitsLessThan0IsNegative\
    \ || numsSortedReversedSumDigitsLessThan0 > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative\
    \ = numsSortedReversedSumDigitsLessThan0IsNegative || numsSortedReversedSumDigitsLessThan0\
    \ > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative = numsSortedReversedSumDigitsLessThan0IsNegative\
    \ || numsSortedReversedSumDigitsLessThan0 > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative\
    \ = numsSortedReversedSumDigitsLessThan0IsNegative || numsSortedReversedSumDigitsLessThan0\
    \ > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative = numsSortedReversedSumDigitsLessThan0IsNegative\
    \ || numsSortedReversedSumDigitsLessThan0 > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative\
    \ = numsSortedReversedSumDigitsLessThan0IsNegative || numsSortedReversedSumDigitsLessThan0\
    \ > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative = numsSortedReversedSumDigitsLessThan0IsNegative\
    \ || numsSortedReversedSumDigitsLessThan0 > 0\n        val numsSortedReversedSumDigitsLessThan0IsNegative\
    \ = numsSortedReversedSumDigitsLessThan0IsNegative || numsSorted", "        val\
    \ nums = arr.map(_.toInt)\n        val sums = nums.map(x => if (x < 0) -x else\
    \ x)\n        val counts = sums.groupBy(x => x).mapValues(_.size)\n        counts.foldLeft(0)((acc,\
    \ x) => acc + x)", "        val nums = arr.filter(x => x >= 0)\n        val sums\
    \ = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n\
    \        counts.map(x => (x._1, x._2.length)).sum", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n\
    \        val numsSet = nums.toSet\n        val numsSums = nums.map(x => math.abs(x))\n\
    \        val numsSumsSet = numsSums.toSet\n        val numsSumsSetSet = numsSumsSet.toSet\n\
    \        val numsSumsSetSetSet = numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet\
    \ = numsSumsSetSetSet.toSet\n        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n    \
    \    val numsSumsSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSet.toSet\n  \
    \      val numsSumsSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet", "        val nums = arr.map(_.toInt)\n\
    \        val sums = nums.map(x => math.abs(x))\n        val numsSummed = sums.filter(x\
    \ => x > 0).length\n        numsSummed", "        val nums = arr.filter(x => x\
    \ > 0).map(x => math.abs(x))\n        val sums = nums.map(x => math.pow(10, x.length))\n\
    \        val counts = sums.map(x => math.ceil(x / x))\n        counts.sum", " \
    \       val n = arr.length\n        var sum = 0L\n        arr.foreach(x => sum\
    \ += x)\n        sum", "        val nums = arr.toList\n        val numsLen = nums.length\n\
    \        val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = ", "        val nums =\
    \ arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum", "       \
    \ val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        sums.count(x => x > 0)", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n\
    \        val numsWithSum = nums.filter(x => counts(math.abs(x)) > 1)\n       \
    \ numsWithSum.size ", "        val nums = arr.map(_.toInt)\n        val sums =\
    \ nums.map(x => x.toString.toInt).map(_.sum)\n        sums.filter(x => x > 0).length",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSetSize = numsSumSet.size\n\
    \        val numsSumSetSum = numsSumSet.sum\n        val numsSumSetSumSet = numsSumSetSum.toSet\n\
    \        val numsSumSetSumSetSize = numsSumSetSumSet.size\n        val numsSumSetSumSetSum\
    \ = numsSumSetSumSet.sum\n        val numsSumSetSumSetSumSet = numsSumSetSumSetSum.toSet\n\
    \        val numsSumSetSumSetSumSetSize = numsSumSetSumSetSumSet.size\n      \
    \  val numsSumSetSumSetSumSetSum = numsSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSum.toSet\n        val numsSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSum.sum\n        val numsSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSum.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSumSetSumSetSum.sum\n        val numsSumSetSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSetSum.sum\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSet", "        val nums = arr.filter(_ > 0)\n        val\
    \ sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n\
    \        counts.map(_._2.size).sum", "        val nums = arr.filter(_ > 0)\n \
    \       val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val count = counts.mapValues(_.size).sum\n        count",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val counts = sums.groupBy(x => math.abs(x))\n        val countsMap = counts.toMap\n\
    \        val numsMap = nums.toMap\n        val numsSet = nums.toSet\n        val\
    \ numsSet2 = numsSet.filter(_ > 0)\n        val numsSet3 = numsSet.filter(_ >\
    \ 1)\n        val numsSet4 = numsSet.filter(_ > 2)\n        val numsSet5 = numsSet.filter(_\
    \ > 3)\n        val numsSet6 = numsSet.filter(_ > 4)\n        val numsSet7 = numsSet.filter(_\
    \ > 5)\n        val numsSet8 = numsSet.filter(_ > 6)\n        val numsSet9 = numsSet.filter(_\
    \ > 7)\n        val numsSet10 = numsSet.filter(_ > 8)\n        val numsSet11 =\
    \ numsSet.filter(_ > 9)\n        val numsSet12 = numsSet.filter(_ > 10)\n    \
    \    val numsSet13 = numsSet.filter(_ > 11)\n        val numsSet14 = numsSet.filter(_\
    \ > 12)\n        val numsSet15 = numsSet.filter(_ > 13)\n        val numsSet16\
    \ = numsSet.filter(_ > 14)\n        val numsSet17 = numsSet.filter(_ > 15)\n \
    \       val numsSet18 = numsSet.filter(_ > 16)\n        val numsSet19 = numsSet.filter(_\
    \ > 17)\n        val numsSet20 = numsSet.filter(_ > 18)\n        val numsSet21\
    \ = numsSet.filter(_ > 19)\n        val numsSet22 = numsSet.filter(_ > 20)\n \
    \       val numsSet23 = numsSet.filter(_ > 21)\n        val numsSet24 = numsSet.filter(_\
    \ > 22)\n        val numsSet25 = numsSet.filter(_ > 23)\n        val numsSet26\
    \ = numsSet.filter(_ > 24)\n        val numsSet27 = numsSet.filter(_ > 25)\n \
    \       val numsSet28 = numsSet.filter(_ > 26)\n        val numsSet29 = numsSet.filter(_\
    \ > 27)\n        val numsSet30 = numsSet.filter(_ > 28)\n        val numsSet31\
    \ = numsSet.filter(_ > 29)\n        val num", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val sumsSet = sums.toSet\n\
    \        val numsSet = nums.toSet\n        val numsSum = nums.map(x => math.abs(x))\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet2 = numsSum.map(x\
    \ => math.abs(x))\n        val numsSumSet3 = numsSum.map(x => math.abs(x))\n \
    \       val numsSumSet4 = numsSum.map(x => math.abs(x))\n        val numsSumSet5\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet6 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet7 = numsSum.map(x => math.abs(x))\n    \
    \    val numsSumSet8 = numsSum.map(x => math.abs(x))\n        val numsSumSet9\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet10 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet11 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet12 = numsSum.map(x => math.abs(x))\n        val numsSumSet13\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet14 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet15 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet16 = numsSum.map(x => math.abs(x))\n        val numsSumSet17\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet18 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet19 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet20 = numsSum.map(x => math.abs(x))\n        val numsSumSet21\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSet22 = numsSum.map(x =>\
    \ math.abs(x))\n        val numsSumSet23 = numsSum.map(x => math.abs(x))\n   \
    \     val numsSumSet24 = numsSum.map(x => math.abs(x))\n        val numsSumSet25\
    \ = numsSum.map(x => math.", "        val nums = arr.map(_.toInt)\n        val\
    \ sums = nums.map(x => x.toString.toInt).map(_.sum)\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        positiveSums.sum", "        val nums = arr.filter(_ > 0)\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val numsSortedSum = numsSorted.foldLeft(0)(_\
    \ + _)\n        numsSortedSum", "        val nums = arr.toSet\n        val numsCount\
    \ = nums.count(x => x > 0)\n        val numsSum = nums.count(x => x > 0 && x <\
    \ 10)\n        numsCount - numsSum", "        var sum = 0L\n        var count\
    \ = 0L\n        for (i <- 0 until arr.length) {\n            sum += arr(i)\n \
    \           if (sum > 0) {\n                count += 1\n            }\n      \
    \  }\n        count", "        val nums = arr.toList\n        val numsSum = nums.foldLeft(0)((sum,\
    \ num) => {\n            val digit = num % 10\n            sum + digit\n     \
    \   })\n        numsSum", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x)).toSet\n        sums.count(x => x > 0) + (nums.count(x => x <\
    \ 0) * -1)", "        val nums = arr.toSet\n        val numsSet = nums.toList\n\
    \        val numsSet2 = numsSet.map(x => if (x < 0) -x else x)\n        val numsSet3\
    \ = numsSet2.map(x => if (x < 0) -x else x)\n        val numsSet4 = numsSet3.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet5 = numsSet4.map(x => if (x < 0)\
    \ -x else x)\n        val numsSet6 = numsSet5.map(x => if (x < 0) -x else x)\n\
    \        val numsSet7 = numsSet6.map(x => if (x < 0) -x else x)\n        val numsSet8\
    \ = numsSet7.map(x => if (x < 0) -x else x)\n        val numsSet9 = numsSet8.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet10 = numsSet9.map(x => if (x <\
    \ 0) -x else x)\n        val numsSet11 = numsSet10.map(x => if (x < 0) -x else\
    \ x)\n        val numsSet12 = numsSet11.map(x => if (x < 0) -x else x)\n     \
    \   val numsSet13 = numsSet12.map(x => if (x < 0) -x else x)\n        val numsSet14\
    \ = numsSet13.map(x => if (x < 0) -x else x)\n        val numsSet15 = numsSet14.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet16 = numsSet15.map(x => if (x <\
    \ 0) -x else x)\n        val numsSet17 = numsSet16.map(x => if (x < 0) -x else\
    \ x)\n        val numsSet18 = numsSet17.map(x => if (x < 0) -x else x)\n     \
    \   val numsSet19 = numsSet18.map(x => if (x < 0) -x else x)\n        val numsSet20\
    \ = numsSet19.map(x => if (x < 0) -x else x)\n        val numsSet21 = numsSet20.map(x\
    \ => if (x < 0) -x else x)\n        val numsSet22 = numsSet21.map(x => if (x <\
    \ 0) -x else x)\n        val numsSet23 = numsSet22.map(x => if (x < 0) -x else\
    \ x)\n        val numsSet24 = numsSet23.map(x => if (x < 0) -x else x)", "   \
    \     val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n   \
    \     val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSum = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumSum = numsSumsSum.map(x => math.abs(x))\n\
    \        val numsSumsSumSumSum = numsSumsSumSum.map(x => math.abs(x))\n      \
    \  val numsSumsSumSumSumSum = numsSumsSumSumSum.map(x => math.abs(x))\n      \
    \  val numsSumsSumSumSumSumSum = numsSumsSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumsSumSumSumSumSumSum = numsSumsSumSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSumSum =\
    \ numsSumsSumSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x))\n       \
    \ val numsSumsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum", "       \
    \ val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        val count = counts.map(x\
    \ => x._2).sum\n        count", "        val nums = arr.filter(_ > 0)\n      \
    \  val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.length\n\
    \        val numsSumDigit = numsSum.toString.charAt(0)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigits)\n        val numsSumDigit = numsSum.toString.charAt(numsSumDigits\
    \ - 1)\n        numsSumDigits - numsSumDigit + 1", "        val nums = arr.toList\n\
    \        val numsSum = nums.map(x => x.toString.toInt).sum\n        nums.filter(x\
    \ => x.toString.toInt > 0).count(x => x.toString.toInt - numsSum > 0)", "    \
    \    val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n    \
    \    val numsSum = sums.toSet\n        val numsSumSum = numsSum.map(x => math.abs(x))\n\
    \        val numsSumSumSum = numsSumSum.map(x => math.abs(x))\n        val numsSumSumSumSum\
    \ = numsSumSumSum.map(x => math.abs(x))\n        val numsSumSumSumSumSum = numsSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSum = numsSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x))\n   \
    \     val num", "        val nums = arr.filter(_ > 0)\n        val numsSorted\
    \ = nums.sortBy(_ % 10)\n        val sums = numsSorted.map(x => x % 10).sum\n\
    \        sums", "        val nums = arr.toList\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   val numsThatSumToZero = counts.filter(_._2 > 0).map(_._1)\n        numsThatSumToZero.size",
  "        var count = 0\n        arr.foreach(x => {\n            val digits = x.toString.dropWhile(_\
    \ < '0').drop(1)\n            val sum = digits.foldLeft(0)(_ + _)\n          \
    \  if (sum > 0) count += 1\n        })\n        count", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x)).toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSum = numsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSum = numsSumsSum.map(x => math.abs(x)).toSet\n      \
    \  val numsSumsSumSumSum = numsSumsSumSum.map(x => math.abs(x)).toSet\n      \
    \  val numsSumsSumSumSumSum = numsSumsSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSum = numsSumsSumSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSumSum = numsSumsSumSumSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSumSum =\
    \ numsSumsSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x)).toSet\n       \
    \ val numsSumsSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumsSumSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumsSumSum", "        var count = 0\n        arr.foreach(x => {\n    \
    \        val digits = math.abs(x)\n            if (digits > 0) count += digits\n\
    \        })\n        count", "        val nums = arr.filter(x => x >= 0)\n   \
    \     val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val numsCount = counts.mapValues(_.size)\n        val\
    \ numsSum = numsCount.mapValues(_.sum)\n        numsSum.sum", "        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums", "        val nums = arr.toList\n        val numsSum = nums.map(x\
    \ => math.abs(x))\n        val numsSumSum = numsSum.sum\n        val numsSumSumSum\
    \ = numsSumSum.sum\n        val numsSumSumSumSum = numsSumSumSum.sum\n       \
    \ val numsSumSumSumSumSum = numsSumSumSumSum.sum\n        val numsSumSumSumSumSumSum\
    \ = numsSumSumSumSumSum.sum\n        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.sum\n  \
    \      val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum", "        val n = arr.length\n\
    \        val sum = 0L\n        for (i <- 0 until n) {\n            sum += arr(i)\n\
    \        }\n        if (sum > 0) {\n            sum\n        } else {\n      \
    \      arr.takeWhile(_ > 0).sum\n        }", "        val nums = arr.toSet\n \
    \       val sums = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val numsCount = nums.count(x => counts(math.abs(x))\
    \ > 1)\n        numsCount", "        val nums = arr.toList\n        val sums =\
    \ nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n\
    \        val count = counts.mapValues(_.size)\n        val result = count.mapValues(x\
    \ => x._2).sum\n        result", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n\
    \        val countsSorted = counts.toSeq.sortBy(x => x._2)\n        val countsSortedSortedByKey\
    \ = countsSorted.toSeq.sortBy(x => x._1)\n        val countsSortedSortedByKeyReversed\
    \ = countsSortedSortedByKey.reverse\n        val countsSortedSortedByKeyReversedSortedByKey\
    \ = countsSortedSortedByKeyReversed.toSeq.sortBy(x => x._1)\n        val countsSortedSortedByKeyReversedSortedByKeyReversed\
    \ = countsSortedSortedByKeyReversedSortedByKey.reverse\n        val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversed.toSeq.sortBy(x => x._1)\n\
    \        val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n  \
    \      val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.toSeq.sortBy(x\
    \ => x._1)\n        val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.toSeq.sortBy(x\
    \ => x._1)\n        val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = countsSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSorted",
  "        var sum = 0\n        var count = 0\n        for (i <- arr) {\n        \
    \    sum += i\n            if (sum > 0) {\n                count += 1\n      \
    \      }\n        }\n        count", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.count(y\
    \ => y > x))\n        numsSums.sum", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsSum = sums.toSet\n       \
    \ val numsSumSum = numsSum.map(x => math.abs(x))\n        val numsSumSumSum =\
    \ numsSumSum.map(x => math.abs(x))\n        val numsSumSumSumSum = numsSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSum = numsSumSumSumSum.map(x =>\
    \ math.abs(x))\n        val numsSumSumSumSumSumSum = numsSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x => math.abs(x))\n   \
    \     val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n", "        val nums = arr.filter(x => x >= 0)\n        val\
    \ sums = nums.map(x => math.abs(math.log10(x)))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val numsCount = counts.mapValues(_.size)\n        return\
    \ numsCount.sum", "        val nums = arr.map(_.toInt)\n        val numsSum =\
    \ nums.sum\n        val numsSumDigits = numsSum.toString.length\n        val numsSumDigit\
    \ = numsSum.toString.charAt(0)\n        val numsSumDigits = numsSumDigit.toInt\n\
    \        val numsSumDigit = numsSumDigit - numsSumDigits + 1\n        val numsSumDigits\
    \ = numsSumDigits - numsSumDigit\n        val numsSumDigit = numsSumDigit - numsSumDigits\
    \ + 1\n        val numsSumDigits = numsSumDigits - numsSumDigit\n        val numsSumDigit\
    \ = numsSumDigit - numsSumDigits + 1\n        val numsSumDigits = numsSumDigits\
    \ - numsSumDigit\n        val numsSumDigit = numsSumDigit - numsSumDigits + 1\n\
    \        val numsSumDigits = numsSumDigits - numsSumDigit\n        val numsSumDigit\
    \ = numsSumDigit - numsSumDigits + 1\n        val numsSumDigits = numsSumDigits\
    \ - numsSumDigit\n        val numsSumDigit = numsSumDigit - numsSumDigits + 1\n\
    \        val numsSumDigits = numsSumDigits - numsSumDigit\n        val numsSumDigit\
    \ = numsSumDigit - numsSumDigits + 1\n        val numsSumDigits = numsSumDigits\
    \ - numsSumDigit\n        val numsSumDigit = numsSumDigit - numsSumDigits + 1\n\
    \        val numsSumDigits = numsSumDigits - numsSumDigit\n        val numsSumDigit\
    \ = numsSumDigit - numsSumDigits + 1\n        val numsSumDigits = numsSumDigits\
    \ - numsSumDigit\n        val numsSumDigit = numsSumDigit - numsSumDigits + 1\n\
    \        val numsSumDigits = numsSumDigits - numsSumDigit\n        val numsSumDigit\
    \ = numsSumDigit - numsSumDigits + 1\n        val numsSumDigits = numsSumDigits\
    \ - numsSumDigit\n        val numsSumDigit = numsSumDigit - numsSumDigits + 1\n\
    \        val numsSumDigits = nums", "        val nums = arr.toSet\n        val\
    \ numsSet = nums.toSet\n        val numsSet2 = numsSet.toSet\n        val numsSet3\
    \ = numsSet2.toSet\n        val numsSet4 = numsSet3.toSet\n        val numsSet5\
    \ = numsSet4.toSet\n        val numsSet6 = numsSet5.toSet\n        val numsSet7\
    \ = numsSet6.toSet\n        val numsSet8 = numsSet7.toSet\n        val numsSet9\
    \ = numsSet8.toSet\n        val numsSet10 = numsSet9.toSet\n        val numsSet11\
    \ = numsSet10.toSet\n        val numsSet12 = numsSet11.toSet\n        val numsSet13\
    \ = numsSet12.toSet\n        val numsSet14 = numsSet13.toSet\n        val numsSet15\
    \ = numsSet14.toSet\n        val numsSet16 = numsSet15.toSet\n        val numsSet17\
    \ = numsSet16.toSet\n        val numsSet18 = numsSet17.toSet\n        val numsSet19\
    \ = numsSet18.toSet\n        val numsSet20 = numsSet19.toSet\n        val numsSet21\
    \ = numsSet20.toSet\n        val numsSet22 = numsSet21.toSet\n        val numsSet23\
    \ = numsSet22.toSet\n        val numsSet24 = numsSet23.toSet\n        val numsSet25\
    \ = numsSet24.toSet\n        val numsSet26 = numsSet25.toSet\n        val numsSet27\
    \ = numsSet26.toSet\n        val numsSet28 = numsSet27.toSet\n        val numsSet29\
    \ = numsSet28.toSet\n        val numsSet30 = numsSet29.toSet\n        val numsSet31\
    \ = numsSet30.toSet\n        val numsSet32 = numsSet31.toSet\n        val numsSet33\
    \ = numsSet32.toSet\n        val numsSet34 = numsSet33.toSet\n        val numsSet35\
    \ = numsSet34.toSet\n        val numsSet36 = numsSet35.toSet\n        val numsSet37\
    \ = numsSet36.toSet\n        ", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).reduce(_ + _)\n        nums.count(x => x > 0 &&\
    \ numsSum - math.abs(x) > 0)", "        val nums = arr.toList\n        var count\
    \ = 0\n        var sum = 0\n        for (i <- 0 until nums.size) {\n         \
    \   sum += nums(i)\n            if (sum > 0) {\n                count += 1\n \
    \           }\n        }\n        count", "        val nums = arr.toSet\n    \
    \    val sums = arr.map(x => math.abs(x)).toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSums = numsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSums = numsSumsSums.map(x => math.abs(x)).toSet\n   \
    \     val numsSumsSumsSumsSums = numsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSums = numsSumsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSums.map(x =>\
    \ math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.abs(x)).toSet\n        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = numsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.filter(y => y > x).size)\n        numsSums.sum",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n\
    \        nums.filter(x => x > 0).count(x => numsSum - math.abs(x) > 0)", "   \
    \     val nums = arr.toList\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until nums.size) {\n            val num = nums(i)\n      \
    \      val sum = (num / 10).floor\n            sums += sum\n        }\n      \
    \  sums.count(_ > 0)", "        val nums = arr.toSet\n        val numsSum = nums.map(x\
    \ => math.abs(x))\n        numsSum.count(x => x > 0)", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val maxCount = counts.maxBy(_._2)._2\n        val numsThatSumToZero\
    \ = counts.filter(_._2 == maxCount).map(_._1)\n        numsThatSumToZero.length",
  "        val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val count = sums.count(x => x > 0)\n        count", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsNotInSums =\
    \ numsSet.diff(sumsSet)\n        val numsNotInSumsSet = numsNotInSums.toSet\n\
    \        val numsNotInSumsSetSet = numsNotInSumsSet.toSet\n        val numsNotInSumsSetSetSet\
    \ = numsNotInSumsSetSet.toSet\n        val numsNotInSumsSetSetSetSet = numsNotInSumsSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSet = numsNotInSumsSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsNotInSumsSetSetSetSetSetSetSetSetSetSetSet = numsNotInSumsSetSetSet",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val counts = sums.groupBy(x => math.abs(x))\n        val count = counts.mapValues(_.size)\n\
    \        val result = count.filter(_._2 > 0).map(_._1).sum\n        result", " \
    \       var sum = 0L\n        var count = 0L\n        for (i <- arr.indices) {\n\
    \            sum += arr(i)\n            if (sum > 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val nums = arr.filter(x\
    \ => x > 0).map(x => math.abs(x))\n        val sums = nums.map(x => math.pow(10,\
    \ math.ceil(math.log10(x))))\n        val counts = sums.map(x => nums.count(y\
    \ => y % x == 0))\n        counts.reduce(_ + _)", "        val nums = arr.map(_.toInt)\n\
    \        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x))\n        val numsCount = counts.map(x => (x._1, x._2.length))\n\
    \        numsCount.foldLeft(0)((x, y) => x + y)", "        val nums = arr.toSet\n\
    \        val numsSum = arr.map(x => math.abs(x)).reduce(_ + _)\n        nums.count(x\
    \ => x > 0 && numsSum - math.abs(x) > 0)", "        val nums = arr.filter(_ >\
    \ 0)\n        val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(_\
    \ % 10).mapValues(_.size)\n        val maxCount = counts.max\n        val maxSum\
    \ = sums.max\n        val maxNum = nums.max\n        val minNum = nums.min\n \
    \       val minSum = sums.min\n        val minCount = counts.min\n        val\
    \ minMaxCount = counts.min\n        val minMaxSum = sums.min\n        val minMaxNum\
    \ = nums.min\n        val minMaxNums = nums.min\n        val minMaxSums = sums.min\n\
    \        val minMaxNums = nums.min\n        val minMaxSums = sums.min\n      \
    \  val minMaxNums = nums.min\n        val minMaxSums = sums.min\n        val minMaxNums\
    \ = nums.min\n        val minMaxSums = sums.min\n        val minMaxNums = nums.min\n\
    \        val minMaxSums = sums.min\n        val minMaxNums = nums.min\n      \
    \  val minMaxSums = sums.min\n        val minMaxNums = nums.min\n        val minMaxSums\
    \ = sums.min\n        val minMaxNums = nums.min\n        val minMaxSums = sums.min\n\
    \        val minMaxNums = nums.min\n        val minMaxSums = sums.min\n      \
    \  val minMaxNums = nums.min\n        val minMaxSums = sums.min\n        val minMaxNums\
    \ = nums.min\n        val minMaxSums = sums.min\n        val minMaxNums = nums.min\n\
    \        val minMaxSums = sums.min\n        val minMaxNums = nums.min\n      \
    \  val minMaxSums = sums.min\n        val minMaxNums = nums.min\n        val minMaxSums\
    \ = sums.min\n        val minMaxNums = nums.min\n        val minMaxSums = sums.min\n\
    \        val minMaxNums = nums.min\n        val minMaxSums = sums.min\n      \
    \  val minMaxNums = nums.min\n        val minMaxSums = sums.min\n        val minMaxNums\
    \ = nums.min\n        val minMaxSums = sums.min\n        val minMaxNums = nums.min\n\
    \        val minMaxSums = sums.min\n        val minMaxNums = nums.min\n      \
    \  val minMax", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n        val\
    \ countsSorted = counts.toSeq.sortBy(x => x._2)\n        val countsSortedSortedByCount\
    \ = countsSorted.sortBy(x => x._1)\n        val countsSortedSortedByCountSortedByCount\
    \ = countsSortedSortedByCount.sortBy(x => x._2)\n        val countsSortedSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCount.sortBy(x => x._3)\n        val countsSortedSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCount.sortBy(x => x._4)\n  \
    \      val countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCountSortedByCount.sortBy(x\
    \ => x._5)\n        val countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount.sortBy(x\
    \ => x._6)\n        val countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount.sortBy(x\
    \ => x._7)\n        val countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount.sortBy(x\
    \ => x._8)\n        val countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount.sortBy(x\
    \ => x._9)\n        val countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = countsSortedSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedBy",
  "        val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n        nums.count(x\
    \ => x > 0)", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   val count = counts.mapValues(_.size)\n        return count.mapValues(x =>\
    \ x._2).sum", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        sums.count(_ > 0)", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.count(y => y > x))\n        numsSums.sum", "        val nums = arr.filter(_\
    \ > 0)\n        val sum = nums.sum\n        val negativeSum = sum % 10\n     \
    \   val negativeNums = nums.filter(_ < 0)\n        val negativeSumNums = negativeNums.map(_\
    \ % 10)\n        val positiveSumNums = nums.filter(_ > 0)\n        val positiveSum\
    \ = positiveSumNums.sum\n        val positiveNums = positiveSumNums.filter(_ <\
    \ 0)\n        val positiveSumNumsNegative = positiveSumNums.filter(_ < 0)\n  \
    \      val positiveSumNumsPositive = positiveSumNums.filter(_ > 0)\n        val\
    \ positiveNumsNegative = positiveNums.filter(_ < 0)\n        val positiveNumsPositive\
    \ = positiveNums.filter(_ > 0)\n        val positiveSumNumsPositiveNegative =\
    \ positiveSumNumsPositive.filter(_ < 0)\n        val positiveSumNumsPositivePositive\
    \ = positiveSumNumsPositive.filter(_ > 0)\n        val positiveNumsPositiveNegative\
    \ = positiveNumsPositive.filter(_ < 0)\n        val positiveNumsPositivePositive\
    \ = positiveNumsPositive.filter(_ > 0)\n        val positiveSumNumsPositivePositiveNegative\
    \ = positiveSumNumsPositivePositive.filter(_ < 0)\n        val positiveSumNumsPositivePositivePositive\
    \ = positiveSumNumsPositivePositive.filter(_ > 0)\n        val positiveNumsPositiveNegativeNegative\
    \ = positiveNumsPositiveNegative.filter(_ < 0)\n        val positiveNumsPositivePositiveNegative\
    \ = positiveNumsPositivePositive.filter(_ > 0)\n        val positiveSumNumsPositivePositivePositiveNegative\
    \ = positiveSumNumsPositivePositiveNegative.filter(_ < 0)\n        val positiveSumNumsPositivePositivePositivePositive\
    \ = positiveSumNumsPositivePositivePositive.filter(_ > 0)\n        val positiveNumsPositiveNegativeNegativeNegative\
    \ = positiveNumsPositiveNegativeNegative.filter(_ < 0)\n        val positiveNumsPositivePositiveNegativeNegative\
    \ = positiveNumsPositivePositiveNegative.filter(_ > 0)\n        val positiveSumNumsPositivePositivePositiveNegativeNegative\
    \ = positiveSumNumsPositivePositivePositiveNegativeNegative.filter(_ < 0)\n  \
    \      val positiveSumNumsPositivePositivePositivePositiveNegative = positiveSumNumsPositivePositivePositiveNegativeNegative.filter(_\
    \ > 0)\n        val positiveNumsPositiveNegativeNegativeNegativeNegative = positiveNumsPositiveNegativeNegativeNegative.filter(_\
    \ < 0)\n        val positiveNumsPositivePositiveNegativeNegativeNegative = positiveNumsPositivePositiveNegativeNegativeNegative.filter(_\
    \ > 0)\n        val positive", "        var sum = 0L\n        for(i <- 0 until\
    \ arr.length) {\n            sum += arr(i)\n        }\n        sum", "       \
    \ val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n       \
    \ sums.count(x => x > 0) + (nums.count(x => x < 0) * math.abs(nums.head))", " \
    \       val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n\
    \        nums.filter(x => x > 0).count(x => numsSum - math.abs(x) > 0)", "   \
    \     val nums = arr.toSet\n        val numsSum = arr.filter(_ > 0).sum\n    \
    \    numsSum.toLong", "        val nums = arr.toSet\n        val numsCount = arr.count(x\
    \ => nums.contains(x))\n        numsCount", "        val nums = arr.toSet\n  \
    \      val sums = arr.map(x => math.abs(x))\n        val numsSum = sums.toSet\n\
    \        val numsSumLen = numsSum.size\n        val numsSumLenMinusOne = numsSumLen\
    \ - 1\n        val numsSumLenMinusOneMinusOne = numsSumLen - 2\n        val numsSumLenMinusOneMinusTwo\
    \ = numsSumLen - 3\n        val numsSumLenMinusOneMinusThree = numsSumLen - 4\n\
    \        val numsSumLenMinusOneMinusFour = numsSumLen - 5\n        val numsSumLenMinusOneMinusFive\
    \ = numsSumLen - 6\n        val numsSumLenMinusOneMinusSix = numsSumLen - 7\n\
    \        val numsSumLenMinusOneMinusSeven = numsSumLen - 8\n        val numsSumLenMinusOneMinusEight\
    \ = numsSumLen - 9\n        val numsSumLenMinusOneMinusNine = numsSumLen - 10\n\
    \        val numsSumLenMinusOneMinusTen = numsSumLen - 11\n        val numsSumLenMinusOneMinusEleven\
    \ = numsSumLen - 12\n        val numsSumLenMinusOneMinusTwelve = numsSumLen -\
    \ 13\n        val numsSumLenMinusOneMinusThirteen = numsSumLen - 14\n        val\
    \ numsSumLenMinusOneMinusFourteen = numsSumLen - 15\n        val numsSumLenMinusOneMinusFifteen\
    \ = numsSumLen - 16\n        val numsSumLenMinusOneMinusSixteen = numsSumLen -\
    \ 17\n        val numsSumLenMinusOneMinusSeventeen = numsSumLen - 18\n       \
    \ val numsSumLenMinusOneMinusEighteen = numsSumLen - 19\n        val numsSumLenMinusOneMinusNineteen\
    \ = numsSumLen - 20\n        val numsSumLenMinusOneMinusTwenty = numsSumLen -\
    \ 21\n        val numsSumLenMinusOneMinusThirty = numsSumLen - 22\n        val\
    \ numsSumLenMinusOneMinus", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).sum\n        nums.filter(x => x > 0).count(x =>\
    \ numsSum - math.abs(x) > 0)", "        var sum = 0L\n        for (i <- arr) {\n\
    \            sum += i\n        }\n        if (sum > 0) {\n            sum\n  \
    \      } else {\n            arr.takeWhile(x => x < 0).sum\n        }", "    \
    \    val nums = arr.map(_.toInt)\n        val sums = nums.map(x => x.toString.toInt)\n\
    \        val counts = sums.groupBy(x => x).mapValues(_.size)\n        val result\
    \ = counts.filter(_._2 > 0).map(_._2).sum\n        result", "        val nums\
    \ = arr.toSet\n        val numsCount = nums.count(x => x > 0)\n        val numsSum\
    \ = nums.count(x => x >= 0)\n        numsCount - numsSum", "        val nums =\
    \ arr.toSet\n        val numsSum = nums.foldLeft(0L){ (sum, num) => sum + num\
    \ }\n        numsSum", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSum = nums.map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet2 = numsSum.filter(x => x > 0).map(x\
    \ => math.abs(x)).reduce(_ + _)\n        val numsSumSet3 = numsSum.filter(x =>\
    \ x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet4 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet5 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet6 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet7 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet8 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet9 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet10 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet11 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet12 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet13 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet14 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet15 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + _)\n        val numsSumSet16 = numsSum.filter(x\
    \ => x > 0).map(x => math.abs(x)).reduce(_ + ", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong",
  "        val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        val\
    \ numsSumDigits = numsSum.toString.length\n        val numsDigits = arr.length\n\
    \        val numsDigitSum = nums.map(_.toString.length).sum\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val numsDigitSumDigits = numsDigitSum.toString.length\n\
    \        val numsDigitSumDigits = numsDigitSum.toString.length\n        val numsDigitSumDigits\
    \ = numsDigitSum.toString.length\n        val nums", "        val n = arr.size\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        arr.foreach(x =>\
    \ sums += x)\n        sums.sum", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_\
    \ > x).size)\n        numsSums.sum", "        val nums = arr.filter(x => x >=\
    \ 0)\n        val sums = nums.map(x => math.abs(x)).sum\n        nums.count(x\
    \ => math.abs(x) > sums)", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_ > x).size)\n\
    \        numsSums.sum", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val numsSums = nums.map(x => math.abs(x))\n       \
    \ val numsSumsSet = numsSums.toSet\n        val numsSumsSetSet = numsSumsSet.toSet\n\
    \        val numsSumsSetSetSet = numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet\
    \ = numsSumsSetSetSet.toSet\n        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n    \
    \    val numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSet.toSet\n   \
    \     val numsSumsSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSetSetSet = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSet", "        val nums = arr.filter(x =>\
    \ x >= 0).map(x => math.abs(x))\n        nums.count(x => x > 0)", "        val\
    \ nums = arr.toSet\n        val numsSet = nums.toSet\n        val numsSet2 = nums.toSet\n\
    \        val numsSet3 = nums.toSet\n        val numsSet4 = nums.toSet\n      \
    \  val numsSet5 = nums.toSet\n        val numsSet6 = nums.toSet\n        val numsSet7\
    \ = nums.toSet\n        val numsSet8 = nums.toSet\n        val numsSet9 = nums.toSet\n\
    \        val numsSet10 = nums.toSet\n        val numsSet11 = nums.toSet\n    \
    \    val numsSet12 = nums.toSet\n        val numsSet13 = nums.toSet\n        val\
    \ numsSet14 = nums.toSet\n        val numsSet15 = nums.toSet\n        val numsSet16\
    \ = nums.toSet\n        val numsSet17 = nums.toSet\n        val numsSet18 = nums.toSet\n\
    \        val numsSet19 = nums.toSet\n        val numsSet20 = nums.toSet\n    \
    \    val numsSet21 = nums.toSet\n        val numsSet22 = nums.toSet\n        val\
    \ numsSet23 = nums.toSet\n        val numsSet24 = nums.toSet\n        val numsSet25\
    \ = nums.toSet\n        val numsSet26 = nums.toSet\n        val numsSet27 = nums.toSet\n\
    \        val numsSet28 = nums.toSet\n        val numsSet29 = nums.toSet\n    \
    \    val numsSet30 = nums.toSet\n        val numsSet31 = nums.toSet\n        val\
    \ numsSet32 = nums.toSet\n        val numsSet33 = nums.toSet\n        val numsSet34\
    \ = nums.toSet\n        val numsSet35 = nums.toSet\n        val numsSet36 = nums.toSet\n\
    \        val numsSet37 = nums.toSet\n        val numsSet38 = nums.toSet\n    \
    \    val numsSet39 = nums.toSet\n        val numsSet40 = nums.toSet\n        val\
    \ numsSet41 = nums.toSet\n        val numsSet42 = nums.toSet\n        val numsSet43\
    \ = nums.toSet\n", "        val nums = arr.toSet\n        val numsSum = arr.map(x\
    \ => math.abs(x))\n        val numsSumSum = numsSum.sum\n        val numsSumSumSum\
    \ = numsSumSum.sum\n        val numsSumSumSumSum = numsSumSumSum.sum\n       \
    \ val numsSumSumSumSumSum = numsSumSumSumSum.sum\n        val numsSumSumSumSumSumSum\
    \ = numsSumSumSumSumSum.sum\n        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSumSumSum.sum\n\
    \        val numsSumSumSumSumSumSumSumSumSumSumSum", "        val nums = arr.filter(_\
    \ > 0)\n        val numsSum = nums.sum\n        val numsDigits = nums.map(_.toString.toInt)\n\
    \        val numsFirstDigits = nums.map(_.toString.toInt)\n        val numsFirstSignedDigits\
    \ = nums.map(_.toString.toInt).map(_.signum)\n        val numsFirstSignedDigitsSum\
    \ = numsFirstSignedDigits.sum\n        val numsFirstSignedDigitsSumDigits = numsFirstSignedDigitsSum.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigits = numsFirstSignedDigitsSumDigits\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigits.toString.toInt\n\
    \        val numsFirstSignedDigitsSumDigitsDigitsDigitsDigitsDigitsDigits = numsFirstSignedDigitsSum",
  "        val nums = arr.filter(x => x >= 0).map(x => math.abs(x))\n        val sum\
    \ = nums.sum\n        val numsGreaterThanZero = nums.filter(x => x >= 0).size\n\
    \        val numsLessThanZero = nums.filter(x => x < 0).size\n        val numsGreaterThanZeroAndLessThanZero\
    \ = numsGreaterThanZero - numsLessThanZero\n        val numsGreaterThanZeroAndLessThanZeroAndMoreThanZero\
    \ = numsGreaterThanZeroAndLessThanZero - numsGreaterThanZeroAndLessThanZero\n\
    \        val numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZero\
    \ = numsGreaterThanZeroAndLessThanZeroAndMoreThanZero - numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZero\n\
    \        val numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ = numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZero - numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\n\
    \        val numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ = numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ - numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\n\
    \        val numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ = numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ - numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\n\
    \        val numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ = numsGreaterThanZeroAndLessThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZeroAndMoreThanZero\
    \ - nums", "        val nums = arr.toSet\n        val numsSum = arr.map(x => if\
    \ (x < 0) -x else x).sum\n        nums.filter(x => x >= 0).count(x => x >= numsSum)",
  "        val nums = arr.filter(_ > 0)\n        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.map(x => math.abs(x))\n        val sumsSorted\
    \ = sums.sortWith(_ < _)\n        val sumsSortedCount = sumsSorted.length\n  \
    \      val numsSortedCount = numsSorted.length\n        val numsSortedSum = numsSorted.sum\n\
    \        val numsSortedSumCount = numsSortedSum.length\n        val numsSortedSumDigits\
    \ = numsSortedSum.toString.length\n        val numsSortedSumDigitsCount = numsSortedSumDigits.length\n\
    \        val numsSortedSumDigitsSum = numsSortedSumDigits.sum\n        val numsSortedSumDigitsSumCount\
    \ = numsSortedSumDigitsSum.length\n        val numsSortedSumDigitsSumDigits =\
    \ numsSortedSumDigitsSum.toString.length\n        val numsSortedSumDigitsSumDigitsCount\
    \ = numsSortedSumDigitsSumDigits.length\n        val numsSortedSumDigitsSumDigitsSum\
    \ = numsSortedSumDigitsSumDigits.sum\n        val numsSortedSumDigitsSumDigitsSumCount\
    \ = numsSortedSumDigitsSumDigitsSum.length\n        val numsSortedSumDigitsSumDigitsSumDigits\
    \ = numsSortedSumDigitsSumDigitsSum.toString.length\n        val numsSortedSumDigitsSumDigitsSumDigitsCount\
    \ = numsSortedSumDigitsSumDigitsSumDigitsSum.length\n        val numsSortedSumDigitsSumDigitsSumDigitsSum\
    \ = numsSortedSumDigitsSumDigitsSumDigitsSum.toString.length\n        val numsSortedSumDigitsSumDigitsSumDigitsSumCount\
    \ = numsSortedSumDigitsSumDigitsSumDigitsSum.length\n        val numsSortedSumDigitsSumDigitsSumDigitsSumDigits\
    \ = numsSortedSumDigitsSumDigitsSumDigitsSumDigitsCount.toString.length\n    \
    \    val numsSortedSumDigitsSumDigitsSumDigitsSumDigitsCount = numsSortedSumDigitsSumDigitsSumDigitsSumDigitsSumCount.toString.length\n\
    \        val numsSortedSumDigitsSumDigitsSumDigitsSumDigitsSum = numsSortedSumDigitsSumDigitsSumDigitsSumDigitsSumDigitsCount.toString.length\n\
    \        val ", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_ > x).length)\n\
    \        numsSums.sum", "        val n = arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            val digits = arr(i).abs\n         \
    \   val sum = digits % 10\n            sums += sum\n        }\n        sums.sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSum = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSumSum = numsSumsSum.map(x => math.abs(x))\n\
    \        val numsSumsSumSumSum = numsSumsSumSum.map(x => math.abs(x))\n      \
    \  val numsSumsSumSumSumSum = numsSumsSumSumSum.map(x => math.abs(x))\n      \
    \  val numsSumsSumSumSumSumSum = numsSumsSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumsSumSumSumSumSumSum = numsSumsSumSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSumSum = numsSumsSum",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        sums.count(_ > 0)", "        val nums = arr.filter(x => x >= 0)\n   \
    \     val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x)).mapValues(_.size)\n        counts.foldLeft(0)((acc, x) => acc\
    \ + x)", "        val nums = arr.toSet\n        val numsCount = nums.count\n \
    \       val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.reverse.map(_.toInt)\n\
    \        val numsSumDigitCount = numsSumDigits.count\n        val numsSumDigitCount\
    \ = numsSumDigits.sum\n        val numsSumDigitCount = numsSumDigits.count\n \
    \       val numsSumDigitCount = numsSumDigits.sum\n        val numsSumDigitCount\
    \ = numsSumDigits.count\n        val numsSumDigitCount = numsSumDigits.sum\n \
    \       val numsSumDigitCount = numsSumDigits.count\n        val numsSumDigitCount\
    \ = numsSumDigits.sum\n        val numsSumDigitCount = numsSumDigits.count\n \
    \       val numsSumDigitCount = numsSumDigits.sum\n        val numsSumDigitCount\
    \ = numsSumDigits.count\n        val numsSumDigitCount = numsSumDigits.sum\n \
    \       val numsSumDigitCount = numsSumDigits.count\n        val numsSumDigitCount\
    \ = numsSumDigits.sum\n        val numsSumDigitCount = numsSumDigits.count\n \
    \       val numsSumDigitCount = numsSumDigits.sum\n        val numsSumDigitCount\
    \ = numsSumDigits.count\n        val numsSumDigitCount = numsSumDigits.sum\n \
    \       val numsSumDigitCount = numsSumDigits.count\n        val numsSumDigitCount\
    \ = numsSumDigits.sum\n        val numsSumDigitCount = numsSumDigits.count\n \
    \       val numsSumDigitCount = numsSumDigits.sum\n        val numsSumDigitCount\
    \ = numsSumDigits.count\n        val numsSumDigitCount = numsSumDigits.sum\n \
    \       val numsSumDigitCount = numsSumDigits.count\n        val numsSumDigitCount\
    \ = numsSumDigits.sum\n        val numsSumDigitCount = numsSumDigits.count\n \
    \       val numsSumDigitCount = numsSumDigits.sum\n        val numsSumDigitCount\
    \ = numsSumDigits.count\n        val numsSumDigitCount = numsSumDigits.sum\n \
    \       val numsSumDigitCount = numsSumDigits.count\n        val numsSumDigitCount\
    \ = numsSumDigits.sum\n        val numsSumDigitCount = numsSumDigits.count\n \
    \       val num", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   counts.map(_._2).sum", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSetSet = numsSums.toSet\n        val numsSumsSetSetSet\
    \ = numsSums.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet",
  "        val n = arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n) {\n            val digits = arr(i).abs\n        \
    \    val sum = digits % 10\n            sums += sum\n        }\n        sums.sum",
  "        val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val count = sums.count(x => x > 0)\n        count", "        val nums\
    \ = arr.toList\n        val numsSum = nums.map(_.toString.toInt).sum\n       \
    \ nums.count(numsSum > 0)", "        val nums = arr.filter(_ > 0)\n        val\
    \ numsSum = nums.sum\n        val numsDigits = nums.map(_.toString.length).sum\n\
    \        if (numsDigits > numsSum) {\n            nums.count(_ > 0)\n        }\
    \ else {\n            nums.count(_ < 0)\n        }", "        val nums = arr.toSet\n\
    \        val numsSet = nums.toSet\n        val numsSum = nums.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet = numsSum.toSet\n        val numsSumSet2 = numsSumSet.filter(x\
    \ => x > 0)\n        val numsSumSet3 = numsSumSet2.filter(x => x < 10)\n     \
    \   val numsSumSet4 = numsSumSet3.filter(x => x > 0)\n        val numsSumSet5\
    \ = numsSumSet4.filter(x => x < 10)\n        val numsSumSet6 = numsSumSet5.filter(x\
    \ => x > 0)\n        val numsSumSet7 = numsSumSet6.filter(x => x < 10)\n     \
    \   val numsSumSet8 = numsSumSet7.filter(x => x > 0)\n        val numsSumSet9\
    \ = numsSumSet8.filter(x => x < 10)\n        val numsSumSet10 = numsSumSet9.filter(x\
    \ => x > 0)\n        val numsSumSet11 = numsSumSet10.filter(x => x < 10)\n   \
    \     val numsSumSet12 = numsSumSet11.filter(x => x > 0)\n        val numsSumSet13\
    \ = numsSumSet12.filter(x => x < 10)\n        val numsSumSet14 = numsSumSet13.filter(x\
    \ => x > 0)\n        val numsSumSet15 = numsSumSet14.filter(x => x < 10)\n   \
    \     val numsSumSet16 = numsSumSet15.filter(x => x > 0)\n        val numsSumSet17\
    \ = numsSumSet16.filter(x => x < 10)\n        val numsSumSet18 = numsSumSet17.filter(x\
    \ => x > 0)\n        val numsSumSet19 = numsSumSet18.filter(x => x < 10)\n   \
    \     val numsSumSet20 = numsSumSet19.filter(x => x > 0)\n        val numsSumSet21\
    \ = numsSumSet20.filter(x => x < 10)\n        val numsSumSet22 = numsSumSet21.filter(x\
    \ => x > 0)\n        val numsSumSet23 = numsSumSet22.filter(x => x < 10)\n   \
    \     val numsSumSet24 = numsSumSet23.filter(x => x > 0)\n        val numsSumSet25\
    \ = numsSumSet24.filter(x => x < 10)\n        val numsSumSet26 = numsSumSet25.filter(x\
    \ => x > ", "        var count = 0L\n        for(i <- 0 until arr.length) {\n\
    \            val digits = arr(i).abs\n            val sum = digits % 10\n    \
    \        if(sum > 0) {\n                count += 1\n            }\n        }\n\
    \        count", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet3 = numsSums.map(x => math.abs(x))\n        val numsSumsSet4\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet5 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet6 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet7 = numsSums.map(x => math.abs(x))\n        val numsSumsSet8\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet9 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet10 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet11 = numsSums.map(x => math.abs(x))\n        val numsSumsSet12\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet13 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet14 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet15 = numsSums.map(x => math.abs(x))\n        val numsSumsSet16\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet17 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet18 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet19 = numsSums.map(x => math.abs(x))\n        val numsSumsSet20\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet21 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet22 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet23 = numsSums.map(x => math.abs(x))\n        val numsSumsSet24\
    \ = nums", "        val nums = arr.filter(x => x >= 0)\n        val sums = nums.map(x\
    \ => math.abs(x))\n        val count = sums.count(x => x > 0)\n        count",
  "        val nums = arr.map(x => if (x < 0) -x else x).filter(x => x >= 0)\n   \
    \     val sums = nums.map(x => math.abs(x))\n        val counts = sums.groupBy(x\
    \ => math.abs(x)).mapValues(_.length)\n        counts.foldLeft(0)((acc, x) =>\
    \ acc + x)", "        var sum = 0L\n        arr.foreach(x => sum += x)\n     \
    \   arr.filter(x => x > 0).length", "        val nums = arr.map(_.toInt)\n   \
    \     val sums = nums.map(x => if (x < 0) -x else x)\n        val counts = sums.groupBy(x\
    \ => x).mapValues(_.size)\n        counts.foldLeft(0)((acc, x) => acc + x)", " \
    \       val nums = arr.toSet\n        val numsSet = nums.toSeq\n        val numsSetLen\
    \ = numsSet.length\n        val numsSetSum = numsSet.sum\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigit", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsWithSum = sums.filter(x => x >= 0)\n        numsWithSum.count(x => x > 0)",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n        val numsSumsSet3\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet4 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet5 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet6 = numsSums.map(x => math.abs(x))\n        val numsSumsSet7\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet8 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet9 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet10 = numsSums.map(x => math.abs(x))\n        val numsSumsSet11\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet12 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet13 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet14 = numsSums.map(x => math.abs(x))\n        val numsSumsSet15\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet16 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet17 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet18 = numsSums.map(x => math.abs(x))\n        val numsSumsSet19\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet20 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet21 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet22 = numsSums.map(x => math.abs(x))\n        val numsSumsSet23\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet24 = nums", "     \
    \   val nums = arr.filter(x => x >= 0).map(x => Math.abs(x))\n        val sum\
    \ = nums.sum\n        val numsGreaterThanZero = nums.filter(x => x >= 0)\n   \
    \     val numsGreaterThanZeroSum = numsGreaterThanZero.sum\n        val numsGreaterThanZeroSumDigits\
    \ = numsGreaterThanZeroSum.toString.toInt\n        val numsGreaterThanZeroSumDigitsLessThanTen\
    \ = numsGreaterThanZeroSumDigits - 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTen - 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTen - 10\n     \
    \   val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTen -\
    \ 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ - 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ - 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ - 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ = numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTenLessThanTen\
    \ - 10\n        val numsGreaterThanZeroSumDigitsLessThanTenLessThanTenLessThanTen",
  "        val n = arr.size\n        val m = arr.map(_.toString.toInt).sum\n     \
    \   val result = arr.count(x => x > 0 && x.toString.toInt.toLong % m == 0)\n \
    \       result", "        val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n\
    \        nums.count(x => x > 0)", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x => x >\
    \ 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.toInt\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.toLong\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbs = positiveSumsSumAbs.toLong\n        val\
    \ negativeSumsSumAbsSumAbs = negativeSumsSumAbs.toLong\n        val positiveSumsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbs.toInt\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.toInt\n        val positiveSumsSumAbsSumAbsSum =\
    \ positiveSumsSumAbsSumAbs.toLong\n        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbsSumAbs = positiveSumsSumAbsSumAbs.toLong\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = negativeSumsSumAbsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbs.toInt\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbs.toInt\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbs.toLong\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbsSumAbsSumAbs.toLong\n\
    \        val positiveSum", "        var sum = 0L\n        for (i <- arr) {\n \
    \           sum += i\n        }\n        if (sum < 0) sum *= -1\n        sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.count(y => y > x))\n        numsSums.sum",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val counts = sums.groupBy(x => math.abs(x))\n        counts.map(_._2.size).sum",
  "        val nums = arr.toList\n        val numsSum = nums.map(x => if (x < 0) -x\
    \ else x).sum\n        numsSum", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_\
    \ > x).length)\n        numsSums.sum", "        var sum = 0\n        var count\
    \ = 0\n        arr.foreach(x => sum += x)\n        arr.foreach(x => if (sum >\
    \ 0) count += 1)\n        count", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSum = sums.toSet\n        val numsSumSum\
    \ = numsSum.map(x => math.abs(x))\n        val numsSumSumSum = numsSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSum = numsSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumSumSumSumSum = numsSumSumSumSum.map(x => math.abs(x))\n  \
    \      val numsSumSumSumSumSumSum = numsSumSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumSumSumSumSumSumSum = numsSumSumSumSumSumSum.map(x => math.abs(x))\n\
    \        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSum.map(x =>\
    \ math.abs(x))\n        val numsSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumSumSumSumSumSumSumSumSumSumSum = numsSumSumSumSumSumSumSumSumSumSumSumSum.",
  "        val nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n\
    \        nums.count(x => x > 0 && numsSum - math.abs(x) > 0)", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum", "       \
    \ val nums = arr.toSet\n        val numsSum = nums.map(x => math.abs(x))\n   \
    \     val numsSumSum = numsSum.reduce((x, y) => x + y)\n        numsSumSum"]
stop_tokens:
- "\n    }\n"
