language: scala
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n                if(i %\
    \ j == 0){\n                    factorization += j\n                    break\n\
    \                }\n            }\n        }\n        factorization.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyi7denn.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyi7denn.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyi7denn.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMaxMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMins = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMaxMin = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMinMaxMinMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb5jf51c9.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5jf51c9.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb5jf51c9.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5jf51c9.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb5jf51c9.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5jf51c9.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    if(n%i == 0){\n                factorization.add(i)\n                for(j\
    \ <- factorization.toList to n by i){\n                    factorizationList +=\
    \ j\n                }\n            }\n        }\n        factorizationList.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1et82_j.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1et82_j.scala:9:32 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1et82_j.scala:10:22\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                     \
    \ ^\e[0m\n\e[31m   |\e[0m                      Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer.empty[Long]\n        var\
    \ factor = 2\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                while (factor <=\
    \ n && n % factor == 0) {\n                    factor += 1\n                }\n\
    \            }\n            factor += 1\n        }\n        factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz9p4r4kq.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:15:12 ---------------------"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                factorization += factor\n                n /= factor\n      \
    \      }\n            factor += 1\n        }\n        factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpraysd73m.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpraysd73m.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n != 1) {\n            while (n % factor != 0) {\n\
    \                factorization += factor\n                n /= factor\n      \
    \      }\n            factorization += factor\n            factor += 1\n     \
    \   }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphwk6bikq.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphwk6bikq.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 2\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                n /= factor\n  \
    \          } else {\n                factor += 1\n            }\n        }\n \
    \       factorization.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83mxtkuq.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp83mxtkuq.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = factorization(n).reverse\n        factorization.foreach(x => factors += x)\n\
    \        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp271_0rvz.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp271_0rvz.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).reverse\n\
    \e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m       \
    \                     Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                n /= factor\n         \
    \   } else {\n                factor += 1\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgi5fufao.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgi5fufao.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4op613kz.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4op613kz.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSize\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4op613kz.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mfactorizationListSize is already defined as \e[33mvalue\e[0m \e[35mfactorizationListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4op613kz.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4op613kz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = mutable.ArrayBuffer.empty[Long]\n\
    \            for(j <- 2 to i by 2){\n                if(i % j == 0){\n       \
    \             factors += j\n                }\n            }\n            factorization\
    \ += factors.toList.size\n        }\n        factorization.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppml17zgq.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppml17zgq.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppml17zgq.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxMaxMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMaxMaxMins = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMin = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMin =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMins =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMinMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMinMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMinMins = mutable.ArrayBuffer.empty[\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuk6rq25b.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpuk6rq25b.scala:8:28 -------------------------\e[0m\e[0m\n\e[31m8\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk6rq25b.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk6rq25b.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuk6rq25b.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk6rq25b.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                factor *= factor\n\
    \            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k5j0fve.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = mutable.ArrayBuffer.empty[Long]\n\
    \            for(j <- 2 to i by 2){\n                if(i % j == 0){\n       \
    \             factors += j\n                }\n            }\n            factorization\
    \ += factors.toList\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91xlcymy.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp91xlcymy.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91xlcymy.scala:10:26\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactors\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpng9wm68_.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpng9wm68_.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \ |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpng9wm68_.scala:9:22 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpng9wm68_.scala:10:21 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpng9wm68_.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpng9wm68_.scala:12:27 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           N"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationPrimeFactorizationPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvcnbl9s.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbvcnbl9s.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbvcnbl9s.scala:9:21 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbvcnbl9s.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbvcnbl9s.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbvcnbl9s.scala:12:34 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n \
    \       while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2b5f65.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqf2b5f65.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach { f =>\n            factors\
    \ += f\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqo1bk2c.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeqo1bk2c.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5yqj6gmt.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5yqj6gmt.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5yqj6gmt.scala:9:21 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5yqj6gmt.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5yqj6gmt.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5yqj6gmt.scala:12:29 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n) \n        for (i <- factorization.indices) {\n          \
    \  val factor = (factorization(i) * factors(i)) % n\n            factors += factor\n\
    \        }\n        factors.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyudeesdv.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyudeesdv.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m   \
    \                         Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 2\n        while(factor <= n) {\n            while(n % factor == 0) {\n  \
    \              factorization += factor\n                n /= factor\n        \
    \    }\n            factor += 1\n        }\n        factorization.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynf5lu3t.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpynf5lu3t.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach(f => factors += f)\n    \
    \    factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dbh64g0.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5dbh64g0.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPri\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt73rxwc8.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt73rxwc8.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt73rxwc8.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpt73rxwc8.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt73rxwc8.scala:9:29 ------------------------"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList2 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList3 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList4 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList7 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList8 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList9 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList12 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList13 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList14 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList16 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList17 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList18 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList19 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList22 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList23 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList24 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList27 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList28 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList29\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16j9gwlz.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16j9gwlz.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp16j9gwlz.scala:9:32 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16j9gwlz.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp16j9gwlz.scala:11:37 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCountList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16j9gwlz.scala:12:38\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationCountList2\e[0m = mutable.ArrayBuffer.empty"
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountMaxs = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMax\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMax = mutable.ListBuffer.empty[Long]\n  \
    \      val factorizationCountMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationCountMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n  \
    \      val factorizationCountMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicz8m42y.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxs\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxs is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpicz8m42y.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMax\e\
    [0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMax\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpicz8m42y.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs\e\
    [0m = mutable.ListBuffer.empty\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpicz8m42y.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^"
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeSize = factorizationSize / 2\n        val factorizationPrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimeSize =\
    \ factorizationPrimeSize / 2\n        val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeSize = factorizationPrimePrimeSize /\
    \ 2\n        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeSize = factorizationPrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize / 2\n        val\
    \ factorizationPrimePrimePrimePrimePrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0ifdrh5.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx0ifdrh5.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx0ifdrh5.scala:10:34 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx0ifdrh5.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimes\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx0ifdrh5.scala:14:44 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimes\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx0ifdrh5.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfacto"
  stdout: ''
  timestamp: 1660028565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        while(n > 1) {\n            factorization.add(n)\n\
    \            n /= 2\n        }\n        factorization.foreach(n => {\n       \
    \     while(factorization.contains(n)) {\n                factorizationList +=\
    \ n\n                n /= 2\n            }\n        })\n        factorizationList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vhkpop5.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vhkpop5.scala:9:32 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9vhkpop5.scala:12:14\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            n /= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationIndexMax = factorization.length\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7w9r5enn.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationIndexMaxInt\e\
    [0m = factorizationIndexMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexMaxInt is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexMaxInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7w9r5enn.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationIndexMaxLong\e\
    [0m = factorizationIndexMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexMaxLong is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexMaxLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7w9r5enn.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationIndexMaxDouble\e\
    [0m = factorizationIndexMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexMaxDouble is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexMaxDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7w9r5enn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationIndexMaxFloat\e\
    [0m = factorizationIndexMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexMaxFloat is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexMaxFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[3"
  stdout: ''
  timestamp: 1660028565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = n / i\n            factorization\
    \ += factors\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvutmdkw.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmvutmdkw.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimes = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsOfPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmkizhvhz.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkizhvhz.scala:8:22\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkizhvhz.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkizhvhz.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmkizhvhz.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmkizhvhz.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misPrimeFactor\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n).reverse\n        factorization.foreach(f => factors += f)\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzwxvn5ti.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzwxvn5ti.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n).reverse\n\
    \e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m       \
    \                     Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCount = 0\n        var factorizationFactor = 0\n\
    \        var factorizationFactorCount = 0\n        var factorizationFactorIndex\
    \ = 0\n        while(n != 1) {\n            factorizationCount += 1\n        \
    \    factorizationFactor += n\n            factorizationFactorCount += 1\n   \
    \         factorizationIndex += 1\n            factorization = factorization :+\
    \ factorizationFactor\n            factorizations = factorizations :+ factorizationIndex\n\
    \            n /= factorizationFactor\n        }\n        factorizations.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlyvcrr_.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmlyvcrr_.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmlyvcrr_.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            factorizationFactor += n\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E052] Type\
    \ Error: /tmp/tmpmlyvcrr_.scala:20:26 -----------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            factorization = factorization :+ factorizationFactor\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val factorization\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmlyvcrr_.scala:21:27 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            factorizations = factorizations :+ factorizationIndex\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val factorizations\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmlyvcrr_.scala:22:14 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n /= facto"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationFactorsCountSum = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8fpw_a4.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu8fpw_a4.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpu8fpw_a4.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpu8fpw_a4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquar"
  stdout: ''
  timestamp: 1660028566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorsCount = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimeFactorsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSumsSums = mutable.Array\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hr7_och.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hr7_och.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5hr7_och.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5hr7_och.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5hr7_och.scala:12:29 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hr7_och."
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMax = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMinMaxMax = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountMinMaxMaxs = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountMaxMinMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMaxMaxMaxMaxMax\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg3s9ea1c.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3s9ea1c.scala:8:22\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3s9ea1c.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3s9ea1c.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg3s9ea1c.scala:11:28 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3s9ea1c.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to\
    \ n by 2){\n            val p = i\n            while(n % p == 0){\n          \
    \      factors += p\n                n /= p\n            }\n        }\n      \
    \  factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4x15wgb7.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4x15wgb7.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4x15wgb7.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                n /= p\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n)\n        for (i <- factorization.indices) {\n           \
    \ val f = factorization(i)\n            factors += f\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3c5py68.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpj3c5py68.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m       \
    \                     Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = factorization.toList\n\
    \        val factorizationList = factorizationList.sortWith(_.compareTo(_) < 0)\n\
    \        val factorizationList = factorizationList.filterNot(_ % n == 0)\n   \
    \     val factorizationList = factorizationList.filterNot(_ % n == 1)\n      \
    \  factorizationList.foreach(x => factorization.add(x))\n        factorizationList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx7q5h8i5.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorization.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx7q5h8i5.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.sortWith(_.compareTo(_) < \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx7q5h8i5.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.filterNot(_ % n == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e[35mfactorizationList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx7q5h8i5.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m = factorizationList.filterNot(_\
    \ % n == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 1\n        while(factor <= n) {\n            while(n % factor == 0) {\n  \
    \              factorization += factor\n                n /= factor\n        \
    \    }\n            factor += 1\n        }\n        factorization.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpngsbzup1.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpngsbzup1.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorizationList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp56fn1o47.scala:15:12 ---------------------"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo296jncv.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo296jncv.scala:11:12 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo296jncv.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactors is already defined as \e[33mvalue\e[0m \e[35mfactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo296jncv.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo296jncv.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in th"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuak4bf2p.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuak4bf2p.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuak4bf2p.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuak4bf2p.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuak4bf2p.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuak4bf2p.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n).toList\n        factorization.foreach(x => factors += x)\n  \
    \      factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm7il0e59.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 2\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                while (factor <=\
    \ n && n % factor == 0) {\n                    factor += factor\n            \
    \    }\n            }\n            factor += 1\n        }\n        factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9ttucmk.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplrvhlazm.scala:42:32 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplrvhlazm.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizations\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplrvhlazm.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorization is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorization\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplrvhlazm.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizations is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorizations\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplrvhlazm.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                while (n % factor == 0)\
    \ {\n                    n /= factor\n                    factor += 1\n      \
    \          }\n            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwb8omc0n.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwb8omc0n.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    n /= factor\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is\
    \ not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList2 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList3 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList4 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList7 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList8 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList9 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList12 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList13 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList14 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList16 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList17 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList18 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList19 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList22 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList23 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList24 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList27 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList28 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList29\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16j9gwlz.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16j9gwlz.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp16j9gwlz.scala:9:32 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16j9gwlz.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp16j9gwlz.scala:11:37 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCountList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16j9gwlz.scala:12:38\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationCountList2\e[0m = mutable.ArrayBuffer.empty"
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n                if(i %\
    \ j == 0){\n                    factorization += j\n                }\n      \
    \      }\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpys5pdr23.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpys5pdr23.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                val factors\
    \ = factorize(n / i)\n                factorization += i :: factors\n        \
    \    }\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_dsfhewe.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dsfhewe.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo296jncv.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo296jncv.scala:11:12 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo296jncv.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactors is already defined as \e[33mvalue\e[0m \e[35mfactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo296jncv.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo296jncv.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in th"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Int]\n   \
    \     val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorization\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph52qyeig.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph52qyeig.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmph52qyeig.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph52qyeig.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m  |\e[0m            \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph52qyeig.scala:10:33\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationPrime\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Not found: mutable\n\e[31m   "
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0irvq537.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0irvq537.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0irvq537.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0irvq537.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationCount is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Nami"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rps3tye.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9rps3tye.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0kmaod0.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo8i9x2te.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo8i9x2te.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo8i9x2te.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo8i9x2te.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo8i9x2te.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = n / i\n            if(factors >\
    \ 1){\n                factorization += factors\n            }\n        }\n  \
    \      factorization.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gqcwm3g.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7gqcwm3g.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMax =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxs =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp38iwrwdh.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38iwrwdh.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp38iwrwdh.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp38iwrwdh.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp38iwrwdh.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38iwrwdh.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizationsOfFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzcpuzd11.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcpuzd11.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzcpuzd11.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcpuzd11.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzcpuzd11.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcpuzd11.scala:12:49 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfFactorizations\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mL"
  stdout: ''
  timestamp: 1660028577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactorizationCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n   \
    \     val isPrimePrimePrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n   \
    \     val isPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n \
    \       val isPrimePrimePrimePrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePri\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qr82dkw.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qr82dkw.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3qr82dkw.scala:9:33 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                 Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qr82dkw.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3qr82dkw.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qr82dkw.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m "
  stdout: ''
  timestamp: 1660028577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = factorization.remove(i).filter(_\
    \ % i == 0)\n            if(factors.isEmpty) factorization += i\n        }\n \
    \       factorization.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplnqfh6iu.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplnqfh6iu.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                factorization += factor\n                n /= factor\n      \
    \      }\n            factor += 1\n        }\n        factorization\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp863ixfom.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp863ixfom.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n)\n        factorization.foreach(f => factors += f)\n     \
    \   factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz5f3svh1.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpz5f3svh1.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m       \
    \                     Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rps3tye.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9rps3tye.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n > 1) {\n            if (n % factor == 0) {\n  \
    \              factorization += factor\n                n /= factor\n        \
    \    } else {\n                factor += 1\n            }\n        }\n       \
    \ factorization.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8me8nl3g.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8me8nl3g.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer.empty[Long]\n        val\
    \ primes = mutable.ListBuffer.empty[Long]\n        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizations = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationCounts_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h6zb_5i.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h6zb_5i.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1h6zb_5i.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1h6zb_5i.scala:11:29 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1h6zb_5i.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1h6zb_5i.scala"
  stdout: ''
  timestamp: 1660028578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcyxblb98.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcyxblb98.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcyxblb98.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcyxblb98.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/t"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 1\n        while (n > 1) {\n            while (n % factor == 0) {\n      \
    \          factorization.append(factor)\n                n /= factor\n       \
    \     }\n            factor += 1\n        }\n        factorization.reverse\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiujykcio.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpiujykcio.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                factorization += factor\n                n /= factor\n      \
    \      }\n            factor += 1\n        }\n        factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpraysd73m.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpraysd73m.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorizationCount = 1\n    \
    \    var factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg_nzc0mf.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg_nzc0mf.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationCount\e[0m\
    \ = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m \e[35mfactorizationCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg_nzc0mf.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mvar\e[0m \e[36mfactorization\e[0m = \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorization\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorization\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg_nzc0mf.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfactorization\e[0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg_nzc0mf.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mvar\e[0m \e[36mfactorization\e[0m = \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorizat"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                val factors\
    \ = factorize(n / i)\n                factorization += i * factors.size // Add\
    \ factor to factorization\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd80w0z9d.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd80w0z9d.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0kmaod0.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = n / i\n            if(factors >\
    \ 1){\n                factorization += i\n                factorize(factors)\n\
    \            }\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1gu1la1.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj1gu1la1.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach(f => factors += f)\n    \
    \    factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2ut3ajh.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph2ut3ajh.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprlto83m1.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprlto83m1.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprlto83m1.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprlto83m1.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprlto83m1.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m       "
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                factorization\
    \ += i\n                n /= i\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbdwz13cr.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbdwz13cr.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbdwz13cr.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        for (i <-\
    \ 2 to n by 2) {\n            if (n % i == 0) {\n                factorization.add(i)\n\
    \                factorization.add(n / i)\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp84a7t34.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp84a7t34.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n).map(x => factors += x)\n        factorization\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzijp26au.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to\
    \ n by 2){\n            val factors = mutable.ArrayBuffer.empty[Long]\n      \
    \      for(j <- 2 to i by 2){\n                if(i % j == 0){\n             \
    \       factors += j\n                }\n            }\n            factorization\
    \ += factors.toList\n            factorizationCount += factors.length\n      \
    \  }\n        factorization.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmizhdosj.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmizhdosj.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                          \
    \       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmizhdosj.scala:10:22 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmizhdosj.scala:11:26\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m\
    \ \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n \
    \       while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                while (n / i >= i) {\n                    n /= i\n   \
    \             }\n            }\n            i += 1\n        }\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbf0ip8ma.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbf0ip8ma.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    n /= i\n\e[31m\e[31m   |\e[0m   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                   value /= is not\
    \ a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrime = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n   \
    \     val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4k0uuri.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4k0uuri.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_4k0uuri.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_4k0uuri.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_4k0uuri.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrime = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n       \
    \ val primeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n    \
    \    val primeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpseswj6os.scala:30:109 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpseswj6os.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \ |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpseswj6os.scala:9:29 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpseswj6os.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpseswj6os.scala:11:34 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        Not foun"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var i =\
    \ 2\n        while (i <= n) {\n            if (n % i == 0) {\n               \
    \ factorization += i\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm601___1.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpm601___1.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        for(i <-\
    \ 2 to n/2){\n            for(j <- 2 to n/i){\n                if(n % i == 0 &&\
    \ n / j == i){\n                    factorization += j\n                }\n  \
    \          }\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2urbc06s.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2urbc06s.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n/\e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^^^\e[0m\n\e[31m  |\e[0m    \
    \                  Found:    Long\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2urbc06s.scala:10:26\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m2\e[0m to n/i){\n\e[31m\e[31m   |\e[0m                          ^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Long\n\e[31m   |\e[0m\
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpneop5tbw.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimeCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpneop5tbw.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpneop5tbw.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpneop5tbw.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrime\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorize(n,factorization)\n\
    \        factorization.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2qztrp8.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2qztrp8.scala:9:18 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        factorize(n,factorization)\n\e[31m\e[31m  |\e\
    [0m                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                  Found:\
    \    (Long, Nothing)\n\e[31m  |\e[0m                  Required: Long\n\e[31m \
    \ |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                factorization += factor\n                n /= factor\n      \
    \      }\n            factor += 1\n        }\n        factorization\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp863ixfom.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp863ixfom.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu79o4r9n.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu79o4r9n.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = factorization.remove(i)\n      \
    \      if(factors == 0){\n                factorization += i\n            }\n\
    \        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzajhnfw.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzajhnfw.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCount = 0\n        var factorizationPrime = 0\n\
    \        var factorizationPrimeCount = 0\n        var factorizationPrimePrime\
    \ = 0\n        var factorizationPrimePrimeCount = 0\n        var factorizationPrimePrimePrime\
    \ = 0\n        var factorizationPrimePrimePrimeCount = 0\n        var factorizationPrimePrimePrimePrime\
    \ = 0\n        var factorizationPrimePrimePrimePrimeCount = 0\n        var factorizationPrimePrimePrimePrimePrime\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeCount = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimePrimePrime = 0\n    \
    \    var factorizationPrimePrimePrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \        var factorizationPrimePrimePrimePrimePrimePrimePrimePrime = 0\n     \
    \   var factorizationPrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp69sws406.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp69sws406.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp69sws406.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrimeCount\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvariable\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimeCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp69sws406.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrime\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvariable\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrime\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp69sws406.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrime\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        var i =\
    \ 2L\n        while (i < n) {\n            if (n % i == 0) {\n               \
    \ factors += i\n                factorization.append(i)\n                primes\
    \ += i\n                primeFactorization.append(i)\n            }\n        \
    \    i += 1\n        }\n        factorization.reverse.foreach(x => factors +=\
    \ x)\n        primeFactorization.reverse.foreach(x => factors += x)\n        factors.reverse.foreach(x\
    \ => factorization.append(x))\n        primes.reverse.foreach(x => primeFactorization.append(x))\n\
    \        factorization.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_t0g6hz.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe_t0g6hz.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe_t0g6hz.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_t0g6hz.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOf = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n      \
    \  val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf81lqx_6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf81lqx_6.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf81lqx_6.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf81lqx_6.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfsOf is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfsOf\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf81lqx_6.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizati"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp24560ece.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp24560ece.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp24560ece.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp24560ece.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n).map(x => factors += x)\n        factorization\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzijp26au.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMaxMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMins = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMinMax = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnjt_6o9q.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnjt_6o9q.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax\e\
    [0m = mutable.ArrayBuffer.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpnjt_6o9q.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnjt_6o9q.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnjt_6o9q.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuk3mdvvh.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationListSizeSizeSizeSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSizeSizeSizeSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuk3mdvvh.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuk3mdvvh.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSizeSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuk3mdvvh.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^"
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0kmaod0.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                factor *= factor\n\
    \            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k5j0fve.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 2\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                n /= factor\n  \
    \          } else {\n                factor += 1\n            }\n        }\n \
    \       factorization.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83mxtkuq.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp83mxtkuq.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeSize = n\n        val factorizationPrimePrime =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimeSize = n\n\
    \        val factorizationPrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimeSize = n\n        val\
    \ factorizationPrimePrimePrimePrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimeSize = n\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize = n\n \
    \       val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize = n\n  \
    \      val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize = n\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize =\
    \ n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnc_d_8fp.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnc_d_8fp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimeSize\e[0m = n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc_d_8fp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m = n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc_d_8fp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m = n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc_d_8fp.scala:24:12 ---------------"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMax = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMaxMaxs = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMaxMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMax = mutable.ListBuffer[Long]()\n   \
    \     val factorizationCountMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7_couaqr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxs\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxs is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7_couaqr.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMax\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMax\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7_couaqr.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7_couaqr.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m  "
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCount = 0\n        var factorizationFactor = 0\n\
    \        var factorizationFactorCount = 0\n        var factorizationFactorIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphs8dmpyi.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphs8dmpyi.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfactorizationFactorCountIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorizationFactorCountIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mfactorizationFactorCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphs8dmpyi.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationFactorCountIndex\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorCountIndex is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationFactorCountIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphs8dmpyi.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationFactorCountIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorCountIndex is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationFactorCountIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphs8dmpyi.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationFactorCountIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorCountIndex is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationFactorCountIndex\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rps3tye.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9rps3tye.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOfs is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOfs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsOfsOfsOfsOfsOf is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsOfsOfsOfsOfsOf\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rps3tye.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm76rj5x7.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm76rj5x7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm76rj5x7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimes is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm76rj5x7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm76rj5x7.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsss = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountOfssss = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfsssss = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssss\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4d8bws1.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi4d8bws1.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfss\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfss is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountOfss\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi4d8bws1.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsssssssssssssssss\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsssssssssssssssss is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsssssssssssssssss\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4d8bws1.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi4d8bws1.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer exp"
  stdout: ''
  timestamp: 1660028593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer.empty[Long]\n        for(i <-\
    \ 2 to n by 2){\n            val p = n/i\n            if(p == 1){\n          \
    \      factors += i\n            }\n            else{\n                for(j <-\
    \ 2 to p by 2){\n                    if(p%j == 0){\n                        factors\
    \ += j\n                        break\n                    }\n               \
    \ }\n            }\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhiq91ce.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplhiq91ce.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplhiq91ce.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mfor\e[0m(j\
    \ <- \e[31m2\e[0m to p by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m              \
    \                ^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   (p : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhiq91ce.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnnvr91jr.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnnvr91jr.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationIndexCount\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexCount is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationIndexCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnnvr91jr.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationIndexCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfactorizationIndexCount is already defined as \e[33mvalue\e[0m \e[35mfactorizationIndexCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnnvr91jr.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationIndexCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexCount is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationIndexCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnnvr91jr.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationIndexCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach(f => factors += f)\n    \
    \    factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dbh64g0.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5dbh64g0.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes2 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationIndexes3 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes6 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationIndexes7 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes10 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes11 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes12\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes13 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes14 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes15 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes16\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes18 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes19 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes22 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes23 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes24\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes25 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes26 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes27 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes28\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes29\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_3a60rt6.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3a60rt6.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_3a60rt6.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3a60rt6.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationIndex\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_3a60rt6.scala:11:35 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationIndexes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_3a60rt6.scala:12:36\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationIndexes2\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e\
    [31"
  stdout: ''
  timestamp: 1660028597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount3 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount4 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount5\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount6 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount7 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount8 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount11 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount12 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount15 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount16 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount17\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount18 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount19 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount20 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount23 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount24 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount27 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount28 = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_sz4mxgz.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_sz4mxgz.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_sz4mxgz.scala:10:28 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_sz4mxgz.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_sz4mxgz.scala:12:38 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizationCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_sz4mxg"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        var factor\
    \ = 1\n        while (n != 1) {\n            if (n % factor == 0) {\n        \
    \        factorization += factor\n                n /= factor\n            } else\
    \ {\n                factor *= factor\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7kw32rlz.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7kw32rlz.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        for (f <-\
    \ 2 to n by 2) {\n            if (n % f == 0) {\n                factorization.add(f)\n\
    \                factorization.add(n / f)\n            }\n        }\n        factorization.toList.sortBy(-_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq8wi25m1.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8wi25m1.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (f <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizationsOfFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzcpuzd11.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcpuzd11.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzcpuzd11.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcpuzd11.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzcpuzd11.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcpuzd11.scala:12:49 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfFactorizations\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mL"
  stdout: ''
  timestamp: 1660028577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (n != 1) {\n            while (n % factor != 0) {\n\
    \                factorization += factor\n                n /= factor\n      \
    \      }\n            factor += 1\n        }\n        factorization.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7wrcov0t.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7wrcov0t.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMin = mutable.ListBuffer[Long]()\n        val factorizationCountMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMinMaxMin = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxs = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMinMaxMinMaxMin = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMinMaxMinMaxMins = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountMinMaxMinMaxMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpje7l9q77.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpje7l9q77.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpje7l9q77.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpje7l9q77.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpje7l9q77.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                val factors\
    \ = factorize(n / i)\n                factorization += i * factors.last\n    \
    \            factorization += factors.reverse.last\n            }\n        }\n\
    \        factorization.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe6jr4x8f.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6jr4x8f.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorPrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimeCounts\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbgddfea6.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorPrimePrimePrimes\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mprimeFactorPrimePrimePrimes is already defined as \e[33mvalue\e[0m\
    \ \e[35mprimeFactorPrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbgddfea6.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorPrimePrimePrimeCounts\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mprimeFactorPrimePrimePrimeCounts is already defined as \e[33mvalue\e\
    [0m \e[35mprimeFactorPrimePrimePrimeCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbgddfea6.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimes is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbgddfea6.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorPrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorPrimePrimePrimes is already defined as \e["
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n                if(n %\
    \ i == 0 && i != j){\n                    factorization += i\n               \
    \     n /= i\n                }\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdy8wv6ba.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdy8wv6ba.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdy8wv6ba.scala:13:22\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                    n /=\
    \ i\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value /= is not a member of Long - did you mean n.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountPairs = mutable.ArrayBuffer.empty[(Long, Long)]\n\
    \        val factorizationCountPairsSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mut\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzt_qlvf0.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzt_qlvf0.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzt_qlvf0.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzt_qlvf0.scala:11:29 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzt_qlvf0.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] N"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        var factorizationIndex = 0\n        while (factor <= n)\
    \ {\n            if (n % factor == 0) {\n                factorization += factor\n\
    \                factorizationIndex += 1\n                factor *= factorizationIndex\n\
    \            }\n            factor += 1\n        }\n        factorization\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4cya_596.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                n /= factor\n  \
    \          } else {\n                factor *= factor\n            }\n       \
    \ }\n        factorization.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjpotbo0f.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjpotbo0f.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm76rj5x7.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm76rj5x7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm76rj5x7.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimes is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimes\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm76rj5x7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm76rj5x7.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpypqb3odv.scala:41:34 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount29\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypqb3odv.scala:8:22\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypqb3odv.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypqb3odv.scala:10:28\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpypqb3odv.scala:11:33 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypqb3odv.scala:12:38 --------------"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorization\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuo7fgf34.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuo7fgf34.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSize\e[0m = factorization.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorizationListSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationListSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuo7fgf34.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e[0m = factorization.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuo7fgf34.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorization.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuo7fgf34.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSize\e\
    [0m = factorization.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSize is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overlo"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCountIndex = 0\n        var factorizationCountMax\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMin\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMinIndex = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpvn4ahbyw.scala:71:11 ---------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpvn4ahbyw.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationCountMaxIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxIndex is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationCountMaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvn4ahbyw.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationCountMinIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinIndex is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationCountMinIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvn4ahbyw.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationCountMaxIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMaxIndex is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationCountMaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvn4ahbyw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationCountMinIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinIndex is already defined a"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        var factorizationIndex = 0\n        while (factor <= n)\
    \ {\n            if (n % factor == 0) {\n                factorization += factor\n\
    \                factorizationIndex += 1\n                factor *= factorizationIndex\n\
    \            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_s5z1kl.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 1\n        while (n != 1) {\n            while (n % factor != 0) {\n     \
    \           factorization += factor\n                n /= factor\n           \
    \ }\n            factor += 1\n        }\n        factorization.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkm14g6q.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpdkm14g6q.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeSize = n\n        val factorizationPrimePrime =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimeSize = n\n\
    \        val factorizationPrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimeSize = n\n        val\
    \ factorizationPrimePrimePrimePrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimeSize = n\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize = n\n \
    \       val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize = n\n  \
    \      val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize = n\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize =\
    \ n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnc_d_8fp.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnc_d_8fp.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimeSize\e[0m = n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc_d_8fp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m = n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc_d_8fp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m = n\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc_d_8fp.scala:24:12 ---------------"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorization\
    \ = factorization.+(n)\n        val factorizationList = factorization.toList\n\
    \        val factorizationList = factorizationList.sortWith(_ < _)\n        val\
    \ factorizationList = factorizationList.filter(_ % 2 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 3 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 5 == 0)\n        val factorizationList = factorizationList.filter(_ % 7 ==\
    \ 0)\n        val factorizationList = factorizationList.filter(_ % 11 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 13 == 0)\n     \
    \   val factorizationList = factorizationList.filter(_ % 17 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 19 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 23 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 29 == 0)\n        val factorizationList = factorizationList.filter(_ % 31\
    \ == 0)\n        val factorizationList = factorizationList.filter(_ % 37 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 41 == 0)\n     \
    \   val factorizationList = factorizationList.filter(_ % 43 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 47 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 53 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 59 == 0)\n        val factorizationList = factorizationList.filter(_ % 61\
    \ == 0)\n        val factorizationList = factorizationList.filter(_ % 67 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 71 == 0)\n     \
    \   val factorizationList = factorizationList.filter(_ % 73 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 79 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 83 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 89 == 0)\n        val factorizationList = factorizationList.filter(_ % 97\
    \ == 0)\n        val factorizationList = factorizationList.filter(_ % 101 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 103 == 0)\n    \
    \    val factorizationList = factorizationList.filter(_ % 107 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 111 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 113 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 117 == 0)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6f0ar6i.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw6f0ar6i.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e[35mfactorizationList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw6f0ar6i.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m = factorizationList.filter(_\
    \ % \e[31m3\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw6f0ar6i.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.filter(_ % \e[31m5\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e[35mfactorizationList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel "
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListIterator = factorization.iterator\n        val factorizationListIteratorSize\
    \ = factorizationListIterator.size\n        val factorizationListIteratorElement\
    \ = factorizationListIterator.next()\n        while (factorizationListIterator.hasNext)\
    \ {\n            val factorizationListIteratorElement = factorizationListIterator.next()\n\
    \            if (n % factorizationListIteratorElement == 0) {\n              \
    \  factorization.add(factorizationListIteratorElement)\n                factorizationListSize\
    \ += 1\n            }\n        }\n        factorization.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi2u_mgem.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi2u_mgem.scala:9:32 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCountIndex = 0\n        var factorizationPrimeIndex\
    \ = 0\n        var factorizationPrimeCountIndex = 0\n        var factorizationPrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimeCountIndex = 0\n        var factorizationPrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimeCountIndex = 0\n        var factorizationPrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimeCountIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimeCountIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzu67lanw.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzu67lanw.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrimeIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimeIndex is already defined\
    \ as \e[33mvariable\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimeIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzu67lanw.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfactorizationPrimePrimePrimePrimeCountIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimeCountIndex is already defined\
    \ as \e[33mvariable\e[0m \e[35mfactorizationPrimePrimePrimePrimeCountIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzu67lanw.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimeIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimeIndex is already defined\
    \ as \e[33mvariable\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimeIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzu67lanw.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimeIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660028605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach(f => factors += f)\n    \
    \    factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dbh64g0.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5dbh64g0.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuzin5lil.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuzin5lil.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e\
    [0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuzin5lil.scala:9:22 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuzin5lil.scala:10:21 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuzin5lil.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuzin5lil.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mut"
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        for(i <- 2\
    \ to n){\n            while(n % i == 0){\n                factorization.add(i)\n\
    \                n /= i\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtiasv4p.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgtiasv4p.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n){\n\e[31m\e\
    [31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m                     \
    \ Found:    (n : Long)\n\e[31m  |\e[0m                      Required: Int\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtiasv4p.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 2\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                n /= factor\n  \
    \          } else {\n                factor += 1\n            }\n        }\n \
    \       factorization.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp83mxtkuq.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp83mxtkuq.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= factor\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member\
    \ of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprmeas6gz.scala:40:34 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprmeas6gz.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCounts_\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprmeas6gz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprmeas6gz.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCounts_\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCounts_ is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCounts_\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprmeas6gz.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMaxMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMins = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMaxMin = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMinMaxMinMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd7vrwld8.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd7vrwld8.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd7vrwld8.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMaxs\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMaxs is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMaxs\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd7vrwld8.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tm"
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                val factors\
    \ = factorize(n / i)\n                factorization += i * factors.size // Add\
    \ number of times each factor appeared in factorization\n                factorization\
    \ += factors // Add factors\n            }\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5r7vvyy.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5r7vvyy.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        var factorizationCounter\
    \ = 0\n        var factorizationCounterList = 0\n        var factorizationCounterList2\
    \ = 0\n        var factorizationCounterList3 = 0\n        var factorizationCounterList4\
    \ = 0\n        var factorizationCounterList5 = 0\n        var factorizationCounterList6\
    \ = 0\n        var factorizationCounterList7 = 0\n        var factorizationCounterList8\
    \ = 0\n        var factorizationCounterList9 = 0\n        var factorizationCounterList10\
    \ = 0\n        var factorizationCounterList11 = 0\n        var factorizationCounterList12\
    \ = 0\n        var factorizationCounterList13 = 0\n        var factorizationCounterList14\
    \ = 0\n        var factorizationCounterList15 = 0\n        var factorizationCounterList16\
    \ = 0\n        var factorizationCounterList17 = 0\n        var factorizationCounterList18\
    \ = 0\n        var factorizationCounterList19 = 0\n        var factorizationCounterList20\
    \ = 0\n        var factorizationCounterList21 = 0\n        var factorizationCounterList22\
    \ = 0\n        var factorizationCounterList23 = 0\n        var factorizationCounterList24\
    \ = 0\n        var factorizationCounterList25 = 0\n        var factorizationCounterList26\
    \ = 0\n        var factorizationCounterList27 = 0\n        var factorizationCounterList28\
    \ = 0\n        var factorizationCounterList29 = 0\n        var factorizationCounterList30\
    \ = 0\n        var factorizationCounterList31 = 0\n        var factorizationCounterList32\
    \ = 0\n        var factorizationCounterList33 = 0\n        var factorizationCounterList34\
    \ = 0\n        var factorizationCounterList35 = 0\n        var factorizationCounterList36\
    \ = 0\n        var factorizationCounterList37 = 0\n        var factorizationCounterList38\
    \ = 0\n        var factorizationCounterList39 = 0\n        var factorizationCounterList40\
    \ = 0\n        var factorizationCounterList41 = 0\n        var factorizationCounterList42\
    \ = 0\n        var factorizationCounterList43 = 0\n        var factorizationCounterList44\
    \ = 0\n        var factorizationCounterList45 = 0\n        var factorizationCounterList46\
    \ = 0\n        var factorizationCounterList47 = 0\n        var factorizationCounterList48\
    \ = 0\n        var factorizationCounterList49 = 0\n        var factorizationCounterList50\
    \ = 0\n        var factorizationCounterList51 = 0\n        var factorizationCounterList52\
    \ = 0\n        var factorizationCounterList53 = 0\n        var factorizationCounterList54\
    \ = 0\n        var factorizationCounterList55 = 0\n        var factorizationCounterList56\
    \ = 0\n        var factorizationCounterList57 = 0\n        var factorizationCounterList58\
    \ = 0\n        var factorizationCounterList59 = 0\n        var factorizationCounterList60\
    \ = 0\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnduun1fz.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnduun1fz.scala:9:32 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnduun1fz.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsle09qw2.scala:30:109 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsle09qw2.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpsle09qw2.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsle09qw2.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsle09qw2.scala:11:34 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph_h9jqai.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_h9jqai.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationFactorCount\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorCount is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationFactorCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_h9jqai.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfactorizationFactorCount is already defined as \e[33mvalue\e[0m \e[35mfactorizationFactorCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph_h9jqai.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationFactorCount is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationFactorCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_h9jqai.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorCount\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n           \
    \     factorization += i\n                n /= i\n            }\n            i\
    \ += 1\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qte2o2t.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qte2o2t.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val primes\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0emesoxy.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0emesoxy.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0emesoxy.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0emesoxy.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0emesoxy.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded metho"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdh1j4a_n.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh1j4a_n.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh1j4a_n.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdh1j4a_n.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh1j4a_n.sc"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                factor *= factor\n\
    \            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k5j0fve.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn6e_4v7e.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn6e_4v7e.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn6e_4v7e.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn6e_4v7e.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn6e_4v7e.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsSumCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationFactorsSumOfSquares = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationFactorsSumOfSquaresCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumCount\
    \ = mutable.ArrayBuffer.empty[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zhh15en.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zhh15en.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                          \
    \       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9zhh15en.scala:10:35 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationFactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zhh15en.scala:11:40\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorizationFactorsCount\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zhh15en.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationFactorsSum\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorize(n,factorization)\n\
    \        factorization.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd2qztrp8.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2qztrp8.scala:9:18 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        factorize(n,factorization)\n\e[31m\e[31m  |\e\
    [0m                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                  Found:\
    \    (Long, Nothing)\n\e[31m  |\e[0m                  Required: Long\n\e[31m \
    \ |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPri\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt73rxwc8.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt73rxwc8.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt73rxwc8.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ is already defined as \e[33mvalue\e[0m \e[35mprimeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpt73rxwc8.scala:8:28 -------------------------\e[0m\e[0m\n\
    \e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt73rxwc8.scala:9:29 ------------------------"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = factorization.toList\n\
    \        val factorizationList = factorizationList.sortWith(_ < _)\n        val\
    \ factorizationList = factorizationList.filter(n => n % _ == 0)\n        val factorizationList\
    \ = factorizationList.map(n => n * factorizationList.count(_ == n))\n        factorizationList.foreach(n\
    \ => factorization.add(n))\n        factorizationList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpluh_2t5j.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorization.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpluh_2t5j.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpluh_2t5j.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.filter(\e[36mn\e[0m => n % _ == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpluh_2t5j.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ factorizationList.map(\e[36mn\e[0m => n * factorizationList.count(_ == n))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationList is already defined as \e[33mvalue\e[0m \e\
    [35mfactorizationList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of topl"
  stdout: ''
  timestamp: 1660028608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnwutz3oc.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnwutz3oc.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnwutz3oc.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnwutz3oc.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnwutz3oc.sc"
  stdout: ''
  timestamp: 1660028612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = factorization(n) \n        factorization foreach { f =>\n            factors\
    \ += f\n        }\n        factors\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cetsl3s.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8cetsl3s.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\
    \ \n\e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m   \
    \                         Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m\
    \ needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n \
    \       while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqf2b5f65.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqf2b5f65.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationSize = n\n        val primesSize = n\n        val primeFactorizationSize\
    \ = n\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationSize = n\n        val factorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesSize = n\n        val\
    \ factorizationPrimeFactorizationPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesSize = n\n     \
    \   val factorizationPrimeFactorizationPrimesPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesSize = n\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuv3qhumt.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuv3qhumt.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\e\
    [0m = mutable.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuv3qhumt.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuv3qhumt.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuv3qhumt.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660028612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationIndexMax = factorization.length\n        var factorizationIndexMax2\
    \ = factorizationIndexMax\n        var factorizationIndexMax3 = factorizationIndexMax\n\
    \        var factorizationIndexMax4 = factorizationIndexMax\n        var factorizationIndexMax5\
    \ = factorizationIndexMax\n        var factorizationIndexMax6 = factorizationIndexMax\n\
    \        var factorizationIndexMax7 = factorizationIndexMax\n        var factorizationIndexMax8\
    \ = factorizationIndexMax\n        var factorizationIndexMax9 = factorizationIndexMax\n\
    \        var factorizationIndexMax10 = factorizationIndexMax\n        var factorizationIndexMax11\
    \ = factorizationIndexMax\n        var factorizationIndexMax12 = factorizationIndexMax\n\
    \        var factorizationIndexMax13 = factorizationIndexMax\n        var factorizationIndexMax14\
    \ = factorizationIndexMax\n        var factorizationIndexMax15 = factorizationIndexMax\n\
    \        var factorizationIndexMax16 = factorizationIndexMax\n        var factorizationIndexMax17\
    \ = factorizationIndexMax\n        var factorizationIndexMax18 = factorizationIndexMax\n\
    \        var factorizationIndexMax19 = factorizationIndexMax\n        var factorizationIndexMax20\
    \ = factorizationIndexMax\n        var factorizationIndexMax21 = factorizationIndexMax\n\
    \        var factorizationIndexMax22 = factorizationIndexMax\n        var factorizationIndexMax23\
    \ = factorizationIndexMax\n        var factorizationIndexMax24 = factorizationIndexMax\n\
    \        var factorizationIndexMax25 = factorizationIndexMax\n        var factorizationIndexMax26\
    \ = factorizationIndexMax\n        var factorizationIndexMax27 = factorizationIndexMax\n\
    \        var factorizationIndexMax28 = factorizationIndexMax\n        var factorizationIndexMax29\
    \ = factorizationIndexMax\n        var factorizationIndexMax30 = factorizationIndexMax\n\
    \        var factorizationIndexMax31 = factorizationIndexMax\n        var factorizationIndexMax32\
    \ = factorizationIndexMax\n        var factorizationIndexMax33 = factorizationIndexMax\n\
    \        var factorizationIndexMax34 = factorizationIndexMax\n        var factorizationIndexMax35\
    \ = factorizationIndexMax\n        var factorizationIndexMax36 = factorizationIndexMax\n\
    \        var factorizationIndexMax37 = factorizationIndexMax\n        var factorizationIndexMax38\
    \ = factorizationIndexMax\n        var factorizationIndexMax39 = factorizationIndexMax\n\
    \        var factorizationIndexMax40 = factorizationIndexMax\n        var factorizationIndexMax41\
    \ = factorizationIndexMax\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphi_3inn0.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphi_3inn0.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphi_3inn0.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationIndexCount = 0\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n) / math.log(2)))\n        var factorizationIndexCountMax\
    \ = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n        var factorizationIndexCountMin\
    \ = math.pow(2, math.floor(math.log(n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp98z1zbw1.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98z1zbw1.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfactorizationIndexCountMin\e[0m = math.pow(\e[31m2\e[0m, math.floor(math.log(n)\
    \ / math.log(\e[31m2\e[0m)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexCountMin is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexCountMin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98z1zbw1.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationIndexCountMax\e\
    [0m = math.pow(\e[31m2\e[0m, math.ceil(math.log(n) / math.log(\e[31m2\e[0m)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexCountMax is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexCountMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98z1zbw1.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mfactorizationIndexCountMin\e\
    [0m = math.pow(\e[31m2\e[0m, math.floor(math.log(n) / math.log(\e[31m2\e[0m)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationIndexCountMin is already defined as \e[33mvariable\e\
    [0m \e[35mfactorizationIndexCountMin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp98z1zbw1.scala:17:12 ---------------------------\e\
    [0m\e"
  stdout: ''
  timestamp: 1660028613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsss = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountOfssss = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfsssss = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssssssssssssss\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa4kysshf.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa4kysshf.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfss\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfss is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationCountOfss\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa4kysshf.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOfsssssssssssssssss\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfsssssssssssssssss is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationCountOfsssssssssssssssss\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa4kysshf.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountOfssssssssssssssssss\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountOfssssssssssssssssss is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountOfssssssssssssssssss\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa4kysshf.scala:8:28 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.Ar"
  stdout: ''
  timestamp: 1660028613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                while (factor <= n && n\
    \ % factor == 0) {\n                    factor += 1\n                }\n     \
    \       }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpny7fep_j.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = factorizationOf(n)\n        factorization.foreach(f => factors += f)\n   \
    \     factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qbxajub.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4qbxajub.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizationOf(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                            Not found: factorizationOf\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountPair = mutable.ArrayBuffer.empty[(Long, Long)]\n\
    \        val factorizationCountPairs = mutable.ArrayBuffer.empty[(Long, Long)]\n\
    \        val factorizationCountPairsSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPair\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpweepzz38.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpweepzz38.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpweepzz38.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpweepzz38.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpweepzz38.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpweepzz38.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountPair\e\
    [0m = mutable.ArrayBuffer.empty[(\e[35mLong\e[0m, \e["
  stdout: ''
  timestamp: 1660028617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmpowb3by.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmpowb3by.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmpowb3by.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmpowb3by.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmpowb3by.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimeCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65bq8u6y.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65bq8u6y.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp65bq8u6y.scala:9:21 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65bq8u6y.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp65bq8u6y.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp65bq8u6y.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m"
  stdout: ''
  timestamp: 1660028620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu79o4r9n.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu79o4r9n.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptl7z56nj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptl7z56nj.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptl7z56nj.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMaxs\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMaxs is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMaxs\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptl7z56nj.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCountMinMaxMinMaxMinMaxMaxMax is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationCountMinMaxMinMaxMinMaxMaxMax\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptl"
  stdout: ''
  timestamp: 1660028620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdh1j4a_n.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh1j4a_n.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSize is already defined as\
    \ \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdh1j4a_n.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListSizeSizeSizeSizeSizeSize\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSize\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdh1j4a_n.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationListSizeSizeSizeSizeSizeSizeSizeSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdh1j4a_n.sc"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var i =\
    \ 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n           \
    \     factorization += i\n                n /= i\n            }\n            i\
    \ += 1\n        }\n        if (n > 1) {\n            factorization += n\n    \
    \    }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19nmyx5x.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp19nmyx5x.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                n /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            val factors = factorizationList.filter(_ % i == 0)\n   \
    \         factorization += i\n            factorizationList += factors.count(_\
    \ == i).toLong\n        }\n        factorizationList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvvwi5jl.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvvwi5jl.scala:9:32 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdvvwi5jl.scala:10:22\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2\e[0m to n by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m                     \
    \ ^\e[0m\n\e[31m   |\e[0m                      Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplrvs1lm5.scala:28:11 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmplrvs1lm5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrime\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplrvs1lm5.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrime is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplrvs1lm5.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ is already defined as \e[33mvalue\e[0m \e[35mfactorizationPrime"
  stdout: ''
  timestamp: 1660028621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpmaa2zs.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpmaa2zs.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfpmaa2zs.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpmaa2zs.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfpmaa2zs.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfpmaa2zs.scala:12:34 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                           "
  stdout: ''
  timestamp: 1660028621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            val factors = n / i\n            factorization\
    \ += factors\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvutmdkw.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmvutmdkw.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach(f => factors += f)\n    \
    \    factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph2ut3ajh.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph2ut3ajh.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor < n) {\n            if (n % factor == 0) {\n\
    \                factorization += factor\n                factor *= factor\n \
    \           }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl4xu3300.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphe0ftg_w.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphe0ftg_w.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \                Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphe0ftg_w.scala:9:29 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphe0ftg_w.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphe0ftg_w.scala:11:34 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m         \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphe0ftg_w.scala:12:33 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1660028621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n).reverse\n        factorization.foreach(f => factors += f)\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsto0ah2o.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6lseas12.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6lseas12.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6lseas12.scala:9:21 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6lseas12.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6lseas12.scala:11:34 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorizations\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6lseas12.scala:12:34 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationPrimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1660028621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        var factorizationCounter\
    \ = 0\n        var factorizationCounterList = 0\n        var factorizationCounterList2\
    \ = 0\n        var factorizationCounterList3 = 0\n        var factorizationCounterList4\
    \ = 0\n        var factorizationCounterList5 = 0\n        var factorizationCounterList6\
    \ = 0\n        var factorizationCounterList7 = 0\n        var factorizationCounterList8\
    \ = 0\n        var factorizationCounterList9 = 0\n        var factorizationCounterList10\
    \ = 0\n        var factorizationCounterList11 = 0\n        var factorizationCounterList12\
    \ = 0\n        var factorizationCounterList13 = 0\n        var factorizationCounterList14\
    \ = 0\n        var factorizationCounterList15 = 0\n        var factorizationCounterList16\
    \ = 0\n        var factorizationCounterList17 = 0\n        var factorizationCounterList18\
    \ = 0\n        var factorizationCounterList19 = 0\n        var factorizationCounterList20\
    \ = 0\n        var factorizationCounterList21 = 0\n        var factorizationCounterList22\
    \ = 0\n        var factorizationCounterList23 = 0\n        var factorizationCounterList24\
    \ = 0\n        var factorizationCounterList25 = 0\n        var factorizationCounterList26\
    \ = 0\n        var factorizationCounterList27 = 0\n        var factorizationCounterList28\
    \ = 0\n        var factorizationCounterList29 = 0\n        var factorizationCounterList30\
    \ = 0\n        var factorizationCounterList31 = 0\n        var factorizationCounterList32\
    \ = 0\n        var factorizationCounterList33 = 0\n        var factorizationCounterList34\
    \ = 0\n        var factorizationCounterList35 = 0\n        var factorizationCounterList36\
    \ = 0\n        var factorizationCounterList37 = 0\n        var factorizationCounterList38\
    \ = 0\n        var factorizationCounterList39 = 0\n        var factorizationCounterList40\
    \ = 0\n        var factorizationCounterList41 = 0\n        var factorizationCounterList42\
    \ = 0\n        var factorizationCounterList43 = 0\n        var factorizationCounterList44\
    \ = 0\n        var factorizationCounterList45 = 0\n        var factorizationCounterList46\
    \ = 0\n        var factorizationCounterList47 = 0\n        var factorizationCounterList48\
    \ = 0\n        var factorizationCounterList49 = 0\n        var factorizationCounterList50\
    \ = 0\n        var factorizationCounterList51 = 0\n        var factorizationCounterList52\
    \ = 0\n        var factorizationCounterList53 = 0\n        var factorizationCounterList54\
    \ = 0\n        var factorizationCounterList55 = 0\n        var factorizationCounterList56\
    \ = 0\n        var factorizationCounterList57 = 0\n        var factorizationCounterList58\
    \ = 0\n        var factorizationCounterList59 = 0\n        var factorizationCounterList60\
    \ = 0\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnduun1fz.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnduun1fz.scala:9:32 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizationList\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                           \
    \     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnduun1fz.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                while (factor <= n / factor)\
    \ {\n                    factor += 2\n                }\n            }\n     \
    \       factor += 2\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnfm8rlvf.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpud5fcyg6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpud5fcyg6.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpud5fcyg6.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpud5fcyg6.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpud5fcyg6.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to\
    \ n by 2){\n            val p = n/i\n            if(p == 1){\n               \
    \ factors += i\n            }\n            else{\n                for(j <- 2 to\
    \ p by 2){\n                    if(p%j == 0){\n                        factors\
    \ += j\n                        break\n                    }\n               \
    \ }\n            }\n        }\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvefmdb_0.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvefmdb_0.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvefmdb_0.scala:15:30\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mfor\e[0m(j\
    \ <- \e[31m2\e[0m to p by \e[31m2\e[0m){\n\e[31m\e[31m   |\e[0m              \
    \                ^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   (p : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvefmdb_0.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3nfp9x35.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mfactorizationCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Nami"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize2 = primeFactorizationSize / 2\n    \
    \    val primeFactorizationSize3 = primeFactorizationSize2 / 2\n        val primeFactorizationSize4\
    \ = primeFactorizationSize3 / 2\n        val primeFactorizationSize5 = primeFactorizationSize4\
    \ / 2\n        val primeFactorizationSize6 = primeFactorizationSize5 / 2\n   \
    \     val primeFactorizationSize7 = primeFactorizationSize6 / 2\n        val primeFactorizationSize8\
    \ = primeFactorizationSize7 / 2\n        val primeFactorizationSize9 = primeFactorizationSize8\
    \ / 2\n        val primeFactorizationSize10 = primeFactorizationSize9 / 2\n  \
    \      val primeFactorizationSize11 = primeFactorizationSize10 / 2\n        val\
    \ primeFactorizationSize12 = primeFactorizationSize11 / 2\n        val primeFactorizationSize13\
    \ = primeFactorizationSize12 / 2\n        val primeFactorizationSize14 = primeFactorizationSize13\
    \ / 2\n        val primeFactorizationSize15 = primeFactorizationSize14 / 2\n \
    \       val primeFactorizationSize16 = primeFactorizationSize15 / 2\n        val\
    \ primeFactorizationSize17 = primeFactorizationSize16 / 2\n        val primeFactorizationSize18\
    \ = primeFactorizationSize17 / 2\n        val primeFactorizationSize19 = primeFactorizationSize18\
    \ / 2\n        val primeFactorizationSize20 = primeFactorizationSize19 / 2\n \
    \       val primeFactorizationSize21 = primeFactorizationSize20 / 2\n        val\
    \ primeFactorizationSize22 = primeFactorizationSize21 / 2\n        val primeFactorizationSize23\
    \ = primeFactorizationSize22 / 2\n        val primeFactorizationSize24 = primeFactorizationSize23\
    \ / 2\n        val primeFactorizationSize25 = primeFactorizationSize24 / 2\n \
    \       val primeFactorizationSize26 = primeFactorizationSize25 / 2\n        val\
    \ primeFactorizationSize27 = primeFactorizationSize26 / 2\n        val primeFactorizationSize28\
    \ = primeFactorizationSize27 / 2\n        val primeFactorizationSize29 = primeFactorizationSize28\
    \ / 2\n        val primeFactorizationSize30 = primeFactorizationSize29 / 2\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqccw3sa.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqccw3sa.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbqccw3sa.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbqccw3sa.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                factorization\
    \ += i\n                n /= i\n            }\n        }\n        if (n != 1)\
    \ {\n            factorization += n\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8qqgyv13.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qqgyv13.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8qqgyv13.scala:12:18\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                n /= i\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ /= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuak4bf2p.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuak4bf2p.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuak4bf2p.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpuak4bf2p.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuak4bf2p.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuak4bf2p.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountMax\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n                if(i %\
    \ j == 0){\n                    factorization += j\n                    break\n\
    \                }\n            }\n        }\n        factorization.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyi7denn.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppyi7denn.scala:9:22 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m){\n\e[31m\e[31m  |\e[0m                      ^\e[0m\n\e[31m  |\e[0m      \
    \                Found:    (n : Long)\n\e[31m  |\e[0m                      Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyi7denn.scala:13:20\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n)\n        factorization.foreach(f => factors += f)\n     \
    \   factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz5f3svh1.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpz5f3svh1.scala:9:28 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorization(n)\n\
    \e[31m\e[31m  |\e[0m                            ^\e[0m\n\e[31m  |\e[0m       \
    \                     Recursive \e[33mvalue\e[0m \e[35mfactorization\e[0m needs\
    \ type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach { f =>\n            factors\
    \ += f\n        }\n        factors\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwt8y_dox.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwt8y_dox.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = factorizations(n)\n\
    \e[31m\e[31m  |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                            Not found: factorizations\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorization.append(2)\n\
    \        factorization.append(n)\n        while(factorization.nonEmpty) {\n  \
    \          val current = factorization.last\n            factorization.removeLast()\n\
    \            factorization.append(current / 2)\n            factorization.append(current\
    \ % 2)\n        }\n        factorization.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvbgp2vg.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                factor *= factor\n\
    \            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k5j0fve.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfc\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcd = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfcde = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfcdef = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefg\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefgh =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghi = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghij = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijk = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijkl = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklm = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmn = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmns = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmno = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmnop = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmnopq = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmnopr = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmnoprs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmnops = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdefghijklmno\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl1zds80s.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1zds80s.scala:8:28\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m  |\e[0m                            ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpl1zds80s.scala:9:29 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1zds80s.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCount\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpl1zds80s.scala:11:34 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorizationCounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1zds80s.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorizationCountOf\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m"
  stdout: ''
  timestamp: 1660028622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 1\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                factor *= factor\n\
    \            }\n            factor += 1\n        }\n        factorization.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6k5j0fve.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorization\
    \ = factorization.+(n).filter(_ % _ == 0)\n        val factorizationList = factorization.toList\n\
    \        val factorizationListLength = factorizationList.length\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp598irdgp.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp598irdgp.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationListLength\e[0m = factorizationListLength - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListLength is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp598irdgp.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListLength\e\
    [0m = factorizationListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListLength is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp598irdgp.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListLength\e\
    [0m = factorizationListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationListLength is already defined as \e[33mvalue\e\
    [0m \e[35mfactorizationListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp598irdgp.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mfactorizationListLength\e\
    [0m = factorizationListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660028623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                val factors\
    \ = factorize(n / i)\n                factorization += i * factors.count(_ ==\
    \ i)\n            }\n        }\n        factorization.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppqp2js44.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppqp2js44.scala:9:23 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e[31m2\e\
    [0m) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m    \
    \                   Found:    (n : Long)\n\e[31m  |\e[0m                     \
    \  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val primes =\
    \ mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization5 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization6 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization9 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization10 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization13 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization17 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization18 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization21 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization22 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqscpld4.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqscpld4.scala:8:22\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mfactors\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqscpld4.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqscpld4.scala:10:28\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorization\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcqscpld4.scala:11:33 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mprimeFactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqscpld4.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mu"
  stdout: ''
  timestamp: 1660028623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbzutbkl.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplbzutbkl.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmplbzutbkl.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplbzutbkl.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplbzutbkl.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660028623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu79o4r9n.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimeCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimeCount is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimeCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrime is already defined as \e\
    [33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrime\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu79o4r9n.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorizationPrimePrimePrimePrimePrime\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizationPrimePrimePrimePrimePrime is already defined\
    \ as \e[33mvalue\e[0m \e[35mfactorizationPrimePrimePrimePrimePrime\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu79o4r9n.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mf"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n).reverse\n        factorization.foreach(f => {\n            factors\
    \ += f\n        })\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qsn778d.scala:8:22 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCount = 0\n        while(n > 1) {\n          \
    \  factorizationIndex += 1\n            val factorizationIndex = factorizationIndex\n\
    \            val factorizationCount = factorizationCount\n            val factorization\
    \ = factorization\n            factorization += n\n            val factorizations\
    \ = factorizations\n            factorizations += factorization\n            n\
    \ /= factorization\n        }\n        factorizations.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9a_44fn.scala:8:28 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9a_44fn.scala:9:29 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq9a_44fn.scala:14:37 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mfactorizationIndex\e\
    [0m = factorizationIndex\n\e[31m\e[31m   |\e[0m                              \
    \       ^\e[0m\n\e[31m   |\e[0m                           Recursive \e[33mvalue\e\
    [0m \e[35mfactorizationIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpq9a_44fn.scala:15:37 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mfactorizationCount\e\
    [0m = factorizationCount\n\e[31m\e[31m   |\e[0m                              \
    \       ^\e[0m\n\e[31m   |\e[0m                           Recursive \e[33mvalue\e\
    [0m \e[35mfactorizationCount\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpq9a_44fn.scala:16:32 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mfactorization\e[0m =\
    \ factorization\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\
    \e[31m   |\e[0m                                Recursive \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m lon"
  stdout: ''
  timestamp: 1660028624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0kmaod0.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mfactorization\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorization is already defined as \e[33mvalue\e[0m \e[35mfactorization\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorizations\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorizations is already defined as \e[33mvalue\e[0m \e[35mfactorizations\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0kmaod0.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660028576
