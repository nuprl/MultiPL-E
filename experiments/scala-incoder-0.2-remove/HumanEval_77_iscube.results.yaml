language: scala
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.Set[Long]()\n \
    \       cubes += cube\n        cubes += cube * cube\n        cubes += cube * cube\
    \ * cube\n        cubes.contains(a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl9n3ie42.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        cubes\
    \ <= 0 || cubes % 3 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplmev49p.scala:14)\n\tat Problem.main(tmpplmev49p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesset = mutable.HashSet[Long]()\n        cubesset += cube\n  \
    \      cubesset += cube*cube\n        cubesset += cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube\n     \
    \   cubesset += cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc8qxsxlm.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc8qxsxlm.scala:11:23 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesset\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 3 || cube == 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg3q1hf0.scala:13)\n\tat Problem.main(tmplg3q1hf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubes3 = cubes * cubes * cubes\n        val cubes5 = cubes * cubes * cubes *\
    \ cubes\n        val cubes7 = cubes * cubes * cubes * cubes * cubes\n        val\
    \ cubes9 = cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes11\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes13\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val\
    \ cubes15 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n\
    \        val cubes17 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes\n        val cubes19 = cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes21 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes23 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val\
    \ cubes25 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes27 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes\n        val cubes29 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes\n        val cubes31 = cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n\
    \        val cubes33 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n\
    \        val cubes35 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n\
    \        val cubes37 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9ikfb0mo.scala:28:77 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcubes37\e[0m = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * \n\e[31m\e[31m   |\e[0m          \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ikfb0mo.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesset = mutable.Set[Long]()\n        cubesset += cube\n      \
    \  cubesset += cube*cube\n        cubesset += cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube\n     \
    \   cubesset += cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqv8zmynp.scala:31:50 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        cubesset += cube*cube*cube*cube*cube*cube*\n\e\
    [31m\e[31m   |\e[0m                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv8zmynp.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv8zmynp.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesset\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        val\
    \ cubes3 = cubes * cubes * cube\n        val cubes5 = cubes * cubes * cubes *\
    \ cube\n        val cubes7 = cubes * cubes * cubes * cubes * cube\n        val\
    \ cubes9 = cubes * cubes * cubes * cubes * cubes * cube\n        val cubes11 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes13 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes15\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n   \
    \     val cubes17 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cube\n        val cubes19 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes21\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cube\n        val cubes23 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n\
    \        val cubes25 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes27\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes29 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes31 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes33\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n   \
    \     val cubes35 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cube\n        val cubes37 = cubes * cubes * cube\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_jfpmdp.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        val square = a / 4\n        val cubeAndSquare\
    \ = cube + square\n        cubeAndSquare == a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ivmxatc.scala:15)\n\tat Problem.main(tmp1ivmxatc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 3 || cube == 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg3q1hf0.scala:13)\n\tat Problem.main(tmplg3q1hf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes == a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3k5ko33d.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube.toLong\
    \ * cube.toLong\n        cubes % 1 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaipkfiwp.scala:15)\n\tat Problem.main(tmpaipkfiwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0)\n            return true\n\
    \        else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpovs1tl4w.scala:16)\n\tat Problem.main(tmpovs1tl4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        val square = a / 3\n        val cube2\
    \ = a / 3\n        val square2 = a / 3\n        val cube3 = a / 3\n        val\
    \ square3 = a / 3\n        val cube4 = a / 3\n        val square4 = a / 3\n  \
    \      val cube5 = a / 3\n        val square5 = a / 3\n        val cube6 = a /\
    \ 3\n        val square6 = a / 3\n        val cube7 = a / 3\n        val square7\
    \ = a / 3\n        val cube8 = a / 3\n        val square8 = a / 3\n        val\
    \ cube9 = a / 3\n        val square9 = a / 3\n        val cube10 = a / 3\n   \
    \     val square10 = a / 3\n        val cube11 = a / 3\n        val square11 =\
    \ a / 3\n        val cube12 = a / 3\n        val square12 = a / 3\n        val\
    \ cube13 = a / 3\n        val square13 = a / 3\n        val cube14 = a / 3\n \
    \       val square14 = a / 3\n        val cube15 = a / 3\n        val square15\
    \ = a / 3\n        val cube16 = a / 3\n        val square16 = a / 3\n        val\
    \ cube17 = a / 3\n        val square17 = a / 3\n        val cube18 = a / 3\n \
    \       val square18 = a / 3\n        val cube19 = a / 3\n        val square19\
    \ = a / 3\n        val cube20 = a / 3\n        val square20 = a / 3\n        val\
    \ cube21 = a / 3\n        val square21 = a / 3\n        val cube22 = a / 3\n \
    \       val square22 = a / 3\n        val cube23 = a / 3\n        val square23\
    \ = a / 3\n        val cube24 = a / 3\n        val square24 = a / 3\n        val\
    \ cube25 = a / 3\n        val square25 = a / 3\n        val cube26 = a / 3\n \
    \       val square26 = a / 3\n        val cube27 = a / 3\n        val square27\
    \ = a / 3\n        val cube28 = a / 3\n        val square28 = a / 3\n        val\
    \ cube29 = a / 3\n        val square29 = a / 3\n        val cube30 = a / 3\n \
    \       val square30 = \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsnl35i95.scala:68:22 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36msquare30\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsnl35i95.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer(cube)\n\
    \        cubes foreach { x =>\n            cubes += x * x\n        }\n       \
    \ cubes.size == a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2fpgzbo6.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        val square = a / 3\n        val cube2\
    \ = a / 3\n        val square2 = a / 3\n        val cube3 = a / 3\n        val\
    \ square3 = a / 3\n        val cube4 = a / 3\n        val square4 = a / 3\n  \
    \      val cube5 = a / 3\n        val square5 = a / 3\n        val cube6 = a /\
    \ 3\n        val square6 = a / 3\n        val cube7 = a / 3\n        val square7\
    \ = a / 3\n        val cube8 = a / 3\n        val square8 = a / 3\n        val\
    \ cube9 = a / 3\n        val square9 = a / 3\n        val cube10 = a / 3\n   \
    \     val square10 = a / 3\n        val cube11 = a / 3\n        val square11 =\
    \ a / 3\n        val cube12 = a / 3\n        val square12 = a / 3\n        val\
    \ cube13 = a / 3\n        val square13 = a / 3\n        val cube14 = a / 3\n \
    \       val square14 = a / 3\n        val cube15 = a / 3\n        val square15\
    \ = a / 3\n        val cube16 = a / 3\n        val square16 = a / 3\n        val\
    \ cube17 = a / 3\n        val square17 = a / 3\n        val cube18 = a / 3\n \
    \       val square18 = a / 3\n        val cube19 = a / 3\n        val square19\
    \ = a / 3\n        val cube20 = a / 3\n        val square20 = a / 3\n        val\
    \ cube21 = a / 3\n        val square21 = a / 3\n        val cube22 = a / 3\n \
    \       val square22 = a / 3\n        val cube23 = a / 3\n        val square23\
    \ = a / 3\n        val cube24 = a / 3\n        val square24 = a / 3\n        val\
    \ cube25 = a / 3\n        val square25 = a / 3\n        val cube26 = a / 3\n \
    \       val square26 = a / 3\n        val cube27 = a / 3\n        val square27\
    \ = a / 3\n        val cube28 = a / 3\n        val square28 = a / 3\n        val\
    \ cube29 = a / 3\n        val square29 = a / 3\n        val cube30 = a / 3\n \
    \       val square30 = \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsnl35i95.scala:68:22 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36msquare30\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsnl35i95.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcbabdsoe.scala:13)\n\tat Problem.main(tmpcbabdsoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcbabdsoe.scala:13)\n\tat Problem.main(tmpcbabdsoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        val cube2 = a / 3\n        val cube3\
    \ = a / 3\n        val cube4 = a / 3\n        val cube5 = a / 3\n        val cube6\
    \ = a / 3\n        val cube7 = a / 3\n        val cube8 = a / 3\n        val cube9\
    \ = a / 3\n        val cube10 = a / 3\n        val cube11 = a / 3\n        val\
    \ cube12 = a / 3\n        val cube13 = a / 3\n        val cube14 = a / 3\n   \
    \     val cube15 = a / 3\n        val cube16 = a / 3\n        val cube17 = a /\
    \ 3\n        val cube18 = a / 3\n        val cube19 = a / 3\n        val cube20\
    \ = a / 3\n        val cube21 = a / 3\n        val cube22 = a / 3\n        val\
    \ cube23 = a / 3\n        val cube24 = a / 3\n        val cube25 = a / 3\n   \
    \     val cube26 = a / 3\n        val cube27 = a / 3\n        val cube28 = a /\
    \ 3\n        val cube29 = a / 3\n        val cube30 = a / 3\n        val cube31\
    \ = a / 3\n        val cube32 = a / 3\n        val cube33 = a / 3\n        val\
    \ cube34 = a / 3\n        val cube35 = a / 3\n        val cube36 = a / 3\n   \
    \     val cube37 = a / 3\n        val cube38 = a / 3\n        val cube39 = a /\
    \ 3\n        val cube40 = a / 3\n        val cube41 = a / 3\n        val cube42\
    \ = a / 3\n        val cube43 = a / 3\n        val cube44 = a / 3\n        val\
    \ cube45 = a / 3\n        val cube46 = a / 3\n        val cube47 = a / 3\n   \
    \     val cube48 = a / 3\n        val cube49 = a / 3\n        val cube50 = a /\
    \ 3\n        val cube51 = a / 3\n        val cube52 = a / 3\n        val cube53\
    \ = a / 3\n        val cube54 = a / 3\n        val cube55 = a / 3\n        val\
    \ cube56 = a / 3\n        val cube57 = a / 3\n        val cube58 = a / 3\n   \
    \     val \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpuv6t8897.scala:67:11 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuv6t8897.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += a\n        cubes += a*a\n        cubes += a*a*a\n        cubes\
    \ += a*a*a*a\n        cubes += a*a*a*a*a\n        cubes += a*a*a*a*a*a\n     \
    \   cubes += a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a\n        cubes +=\
    \ a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes +=\
    \ a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes\
    \ += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkr0jufqc.scala:39:19 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        cubes += a*\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr0jufqc.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        val\
    \ cubecube = cubes * cubes\n        val cubecubecube = cubecube * cubecube\n \
    \       val cubecubecubecube = cubecubecube * cubecubecube\n        val cubecubecubecubecube\
    \ = cubecubecubecube * cubecubecubecube\n        val cubecubecubecubecubecube\
    \ = cubecubecubecubecube * cubecubecubecubecube\n        val cubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecubecube * cubecubecubecubecubecubecube\n        val\
    \ cubecubecubecubecubecubecubecubecube = cubecubecubecubecubecubecubecubecubecube\
    \ * cubecubecubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecubecubecubecube * cubecubecubecubecubecubecubecube\n\
    \        val cubecubecubecubecubecubecubecubecube = cubecubecubecubecubecubecubecubecubecube\
    \ * cubecubecubecubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecubecubecubecubecube * cubecubecubecubecubecubecubecubecube\n\
    \        val cubecubecubecubecubecubecubecubecubecube = cubecubecubecubecubecubecubecubecubecubecubecube\
    \ * cubecubecubecubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecubecubecubecubecubecube * cubecubecubecubecubecubecubecubecube\n\
    \        val cubecubecubecubecubecubecubecubecubecube = cubecubecubecubecubecubecubecubecubecubecubecubecube\
    \ * cubecubecubecubecubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecubecubecubecubecubecubecube * cubecubecubecubecubecubecubecubecube\n\
    \        val cubecubecubecubecubecubecubecubecubecube = cubecubecubecubecubecubecubecubecubecubecubecube\
    \ * cubecubecubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecubecubecubecubecube * cubecubecubecubecube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwoytulu0.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcubecubecubecubecubecubecube\e\
    [0m = cubecubecubecubecubecubecube * cubecubecubecubecubecube\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubecubecubecubecubecubecube is already defined as \e[33mvalue\e\
    [0m \e[35mcubecubecubecubecubecubecube\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwoytulu0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcubecubecubecubecubecubecubecubecube\e\
    [0m = cubecubecubecubecubecubecubecubecubecube * cubecubecubecubecubecubecubecube\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubecubecubecubecubecubecubecubecube is already defined as\
    \ \e[33mvalue\e[0m \e[35mcubecubecubecubecubecubecubecubecube\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwoytulu0.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubecubecubecubecubecubecubecubecube\e[0m = cubecubecubecubecubecubecubecubecubecube\
    \ * cubecubecubecubecubecubecubecubecube\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubecubecubecubecubecubecubecubecube is already defined as\
    \ \e[33mvalue\e[0m \e[35mcubecubecubecubecubecubecubecubecube\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwoytulu0.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcub"
  stdout: ''
  timestamp: 1659979810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0 || cube == 2) return true\n\
    \        else return false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ye99t_o.scala:14)\n\tat Problem.main(tmp6ye99t_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubes3 = cubes * cubes * cube\n        val cubes5 = cubes * cubes * cubes *\
    \ cube\n        val cubes7 = cubes * cubes * cubes * cubes * cube\n        val\
    \ cubes9 = cubes * cubes * cubes * cubes * cubes * cube\n        val cubes11 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes13\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n\
    \        val cubes15 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cube\n        val cubes17 = cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cube\n        val cubes19 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cube\n        val cubes21 = cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cube\n        val cubes23 = cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cube\n        val cubes25 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cube\n        val cubes27 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n   \
    \     val cubes29 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cube\n        val cubes31 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n\
    \        val cubes33 = cubes * cubes * cubes * cubes * cube\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiekik25k.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcbabdsoe.scala:13)\n\tat Problem.main(tmpcbabdsoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        val\
    \ cubes3 = cubes * cubes\n        val cubes5 = cubes * cubes * cubes\n       \
    \ val cubes7 = cubes * cubes * cubes * cubes\n        val cubes9 = cubes * cubes\
    \ * cubes * cubes * cubes\n        val cubes11 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes13 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes15 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes\n        val cubes17 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes19 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n  \
    \      val cubes21 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes\n        val cubes23 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n\
    \        val cubes25 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes27 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes29 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes\n        val cubes31 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes\n        val cubes33 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes35 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes37\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5wr5mgvd.scala:28:101 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcubes37\e[0m = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wr5mgvd.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcbabdsoe.scala:13)\n\tat Problem.main(tmpcbabdsoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a ^ 3\n        cube == a && cube % a == 0\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83mwk9am.scala:13)\n\tat Problem.main(tmp83mwk9am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        cubes\
    \ % cubes == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxmb8_qza.scala:15)\n\tat Problem.main(tmpxmb8_qza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += cube\n        cubes += cube * cube\n        cubes += cube *\
    \ cube * cube\n        cubes.contains(a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1m0iimu.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % cube\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeecu_06e.scala:16)\n\tat Problem.main(tmpeecu_06e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesset = mutable.Set[Long]()\n        cubesset += cube\n      \
    \  cubesset += cube*cube\n        cubesset += cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube\n     \
    \   cubesset += cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqv8zmynp.scala:31:50 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        cubesset += cube*cube*cube*cube*cube*cube*\n\e\
    [31m\e[31m   |\e[0m                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv8zmynp.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv8zmynp.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesset\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.HashSet(cubes)\n        val cubesSetSize = cubesSet.size()\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cube\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy110jt_9.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy110jt_9.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcubesSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy110jt_9.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy110jt_9.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpy110jt_9.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcubesSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[3"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube.toLong\
    \ * cube.toLong\n        cubes % 1 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaipkfiwp.scala:15)\n\tat Problem.main(tmpaipkfiwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a ^ 3\n        val square = a ^ 2\n        val cubeAndSquare\
    \ = cube + square\n        cubeAndSquare == a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjribs9gw.scala:15)\n\tat Problem.main(tmpjribs9gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        val cubes = cube.product\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt1huwx4a.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.product\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                  value product is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 2 || cube == 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jo4iqqw.scala:14)\n\tat Problem.main(tmp_jo4iqqw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += a\n        cubes += a*a\n        cubes += a*a*a\n        cubes\
    \ += a*a*a*a\n        cubes += a*a*a*a*a\n        cubes += a*a*a*a*a*a\n     \
    \   cubes += a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a\n        cubes +=\
    \ a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes +=\
    \ a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n\
    \        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpybl99d5x.scala:39:53 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        cubes += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpybl99d5x.scala:10:20 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong * a.toString.toLong * a.toString.toLong\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppr1ipgpw.scala:14)\n\tat Problem.main(tmppr1ipgpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        cube == a && cube == a * a && cube ==\
    \ a * a * a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_vetp8s_.scala:13)\n\tat Problem.main(tmp_vetp8s_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0)\n            return true\n\
    \        else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpovs1tl4w.scala:16)\n\tat Problem.main(tmpovs1tl4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += cube\n        cubes += cube * cube\n        cubes += cube *\
    \ cube * cube\n        cubes.contains(cube)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp907yxh4g.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 3 || cube == 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg3q1hf0.scala:13)\n\tat Problem.main(tmplg3q1hf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        cube == a && cube == cube && cube ==\
    \ cube && cube == cube && cube == cube && cube == cube\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmfrnjf3v.scala:13)\n\tat Problem.main(tmpmfrnjf3v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % cube\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeecu_06e.scala:16)\n\tat Problem.main(tmpeecu_06e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == (a * a * a)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgwo5_su.scala:16)\n\tat Problem.main(tmprgwo5_su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 3 || cube == 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg3q1hf0.scala:13)\n\tat Problem.main(tmplg3q1hf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubes3 = cubes * cubes * cube\n        val cubes5 = cubes * cubes * cubes *\
    \ cube\n        val cubes7 = cubes * cubes * cubes * cubes * cube\n        val\
    \ cubes9 = cubes * cubes * cubes * cubes * cubes * cube\n        val cubes11 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes13 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes15\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n  \
    \      val cubes17 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes19 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes21 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes\n        val cubes23 = cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes25 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes27 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n  \
    \      val cubes29 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes31\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes33 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes35 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes37 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzw7zqa5v.scala:28:117 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcubes37\e[0m = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzw7zqa5v.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        cube == a && cube == a * a && cube ==\
    \ a * a * a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_vetp8s_.scala:13)\n\tat Problem.main(tmp_vetp8s_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube.toLong\
    \ * cube.toLong\n        cubes % 1 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaipkfiwp.scala:15)\n\tat Problem.main(tmpaipkfiwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a / 3\n        cube == a && cube == a * a && cube ==\
    \ a * a * a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_vetp8s_.scala:13)\n\tat Problem.main(tmp_vetp8s_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 3 || cube == 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg3q1hf0.scala:13)\n\tat Problem.main(tmplg3q1hf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesset = mutable.Set[Long]()\n        cubesset += cube\n      \
    \  cubesset += cube*cube\n        cubesset += cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube\n     \
    \   cubesset += cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0jmddyiv.scala:31:19 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        cubesset += \n\e[31m\e[31m   |\e[0m         \
    \          ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jmddyiv.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jmddyiv.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesset\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 3 || cube == 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg3q1hf0.scala:13)\n\tat Problem.main(tmplg3q1hf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        cubes\
    \ % 3 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9kmhjro1.scala:14)\n\tat Problem.main(tmp9kmhjro1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += a\n        cubes += a * a\n        cubes += a * a * a\n    \
    \    cubes += a * a * a * a\n        cubes += a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n      \
    \  cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzorfawq.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.HashSet(cubes)\n        cubesSet.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprua1mw06.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprua1mw06.scala:11:23 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet(cubes)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubes3 = cubes*cubes*cubes\n        val cubes5 = cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes7 = cubes*cubes*cubes*cubes*cubes*cubes*cubes\n        val cubes9\
    \ = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n        val cubes11\
    \ = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n      \
    \  val cubes13 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes15 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes17 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes19 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes21 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes23 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes25 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes27 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes29 = cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes*cubes\n\
    \        val cubes31 = cubes*cubes*cubes*cube\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ewfoyqf.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesset = mutable.Set[Long]()\n        cubesset += cube\n      \
    \  cubesset += cube*cube\n        cubesset += cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube\n     \
    \   cubesset += cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesset += cube*cube*cube*cube*cube*cube*\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqv8zmynp.scala:31:50 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        cubesset += cube*cube*cube*cube*cube*cube*\n\e\
    [31m\e[31m   |\e[0m                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv8zmynp.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqv8zmynp.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesset\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        val\
    \ cubes3 = cubes * cubes * cube\n        val cubes5 = cubes * cubes * cubes *\
    \ cube\n        val cubes7 = cubes * cubes * cubes * cubes * cube\n        val\
    \ cubes9 = cubes * cubes * cubes * cubes * cubes * cube\n        val cubes11 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes13 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes15\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n   \
    \     val cubes17 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cube\n        val cubes19 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes21\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cube\n        val cubes23 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n\
    \        val cubes25 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes27\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes29 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes31 = cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cube\n        val cubes33\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cube\n   \
    \     val cubes35 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cube\n        val cubes37 = cubes * cubes * cube\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_jfpmdp.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toInt\n        cube == cube * cube * cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y0x5kuy.scala:16)\n\tat Problem.main(tmp4y0x5kuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % cube\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeecu_06e.scala:16)\n\tat Problem.main(tmpeecu_06e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes == a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3k5ko33d.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        val\
    \ cubecube = cubes * cubes\n        val cubecubecube = cubecube.toInt\n      \
    \  val cubecubecubecube = cubecubecube * cubecube\n        val cubecubecubecubecube\
    \ = cubecubecubecube * cubecubecube\n        val cubecubecubecubecubecube = cubecubecubecubecube\
    \ * cubecubecubecube\n        val cubecubecubecubecubecubecube = cubecubecubecubecube\
    \ * cubecubecubecubecube\n        val cubecubecubecubecubecubecube = cubecubecubecubecube\
    \ * cubecubecubecubecube\n        val cubecubecubecubecubecubecube = cubecubecubecubecube\
    \ * cubecubecubecubecube\n        val cubecubecubecubecubecubecubecube = cubecubecubecubecubecube\
    \ * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecubecube\n        val cubecubecubecubecubecubecubecube\
    \ = cubecubecubecubecubecube * cubecubecubecubecube\n        val cubecubecubecubecubecube\
    \ = cubecubecubecubecube * cubecubecube\n        val cubecubecubecube = cubecubecube\
    \ * cube\n        val cubecube = cubecube * cube\n        val cube = cube * cube\n\
    \        val cube = cube * cube\n        val cube = cube * cube\n        val cube\
    \ = cube * cube\n\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4hkepfu.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcubecubecubecubecubecubecube\e\
    [0m = cubecubecubecubecube * cubecubecubecubecube\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubecubecubecubecubecubecube is already defined as \e[33mvalue\e\
    [0m \e[35mcubecubecubecubecubecubecube\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4hkepfu.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcubecubecubecubecubecubecube\e\
    [0m = cubecubecubecubecube * cubecubecubecubecube\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubecubecubecubecubecubecube is already defined as \e[33mvalue\e\
    [0m \e[35mcubecubecubecubecubecubecube\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4hkepfu.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcubecubecubecubecubecubecubecubecube\e\
    [0m = cubecubecubecubecubecube * cubecubecubecubecubecube\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubecubecubecubecubecubecubecubecube is already defined as\
    \ \e[33mvalue\e[0m \e[35mcubecubecubecubecubecubecubecubecube\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg4hkepfu.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubecubecubecubecubecubecubecubecube\e[0m = cubecubecubecubecubecube *\
    \ cubecubecubecubecubecube\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % 3\n        cubesRemainder == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdie9yi.scala:15)\n\tat Problem.main(tmpbzdie9yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n        val\
    \ cubesRemainder = cubes % cube\n        if (cubesRemainder == 0) {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnthqksbf.scala:20)\n\tat Problem.main(tmpnthqksbf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube.toLong\
    \ * cube.toLong\n        cubes == a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv076pm4.scala:17)\n\tat Problem.main(tmplv076pm4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesCount = cubes.length\n        val cubesSum = cubes.sum\n   \
    \     val cubesSumSquare = cubesSum * cubesSum\n        val cubesSumCube = cubesSum\
    \ * cubes\n        val cubesSumCubeSquare = cubesSumCube * cubesSum\n        val\
    \ cubesSumCubeCube = cubesSumCube * cubes\n        val cubesSumCubeCubeSquare\
    \ = cubesSumCubeSquare * cubesSum\n        val cubesSumCubeCubeCube = cubesSumCubeCube\
    \ * cubes\n        val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare * cubesSum\n\
    \        val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCube * cubes\n       \
    \ val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare * cubesSum\n       \
    \ val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCube * cubes\n        val cubesSumCubeCubeCubeSquare\
    \ = cubesSumCubeCubeSquare * cubesSum\n        val cubesSumCubeCubeCubeCube =\
    \ cubesSumCubeCubeCube * cubes\n        val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare\
    \ * cubesSum\n        val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCube * cubes\n\
    \        val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare * cubesSum\n\
    \        val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCube * cubes\n       \
    \ val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare * cubesSum\n       \
    \ val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCube * cubes\n        val cubesSumCubeCubeCubeSquare\
    \ = cubesSumCubeCubeSquare * cubesSum\n        val cubesSumCubeCubeCubeCube =\
    \ cubesSumCubeCubeCube * cubes\n        val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare\
    \ * cubesSum\n        val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCube * cubes\n\
    \        val cubesSumCubeCubeCubeSquare = cubesSumCubeCubeSquare * cubesSum\n\
    \        val cubesSumCubeCubeCubeCube = cubesSumCubeCubeCu\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpolrmyreg.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcubesSumCubeCubeCubeSquare\e\
    [0m = cubesSumCubeCubeSquare * cubesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSumCubeCubeCubeSquare is already defined as \e[33mvalue\e\
    [0m \e[35mcubesSumCubeCubeCubeSquare\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpolrmyreg.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubesSumCubeCubeCubeCube\e\
    [0m = cubesSumCubeCubeCube * cubes\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSumCubeCubeCubeCube is already defined as \e[33mvalue\e\
    [0m \e[35mcubesSumCubeCubeCubeCube\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpolrmyreg.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcubesSumCubeCubeCubeSquare\e\
    [0m = cubesSumCubeCubeSquare * cubesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSumCubeCubeCubeSquare is already defined as \e[33mvalue\e\
    [0m \e[35mcubesSumCubeCubeCubeSquare\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpolrmyreg.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcubesSumCubeCubeCubeCube\e\
    [0m = cubesSumCubeCubeCube * cubes\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSumCubeCubeCubeCube is already defined as \e[33mvalue\e\
    [0m \e[35mcubesSumCubeCubeCubeCube\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        cube == 0 || cube == 1 || cube == 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcy9z5y_e.scala:14)\n\tat Problem.main(tmpcy9z5y_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube * cube\n\
    \        cubes % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8yshwhc.scala:15)\n\tat Problem.main(tmpz8yshwhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n   \
    \     cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp217mlzqx.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toLong * cube.toLong\
    \ * cube.toLong\n        cubes % 1 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaipkfiwp.scala:15)\n\tat Problem.main(tmpaipkfiwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        cube == cube * cube * cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndttij7.scala:16)\n\tat Problem.main(tmpbndttij7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = cube.toInt\n        val\
    \ cubes3 = cubes * cubes\n        val cubes5 = cubes * cubes * cubes\n       \
    \ val cubes7 = cubes * cubes * cubes * cubes\n        val cubes9 = cubes * cubes\
    \ * cubes * cubes * cubes\n        val cubes11 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes13 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes\n        val cubes15 = cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes\n        val cubes17 = cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes19 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n  \
    \      val cubes21 = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes\n        val cubes23 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n\
    \        val cubes25 = cubes * cubes * cubes * cubes * cubes * cubes * cubes *\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes27 =\
    \ cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes29 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes\n        val cubes31 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes\n        val cubes33 = cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes\n        val cubes35 = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes\n        val cubes37\
    \ = cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes\
    \ * \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5wr5mgvd.scala:28:101 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcubes37\e[0m = cubes * cubes\
    \ * cubes * cubes * cubes * cubes * cubes * cubes * cubes * cubes * \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wr5mgvd.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toString.toLong * a.toString.toLong * a.toString.toLong\n\
    \        cube == a.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b7mglxf.scala:16)\n\tat Problem.main(tmp4b7mglxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a % 3\n        if (cube == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6znmudxm.scala:14)\n\tat Problem.main(tmp6znmudxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    def iscube(a : Long) : Boolean\
    \ = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq5qmawd.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979800
