language: scala
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val paren_stack = mutable.Stack[String]()\n\
    \            val paren_groups = mutable.ListBuffer[String]()\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpip4u9ut6.scala:43:30 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \e[36mparen_groups\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpip4u9ut6.scala:45:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpip4u9ut6.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpip4u9ut6.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpip4u9ut6.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpip4u9ut6.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] "
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces =\
    \ paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphc955g50.scala:20:145 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmphc955g50.scala:17:106 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphc955g50.scala:19:258 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_close_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_counts = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_counts = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_counts_map = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk18cdhut.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk18cdhut.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk18cdhut.scala:10:32 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk18cdhut.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_close_braces\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk18cdhut.scala:12:38 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open_brace_counts\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk18cdhut.scala:13:39\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_close_brace_counts\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()"
  stdout: ''
  timestamp: 1660013335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var open_parens\
    \ = 0\n        var close_parens = 0\n        var open_brackets = 0\n        var\
    \ close_brackets = 0\n        var open_curly = 0\n        var close_curly = 0\n\
    \        var open_paren_groups = 0\n        var close_paren_groups = 0\n     \
    \   var open_curly_groups = 0\n        var close_curly_groups = 0\n        var\
    \ open_curly_group = 0\n        var close_curly_group = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var open_curly_group_count\
    \ = 0\n        var close_curly_group_count = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplfjzeq55.scala:82:11 ---------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmplfjzeq55.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mopen_curly_group_count\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_curly_group_count is already defined as \e[33mvariable\e\
    [0m \e[35mopen_curly_group_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplfjzeq55.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mclose_curly_group_count\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_curly_group_count is already defined as \e[33mvariable\e\
    [0m \e[35mclose_curly_group_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplfjzeq55.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mopen_curly_group_count\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_curly_group_count is already defined as \e[33mvariable\e\
    [0m \e[35mopen_curly_group_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplfjzeq55.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mclose_curly_group_count\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_curly_group_count is already defined as \e[33mvariable\e\
    [0m \e[35mclose_curly_group_count\e[0m\n"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:11:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:12:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:13:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660013339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val paren_open = false\n        val paren_close\
    \ = false\n        val paren_group = \"\"\n        val paren_group_count = 0\n\
    \        val paren_group_open = false\n        val paren_group_close = false\n\
    \        val paren_group_open_braces = mutable.ListBuffer[String]()\n        val\
    \ paren_group_close_braces = mutable.ListBuffer[String]()\n        val paren_group_open_brace_count\
    \ = 0\n        val paren_group_close_brace_count = 0\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqw6hjcx.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_brace_open\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_brace_open is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_brace_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqw6hjcx.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_brace_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_brace_close\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqw6hjcx.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_brace_open\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_brace_open is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_brace_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqw6hjcx.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_brace_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_brace_close\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiqw6hjcx.scala:32:12 ---------"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \"(\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"{\", \"{\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"}\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\",\", \",\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4ebw9wq.scala:21:160 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj4ebw9wq.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces =\
    \ paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n      \
    \  val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1u7jtvmh.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1u7jtvmh.scala:18:152\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1u7jtvmh.scala:19:167 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_"
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code goes here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth = mutable.ListBuffer[Int]()\n        val paren_close_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_map = mutable.Map[Int,\
    \ Int]()\n        val paren_close_depth_map = mutable.Map[Int, Int]()\n      \
    \  val paren_open_depth_map_size = mutable.Map[Int, Int]()\n        val paren_close_depth_map_size\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth = mutable.Map[Int,\
    \ Int]()\n        val paren_close_depth_map_depth = mutable.Map[Int, Int]()\n\
    \        val paren_open_depth_map_depth_map = mutable.Map[Int, Int]()\n      \
    \  val paren_close_depth_map_depth_map = mutable.Map[Int, Int]()\n        val\
    \ paren_open_depth_map_depth_map_size = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map_size\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth_map_depth\
    \ = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map_depth\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth_map_depth_map\
    \ = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map_depth_map\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth_map_depth_map_size\
    \ = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map_depth_map_size\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth_map_depth_map_depth\
    \ = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map_depth_map_depth\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth_map_depth_map_depth_map\
    \ = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map_depth_map_depth_map\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphmfqy93o.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmphmfqy93o.scala:10:27 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmfqy93o.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphmfqy93o.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphmfqy93o.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmfqy93o.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_close_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e["
  stdout: ''
  timestamp: 1660013336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \").replace(\"(\", \"\")).filter(x => x.trim().nonEmpty)\n        paren_group_strings.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbwk0wwx8.scala:14)\n\tat Problem.main(tmpbwk0wwx8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_close_index = mutable.ListBuffer[Int]()\n        val paren_open_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_close_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpei29fe8l.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpei29fe8l.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_close_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpei29fe8l.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpei29fe8l.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_close_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n"
  stdout: ''
  timestamp: 1660013335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp_5ef20p.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_5ef20p.scala:11:68\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpp_5ef20p.scala:12:69 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_5ef20p.scala:13:69 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\",\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpp_5ef20p.scala:14:69 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp_5ef20p.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filte"
  stdout: ''
  timestamp: 1660013338
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"{\", \"\").replace(\"\
    }\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    [\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"\").replace(\"}\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"[\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"\").replace(\"}\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpklax7_2k.scala:14:99 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpklax7_2k.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"{\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"}\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpklax7_2k.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"[\""
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_group_size = paren_string.count('(') - paren_string.count(')')\n\
    \            paren_groups += paren_string\n            paren_stack.push(paren_string.substring(paren_group_size))\n\
    \        }\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv30u3n6e.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpv30u3n6e.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloade"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val open = x.split(\"\\\\)\").length\n            val closed\
    \ = x.split(\"\\\\)\").length - 1\n            if (open > closed) {\n        \
    \        paren_groups += x\n            } else {\n                paren_open +=\
    \ x\n            }\n        })\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7varbcfs.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7varbcfs.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7varbcfs.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xvssvb_.scala:13:8 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\") \"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5xvssvb_.scala:28:1 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[Int]()\n        val close_braces\
    \ = mutable.ListBuffer[Int]()\n        val open_parens = mutable.ListBuffer[Int]()\n\
    \        val close_parens = mutable.ListBuffer[Int]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val open_paren_count = 0\n \
    \       val close_paren_count = 0\n        val open_brace_open = false\n     \
    \   val close_brace_open = false\n        val open_paren_open = false\n      \
    \  val close_paren_open = false\n        val open_brace_close = false\n      \
    \  val close_brace_close = false\n        val open_paren_close = false\n     \
    \   val close_paren_close = false\n        val open_brace_opened = false\n   \
    \     val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkfvsak4_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_opened\e[0m =\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_opened is already defined as \e[33mvalue\e[0m \e\
    [35mopen_brace_opened\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfvsak4_.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mclose_brace_opened\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_brace_opened is already defined as \e[33mvalue\e[0m\
    \ \e[35mclose_brace_opened\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfvsak4_.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_opened\e[0m =\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_opened is already defined as \e[33mvalue\e[0m \e\
    [35mopen_paren_opened\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfvsak4_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_opened\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_opened is already defined as \e[33mvalue\e[0m\
    \ \e[35mclose_paren_opened\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkfvsak4_.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_closed\e[0m =\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_count = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                paren_count += 1\n            } else if (c ==\
    \ ')') {\n                paren_count -= 1\n            } else if (c == ' ') {\n\
    \                if (paren_count == 0) {\n                    paren_groups +=\
    \ c\n                }\n            }\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwle41d7_.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_open_braces = 0\n        var paren_closed_braces = 0\n    \
    \    var paren_group = \"\"\n        var paren_group_open_braces = 0\n       \
    \ var paren_group_closed_braces = 0\n        var paren_group_open_braces_count\
    \ = 0\n        var paren_group_closed_braces_count = 0\n        var paren_group_open_braces_count_max\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_max\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_min\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_min\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_min\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_min\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_max\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_max\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_min\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_min\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_max\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_max\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_min\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_min\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_max\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_max\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_min\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_min\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_max\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_max\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_min\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_min\
    \ = paren_group_closed_braces_count\n        var paren_group_open_braces_count_max\
    \ = paren_group_open_braces_count\n        var paren_group_closed_braces_count_max\
    \ = paren_group_closed_braces_count\n        var paren_group_open\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7n_auo4l.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n_auo4l.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_open_braces_count_min\e[0m = paren_group_open_braces_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_braces_count_min is already defined as \e\
    [33mvariable\e[0m \e[35mparen_group_open_braces_count_min\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n_auo4l.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_closed_braces_count_min\e[0m = paren_group_closed_braces_count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_braces_count_min is already defined as\
    \ \e[33mvariable\e[0m \e[35mparen_group_closed_braces_count_min\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7n_auo4l.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mparen_group_open_braces_count_max\e[0m =\
    \ paren_group_open_braces_count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_braces_count_max is already defined as \e\
    [33mvariable\e[0m \e[35mparen_group_open_braces_count_max\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7n_auo4l.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_closed_braces_count_max\e[0m"
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_max = mutable.ListBuffer[Int]()\n        val paren_group_size_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe_6_8ube.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_size_min\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_size_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_max\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_size_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_sum\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_size_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_avg\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_avg is already"
  stdout: ''
  timestamp: 1660013335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_avg = mutable.ListBuffer[Int]()\n        val paren_closed_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_avg = mutable.ListBuffer[Int]()\n        val paren_open_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjo38a7qx.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjo38a7qx.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_min\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_open_depth_min is already defined as \e[33mvalue\e[0m \e\
    [35mparen_open_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjo38a7qx.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjo38a7qx.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_max\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjo38a7qx.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_max is already defined a"
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \").trim())\n        paren_group_strings.filter(x => !x.isEmpty)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp86mt8z8.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfsanqkmv.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfsanqkmv.scala:19:122\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfsanqkmv.scala:20:134 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfsanqkmv.scala:22:5\
    \ --"
  stdout: ''
  timestamp: 1660013345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\") \", \" ) \"))\n  \
    \      val paren_groups_with_spaces_trimmed_trimmed_trimmed = paren_groups_with_spaces_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed.map(x => x.replace(\") \"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x => x.replace(\"\
    ( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed.map(x =>\
    \ x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimme\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi5qdhqi0.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi5qdhqi0.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi5qdhqi0.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definit"
  stdout: ''
  timestamp: 1660013344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \"))\n        val paren_group_strings_set = paren_group_strings.distinct\n   \
    \     val paren_group_strings_list_set = paren_group_strings_set.map(x => x.replace(\"\
    (\", \"\")).distinct\n        val paren_group_strings_list_list_set = paren_group_strings_list_set.map(x\
    \ => x.replace(\")\", \"\")).distinct\n        val paren_group_strings_list_list_list_set\
    \ = paren_group_strings_list_list_set.map(x => x.replace(\"(\", \"\")).distinct\n\
    \        val paren_group_strings_list_list_list_list_set = paren_group_strings_list_list_list_set.map(x\
    \ => x.replace(\")\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_set.map(x => x.replace(\"(\", \"\"\
    )).distinct\n        val paren_group_strings_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_set.map(x => x.replace(\")\"\
    , \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_set.map(x => x.replace(\"\
    (\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_set.map(x => x.replace(\"\
    )\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\")\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\")\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpth820co0.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m = paren_group_strings_list_list_list_list_list_list_list_list_list_list_set.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m)).distinct\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_strings_list_list_list_list_list_list_list_list_list_list_set\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_group_strings_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpth820co0.scala:19:78 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_list_list_list_list_list_list_list_list_set\e\
    [0m = paren_group_strings_list_list_list_list_list_list_list_list_set.map(\e[36mx\e\
    [0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m)).distinct\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_group_strings_list_list_list_list_list_list_list_list_set\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpth820co0.scala:20:83\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_strings_list_list_list_list_list_list_list_list_list_set\e\
    [0m = paren_group_strings_list_list_list_list_list_list_list_list_list_set.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m)).distinct\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[3"
  stdout: ''
  timestamp: 1660013344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_remainder_size = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder = paren_groups_size_remainder_size\
    \ % 2\n        val paren_groups_size_remainder_size_remainder_remainder = paren_groups_size_remainder_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder + 1\n     \
    \   val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder +\
    \ 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwfcowwey.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwfcowwey.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpwfcowwey.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660013345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \")\n \
    \       val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_space\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4hj608bo.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4hj608bo.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \"{\").replace(\"\
    )\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"{\"\
    , \"{\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"{\\n \"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n {\", \"\\n {\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\\n {\\n\", \"\\n {\\n \"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\\n {\\n\", \"\\n {\\n \"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpybd6qtj2.scala:18:153 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"\\n {\\n\"\e[0m, \e[31m\"\\n {\\n \"\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpybd6qtj2.scala:19:168 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpybd"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val open_braces = paren_string.split(\"\\\\{\").length\n        \
    \    val close_braces = paren_string.split(\"\\\\}\").length\n            val\
    \ open_brace_count = paren_string.split(\"\\\\{\").length - 1\n            val\
    \ close_brace_count = paren_string.split(\"\\\\}\").length - 1\n            val\
    \ open_brace_count_with_paren = open_brace_count + open_brace_count_with_paren\n\
    \            val close_brace_count_with_paren = close_brace_count + close_brace_count_with_paren\n\
    \            val open_brace_count_without_paren = open_brace_count - open_brace_count_with_paren\n\
    \            val close_brace_count_without_paren = close_brace_count - close_brace_count_with_paren\n\
    \            val open_brace_count_with_paren_without_paren = open_brace_count_without_paren\
    \ + open_brace_count_with_paren\n            val close_brace_count_with_paren_without_paren\
    \ = close_brace_count_without_paren + close_brace_count_with_paren\n         \
    \   val open_brace_count_without_paren_without_paren = open_brace_count_without_paren\
    \ - open_brace_count_with_paren\n            val close_brace_count_without_paren_without_paren\
    \ = close_brace_count_without_paren - close_brace_count_with_paren\n         \
    \   val open_brace_count_with_paren_without_paren_without_paren = open_brace_count_without_paren_without_paren\
    \ + open_brace_count_with_paren_without_paren\n            val close_brace_count_with_paren_without_paren_without_paren\
    \ = close_brace_count_without_paren_without_paren + close_brace_count_with_paren_without_paren\n\
    \            val open_brace_count_without_paren_without_paren_without_paren =\
    \ open_brace_count_without_paren_without_paren - open_brace_count_with_paren_without_paren\n\
    \            val close_brace_count_without_paren_without_paren_without_paren =\
    \ close_brace_count_without_paren_without_paren - close_brace_count_with_paren_without_paren\n\
    \            val open_brace_count_with_paren_without_paren_without_paren_without_paren\
    \ = open_brace_count_without_paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmfxdec7i.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmfxdec7i.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmfxdec7i.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmfxdec7i.scala:30:88 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mopen_brace_count_with_paren_without_paren_without_paren_without_paren\e\
    [0m = open_brace_count_without_paren_\n\e[31m\e[31m   |\e[0m                 \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: open_brace_count_without_paren_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmfxdec7i.scala:39:1\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpmfxdec7i.scala:32:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val open = x.split(\"\\\\)\").length\n            val closed\
    \ = x.split(\"\\\\)\").length - 1\n            paren_groups ++= x.split(\"\\\\\
    (\")\n            paren_open ++= x.split(\"\\\\(\").take(open)\n            paren_closed\
    \ ++= x.split(\"\\\\(\").drop(open)\n        })\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp322xoi89.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp322xoi89.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp322xoi89.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_depth_limit_max_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_depth_limit_max_max = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtt1xcik.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgtt1xcik.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtt1xcik.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtt1xcik.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtt1xcik.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg"
  stdout: ''
  timestamp: 1660013346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Initialize a list to hold all the separate groups\n\
    \        val groups: List[String] = Nil\n        // Iterate over each character\
    \ in the string\n        for (c <- paren_string) {\n            // If the character\
    \ is a left parenthesis, add it to the list\n            if (c == '(') {\n   \
    \             groups = groups ::: List(c)\n            }\n            // If the\
    \ character is a right parenthesis, remove the last element from the list\n  \
    \          else if (c == ')') {\n                groups = groups.tail\n      \
    \      }\n            // If the character is a space, ignore it\n            else\
    \ if (c == ' ') {\n            }\n            // If the character is not a left\
    \ parenthesis or right parenthesis, ignore it\n            else {\n          \
    \  }\n        }\n        // Return the list of groups\n        return groups\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7emrfvr_.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                groups = groups\
    \ ::: List(c)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[Matchable]\n\e[31m\
    \   |\e[0m                         Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp7emrfvr_.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                groups = groups.tail\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val groups\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" \\\\)\").replace(\"(\", \" \\\\(\"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg680lpd1.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg680lpd1.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpg680lpd1.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpg680lpd1.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_w"
  stdout: ''
  timestamp: 1660013348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\") \", \" \"))\n     \
    \   val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\")\
    \ \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvdvzpy9.scala:11:101\
    \ -------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                 Found:    Int\n\e[31m   |\e\
    [0m                                                       Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvdvzpy9.scala:13:139\
    \ -------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                    Found:    Int\n\e[31m   |\e[0m          \
    \                                             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvdvzpy9.scala:15:177 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                                                            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                            Required: Boole"
  stdout: ''
  timestamp: 1660013350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp482nzswf.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                   Not found: paren_group\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp482nzswf.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brace_count\
    \ = 0\n        var closed_brace_count = 0\n        var paren_group = \"\"\n  \
    \      for (c <- paren_string) {\n            if (c == '(') {\n              \
    \  open_braces += 1\n                open_brace_count += 1\n            } else\
    \ if (c == ')') {\n                closed_braces += 1\n                closed_brace_count\
    \ += 1\n                if (open_braces == closed_braces) {\n                \
    \    paren_group += c\n                    paren_groups += paren_group\n     \
    \               open_braces = 0\n                    closed_braces = 0\n     \
    \               open_brace_count = 0\n                    closed_brace_count =\
    \ 0\n                    paren_group = \"\"\n                }\n            }\
    \ else if (c == ' ') {\n                if (open_brace_count == closed_brace_count)\
    \ {\n                    paren_group += c\n                    paren_groups +=\
    \ paren_group\n                    open_braces = 0\n                    closed_braces\
    \ = 0\n                    open_brace_count = 0\n                    closed_brace_count\
    \ = 0\n                    paren_group = \"\"\n                }\n           \
    \ }\n        }\n        paren_groups += paren_group\n        paren_groups\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y6y5zqt.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val open_brace_open = false\n        val close_brace_open\
    \ = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val open_brace_open_brace = false\n        val close_brace_open_brace\
    \ = false\n        val open_brace_close_brace = false\n        val close_brace_close_brace\
    \ = false\n        val open_brace_open_brace_close = false\n        val close_brace_open_brace_close\
    \ = false\n        val open_brace_close_brace_close = false\n        val close_brace_close_brace_close\
    \ = false\n        val open_brace_open_brace_open = false\n        val close_brace_open_brace_open\
    \ = false\n        val open_brace_close_brace_open = false\n        val close_brace_close_brace_open\
    \ = false\n        val open_brace_open_brace_close = false\n        val close_brace_open_brace_close\
    \ = false\n        val open_brace_close_brace_close = false\n        val close_brace_close_brace_close\
    \ = false\n        val open_brace_open_brace_open_brace = false\n        val close_brace_open_brace_open_brace\
    \ = false\n        val open_brace_close_brace_open_brace = false\n        val\
    \ close_brace_close_brace_open_brace = false\n        val open_brace_open_brace_close_brace\
    \ = false\n        val close_brace_open_brace_close_brace = false\n        val\
    \ open_brace_close_brace_close_brace = false\n        val close_brace_close_brace_close_brace\
    \ = false\n        val open_brace_open_brace_open_brace_close = false\n      \
    \  val close_brace_open_brace_open_brace_close = false\n        val open_brace_close_brace_open_brace_close\
    \ = false\n        val close_brace_close_brace_open_brace_close = false\n    \
    \    val open_brace_open_brace_close_brace_close = false\n        val close_brace_open_brace_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0thiqwxp.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0thiqwxp.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_brace_open_brace_close\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopen_brace_open_brace_close\
    \ is already defined as \e[33mvalue\e[0m \e[35mopen_brace_open_brace_close\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0thiqwxp.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mclose_brace_open_brace_close\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mclose_brace_open_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mclose_brace_open_brace_close\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0thiqwxp.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_close_brace_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_close_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mopen_brace_close_brace_close\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0thiqwxp.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mclose_brace_close_brace_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_brace_close_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mclose_brace_close_brace_close\e[0m"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Initialize a list to hold our result\n      \
    \  var result: List[String] = Nil\n        // Iterate over each character in the\
    \ string\n        for (c <- paren_string) {\n            // If the character is\
    \ a left paren, add it to the list\n            if (c == '(') {\n            \
    \    result ::= c\n            }\n            // If the character is a right paren,\
    \ remove it from the list\n            else if (c == ')') {\n                result\
    \ ::= result.takeWhile(_ != '(')\n            }\n            // If the character\
    \ is a space, ignore it\n            else if (c == ' ') {\n            }\n   \
    \         // If the character is not a left paren, ignore it\n            else\
    \ {\n            }\n        }\n        // Return the list\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc5x0oblp.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result ::= c\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc5x0oblp.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                result ::=\
    \ result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] -\
    \ did you mean List[String].::?\n\e[31m\e[31m-- Error: /tmp/tmpc5x0oblp.scala:19:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \         result ::= result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Write your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_group_regex = \"\"\"[(]([^)]*)[)]\"\
    \"\".r\n        paren_string.split(\"[()]\").foreach(x => {\n            val m\
    \ = paren_group_regex.findFirstMatchIn(x)\n            if (m.isDefined) {\n  \
    \              paren_groups += m.group(1).trim\n            }\n        })\n  \
    \      paren_groups.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj553hqln.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x.trim().nonEmpty)\n        val paren_groups_with_open_braces_sorted\
    \ = paren_groups_with_open_braces.sortBy(x => x.length)\n        val paren_groups_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces.sortBy(x => x.length)\n\
    \        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzbyemz3f.scala:18:140 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzbyemz3f.scala:19:147 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_braces_sorted_with_open\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: paren_groups_with_open_braces_sorted_with_open\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzbyemz3f.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[Int]()\n        val close_braces\
    \ = mutable.ListBuffer[Int]()\n        val open_parens = mutable.ListBuffer[Int]()\n\
    \        val close_parens = mutable.ListBuffer[Int]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val open_paren_count = 0\n \
    \       val close_paren_count = 0\n        val open_brace_open = false\n     \
    \   val close_brace_open = false\n        val open_paren_open = false\n      \
    \  val close_paren_open = false\n        val open_brace_close = false\n      \
    \  val close_brace_close = false\n        val open_paren_close = false\n     \
    \   val close_paren_close = false\n        val open_brace_open2 = false\n    \
    \    val close_brace_open2 = false\n        val open_paren_open2 = false\n   \
    \     val close_paren_open2 = false\n        val open_brace_close2 = false\n \
    \       val close_brace_close2 = false\n        val open_paren_close2 = false\n\
    \        val close_paren_close2 = false\n        val open_brace_open3 = false\n\
    \        val close_brace_open3 = false\n        val open_paren_open3 = false\n\
    \        val close_paren_open3 = false\n        val open_brace_close3 = false\n\
    \        val close_brace_close3 = false\n        val open_paren_close3 = false\n\
    \        val close_paren_close3 = false\n        val open_brace_open4 = false\n\
    \        val close_brace_open4 = false\n        val open_paren_open4 = false\n\
    \        val close_paren_open4 = false\n        val open_brace_close4 = false\n\
    \        val close_brace_close4 = false\n        val open_paren_close4 = false\n\
    \        val close_paren_close4 = false\n        val open_brace_open5 = false\n\
    \        val close_brace_open5 = false\n        val open_paren_open5 = false\n\
    \        val close_paren_open5 = false\n        val open_brace_close5 = false\n\
    \        val close_brace_close5 = false\n        val open_paren_close5 = false\n\
    \        val close_paren_close5 = false\n        val open_brace_open6 = false\n\
    \        val close_brace_open6 = false\n        val open_paren_open6 = false\n\
    \        val close_paren_open6 = false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnbj81mn.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnnbj81mn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnbj81mn.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnbj81mn.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_parens\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnbj81mn.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_parens\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnnbj81mn.scala:62:5 -------"
  stdout: ''
  timestamp: 1660013348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_in_group = mutable.ListBuffer[Int]()\n   \
    \     val paren_closed_brace_count_in_group = mutable.ListBuffer[Int]()\n    \
    \    val paren_open_brace_count_in_group_with_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group_with_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_in_group_with_paren_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group_with_paren_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_in_group_with_paren_closed_with_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group_with_paren_closed_with_paren =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_in_group_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpedy_pq_r.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedy_pq_r.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpedy_pq_r.scala:10:25 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpedy_pq_r.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedy_pq_r.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open_braces\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedy_pq_r.scala:13:34\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_closed_braces\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                  ^^^"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val open_brace_open = false\n        val close_brace_open\
    \ = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val open_brace_opened = false\n        val close_brace_opened\
    \ = false\n        val open_brace_closed = false\n        val close_brace_closed\
    \ = false\n        val open_brace_opened1 = false\n        val close_brace_opened1\
    \ = false\n        val open_brace_closed1 = false\n        val close_brace_closed1\
    \ = false\n        val open_brace_opened2 = false\n        val close_brace_opened2\
    \ = false\n        val open_brace_closed2 = false\n        val open_brace_opened3\
    \ = false\n        val close_brace_opened3 = false\n        val open_brace_closed3\
    \ = false\n        val open_brace_opened4 = false\n        val close_brace_opened4\
    \ = false\n        val open_brace_closed4 = false\n        val open_brace_opened5\
    \ = false\n        val close_brace_opened5 = false\n        val open_brace_closed5\
    \ = false\n        val open_brace_opened6 = false\n        val close_brace_opened6\
    \ = false\n        val open_brace_closed6 = false\n        val open_brace_opened7\
    \ = false\n        val close_brace_opened7 = false\n        val open_brace_closed7\
    \ = false\n        val open_brace_opened8 = false\n        val close_brace_opened8\
    \ = false\n        val open_brace_closed8 = false\n        val open_brace_opened9\
    \ = false\n        val close_brace_opened9 = false\n        val open_brace_closed9\
    \ = false\n        val open_brace_opened10 = false\n        val close_brace_opened10\
    \ = false\n        val open_brace_closed10 = false\n        val open_brace_opened11\
    \ = false\n        val close_brace_opened11 = false\n        val open_brace_closed11\
    \ = false\n        val open_brace_opened12 = false\n        val close_brace_opened12\
    \ = false\n        val open_brace_closed12 = false\n        val open_bra\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpty1u73kz.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpty1u73kz.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpty1u73kz.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpty1u73kz.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpty1u73kz.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660013350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_close_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_count = 0\n   \
    \     val paren_close_brace_count = 0\n        val paren_open_brace_count_in_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group = 0\n\
    \        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7qkvtq89.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qkvtq89.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7qkvtq89.scala:10:32 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qkvtq89.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_close_braces\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7qkvtq89.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Initialize a list to hold our result\n      \
    \  var result: List[String] = Nil\n        // Initialize a stack to hold our parens\n\
    \        var parenStack: List[String] = Nil\n        // Iterate over each character\
    \ in the string\n        for (c <- paren_string) {\n            // If the character\
    \ is a left paren, push it onto the stack\n            if (c == '(') {\n     \
    \           parenStack ::= c\n            }\n            // If the character is\
    \ a right paren, pop it from the stack\n            else if (c == ')') {\n   \
    \             parenStack ::= parenStack.tail\n            }\n            // If\
    \ the character is a space, ignore it\n            else if (c == ' ') {\n    \
    \        }\n            // If the character is a comma, ignore it\n          \
    \  else if (c == ',') {\n            }\n            // If the character is a newline,\
    \ ignore it\n            else if (c == '\\n') {\n            }\n            //\
    \ If the character is a tab, ignore it\n            else if (c == '\\t') {\n \
    \           }\n            // If the character is a carriage return, ignore it\n\
    \            else if (c == '\\r') {\n            }\n            // If the character\
    \ is a backslash, ignore it\n            else if (c == '\\\\') {\n           \
    \ }\n            // If the character is a letter, ignore it\n            else\
    \ if (c.isLetter) {\n            }\n            // If the character is a number,\
    \ ignore it\n            else if (c.isDigit) {\n            }\n            //\
    \ If the character is a non-alphanumeric character, ignore it\n            else\
    \ {\n            }\n        }\n        // If the stack is empty, return an empty\
    \ list\n        if (parenStack.isEmpty) {\n            return Nil\n        }\n\
    \        // Otherwise, pop off the last character from the stack and add it to\
    \ the result\n        else {\n            result ::= parenStack.tail\n       \
    \ }\n        // Return the result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzk_xl69.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                parenStack ::= c\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member\
    \ of List[String] - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpfzk_xl69.scala:21:27 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                parenStack ::= parenStack.tail\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member\
    \ of List[String] - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpfzk_xl69.scala:57:19 ------------------------\e[0m\e[0m\n\e[31m57\
    \ |\e[0m            result ::= parenStack.tail\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\",\"\").replace(\"\
    )\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces.sortWith((x,y) => x.length\
    \ <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\",\" \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\",\" \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\",\" \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt0j_m8da.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt0j_m8da.scala:11:98\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.length <=> y.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value <=> is not\
    \ a member of Int - did you mean Int.<=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt0j_m8da.scala:13:146 -----------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces.sortWith((\e[36mx\e[0m,\e\
    [36my\e[0m) => x.length <=> y.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \                                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value <=> is not a member of Int - did you mean Int.<=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpt0j_m8da.scala:15:184 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.length <=> y.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value <=>\
    \ is not a member of Int - did you mean Int.<=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpt0j_m8da.scala:17:222 -----------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_with_duplicates\
    \ = paren_groups.toList.distinct\n        val paren_groups_list_without_duplicates\
    \ = paren_groups_list_with_duplicates.distinct\n        val paren_groups_list_without_duplicates_sorted\
    \ = paren_groups_list_without_duplicates.sortBy(x => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted.distinct\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates.sortBy(x => x)\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8zmajlyy.scala:21:150 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8zmajlyy.scala:22:173 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                         ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8zmajlyy.scala:23:196 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m       "
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\") \", \" \"))\n    \
    \    val paren_groups_with_spaces_trimmed_trimmed_trimmed = paren_groups_with_spaces_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed.map(x => x.replace(\") \"\
    , \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x => x.replace(\"\
    ) \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed.map(x =>\
    \ x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4gvbr_6e.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4gvbr_6e.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp4gvbr_6e.scala:18:95 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_trimmed_trimmed"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_brace_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_brace_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_brace_brace_size = mutable.ListBuffer[Int]()\n     \
    \   val paren_group_closed_brace_brace_size = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_brace_brace_brace = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_closed_brace_brace_brace = mutable.ListBuffer[Int]()\n  \
    \      val paren_group_open_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace_brace_size = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsiobxp9z.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsiobxp9z.scala:10:31 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsiobxp9z.scala:11:31\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_open\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsiobxp9z.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsiobxp9z.scala:13:36 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.replace(\")\", \" )\"\
    )\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    )\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_space\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdz355xrr.scala:14:8 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(\e[36mx\e\
    [0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" )\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpdz355xrr.scala:29:1 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_close_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_size = mutable.ListBuffer[Int]()\n        val paren_close_brace_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count_sum = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_min = mutable.ListBuffer[Int]()\n       \
    \ val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_avg = mutable.ListBuffer[Int]()\n       \
    \ val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_open_brace_count_avg = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_min = mutable.ListBuffer[Int]()\n       \
    \ val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count_av\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnvj1igy.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgnvj1igy.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_brace_count_min\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgnvj1igy.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_close_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgnvj1igy.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgnvj1igy.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_close_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:11:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:12:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:13:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660013339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_space = mutable.ListBuffer[String]()\n\
    \        val paren_open2 = mutable.ListBuffer[String]()\n        val paren_close2\
    \ = mutable.ListBuffer[String]()\n        val paren_space2 = mutable.ListBuffer[String]()\n\
    \        val paren_open3 = mutable.ListBuffer[String]()\n        val paren_close3\
    \ = mutable.ListBuffer[String]()\n        val paren_space3 = mutable.ListBuffer[String]()\n\
    \        val paren_open4 = mutable.ListBuffer[String]()\n        val paren_close4\
    \ = mutable.ListBuffer[String]()\n        val paren_space4 = mutable.ListBuffer[String]()\n\
    \        val paren_open5 = mutable.ListBuffer[String]()\n        val paren_close5\
    \ = mutable.ListBuffer[String]()\n        val paren_space5 = mutable.ListBuffer[String]()\n\
    \        val paren_open6 = mutable.ListBuffer[String]()\n        val paren_close6\
    \ = mutable.ListBuffer[String]()\n        val paren_space6 = mutable.ListBuffer[String]()\n\
    \        val paren_open7 = mutable.ListBuffer[String]()\n        val paren_close7\
    \ = mutable.ListBuffer[String]()\n        val paren_space7 = mutable.ListBuffer[String]()\n\
    \        val paren_open8 = mutable.ListBuffer[String]()\n        val paren_close8\
    \ = mutable.ListBuffer[String]()\n        val paren_space8 = mutable.ListBuffer[String]()\n\
    \        val paren_open9 = mutable.ListBuffer[String]()\n        val paren_close9\
    \ = mutable.ListBuffer[String]()\n        val paren_space9 = mutable.ListBuffer[String]()\n\
    \        val paren_open10 = mutable.ListBuffer[String]()\n        val paren_close10\
    \ = mutable.ListBuffer[String]()\n        val paren_space10 = mutable.ListBuffer[String]()\n\
    \        val paren_open\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnb3qtw43.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnb3qtw43.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnb3qtw43.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnb3qtw43.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnb3qtw43.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnb3qtw43.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         N"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_emslxd.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_emslxd.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \"{\").replace(\"\
    )\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"{\"\
    , \"{\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7xrgyjmy.scala:19:360 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp7xrgyjmy.scala:18:153 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"\\n}\"\e[0m, \e[31m\"\\n\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m  \
    \ |\e[0m  paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloade"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwppmn4qh.scala:19:338 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwppmn4qh.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwppmn4qh.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Initialize a list to hold our result\n      \
    \  var result: List[String] = Nil\n\n        // Iterate over each character in\
    \ the string\n        for (c <- paren_string) {\n            // If we are not\
    \ at a closing brace, add this character to the list\n            if (c != ')')\
    \ {\n                result ::= c\n            } else {\n                // If\
    \ we are at a closing brace, add this character to the list\n                result\
    \ ::= c\n                // If we have not yet found a closing brace, add this\
    \ character to the list\n                if (result.last != '(') {\n         \
    \           result ::= c\n                }\n            }\n        }\n\n    \
    \    // Return the list\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqy_8gaw.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result ::= c\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqy_8gaw.scala:19:23\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                result ::=\
    \ c\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ ::= is not a member of List[String] - did you mean List[String].::?\n\e[31m\e\
    [31m-- Error: /tmp/tmpsqy_8gaw.scala:21:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (result.last != \e[31m'('\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqy_8gaw.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    result ::= c\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member\
    \ of List[String] - did you mean List[String].::?\n4 errors found\n"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"  \", \" \"))\n     \
    \   val paren_groups_with_spaces_sorted_without_spaces_without_spaces = paren_groups_with_spaces_sorted_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_space\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbxyohkg2.scala:20:181 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_without_spaces_without_space\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m Not found: paren_groups_with_spaces_sorted_without_spaces_without_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbxyohkg2.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_group = \"\"\n        var paren_group_open = false\n      \
    \  var paren_group_closed = false\n        var paren_group_opening_char = \"\"\
    \n        var paren_group_closing_char = \"\"\n        var paren_group_opening_char_count\
    \ = 0\n        var paren_group_closing_char_count = 0\n        var paren_group_opening_char_count_in_paren\
    \ = 0\n        var paren_group_closing_char_count_in_paren = 0\n        var paren_group_opening_char_is_space\
    \ = false\n        var paren_group_closing_char_is_space = false\n        var\
    \ paren_group_opening_char_is_newline = false\n        var paren_group_closing_char_is_newline\
    \ = false\n        var paren_group_opening_char_is_newline_or_space = false\n\
    \        var paren_group_closing_char_is_newline_or_space = false\n        var\
    \ paren_group_opening_char_is_newline_or_space_or_paren = false\n        var paren_group_closing_char_is_newline_or_space_or_paren\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymolmfer.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpymolmfer.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_opening_char_is_newline_or_space_or_paren_or_comma\e[0m =\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_group_opening_char_is_newline_or_space_or_paren_or_comma\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymolmfer.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_closing_char_is_newline_or_space_or_paren_or_comma\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_group_closing_char_is_newline_or_space_or_paren_or_comma\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymolmfer.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_opening_char_is_newline_or_space_or_paren_or_comma\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_group_opening_char_is_newline_or_space_or_paren_or_comma\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined "
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(!paren_stack.isEmpty) {\n            val current_group = paren_stack.pop()\n\
    \            val current_group_length = current_group.length\n            val\
    \ open_paren_count = current_group.indexOf(\"(\")\n            val close_paren_count\
    \ = current_group.indexOf(\")\")\n            val close_paren_count_diff = close_paren_count\
    \ - open_paren_count\n            val close_paren_count_diff_abs = close_paren_count_diff\
    \ % 2\n            val close_paren_count_diff_mod = close_paren_count_diff / 2\n\
    \            val close_paren_count_diff_mod_abs = close_paren_count_diff_mod %\
    \ 2\n            val close_paren_count_diff_mod_abs = close_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff = open_paren_count - close_paren_count\n\
    \            val open_paren_count_diff_abs = open_paren_count_diff % 2\n     \
    \       val open_paren_count_diff_mod = open_paren_count_diff / 2\n          \
    \  val open_paren_count_diff_mod_abs = open_paren_count_diff_mod % 2\n       \
    \     val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs % 2\n\
    \            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9yemf5gh.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9yemf5gh.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9yemf5gh.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9yemf5gh.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mclose_paren_count_diff_mod_abs\e\
    [0m = close_paren_count_diff_mod_abs % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_count_diff_mod_abs is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_count_diff_mod_abs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9yemf5gh.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mopen_paren_count_diff_mod_abs\e\
    [0m = open_paren_count_diff_mod_abs % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_count_diff_mod_abs is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_count_diff_mod_abs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defin"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_regex = \"\"\"[(]([^)]*)[)]\"\"\".r\n        val paren_group_matcher\
    \ = paren_group_regex.findFirstIn(paren_string)\n        while (paren_group_matcher.isDefined)\
    \ {\n            paren_groups += paren_group_matcher.group\n            paren_group_matcher\
    \ = paren_group_regex.findFirstIn(paren_string)\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q1o9gkl.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp5q1o9gkl.scala:15:32 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            paren_group_matcher = paren_group_regex.findFirstIn(paren_string)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val paren_group_matcher\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_closed_depth_max = paren_closed_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_closed_depth_sum = paren_closed_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_closed_depth_max = paren_closed_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_closed_depth_sum = paren_closed_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_closed_depth_max = paren_closed_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_closed_depth_sum = paren_closed_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipe931bm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_min\e[0m\
    \ = paren_open_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpipe931bm.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_min\e\
    [0m = paren_closed_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipe931bm.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_max\e[0m\
    \ = paren_open_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpipe931bm.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_max\e\
    [0m = paren_closed_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipe931bm.scala:26:12 ---------------------------\e\
    ["
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted = paren_groups_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_reversed = paren_groups_with_spaces_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed = paren_groups_with_spaces_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed.sortBy(x => x)\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9ahjtuqn.scala:19:111 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9ahjtuqn.scala:21:126 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ahjtuqn.scala:22:143\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_\n\e[31m\e[31m   |\e[0m               \
    \                           "
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqi1yoo8s.scala:21:268 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpqi1yoo8s.scala:22:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqi1yoo8s.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces =\
    \ paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gr3q5hz.scala:20:138 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0gr3q5hz.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces.sortBy(x => x.length)\n   \
    \     val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8rm_f4nf.scala:19:134 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8rm_f4nf.scala:21:156 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: paren_groups_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8rm_f4nf.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_count = 0\n        var open_braces = 0\n        var close_braces\
    \ = 0\n        var open_parens = 0\n        var close_parens = 0\n        var\
    \ paren_start = 0\n        var paren_end = 0\n        var paren_start_index =\
    \ 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n    \
    \    var paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf30zo652.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf30zo652.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_start_index\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_start_index is already defined as \e[33mvariable\e[0m\
    \ \e[35mparen_start_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf30zo652.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_end_index\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mparen_end_index is already defined as \e[33mvariable\e[0m \e[35mparen_end_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf30zo652.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_start_index\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_start_index\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_start_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf30zo652.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mvar\e[0m \e[36mparen_end_index\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_end_index\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_end_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf30zo652.scala:23:12 ---------------------------\e[0"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_emslxd.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_emslxd.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces.map(x => x.replace(\") \",\
    \ \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_space\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqecyyc4.scala:20:181 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_without_space\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                                                            \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: paren_groups_with_spaces_sorted_without_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfqecyyc4.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_plus_one\
    \ = paren_groups_size + 1\n        val paren_groups_size_plus_two = paren_groups_size_plus_one\
    \ * 2\n        val paren_groups_size_plus_three = paren_groups_size_plus_two *\
    \ 2\n        val paren_groups_size_plus_four = paren_groups_size_plus_three *\
    \ 2\n        val paren_groups_size_plus_five = paren_groups_size_plus_four * 2\n\
    \        val paren_groups_size_plus_six = paren_groups_size_plus_five * 2\n  \
    \      val paren_groups_size_plus_seven = paren_groups_size_plus_six * 2\n   \
    \     val paren_groups_size_plus_eight = paren_groups_size_plus_seven * 2\n  \
    \      val paren_groups_size_plus_nine = paren_groups_size_plus_eight * 2\n  \
    \      val paren_groups_size_plus_ten = paren_groups_size_plus_nine * 2\n    \
    \    val paren_groups_size_plus_eleven = paren_groups_size_plus_ten * 2\n    \
    \    val paren_groups_size_plus_twelve = paren_groups_size_plus_eleven * 2\n \
    \       val paren_groups_size_plus_thirteen = paren_groups_size_plus_twelve *\
    \ 2\n        val paren_groups_size_plus_fourteen = paren_groups_size_plus_thirteen\
    \ * 2\n        val paren_groups_size_plus_fifteen = paren_groups_size_plus_fourteen\
    \ * 2\n        val paren_groups_size_plus_sixteen = paren_groups_size_plus_fifteen\
    \ * 2\n        val paren_groups_size_plus_seventeen = paren_groups_size_plus_sixteen\
    \ * 2\n        val paren_groups_size_plus_eighteen = paren_groups_size_plus_seventeen\
    \ * 2\n        val paren_groups_size_plus_nineteen = paren_groups_size_plus_eighteen\
    \ * 2\n        val paren_groups_size_plus_twenty = paren_groups_size_plus_nineteen\
    \ * 2\n        val paren_groups_size_plus_thirty = paren_groups_size_plus_twenty\
    \ * 2\n        val paren_groups_size_plus_forty = paren_groups_size_plus_thirty\
    \ * 2\n        val paren_groups_size_plus_fifty = paren_groups_size_plus_forty\
    \ * 2\n        val paren_groups_size_plus_sixty = paren_groups_size_plus_fifty\
    \ * 2\n        val paren_groups_size_plus_seventy = paren_groups_size_plus_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkdqooacx.scala:35:45 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_plus_seventy\e\
    [0m = paren_groups_size_plus_\n\e[31m\e[31m   |\e[0m                         \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                           Not found: paren_groups_size_plus_\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkdqooacx.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_with_duplicates\
    \ = paren_groups.toList.distinct\n        val paren_groups_list_without_duplicates\
    \ = paren_groups_list_with_duplicates.toList\n        val paren_groups_list_without_duplicates_sorted\
    \ = paren_groups_list_without_duplicates.sortBy(x => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted.distinct\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates.sortBy(x => x)\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptlc2orem.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptlc2orem.scala:20:150\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptlc2orem.scala:21:173 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\e\
    [0m = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660013368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"(\"\
    , \" ( \").replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\").replace(\") \"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ).replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfadyvke4.scala:19:174 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \                                                             ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                  Not found: paren_group\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfadyvke4.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqi1yoo8s.scala:21:268 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpqi1yoo8s.scala:22:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqi1yoo8s.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_space = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace = mutable.ListBuffer[String]()\n        val paren_close_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space = mutable.ListBuffer[String]()\n        val\
    \ paren_close_brace_space = mutable.ListBuffer[String]()\n        val paren_space_space_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space = mutable.ListBuffer[String]()\n  \
    \      val paren_space_space_space_brace = mutable.ListBuffer[String]()\n    \
    \    val paren_open_brace_space_space_space = mutable.ListBuffer[String]()\n \
    \       val paren_close_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_space_space_brace = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjcv1viw.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmjcv1viw.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjcv1viw.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjcv1viw.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmjcv1viw.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjcv1viw.scala:14:26 -------------------"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val paren_open = x.split(\"\\\\)\").length\n            paren_open.toList.foreach(y\
    \ => {\n                val paren_close = y.split(\"\\\\)\").length\n        \
    \        paren_close.toList.foreach(z => {\n                    paren_groups +=\
    \ z\n                })\n            })\n            paren_groups += x\n     \
    \   })\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ae8sjhr.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4ae8sjhr.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ae8sjhr.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ae8sjhr.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            paren_open.toList.foreach(\e[36my\e[0m =>\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \    value toList is not a member of Int - did you mean paren_open.toInt?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_groups_with_close_braces = paren_groups_with_open_braces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_not_nested\
    \ = paren_groups_with_close_braces.filter(x => !x.contains(\"(\"))\n        val\
    \ paren_groups_with_close_braces_not_nested = paren_groups_with_open_braces_not_nested.filter(x\
    \ => !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces\
    \ = paren_groups_with_close_braces_not_nested.filter(x => !x.contains(\"(\") ||\
    \ !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces\
    \ = paren_groups_with_open_braces_not_nested_with_spaces.filter(x => !x.contains(\"\
    (\") || !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_close_braces_not_nested_with_spaces.filter(x => !x.contains(\"\
    (\") || !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_open_braces_not_nested_with_spaces_not_nested.filter(x =>\
    \ !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces_not_nested_with_spaces\
    \ = paren_groups_with_close_braces_not_nested_with_spaces_not_nested.filter(x\
    \ => !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces\
    \ = paren_groups_with_open_braces_not_nested_with_spaces_not_nested_with_spaces.filter(x\
    \ => !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces.filter(x\
    \ => !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_open_braces_not_nested_with_spaces_not_nested_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70n05af_.scala:21:102 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces_not_nested\e\
    [0m = paren_groups_with_open_braces_not_nested_with_spaces_not_nested_\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_not_nested_with_spaces_not_nested_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp70n05af_.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_emslxd.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_emslxd.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \") \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"{\", \"{\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    }\", \"}\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\",\", \",\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\":\", \":\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\";\", \";\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\",\", \",\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\":\", \":\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphm3rthm1.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphm3rthm1.scala:14:99 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\",\"\e[0m, \e[31m\",\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphm3rthm1.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\":\"\e[0m, \e[31m\":\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphm3rthm1.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_"
  stdout: ''
  timestamp: 1660013370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code goes here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3mdlflx4.scala:8:68\
    \ ---------------------\e[0m\e[0m\n\e[31m 8 |\e[0m    \e[33mdef\e[0m \e[36mseparateParenGroups\e\
    [0m(\e[36mparen_string\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                   Found:    Unit\n\e[31m   |\e[0m                          \
    \                        Required: List[String]\n\e[31m 9 |\e[0m        \e[34m//\
    \ Your code goes here\e[0m\n\e[31m10 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjgj617u.scala:21:160 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptjgj617u.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_set\
    \ = paren_groups.toList.toSet\n        val paren_groups_list_list_set = paren_groups.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_set = paren_groups.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.to\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkwwne8ig.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_list_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkwwne8ig.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_list_list_list_list_list_list_list_list_list_list_list_set\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpkwwne8ig.scala:25:5 ---------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m"
  stdout: ''
  timestamp: 1660013371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    (\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"{\", \" { \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"}\", \" } \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6h9ls_d.scala:11:98 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces.sortWith((\e[36mx\e[0m,\e[36my\e[0m) => x.length\
    \ <=> y.length)\n\e[31m\e[31m   |\e[0m                                       \
    \                                                  ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value <=> is not a member of Int - did you mean Int.<=?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa6h9ls_d.scala:19:126 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa6h9ls_d.scala:20:138 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: paren_groups_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] T"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_emslxd.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_emslxd.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \").trim())\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates\
    \ = paren_group_strings_sorted.distinct\n        val paren_group_strings_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates.sortWith((x, y) => x.length\
    \ <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted.distinct\n        val\
    \ paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv6hofpjh.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv6hofpjh.scala:18:138\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\e\
    [0m = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpv6hofpjh.scala:19:145 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\e\
    [0m = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.length <= y.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv6hofpjh"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list2 =\
    \ paren_groups_size_list.map(x => x.reverse)\n        val paren_groups_size_list3\
    \ = paren_groups_size_list2.map(x => x.reverse)\n        val paren_groups_size_list4\
    \ = paren_groups_size_list3.map(x => x.reverse)\n        val paren_groups_size_list5\
    \ = paren_groups_size_list4.map(x => x.reverse)\n        val paren_groups_size_list6\
    \ = paren_groups_size_list5.map(x => x.reverse)\n        val paren_groups_size_list7\
    \ = paren_groups_size_list6.map(x => x.reverse)\n        val paren_groups_size_list8\
    \ = paren_groups_size_list7.map(x => x.reverse)\n        val paren_groups_size_list9\
    \ = paren_groups_size_list8.map(x => x.reverse)\n        val paren_groups_size_list10\
    \ = paren_groups_size_list9.map(x => x.reverse)\n        val paren_groups_size_list11\
    \ = paren_groups_size_list10.map(x => x.reverse)\n        val paren_groups_size_list12\
    \ = paren_groups_size_list11.map(x => x.reverse)\n        val paren_groups_size_list13\
    \ = paren_groups_size_list12.map(x => x.reverse)\n        val paren_groups_size_list14\
    \ = paren_groups_size_list13.map(x => x.reverse)\n        val paren_groups_size_list15\
    \ = paren_groups_size_list14.map(x => x.reverse)\n        val paren_groups_size_list16\
    \ = paren_groups_size_list15.map(x => x.reverse)\n        val paren_groups_size_list17\
    \ = paren_groups_size_list16.map(x => x.reverse)\n        val paren_groups_size_list18\
    \ = paren_groups_size_list17.map(x => x.reverse)\n        val paren_groups_size_list19\
    \ = paren_groups_size_list18.map(x => x.reverse)\n        val paren_groups_size_list20\
    \ = paren_groups_size_list19.map(x => x.reverse)\n        val paren_groups_size_list21\
    \ = paren_groups_size_list20.map(x => x.reverse)\n        val paren_groups_size_list22\
    \ = paren_groups_size_list21.map(x => x.reverse)\n        val paren_groups_size_list23\
    \ = paren_groups_size_list22.map(x => x.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpej9qoswp.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpej9qoswp.scala:11:55\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpej9qoswp.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code goes here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[Int]()\n\
    \        val close_braces = mutable.ListBuffer[Int]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val paren_open = mutable.ListBuffer[Int]()\n\
    \        val paren_close = mutable.ListBuffer[Int]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count = mutable.ListBuffer[Int]()\n        val paren_close_size_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_size_count_min = mutable.ListBuffer[Int]()\n        val paren_close_size_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_size_count_max = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_size_count_max = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_size_count_max = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_size_count_max = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_count_min = mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq5hli9sd.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_size_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_size_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq5hli9sd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_close_size_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_size_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_size_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq5hli9sd.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_size_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_size_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq5hli9sd.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_close_size_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_size_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_size_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \ \", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces.sortBy(x => x)\n        val\
    \ paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces = paren_groups_with_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa68nwhl9.scala:21:156 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa68nwhl9.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_close_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_close_depth_min\
    \ = paren_close_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_close_depth_max = paren_close_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_close_depth_sum = paren_close_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_close_depth_min\
    \ = paren_close_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_close_depth_max = paren_close_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_close_depth_sum = paren_close_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_close_depth_min\
    \ = paren_close_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_close_depth_max = paren_close_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_close_depth_sum = paren_close_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_close_depth_min\
    \ = paren_close_depth_sum\n        val paren\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9y5pmcms.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9y5pmcms.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_min\e[0m = paren_open_depth_sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_open_depth_min\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_open_depth_min\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9y5pmcms.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_close_depth_min\e[0m = paren_close_depth_sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9y5pmcms.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_max\e[0m\
    \ = paren_open_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9y5pmcms.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_close_depth_max\e\
    [0m = paren_close_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_depth_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1660013373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_close_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_depth_min_index = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_depth_min_size = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min_depth = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_depth_min_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_depth_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_depth_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_depth_min_depth_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_min_depth_size = mutable.ListBuffer[Int]()\n  \
    \      val paren_open_depth_max_depth_depth = mutable.ListBuffer[Int]()\n    \
    \    val paren_close_depth_max_depth_depth = mutable.ListBuffer[Int]()\n     \
    \   \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4d5zwfwb.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4d5zwfwb.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4d5zwfwb.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4d5zwfwb.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4d5zwfwb.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_close_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4d5zwfw"
  stdout: ''
  timestamp: 1660013373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplgt8867u.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_limit_reached is already defined as \e\
    [33mvalue\e[0m \e[35mparen_closed_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[3"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_closed_depth_max = paren_closed_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_closed_depth_sum = paren_closed_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_closed_depth_max = paren_closed_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_closed_depth_sum = paren_closed_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_closed_depth_sum\n        val paren_open_depth_max = paren_open_depth_sum\n\
    \        val paren_closed_depth_max = paren_closed_depth_sum\n        val paren_open_depth_sum\
    \ = paren_open_depth_sum\n        val paren_closed_depth_sum = paren_closed_depth_sum\n\
    \        val paren_open_depth_min = paren_open_depth_sum\n        val paren_closed_depth_min\
    \ = paren_close\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjk4j3_ua.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_min\e[0m\
    \ = paren_open_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjk4j3_ua.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_min\e\
    [0m = paren_closed_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjk4j3_ua.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_max\e[0m\
    \ = paren_open_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjk4j3_ua.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_max\e\
    [0m = paren_closed_depth_sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjk4j3_ua.scala:27:12 ---------------------------\e\
    ["
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \") \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\")\", \")\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    (\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmw84ivhe.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmw84ivhe.scala:14:99 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmw84ivhe.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmw84ivhe.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_"
  stdout: ''
  timestamp: 1660013375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth = mutable.ListBuffer[Int]()\n        val paren_close_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_sum = mutable.ListBuffer[Int]()\n        val paren_close_count_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_count_sum_sum = mutable.ListBuffer[Int]()\n        val paren_close_count_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_sum_sum_sum = mutable.ListBuffer[Int]()\n     \
    \   val paren_open_count_sum_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_count_sum_sum_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum_sum_sum_sum =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_count_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n \
    \       val paren_open_depth_sum_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_sum_sum_sum_sum_sum = mutable.ListBuffer[Int]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3l89477.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq3l89477.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3l89477.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3l89477.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3l89477.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3l89477.scala:16:30 ----"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code goes here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3mdlflx4.scala:8:68\
    \ ---------------------\e[0m\e[0m\n\e[31m 8 |\e[0m    \e[33mdef\e[0m \e[36mseparateParenGroups\e\
    [0m(\e[36mparen_string\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                   Found:    Unit\n\e[31m   |\e[0m                          \
    \                        Required: List[String]\n\e[31m 9 |\e[0m        \e[34m//\
    \ Your code goes here\e[0m\n\e[31m10 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ) \"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp11mdyhfx.scala:14:99 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp11mdyhfx.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp11mdyhfx.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                     "
  stdout: ''
  timestamp: 1660013375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsa1_67ak.scala:13:8 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\") \"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsa1_67ak.scala:28:1 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces =\
    \ paren_groups_with_spaces_trimmed.filter(x => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces.sortBy(x => x)\n        val\
    \ paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces = paren_groups_with_spaces_trimmed_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpequfrofa.scala:21:157 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpequfrofa.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_space = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_openedd = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_spaced = mutable.ListBuffer[String]()\n\
    \        val paren_opened\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxiyhnm5.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxiyhnm5.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_closed\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_closed is already defined as \e[33mvalue\e[0m \e[35mparen_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoxiyhnm5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_spaced\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_spaced is already defined as \e[33mvalue\e[0m \e[35mparen_spaced\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoxiyhnm5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_openedd\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_openedd is already defined as \e[33mvalue\e[0m \e[35mparen_openedd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoxiyhnm5.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed is already defined as \e[33mvalue\e[0m \e[35mparen_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be"
  stdout: ''
  timestamp: 1660013380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\"{\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\"}\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\"[\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\"]\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\"{\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\"}\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\"[\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\"]\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\"{\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\"}\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\"[\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\"]\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\"{\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\"}\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4h8v5tn.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb4h8v5tn.scala:11:68\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb4h8v5tn.scala:12:69 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb4h8v5tn.scala:13:69 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"{\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb4h8v5tn.scala:14:69 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\"}\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb4h8v5tn.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filte"
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyol264vy.scala:19:357 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpyol264vy.scala:14:99 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpyol264vy.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_close_index = mutable.ListBuffer[Int]()\n        val paren_open_brace\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_bra\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeiull0fz.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeiull0fz.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_brace_count\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeiull0fz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_close_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeiull0fz.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeiull0fz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_close_brace_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_brace_cou"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:11:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:12:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:13:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660013339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.filter(x =>\
    \ !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"{\", \" { \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"}\", \" } \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"[\", \" [ \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"]\", \" ] \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe3gseihy.scala:17:106 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\" } \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpe3gseihy.scala:18:118 -----------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"[\"\e[0m, \e[31m\" [ \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe3gseihy.scala:20:146\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_\n\
    \e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Write your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3980bsjt.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3980bsjt.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_min\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3980bsjt.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3980bsjt.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3980bsjt.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim())\n  \
    \      val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.filter(x => !x.equals(\"\"))\n   \
    \     val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.filter(x => !x.equals(\"\
    \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzi8pze1f.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzi8pze1f.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(\e\
    [36mx\e[0m => !x.equals(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m  \
    \ |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzi8pze1f.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(\e\
    [36mx\e[0m => !x.equals(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzi8pze1f.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spac"
  stdout: ''
  timestamp: 1660013383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\",\"\").replace(\"\
    )\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces.sortWith((x,y) => x.length\
    \ < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_w_gs9ih.scala:19:142 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_w_gs9ih.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \").filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplcfsm5rf.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplcfsm5rf.scala:19:122\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplcfsm5rf.scala:20:134 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x + \e[31m\" \"\e[0m).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcfsm5rf.sca"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_parens = mutable.ListBuffer[String]()\n\
    \        val close_parens = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close = mutable.ListBuffer[Int]()\n        val paren_group_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count = mutable.ListBuffer[Int]()\n        val paren_group_close_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_count_size = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_close_count_count_size = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_open_count_count_count_size = mutable.ListBuffer[Int]()\n  \
    \      val paren_group_close_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_count_count_count_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6584lpse.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6584lpse.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_open_count\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6584lpse.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6584lpse.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_count_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_count_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_count_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6584lpse.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_count_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloade"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdvkkgoxy.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpdvkkgoxy.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_opened\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opened is already defined as \e[33mvalue\e[0m \e[35mparen_opened\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvkkgoxy.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed is already defined as \e[33mvalue\e[0m \e[35mparen_closed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvkkgoxy.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_opened\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opened is already defined as \e[33mvalue\e[0m \e[35mparen_opened\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvkkgoxy.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed is already defined as \e"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val closed_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ closed_brace_count = 0\n        val paren_open = false\n        val paren_closed\
    \ = false\n        val paren_open_brace = false\n        val paren_closed_brace\
    \ = false\n        val paren_open_brace_count = 0\n        val paren_closed_brace_count\
    \ = 0\n        val paren_open_brace_open = false\n        val paren_closed_brace_open\
    \ = false\n        val paren_open_brace_closed = false\n        val paren_closed_brace_closed\
    \ = false\n        val paren_open_brace_open_brace = false\n        val paren_closed_brace_open_brace\
    \ = false\n        val paren_open_brace_closed_brace = false\n        val paren_closed_brace_closed_brace\
    \ = false\n        val paren_open_brace_open_brace_count = 0\n        val paren_closed_brace_open_brace_count\
    \ = 0\n        val paren_open_brace_closed_brace_count = 0\n        val paren_closed_brace_closed_brace_count\
    \ = 0\n        val paren_open_brace_open_brace_open = false\n        val paren_closed_brace_open_brace_open\
    \ = false\n        val paren_open_brace_closed_brace_open = false\n        val\
    \ paren_closed_brace_closed_brace_open = false\n        val paren_open_brace_open_brace_closed\
    \ = false\n        val paren_closed_brace_open_brace_closed = false\n        val\
    \ paren_open_brace_closed_brace_closed = false\n        val paren_closed_brace_closed_brace_closed\
    \ = false\n        val paren_open_brace_open_brace_open_brace = false\n      \
    \  val paren_closed_brace_open_brace_open_brace = false\n        val paren_open_brace_closed_brace_open_brace\
    \ = false\n        val paren_closed_brace_closed_brace_open_brace = false\n  \
    \      val paren_open_brace_open_brace_closed_brace = false\n        val paren_closed_brace_open_brace_closed_brace\
    \ = false\n        val paren_open_brace_closed_brace_closed_brace = false\n  \
    \      \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyolcehux.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyolcehux.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyolcehux.scala:11:28 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclosed_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyolcehux.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = paren_open_index.init\n        val paren_closed_index = paren_closed_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_index = paren_open_index.init\n        val paren_closed_index\
    \ = paren_closed_index.init\n        val paren_open = paren_open.init\n      \
    \  val paren_closed = paren_closed.init\n        val paren_open_index = paren_open_index.init\n\
    \        val paren_closed_index = paren_closed_index.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_index = paren_open_index.init\n        val paren_closed_index = paren_closed_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_index = paren_open_index.init\n        val paren_closed_index\
    \ = paren_closed_index.init\n        val paren_open = paren_open.init\n      \
    \  val paren_closed = paren_closed.init\n        val paren_open_index = paren_open_index.init\n\
    \        val paren_closed_index = paren_closed_index.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_index = paren_open_index.init\n        val paren_closed_index = paren_closed_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_index = paren_open_index.init\n        val paren_closed_index\
    \ = paren_closed_index.init\n        val paren_open = paren_open.init\n      \
    \  val paren_closed = paren_closed.init\n        val paren_open_index = paren_open_index.init\n\
    \        val paren_closed_index = paren_closed_index.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8tivy50_.scala:49:26 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8tivy50_.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_index\e[0m =\
    \ paren_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8tivy50_.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_index\e[0m\
    \ = paren_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_index is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8tivy50_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = paren_open.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mparen_open is already defined as \e[33mvalue\e[0m \e[35mparen_open\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8tivy50_.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = paren_closed.init\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mparen_closed is already defined "
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ) \"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp11mdyhfx.scala:14:99 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp11mdyhfx.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp11mdyhfx.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                     "
  stdout: ''
  timestamp: 1660013375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_count = paren_groups.length\n        val paren_groups_strings\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_strings_count = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max = mutable.ListBuffer[Int]()\n    \
    \    val paren_groups_strings_count_max_index = mutable.ListBuffer[Int]()\n  \
    \      val paren_groups_strings_count_max_value = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_index = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_value = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_value_max = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_value_max_index = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_value_max_value = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_value_max_value_max = mutable.ListBuffer[Int]()\n\
    \        val paren_groups_strings_count_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpai38yr32.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpai38yr32.scala:11:35\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_strings\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpai38yr32.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_count\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpai38yr32.scala:13:45 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpai38yr32.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_strings_count_max_index\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpai38yr32.scala:15:51 ------------"
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brackets\
    \ = 0\n        var closed_brackets = 0\n        var open_squares = 0\n       \
    \ var closed_squares = 0\n        var open_curlys = 0\n        var closed_curlys\
    \ = 0\n        var open_angles = 0\n        var closed_angles = 0\n        var\
    \ open_parens = 0\n        var closed_parens = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdi_qaw0b.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mopen_angled_brackets\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_angled_brackets is already defined as \e[33mvariable\e\
    [0m \e[35mopen_angled_brackets\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdi_qaw0b.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mclosed_angled_brackets\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_angled_brackets is already defined as \e[33mvariable\e\
    [0m \e[35mclosed_angled_brackets\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdi_qaw0b.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mopen_angled_brackets\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_angled_brackets is already defined as \e[33mvariable\e\
    [0m \e[35mopen_angled_brackets\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdi_qaw0b.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mclosed_angled_brackets\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_angled_brackets is already defined as \e[33mvariable\e\
    [0m \e[35mclosed_angled_brackets\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdi_qaw0b.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mopen_angled_brackets\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwppmn4qh.scala:19:338 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwppmn4qh.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwppmn4qh.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2dvjpbr3.scala:13:8 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\") \"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2dvjpbr3.scala:29:1 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brackets\
    \ = 0\n        var closed_brackets = 0\n        var open_squares = 0\n       \
    \ var closed_squares = 0\n        var open_brackets_count = 0\n        var closed_brackets_count\
    \ = 0\n        var open_squares_count = 0\n        var closed_squares_count =\
    \ 0\n        var open_braces_count = 0\n        var closed_braces_count = 0\n\
    \        var open_squares_count = 0\n        var closed_squares_count = 0\n  \
    \      var open_braces_count = 0\n        var closed_braces_count = 0\n      \
    \  var open_squares_count = 0\n        var closed_squares_count = 0\n        var\
    \ open_braces_count = 0\n        var closed_braces_count = 0\n        var open_squares_count\
    \ = 0\n        var closed_squares_count = 0\n        var open_braces_count = 0\n\
    \        var closed_braces_count = 0\n        var open_squares_count = 0\n   \
    \     var closed_squares_count = 0\n        var open_braces_count = 0\n      \
    \  var closed_braces_count = 0\n        var open_squares_count = 0\n        var\
    \ closed_squares_count = 0\n        var open_braces_count = 0\n        var closed_braces_count\
    \ = 0\n        var open_squares_count = 0\n        var closed_squares_count =\
    \ 0\n        var open_braces_count = 0\n        var closed_braces_count = 0\n\
    \        var open_squares_count = 0\n        var closed_squares_count = 0\n  \
    \      var open_braces_count = 0\n        var closed_braces_count = 0\n      \
    \  var open_squares_count = 0\n        var closed_squares_count = 0\n        var\
    \ open_braces_count = 0\n        var closed_braces_count = 0\n        var open_squares_count\
    \ = 0\n        var closed_squares_count = 0\n        var open_braces_count = 0\n\
    \        var closed_braces_count = 0\n        var open_squares_count = 0\n   \
    \     var closed_squares_count = 0\n        var open_braces_count = 0\n      \
    \  var closed_braces_count = 0\n        var open_squares_count = 0\n        var\
    \ closed_squares_count = 0\n        var open_braces_count = 0\n        var closed_braces_count\
    \ = 0\n        var open_squares_count = 0\n        var closed_squares_count =\
    \ 0\n        var open_braces_count = 0\n        var closed_braces_count = 0\n\
    \        var open_squares_count = 0\n        var closed_squares_count = 0\n  \
    \      var open_braces_count = 0\n        var closed_braces_count = 0\n      \
    \  var open_squares_count = 0\n        var closed_squares_count = 0\n        var\
    \ open_braces_count = 0\n        var closed_braces_count = 0\n        var open_squares_count\
    \ = 0\n        var closed_squares_count = 0\n        var open_braces_count = 0\n\
    \        var closed_braces_count = 0\n        var open_squares_count = 0\n   \
    \     var closed_squares_count = 0\n        var \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpw1jc8qe8.scala:84:11 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpw1jc8qe8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mopen_squares_count\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mopen_squares_count is already defined as \e[33mvariable\e[0m \e\
    [35mopen_squares_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw1jc8qe8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mclosed_squares_count\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_squares_count is already defined as \e[33mvariable\e\
    [0m \e[35mclosed_squares_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1jc8qe8.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mopen_braces_count\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mopen_braces_count is already defined as \e[33mvariable\e[0m \e[35mopen_braces_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw1jc8qe8.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mvar\e[0m \e[36mclosed_braces_count\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mclosed_braces_count is already defined as \e[33mvariable\e[0m \e[35mclosed_braces_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all"
  stdout: ''
  timestamp: 1660013386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_commas = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces_without_commas.map(x => x.replace(\"\
    [\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas.map(x\
    \ => x.replace(\"[\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_bracket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprhglijxr.scala:18:168 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas.map(\e\
    [36mx\e[0m => x.replace(\e[31m\",\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprhglijxr.scala:19:185 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_commas_without_bracket\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_without_spaces_without_commas_without_bracket\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhglijxr.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) == 0)\n        val paren_group_strings_sorted_with_open_braces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"{\").replace(\")\"\
    , \"}\"))\n        val paren_group_strings_sorted_with_close_braces = paren_group_strings_sorted_with_open_braces.map(x\
    \ => x.replace(\"{\", \"(\").replace(\"}\", \"))\")\n        val paren_group_strings_sorted_with_open_braces_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces.map(x => x.replace(\")\", \"\
    ]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets.map(x => x.replace(\"\
    ]\", \"[\").replace(\"[\", \"(\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"{\").replace(\"{\", \"(\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"{\", \"[\").replace(\"[\", \"{\").replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphclncko9.scala:14:8 ----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_with_open_braces_with_brackets\e\
    [0m = paren_group_strings_sorted_with_close_braces.map(\e[36mx\e[0m => x.replace(\e\
    [31m\")\"\e[0m, \e[31m\"]\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphclncko9.scala:19:5 ---------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[Int]()\n        val close_braces\
    \ = mutable.ListBuffer[Int]()\n        val open_parens = mutable.ListBuffer[Int]()\n\
    \        val close_parens = mutable.ListBuffer[Int]()\n        val paren_opens\
    \ = mutable.ListBuffer[Int]()\n        val paren_closes = mutable.ListBuffer[Int]()\n\
    \        val paren_group_strings = mutable.ListBuffer[String]()\n        val paren_group_strings_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_opens = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes = mutable.ListBuffer[Int]()\n        val paren_group_opens_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_closes_size_sum = mutable.ListBuffer[Int]()\n        val paren_group_opens_size_sum_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closes_size_sum_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum_max = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_closes_size_sum_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_opens_size_sum_max_min = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_size_sum_max_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_opens_size_sum_max_min_max = mutable.ListBuffer[Int]()\n  \
    \      val paren_group_closes_size_sum_max_min_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum_max_min_max_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_size_sum_max_min_max_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum_max_min_max_min_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_size_sum_max_min_max_min_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum_max_min_max_min_max_min = mutable.ListBuffer[Int]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfkj7sndl.scala:37:11 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkj7sndl.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfkj7sndl.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkj7sndl.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkj7sndl.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_parens\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkj7sndl.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_parens\e[0m = mutable.ListBuffe"
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8xuwb4zz.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8xuwb4zz.scala:11:101 -------------------\e[0m\e[0m\n\e[31m11 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8xuwb4zz.scala:13:139 -------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                    Found:    Int\n\e[31m   |\e[0m          \
    \                                             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8xuwb4zz.scala:15:177 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                                                         "
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" \\\\(\"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \"\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgm8d38xk.scala:14:99 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgm8d38xk.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpgm8d38xk.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                             "
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces =\
    \ paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n      \
    \  val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwuvqi9lh.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwuvqi9lh.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val open = x.indexOf(\"(\")\n           \
    \ val close = x.indexOf(\")\")\n            val paren_str = x.substring(open +\
    \ 1, close)\n            paren_open.append(paren_str)\n            paren_closed.append(paren_str)\n\
    \            paren_stack.append(paren_str)\n        })\n        paren_stack.foreach(x\
    \ => {\n            val open = x.indexOf(\"(\")\n            val close = x.indexOf(\"\
    )\")\n            val paren_str = x.substring(open + 1, close)\n            paren_groups.append(paren_str)\n\
    \        })\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y8vfiub.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4y8vfiub.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y8vfiub.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y8vfiub.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val open_braces = paren_string.split(\"\\\\(\").length\n        \
    \    val close_braces = paren_string.split(\"\\\\)\").length\n            val\
    \ open_brace_count = paren_string.split(\"\\\\(\").length\n            val close_brace_count\
    \ = paren_string.split(\"\\\\)\").length\n            val open_brace_count_in_group\
    \ = open_brace_count / paren_groups.length\n            val close_brace_count_in_group\
    \ = close_brace_count / paren_groups.length\n            val open_brace_count_in_group_plus_1\
    \ = open_brace_count_in_group + 1\n            val close_brace_count_in_group_plus_1\
    \ = close_brace_count_in_group + 1\n            val open_brace_count_in_group_plus_2\
    \ = open_brace_count_in_group_plus_1 + 1\n            val close_brace_count_in_group_plus_2\
    \ = close_brace_count_in_group_plus_1 + 1\n            val open_brace_count_in_group_plus_3\
    \ = open_brace_count_in_group_plus_2 + 1\n            val close_brace_count_in_group_plus_3\
    \ = close_brace_count_in_group_plus_2 + 1\n            val open_brace_count_in_group_plus_4\
    \ = open_brace_count_in_group_plus_3 + 1\n            val close_brace_count_in_group_plus_4\
    \ = close_brace_count_in_group_plus_3 + 1\n            val open_brace_count_in_group_plus_5\
    \ = open_brace_count_in_group_plus_4 + 1\n            val close_brace_count_in_group_plus_5\
    \ = close_brace_count_in_group_plus_4 + 1\n            val open_brace_count_in_group_plus_6\
    \ = open_brace_count_in_group_plus_5 + 1\n            val close_brace_count_in_group_plus_6\
    \ = close_brace_count_in_group_plus_5 + 1\n            val open_brace_count_in_group_plus_7\
    \ = open_brace_count_in_group_plus_6 + 1\n            val close_brace_count_in_group_plus_7\
    \ = close_brace_count_in_group_plus_6 + 1\n            val open_brace_count_in_group_plus_8\
    \ = open_brace_count_in_group_plus_7 + 1\n            val close_brace_count_in_group_plus_8\
    \ = close_brace_count_in_group_plus_7 + 1\n            val open_bra\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8kof9nva.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8kof9nva.scala:46:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8kof9nva.scala:9:27 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8kof9nva.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8kof9nva.scala:45:1 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp8kof9nva.scala:38:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:11:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:12:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:13:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3g9g665d.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660013339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp462sh0ve.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp462sh0ve.scala:19:120\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp462sh0ve.scala:20:127\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat.filter(x => x.trim().nonEmpty)\n   \
    \     val paren_groups_with_spaces_trimmed_flat_trimmed_sorted = paren_groups_with_spaces_trimmed_flat_trimmed.sorted\n\
    \        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed = paren_groups_with_spaces_trimmed_flat_trimmed_sorted.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed.filter(x => x.trim().nonEmpty)\n\
    \        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq9uvk3a3.scala:18:99 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed.filter(\e\
    [36mx\e[0m => x.trim().nonEmpty)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpq9uvk3a3.scala:19:107 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed.filter(\e\
    [36mx\e[0m => x.trim().nonEmpty)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpq9uvk3a3.scala:20:115 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.filter(\e\
    [36mx\e[0m => x.trim().nonEmpty)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                 ^\e[0m\n\e[31m   |\e[0mRe"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_close_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_sizes = mutable.ListBuffer[Int]()\n\
    \        val paren_close_sizes = mutable.ListBuffer[Int]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size_sum = mutable.ListBuffer[Int]()\n        val paren_open_sizes_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_sizes_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_size_sum_sum = mutable.ListBuffer[Int]()\n        val paren_close_size_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_sizes_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_sizes_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_size_sum_sum_sum = mutable.ListBuffer[Int]()\n        val paren_open_size_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_sizes_sum_sum_sum = mutable.ListBuffer[Int]()\n      \
    \  val paren_close_sizes_sum_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_size_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n        val paren_open_size_sum_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_sum_sum_sum_sum =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_sizes_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_sizes_sum_sum_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprrypogk1.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprrypogk1.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprrypogk1.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprrypogk1.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprrypogk1.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprrypogk1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         N"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_count = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_size = mutable.ListBuffer[Int]()\n        val paren_group_close_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count = mutable.ListBuffer[Int]()\n        val paren_group_close_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_count_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplv2sz3yi.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplv2sz3yi.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_close_count\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_count is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplv2sz3yi.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_count_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_count_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_count_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplv2sz3yi.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_count_size\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_count_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_count_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplv2sz3yi.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                 "
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_open_braces = 0\n        var paren_closed_braces = 0\n    \
    \    var paren_open_brace_count = 0\n        var paren_closed_brace_count = 0\n\
    \        var paren_open_brace_count_in_group = 0\n        var paren_closed_brace_count_in_group\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_close = 0\n    \
    \    var paren_closed_brace_count_in_group_after_last_close = 0\n        var paren_open_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_open = 0\n   \
    \     var paren_open_brace_count_in_group_after_last_close = 0\n        var paren_closed_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_open = 0\n     \
    \   var paren_closed_brace_count_in_group_after_last_open = 0\n        var paren_open_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_close = 0\n  \
    \      var paren_open_brace_count_in_group_after_last_open = 0\n        var paren_closed_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_close = 0\n    \
    \    var paren_closed_brace_count_in_group_after_last_close = 0\n        var paren_open_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_open = 0\n   \
    \     var paren_open_brace_count_in_group_after_last_close = 0\n        var paren_closed_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_open = 0\n     \
    \   var paren_closed_brace_count_in_group_after_last_open = 0\n        var paren_open_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_close = 0\n  \
    \      var paren_open_brace_count_in_group_after_last_open = 0\n        var paren_closed_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_close = 0\n    \
    \    var paren_closed_brace_count_in_group_after_last_close = 0\n        var paren_open_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_open = 0\n   \
    \     var paren_open_brace_count_in_group_after_last_close = 0\n        var paren_close\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp3dmttmy.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp3dmttmy.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_open_brace_count_in_group_after_last_close\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_in_group_after_last_close is already\
    \ defined as \e[33mvariable\e[0m \e[35mparen_open_brace_count_in_group_after_last_close\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp3dmttmy.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_closed_brace_count_in_group_after_last_close\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_in_group_after_last_close is already\
    \ defined as \e[33mvariable\e[0m \e[35mparen_closed_brace_count_in_group_after_last_close\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp3dmttmy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_open_brace_count_in_group_after_last_open\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_in_group_after_last_open is already\
    \ defined as \e[33mvariable\e[0m \e[35mparen_open_brace_count_in_group_after_last_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp3dmttmy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_cl"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_count = paren_groups.length\n        val paren_groups_list_with_parens\
    \ = mutable.ListBuffer[String]()\n        var paren_groups_list_with_parens_index\
    \ = 0\n        var paren_groups_list_with_parens_length = 0\n        for(paren_groups_index\
    \ <- 0 until paren_groups_count) {\n            val paren_group_string = paren_groups(paren_groups_index)\n\
    \            val paren_group_length = paren_group_string.length\n            paren_groups_list_with_parens_length\
    \ += 1\n            paren_groups_list_with_parens += paren_group_string\n    \
    \        if(paren_groups_index == paren_groups_count - 1) {\n                paren_groups_list_with_parens_index\
    \ += 1\n                paren_groups_list_with_parens += \"(\"\n            }\n\
    \            else if(paren_groups_index != 0) {\n                paren_groups_list_with_parens_index\
    \ += 1\n                paren_groups_list_with_parens += \"(\"\n            }\n\
    \        }\n        val paren_groups_list_with_parens_length = paren_groups_list_with_parens.length\n\
    \        val paren_groups_list_with_parens_index = paren_groups_list_with_parens.length\
    \ - 1\n        val paren_groups_list_with_parens_last_index = paren_groups_list_with_parens_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string = paren_groups_list_with_parens(paren_groups_list_with_parens_last_index)\n\
    \        val paren_groups_list_with_parens_last_string_length = paren_groups_list_with_parens_last_string.length\n\
    \        val paren_groups_list_with_parens_last_string_length = paren_groups_list_with_parens_last_string_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string_last_index = paren_groups_list_with_parens_last_string_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string_last_string = paren_groups_list_with_parens_last_string(paren_groups_list_with_parens_last_string_last_index)\n\
    \        val paren_groups_list_with_parens_last_string_last_string_length = paren_groups_list_with_parens_last_string_last_string.length\n\
    \        val paren_groups_list_with_parens_last_string_last_string_length = paren_groups_list_with_parens_last_string_last_string_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string_last_string_last_index\
    \ = paren_groups_list_with_parens_last_string_last_string_length - 1\n       \
    \ val paren_groups_list_with_parens_last_string_last_string_last_string = paren_groups_list_with_parens_last_string_last_string(paren_groups_list_with_paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw6233ju_.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6233ju_.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_list_with_parens_length\e[0m = paren_groups_list_with_parens.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_with_parens_length is already defined as\
    \ \e[33mvariable\e[0m \e[35mparen_groups_list_with_parens_length\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw6233ju_.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_with_parens_index\e[0m\
    \ = paren_groups_list_with_parens.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_with_parens_index is already defined as\
    \ \e[33mvariable\e[0m \e[35mparen_groups_list_with_parens_index\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw6233ju_.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_with_parens_last_string_length\e\
    [0m = paren_groups_list_with_parens_last_string_length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_with_parens_last_string_length is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_groups_list_with_parens_last_string_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        paren_groups_flat3.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv8k7jx9j.scala:11:68 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv8k7jx9j.scala:12:69\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                   value contains is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpv8k7jx9j.scala:13:27 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        paren_groups_flat3.toList\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code goes here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth = mutable.ListBuffer[Int]()\n        val paren_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached2 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached2 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached3 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached3 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached4 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached4 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached5 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached5 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached6 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached6 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached7 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached7 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached8 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached8 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached9 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_depth_limit_reached9 = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_depth_limit_reached10 = mutable.ListBuffer[Boolean]()\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxhhbyi7r.scala:38:11 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhhbyi7r.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhhbyi7r.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhhbyi7r.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhhbyi7r.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhhbyi7r.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_siz"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code goes here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val closed_braces = mutable.ListBuffer[String]()\n        val open_brace_count\
    \ = 0\n        val closed_brace_count = 0\n        val open_brace_open = false\n\
    \        val closed_brace_open = false\n        val open_brace_closed = false\n\
    \        val closed_brace_closed = false\n        val open_brace_opened = false\n\
    \        val closed_brace_opened = false\n        val open_brace_closed = false\n\
    \        val closed_brace_closed = false\n        val open_brace_opened1 = false\n\
    \        val closed_brace_opened1 = false\n        val open_brace_closed1 = false\n\
    \        val closed_brace_closed1 = false\n        val open_brace_opened2 = false\n\
    \        val closed_brace_opened2 = false\n        val open_brace_closed2 = false\n\
    \        val closed_brace_closed2 = false\n        val open_brace_opened3 = false\n\
    \        val closed_brace_opened3 = false\n        val open_brace_closed3 = false\n\
    \        val closed_brace_closed3 = false\n        val open_brace_opened4 = false\n\
    \        val closed_brace_opened4 = false\n        val open_brace_closed4 = false\n\
    \        val closed_brace_closed4 = false\n        val open_brace_opened5 = false\n\
    \        val closed_brace_opened5 = false\n        val open_brace_closed5 = false\n\
    \        val closed_brace_closed5 = false\n        val open_brace_opened6 = false\n\
    \        val closed_brace_opened6 = false\n        val open_brace_closed6 = false\n\
    \        val closed_brace_closed6 = false\n        val open_brace_opened7 = false\n\
    \        val closed_brace_opened7 = false\n        val open_brace_closed7 = false\n\
    \        val closed_brace_closed7 = false\n        val open_brace_opened8 = false\n\
    \        val closed_brace_opened8 = false\n        val open_brace_closed8 = false\n\
    \        val closed_brace_closed8 = false\n        val open_brace_opened9 = false\n\
    \        val closed_brace_opened9 = false\n        val open_brace_closed9 = false\n\
    \        val closed_brace_closed9 = false\n        val open_brace_opened\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfvm4pwhu.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvm4pwhu.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_brace_closed\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopen_brace_closed is already\
    \ defined as \e[33mvalue\e[0m \e[35mopen_brace_closed\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfvm4pwhu.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclosed_brace_closed\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclosed_brace_closed\
    \ is already defined as \e[33mvalue\e[0m \e[35mclosed_brace_closed\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfvm4pwhu.scala:10:27 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfvm4pwhu.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvm4pwhu.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosed_braces\e[0"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqi1yoo8s.scala:21:268 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpqi1yoo8s.scala:22:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqi1yoo8s.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces =\
    \ paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n      \
    \  val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1u7jtvmh.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1u7jtvmh.scala:18:152\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1u7jtvmh.scala:19:167 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_"
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ) \"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpce8onekc.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpce8onekc.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpce8onekc.scala:14:99 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces : Int = 0\n        var close_braces : Int = 0\n     \
    \   var open_parens : Int = 0\n        var close_parens : Int = 0\n        var\
    \ paren_count : Int = 0\n        var paren_string : String = \"\"\n        for(i\
    \ <- 0 until paren_string.length){\n            paren_string = paren_string.substring(0,i)\n\
    \            if(paren_string.charAt(i) == '('){\n                paren_count +=\
    \ 1\n                open_parens += 1\n            }\n            else if(paren_string.charAt(i)\
    \ == ')'){\n                paren_count -= 1\n                close_parens +=\
    \ 1\n            }\n            else if(paren_string.charAt(i) == ')' && paren_count\
    \ < 0){\n                paren_count -= 1\n                close_parens += 1\n\
    \            }\n            else if(paren_string.charAt(i) == '(' && paren_count\
    \ > 0){\n                paren_count += 1\n                open_braces += 1\n\
    \            }\n            else if(paren_string.charAt(i) == ')' && paren_count\
    \ == 0){\n                open_braces -= 1\n                close_braces += 1\n\
    \            }\n            else if(paren_string.charAt(i) == ')' && open_braces\
    \ == 0 && close_braces == 0 && open_parens == 0 && close_parens == 0){\n     \
    \           paren_groups += paren_string.substring(0,i)\n            }\n     \
    \   }\n        return paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4m9bptr.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var open_parens\
    \ = 0\n        var close_parens = 0\n        var in_group = 0\n        var in_group_parens\
    \ = 0\n        var in_group_parens_count = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp61808w73.scala:65:11 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp61808w73.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36min_group_parens_count_max\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min_group_parens_count_max is already defined as \e[33mvariable\e\
    [0m \e[35min_group_parens_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61808w73.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36min_group_parens_count_max_index\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min_group_parens_count_max_index is already defined as \e[33mvariable\e\
    [0m \e[35min_group_parens_count_max_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61808w73.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36min_group_parens_count_min\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0min_group_parens_count_min\
    \ is already defined as \e[33mvariable\e[0m \e[35min_group_parens_count_min\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp61808w73.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36min_group_parens_count_min_index\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min_group_parens_count_min"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwppmn4qh.scala:19:338 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwppmn4qh.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwppmn4qh.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaoi990_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_brace_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_brace_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_brace_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloade"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index2 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index2\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index3 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index3 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index4 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index4\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index5 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index5 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index6 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index6\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index7 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index7 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index8 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index8\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index9 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index9 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index10 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index10\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index11 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index11 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index12 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index12\
    \ = mutable.ListBuffer[Int]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpit2_kq25.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpit2_kq25.scala:10:31 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpit2_kq25.scala:11:31\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_open\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpit2_kq25.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpit2_kq25.scala:13:36 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_group_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups_size.map(x => List(x))\n        val paren_groups_size_list2 =\
    \ paren_groups_size.map(x => List(x))\n        val paren_groups_size_list3 = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list4 = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list5 = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list6 = paren_groups_size.map(x => List(x))\n \
    \       val paren_groups_size_list7 = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list8 = paren_groups_size.map(x => List(x))\n   \
    \     val paren_groups_size_list9 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list10 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list11 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list12 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list13 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list14 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list15 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list16 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list17 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list18 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list19 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list20 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list21 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list22 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list23 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list24 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list25 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list26 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdhvt9lvp.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhvt9lvp.scala:11:55\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhvt9lvp.scala:12:56\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list2\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhvt9lvp.scala:13:56\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list3\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhvt9lvp.scala:14:56\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list4\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value map is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdhvt9lvp.scala:15:56\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_size_list5\e[0m = paren_groups_size.map(\e[36mx\e[0m => List(x))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    "
  stdout: ''
  timestamp: 1660013401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_regex = \"\"\"[(]([^()]*[)]*)\"\"\".r\n        paren_string.split(\"\
    [()]\").foreach(x => {\n            val m = paren_group_regex.findFirstMatchIn(x)\n\
    \            if (m != null) {\n                paren_groups += m.group(1)\n  \
    \          }\n        })\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrk8mgm_.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_space = mutable.ListBuffer[String]()\n\
    \        val paren_opens = mutable.ListBuffer[String]()\n        val paren_closes\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces = mutable.ListBuffer[String]()\n\
    \        val paren_opens_count = mutable.ListBuffer[String]()\n        val paren_closes_count\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_count = mutable.ListBuffer[String]()\n\
    \        val paren_opens_count_max = mutable.ListBuffer[String]()\n        val\
    \ paren_closes_count_max = mutable.ListBuffer[String]()\n        val paren_spaces_count_max\
    \ = mutable.ListBuffer[String]()\n        val paren_opens_count_min = mutable.ListBuffer[String]()\n\
    \        val paren_closes_count_min = mutable.ListBuffer[String]()\n        val\
    \ paren_spaces_count_min = mutable.ListBuffer[String]()\n        val paren_opens_count_max\
    \ = mutable.ListBuffer[String]()\n        val paren_closes_count_max = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_count_max = mutable.ListBuffer[String]()\n        val\
    \ paren_opens_count_min = mutable.ListBuffer[String]()\n        val paren_closes_count_min\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_count_min = mutable.ListBuffer[String]()\n\
    \        val paren_opens_count_max = mutable.ListBuffer[String]()\n        val\
    \ paren_closes_count_max = mutable.ListBuffer[String]()\n        val paren_spaces_count_max\
    \ = mutable.ListBuffer[String]()\n        val paren_opens_count_min = mutable.ListBuffer[String]()\n\
    \        val paren_closes_count_min = mutable.ListBuffer[String]()\n        val\
    \ paren_spaces_count_min = mutable.ListBuffer[String]()\n        val paren_opens_count_max\
    \ = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy4u_682.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_opens_count_max\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opens_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_opens_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy4u_682.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_closes_count_max\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closes_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closes_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy4u_682.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_spaces_count_max\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_spaces_count_max is already defined as \e[33mvalue\e\
    [0m \e[35mparen_spaces_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuy4u_682.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mparen_opens_count_min\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_opens_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_opens_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_emslxd.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_emslxd.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[Int]()\n        val paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_brace\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_size = mutable.ListBuffer[Int]()\n        val paren_closed_brace_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_group_size = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group_count = mutable.ListBuffer[Int]()\n    \
    \    val paren_open_brace_group_count_size = mutable.ListBuffer[Int]()\n     \
    \   val paren_closed_brace_group_count_size = mutable.ListBuffer[Int]()\n    \
    \    val paren_open_brace_group_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_group_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_group_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_group_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_group_count_count_count_count_count_count_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_jymnat0.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jymnat0.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jymnat0.scala:10:25 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_jymnat0.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jymnat0.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jymnat0.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_in_group = mutable.ListBuffer[String]()\n\
    \        val paren_open_in_group = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_without_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq3ggdrtp.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3ggdrtp.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq3ggdrtp.scala:10:25 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq3ggdrtp.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3ggdrtp.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_in_group\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpq3ggdrtp.scala:13:34 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open_in_group\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         "
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces = mutable.ListBuffer[String]()\n\
    \        val paren_opens = mutable.ListBuffer[String]()\n        val paren_closes\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_open = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_close = mutable.ListBuffer[String]()\n        val paren_spaces_opens\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_closes = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_close = mutable.ListBuffer[String]()\n       \
    \ val paren_spaces_opens_closes = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_open\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_close\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_open\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_close\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_closes\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_closes_open\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_closes_close\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_closes_closes\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_closes_closes_open\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_closes_closes_close\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_closes_closes_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7gx2ao5y.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gx2ao5y.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7gx2ao5y.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7gx2ao5y.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gx2ao5y.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7gx2ao5y.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         N"
  stdout: ''
  timestamp: 1660013399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xvssvb_.scala:13:8 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\") \"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5xvssvb_.scala:28:1 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_group: List[String] = paren_string.split(\"\\\\(\")\n \
    \           paren_groups += paren_group\n            paren_group.foreach(paren_string\
    \ => {\n                val paren_open = paren_string.indexOf(\"(\")\n       \
    \         val paren_close = paren_string.indexOf(\")\")\n                if(paren_open\
    \ != -1 && paren_close != -1) {\n                    paren_stack.push(paren_string.substring(0,\
    \ paren_open))\n                    paren_stack.push(paren_string.substring(paren_open\
    \ + 1, paren_close))\n                }\n            })\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgbpyo5w.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppgbpyo5w.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[Int]()\n        val closed_braces\
    \ = mutable.ListBuffer[Int]()\n        val open_brace_count = 0\n        val closed_brace_count\
    \ = 0\n        val open_brace_open = false\n        val closed_brace_open = false\n\
    \        val open_brace_closed = false\n        val closed_brace_closed = false\n\
    \        val open_brace_opened = false\n        val closed_brace_opened = false\n\
    \        val open_brace_closed = false\n        val closed_brace_closed = false\n\
    \        val open_brace_opened = 0\n        val closed_brace_opened = 0\n    \
    \    val open_brace_closed = 0\n        val closed_brace_closed = 0\n        val\
    \ open_brace_count = 0\n        val closed_brace_count = 0\n        val open_brace_open\
    \ = false\n        val closed_brace_open = false\n        val open_brace_closed\
    \ = false\n        val closed_brace_closed = false\n        val open_brace_opened\
    \ = false\n        val closed_brace_opened = false\n        val open_brace_closed\
    \ = false\n        val closed_brace_closed = false\n        val open_brace_count\
    \ = 0\n        val closed_brace_count = 0\n        val open_brace_open = false\n\
    \        val closed_brace_open = false\n        val open_brace_closed = false\n\
    \        val closed_brace_closed = false\n        val open_brace_opened = 0\n\
    \        val closed_brace_opened = 0\n        val open_brace_closed = 0\n    \
    \    val closed_brace_closed = 0\n        val open_brace_count = 0\n        val\
    \ closed_brace_count = 0\n        val open_brace_open = false\n        val closed_brace_open\
    \ = false\n        val open_brace_closed = false\n        val closed_brace_closed\
    \ = false\n        val open_brace_opened = 0\n        val closed_brace_opened\
    \ = 0\n        val open_brace_closed = 0\n        val closed_brace_closed = 0\n\
    \        val open_brace_count = 0\n        val closed_brace_count = 0\n      \
    \  val open_brace_open = false\n        val closed_brace_open = false\n      \
    \  val open_brace_closed = false\n        val closed_brace_closed = false\n  \
    \      val open_brace_opened = 0\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx52soo9j.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_closed\e[0m =\
    \ \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_brace_closed is already defined as \e[33mvalue\e[0m \e\
    [35mopen_brace_closed\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx52soo9j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclosed_brace_closed\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosed_brace_closed is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosed_brace_closed\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx52soo9j.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_opened\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mopen_brace_opened is already defined as \e[33mvalue\e[0m \e[35mopen_brace_opened\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx52soo9j.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mclosed_brace_opened\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mclosed_brace_opened is already defined as \e[33mvalue\e[0m \e[35mclosed_brace_opened\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx52soo9j.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_closed\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopen_b"
  stdout: ''
  timestamp: 1660013401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Your code here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_space = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace = mutable.ListBuffer[String]()\n        val paren_close_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space = mutable.ListBuffer[String]()\n        val\
    \ paren_close_brace_space = mutable.ListBuffer[String]()\n        val paren_space_space_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space = mutable.ListBuffer[String]()\n  \
    \      val paren_space_space_space_brace = mutable.ListBuffer[String]()\n    \
    \    val paren_open_brace_space_space_space = mutable.ListBuffer[String]()\n \
    \       val paren_close_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_space_brace = mut\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdwgt75c.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdwgt75c.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdwgt75c.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdwgt75c.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvdwgt75c.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdwgt75c.scala:15:26 --------------"
  stdout: ''
  timestamp: 1660013402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_open_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_max = mutable.ListBuffer[Int]()\n        val paren_close_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_min = mutable.ListBuffer[Int]()\n        val paren_open_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_max = mutable.ListBuffer[Int]()\n        val paren_close_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_min = mutable.ListBuffer[Int]()\n        val paren_open_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_min = mutable.ListBuffer[Int]()\n        val paren_close_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_max = mutable.ListBuffer[Int]()\n        val paren_open_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_max = mutable.ListBuffer[Int]()\n        val paren_close_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_min = mutable.ListBuffer[Int]()\n        val paren_open_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_min = mutable.ListBuffer[Int]()\n        val paren_close_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkui63xky.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkui63xky.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_count_min\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mparen_open_count_min is already defined as \e[33mvalue\e[0m \e\
    [35mparen_open_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkui63xky.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_close_count_min\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_count_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_close_count_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkui63xky.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_open_count_max\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_count_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_count_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkui63xky.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_close_count_max\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close_count_max is already defined as \e[33m"
  stdout: ''
  timestamp: 1660013407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted = paren_groups_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces = paren_groups_with_spaces_trimmed_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces.map(x => x.trim())\n \
    \       val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x => x)\n\
    \        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptbm4f_r8.scala:16:93 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptbm4f_r8.scala:17:101 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptbm4f_r8.scala:18:108 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\e\
    [0m = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_s"
  stdout: ''
  timestamp: 1660013407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_balance = mutable.ListBuffer[Int]()\n        val paren_closed_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_balance_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_balance_depth = mutable.ListBuffer[Int]()\n        val paren_closed_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_balance_balance = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_balance_balance_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_balance_balance_size = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance_balance\
    \ = mutable.ListBuffer[Int\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiltr7z6r.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiltr7z6r.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpiltr7z6r.scala:10:25 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpiltr7z6r.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiltr7z6r.scala:12:30 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiltr7z6r.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660013406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_even = paren_groups_size\
    \ % 2 == 0\n        val paren_groups_size_odd = paren_groups_size % 2 != 0\n \
    \       val paren_groups_size_even_remainder = paren_groups_size_even && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder = paren_groups_size_odd && paren_groups_size_remainder\n\
    \        val paren_groups_size_even_remainder_remainder = paren_groups_size_even_remainder\
    \ && paren_groups_size_remainder\n        val paren_groups_size_odd_remainder_remainder\
    \ = paren_groups_size_odd_remainder && paren_groups_size_remainder\n        val\
    \ paren_groups_size_even_remainder_odd = paren_groups_size_even_remainder && paren_groups_size_odd\n\
    \        val paren_groups_size_odd_remainder_even = paren_groups_size_odd_remainder\
    \ && paren_groups_size_even\n        val paren_groups_size_even_remainder_odd_remainder\
    \ = paren_groups_size_even_remainder_remainder && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder_even_remainder = paren_groups_size_odd_remainder_remainder\
    \ && paren_groups_size_remainder\n        val paren_groups_size_even_remainder_odd_remainder_remainder\
    \ = paren_groups_size_even_remainder_odd_remainder && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder_even_remainder_odd = paren_groups_size_odd_remainder_even_remainder\
    \ && paren_groups_size_odd\n        val paren_groups_size_even_remainder_odd_remainder_even\
    \ = paren_groups_size_even_remainder_odd_remainder && paren_groups_size_even\n\
    \        val paren_groups_size_odd_remainder_even_remainder_odd_remainder = paren_groups_size_odd_remainder_even_remainder_odd_remainder\
    \ && paren_groups_size_remainder\n        val paren_groups_size_even_remainder_odd_remainder_even_remainder_odd\
    \ = paren_groups_size_even_remainder_odd_remainder_even_remainder_odd && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder_even_remainder_odd_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl2zvf9v4.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl2zvf9v4.scala:14:73 --------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_size_even_remainder\e[0m = paren_groups_size_even\
    \ && paren_groups_size_remainder\n\e[31m\e[31m   |\e[0m                      \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (paren_groups_size_remainder\
    \ : Int)\n\e[31m   |\e[0m                           Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl2zvf9v4.scala:15:71 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_odd_remainder\e\
    [0m = paren_groups_size_odd && paren_groups_size_remainder\n\e[31m\e[31m   |\e\
    [0m                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (paren_groups_size_remainder\
    \ : Int)\n\e[31m   |\e[0m                           Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl2zvf9v4.scala:16:93 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_even_remainder_remainder\e\
    [0m = paren_groups_size_even_remainder && paren_groups_size_remainder\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    (paren_groups_size_remainder : Int)\n\e\
    [31m   |\e[0m                           Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl2zvf9v4.scala"
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ close_brace_count = 0\n        val paren_open = false\n        val paren_close\
    \ = false\n        val paren_group = \"\"\n        val paren_group_open = false\n\
    \        val paren_group_close = false\n        val paren_group_open_brace = false\n\
    \        val paren_group_close_brace = false\n        val paren_group_open_brace_count\
    \ = 0\n        val paren_group_close_brace_count = 0\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5nc4l_v.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_brace_open\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_brace_open is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_brace_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5nc4l_v.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_brace_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_brace_close\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5nc4l_v.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_brace_open\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_brace_open is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_brace_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5nc4l_v.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparen_group_close_brace_close\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_brace_close is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_close_brace_close\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5nc4l_v.scala:31:12 ---------"
  stdout: ''
  timestamp: 1660013407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \ \", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_7wc8lro.scala:21:11 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_7wc8lro.scala:15:84 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7wc8lro.scala:17:103\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_7wc8lro.scala:18:122\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted"
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Write your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val spaces =\
    \ mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace = mutable.ListBuffer[String]()\n        val paren_space_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space = mutable.ListBuffer[String]()\n        val\
    \ paren_space_space_brace = mutable.ListBuffer[String]()\n        val paren_open_brace_space_space\
    \ = mutable.ListBuffer[String]()\n        val paren_close_brace_space_space =\
    \ mutable.ListBuffer[String]()\n        val paren_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_space_space_brace\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbb8ijo4.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbb8ijo4.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplbb8ijo4.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplbb8ijo4.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbb8ijo4.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplbb8ijo4.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     "
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xvssvb_.scala:13:8 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\") \"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5xvssvb_.scala:28:1 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brackets\
    \ = 0\n        var closed_brackets = 0\n        var open_brackets_count = 0\n\
    \        var closed_brackets_count = 0\n        var open_braces_count = 0\n  \
    \      var closed_braces_count = 0\n        var open_braces_count_temp = 0\n \
    \       var closed_braces_count_temp = 0\n        var open_brackets_count_temp\
    \ = 0\n        var closed_brackets_count_temp = 0\n        var open_braces_count_temp2\
    \ = 0\n        var closed_braces_count_temp2 = 0\n        var open_brackets_count_temp2\
    \ = 0\n        var closed_brackets_count_temp2 = 0\n        var open_braces_count_temp3\
    \ = 0\n        var closed_braces_count_temp3 = 0\n        var open_brackets_count_temp3\
    \ = 0\n        var closed_brackets_count_temp3 = 0\n        var open_braces_count_temp4\
    \ = 0\n        var closed_braces_count_temp4 = 0\n        var open_brackets_count_temp4\
    \ = 0\n        var closed_brackets_count_temp4 = 0\n        var open_braces_count_temp5\
    \ = 0\n        var closed_braces_count_temp5 = 0\n        var open_brackets_count_temp5\
    \ = 0\n        var closed_brackets_count_temp5 = 0\n        var open_braces_count_temp6\
    \ = 0\n        var closed_braces_count_temp6 = 0\n        var open_brackets_count_temp6\
    \ = 0\n        var closed_brackets_count_temp6 = 0\n        var open_braces_count_temp7\
    \ = 0\n        var closed_braces_count_temp7 = 0\n        var open_brackets_count_temp7\
    \ = 0\n        var closed_brackets_count_temp7 = 0\n        var open_braces_count_temp8\
    \ = 0\n        var closed_braces_count_temp8 = 0\n        var open_brackets_count_temp8\
    \ = 0\n        var closed_brackets_count_temp8 = 0\n        var open_braces_count_temp9\
    \ = 0\n        var closed_braces_count_temp9 = 0\n        var open_brackets_count_temp9\
    \ = 0\n        var closed_brackets_count_temp9 = 0\n        var open_braces_count_temp10\
    \ = 0\n        var closed_braces_count_temp10 = 0\n        var open_brackets_count_temp10\
    \ = 0\n        var closed_brackets_count_temp10 = 0\n        var open_braces_count_temp11\
    \ = 0\n        var closed_braces_count_temp11 = 0\n        var open_brackets_count_temp11\
    \ = 0\n        var closed_brackets_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplu72ce_y.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplu72ce_y.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplu72ce_y.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y) == 0)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\"))\n       \
    \ val paren_groups_with_spaces_sorted_without_spaces_without_spaces = paren_groups_with_spaces_sorted_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvmzb93p.scala:20:181 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_without_spaces_without_spaces_\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_without_spaces_without_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvmzb93p.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwppmn4qh.scala:19:338 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwppmn4qh.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpwppmn4qh.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \"))\n        paren_group_strings\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp75qzqwt_.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        paren_group_strings\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    (paren_group_strings : Array[String])\n\e[31m   |\e[0m        Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brackets\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_brackets = mutable.ListBuffer[String]()\n\
    \        val paren_open_squares = mutable.ListBuffer[String]()\n        val paren_closed_squares\
    \ = mutable.ListBuffer[String]()\n        val paren_open_curlys = mutable.ListBuffer[String]()\n\
    \        val paren_closed_curlys = mutable.ListBuffer[String]()\n        val paren_open_angles\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_angles = mutable.ListBuffer[String]()\n\
    \        val paren_open_commas = mutable.ListBuffer[String]()\n        val paren_closed_commas\
    \ = mutable.ListBuffer[String]()\n        val paren_open_semis = mutable.ListBuffer[String]()\n\
    \        val paren_closed_semis = mutable.ListBuffer[String]()\n        val paren_open_colons\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_colons = mutable.ListBuffer[String]()\n\
    \        val paren_open_semicolons = mutable.ListBuffer[String]()\n        val\
    \ paren_closed_semicolons = mutable.ListBuffer[String]()\n        val paren_open_equals\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_equals = mutable.ListBuffer[String]()\n\
    \        val paren_open_equals_braces = mutable.ListBuffer[String]()\n       \
    \ val paren_closed_equals_braces = mutable.ListBuffer[String]()\n        val paren_open_equals_brackets\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_equals_brackets = mutable.ListBuffer[String]()\n\
    \        val paren_open_equals_squares = mutable.ListBuffer[String]()\n      \
    \  val paren_closed_equals_squares = mutable.ListBuffer[String]()\n        val\
    \ paren_open_equals_curlys = mutable.ListBuffer[String]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vynm6ve.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9vynm6ve.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vynm6ve.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vynm6ve.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open_braces\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vynm6ve.scala:13:34\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_closed_braces\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Foun"
  stdout: ''
  timestamp: 1660013408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \ \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kz__azk.scala:21:141 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8kz__azk.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \").trim())\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_group_strings_sorted_with_open_braces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"{\").replace(\")\"\
    , \"}\"))\n        val paren_group_strings_sorted_with_close_braces = paren_group_strings_sorted.map(x\
    \ => x.replace(\"{\", \"(\").replace(\"}\", \")\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces.map(x => x.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\"))\n        val paren_group_strings_sorted_with_close_braces_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces.map(x => x.replace(\"[\", \"\
    {\").replace(\"]\", \"}\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets.map(x => x.replace(\"\
    [\", \"{\").replace(\"]\", \"}\"))\n        val paren_group_strings_sorted_with_close_braces_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces_with_brackets.map(x => x.replace(\"\
    {\", \"[\").replace(\"}\", \"]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"{\").replace(\"]\", \"}\"))\n        val paren_group_strings_sorted_with_close_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces_with_brackets_with_brackets.map(x\
    \ => x.replace(\"{\", \"[\").replace(\"}\", \"]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph1c3yt7y.scala:20:219 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\"\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                   unclosed string literal\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmph1c3yt7y.scala:20:211 ----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\"\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                            \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e\
    [35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence):\
    \ String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch\
    \ arguments (Null)\n\e[31m\e[31m-- Error: /tmp/tmph1c3yt7y.scala:21:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:\
    \    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1c3yt7y.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_size\
    \ = paren_groups.size\n        val paren_groups_list_size_2 = paren_groups_list_size\
    \ + 1\n        val paren_groups_list_size_3 = paren_groups_list_size_2 + 1\n \
    \       val paren_groups_list_size_4 = paren_groups_list_size_3 + 1\n        val\
    \ paren_groups_list_size_5 = paren_groups_list_size_4 + 1\n        val paren_groups_list_size_6\
    \ = paren_groups_list_size_5 + 1\n        val paren_groups_list_size_7 = paren_groups_list_size_6\
    \ + 1\n        val paren_groups_list_size_8 = paren_groups_list_size_7 + 1\n \
    \       val paren_groups_list_size_9 = paren_groups_list_size_8 + 1\n        val\
    \ paren_groups_list_size_10 = paren_groups_list_size_9 + 1\n        val paren_groups_list_size_11\
    \ = paren_groups_list_size_10 + 1\n        val paren_groups_list_size_12 = paren_groups_list_size_11\
    \ + 1\n        val paren_groups_list_size_13 = paren_groups_list_size_12 + 1\n\
    \        val paren_groups_list_size_14 = paren_groups_list_size_13 + 1\n     \
    \   val paren_groups_list_size_15 = paren_groups_list_size_14 + 1\n        val\
    \ paren_groups_list_size_16 = paren_groups_list_size_15 + 1\n        val paren_groups_list_size_17\
    \ = paren_groups_list_size_16 + 1\n        val paren_groups_list_size_18 = paren_groups_list_size_17\
    \ + 1\n        val paren_groups_list_size_19 = paren_groups_list_size_18 + 1\n\
    \        val paren_groups_list_size_20 = paren_groups_list_size_19 + 1\n     \
    \   val paren_groups_list_size_21 = paren_groups_list_size_20 + 1\n        val\
    \ paren_groups_list_size_22 = paren_groups_list_size_21 + 1\n        val paren_groups_list_size_23\
    \ = paren_groups_list_size_22 + 1\n        val paren_groups_list_size_24 = paren_groups_list_size_23\
    \ + 1\n        val paren_groups_list_size_25 = paren_groups_list_size_24 + 1\n\
    \        val paren_groups_list_size_26 = paren_groups_list_size_25 + 1\n     \
    \   val paren_groups_list_size_27 = paren_groups_list_size_26 + 1\n        val\
    \ paren_groups_list_size_28 = paren_groups_list_size_27 + 1\n        val paren_groups_list_size_29\
    \ = paren_groups_list_size_28 + 1\n        val paren_groups_list_size_30 = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphdamspq6.scala:40:39 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_size_30\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdamspq6.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp87o_z937.scala:13:8 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\") \"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp87o_z937.scala:28:1 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit = mutable.ListBuffer[Int]()\n    \
    \    val paren_open_depth_limit_limit_limit = mutable.ListBuffer[Int]()\n    \
    \    val paren_closed_depth_limit_limit_limit = mutable.ListBuffer[Int]()\n  \
    \      val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4vujqt94.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_limit_limit_limit_limit\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_limit_limit_limit is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_open_depth_limit_limit_limit_limit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4vujqt94.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_limit_limit_limit\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_limit_limit_limit_limit is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_closed_depth_limit_limit_limit_limit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4vujqt94.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_limit_limit_limit_limit\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_limit_limit_limit is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_open_depth_limit_limit_limit_limit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4vujqt94.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_limit_limit_limit\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_opened2\
    \ = mutable.ListBuffer[String]()\n        val paren_opened3 = mutable.ListBuffer[String]()\n\
    \        val paren_opened4 = mutable.ListBuffer[String]()\n        val paren_opened5\
    \ = mutable.ListBuffer[String]()\n        val paren_opened6 = mutable.ListBuffer[String]()\n\
    \        val paren_opened7 = mutable.ListBuffer[String]()\n        val paren_opened8\
    \ = mutable.ListBuffer[String]()\n        val paren_opened9 = mutable.ListBuffer[String]()\n\
    \        val paren_opened10 = mutable.ListBuffer[String]()\n        val paren_opened11\
    \ = mutable.ListBuffer[String]()\n        val paren_opened12 = mutable.ListBuffer[String]()\n\
    \        val paren_opened13 = mutable.ListBuffer[String]()\n        val paren_opened14\
    \ = mutable.ListBuffer[String]()\n        val paren_opened15 = mutable.ListBuffer[String]()\n\
    \        val paren_opened16 = mutable.ListBuffer[String]()\n        val paren_opened17\
    \ = mutable.ListBuffer[String]()\n        val paren_opened18 = mutable.ListBuffer[String]()\n\
    \        val paren_opened19 = mutable.ListBuffer[String]()\n        val paren_opened20\
    \ = mutable.ListBuffer[String]()\n        val paren_opened21 = mutable.ListBuffer[String]()\n\
    \        val paren_opened22 = mutable.ListBuffer[String]()\n        val paren_opened23\
    \ = mutable.ListBuffer[String]()\n        val paren_opened24 = mutable.ListBuffer[String]()\n\
    \        val paren_opened25 = mutable.ListBuffer[String]()\n        val paren_opened26\
    \ = mutable.ListBuffer[String]()\n        val paren_opened27 = mutable.ListBuffer[String]()\n\
    \        val paren_opened28 = mutable.ListBuffer[String]()\n        val paren_opened29\
    \ = mutable.ListBuffer[String]()\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7clx0d02.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7clx0d02.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7clx0d02.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_close\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7clx0d02.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7clx0d02.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_opened\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7clx0d02.scala:14:28 -"
  stdout: ''
  timestamp: 1660013411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    (\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\"{\", \" { \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\"}\", \" } \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.replace(\"[\", \" [ \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hvzz_zh.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hvzz_zh.scala:18:112\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"{\"\e[0m, \e[31m\" { \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hvzz_zh.scala:19:127\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\" } \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E0"
  stdout: ''
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith(_.length\
    \ > _.length)\n        val paren_groups_with_spaces_sorted_with_open_braces =\
    \ paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \"{\").replace(\"\
    )\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"{\"\
    , \"{\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpt1fte11c.scala:20:11 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt1fte11c.scala:18:153 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"\\n}\"\e[0m, \e[31m\"\\n\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m  \
    \ |\e[0m  paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpt1fte11c.scala:19:168 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces_without_braces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces_without_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"\\n\"\e[0m, \e[31m\"\\n\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_w"
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \"))\n        val paren_group_strings_sorted = paren_group_strings.sortBy(x =>\
    \ x.length)\n        val paren_group_strings_sorted_reversed = paren_group_strings_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_strings = paren_group_strings_sorted_reversed.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings.sortBy(x => x.length)\n      \
    \  val paren_group_strings_sorted_reversed_strings_sorted_strings = paren_group_strings_sorted_reversed_strings_sorted.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings.sortBy(x => x.length)\n\
    \        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted.map(x =>\
    \ x.replace(\"(\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1c4l5gxd.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1c4l5gxd.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \").filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplcfsm5rf.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplcfsm5rf.scala:19:122\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplcfsm5rf.scala:20:134 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x + \e[31m\" \"\e[0m).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcfsm5rf.sca"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplgt8867u.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_limit_reached is already defined as \e\
    [33mvalue\e[0m \e[35mparen_closed_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplgt8867u.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[3"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \" \"))\n       \
    \ val paren_groups_with_open_braces_without_spaces_without_commas = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxzcsabd7.scala:19:179 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzcsabd7.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val open_brace_count = 0\n        val close_brace_count = 0\n       \
    \ val space_count = 0\n        val paren_group = \"\"\n        val open_brace_char\
    \ = \"\"\n        val close_brace_char = \"\"\n        val space_char = \"\"\n\
    \        val paren_group_char = \"\"\n        val open_brace_char_count = 0\n\
    \        val close_brace_char_count = 0\n        val space_char_count = 0\n  \
    \      val paren_group_char_count = 0\n        val open_brace_char_count_in_paren_group\
    \ = 0\n        val close_brace_char_count_in_paren_group = 0\n        val space_char_count_in_paren_group\
    \ = 0\n        val paren_group_char_count_in_paren_group = 0\n        val open_brace_char_count_in_paren_group_count\
    \ = 0\n        val close_brace_char_count_in_paren_group_count = 0\n        val\
    \ space_char_count_in_paren_group_count = 0\n        val paren_group_char_count_in_paren_group_count\
    \ = 0\n        val open_brace_char_count_in_paren_group_count_in_paren_group =\
    \ 0\n        val close_brace_char_count_in_paren_group_count_in_paren_group =\
    \ 0\n        val space_char_count_in_paren_group_count_in_paren_group = 0\n  \
    \      val paren_group_char_count_in_paren_group_count_in_paren_group = 0\n  \
    \      val open_brace_char_count_in_paren_group_count_in_paren_group_count = 0\n\
    \        val close_brace_char_count_in_paren_group_count_in_paren_group_count\
    \ = 0\n        val space_char_count_in_paren_group_count_in_paren_group_count\
    \ = 0\n        val paren_group_char_count_in_paren_group_count_in_paren_group_count\
    \ = 0\n        val open_brace_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val close_brace_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val space_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val paren_group_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val open_brace_char_count_in_paren_group_count_in_paren_group_count_in_paren_group_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcmpzorkr.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmpzorkr.scala:9:27\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e[0m             \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcmpzorkr.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcmpzorkr.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmpzorkr.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mspaces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcmpzorkr.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when comp"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_count = paren_groups.length\n        val paren_groups_count_with_paren\
    \ = paren_groups_count + 1\n        val paren_groups_count_without_paren = paren_groups_count\
    \ - 1\n        val paren_groups_count_with_paren_and_without_paren = paren_groups_count_with_paren\
    \ - paren_groups_count_without_paren\n        val paren_groups_count_with_paren_and_without_paren_plus_one\
    \ = paren_groups_count_with_paren_and_without_paren + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_two\
    \ = paren_groups_count_with_paren_and_without_paren_plus_one + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_three = paren_groups_count_with_paren_and_without_paren_plus_two\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_four =\
    \ paren_groups_count_with_paren_and_without_paren_plus_three + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_five = paren_groups_count_with_paren_and_without_paren_plus_four\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_six =\
    \ paren_groups_count_with_paren_and_without_paren_plus_five + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_seven\
    \ = paren_groups_count_with_paren_and_without_paren_plus_six + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_eight = paren_groups_count_with_paren_and_without_paren_plus_seven\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_nine =\
    \ paren_groups_count_with_paren_and_without_paren_plus_eight + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_ten = paren_groups_count_with_paren_and_without_paren_plus_nine\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_eleven\
    \ = paren_groups_count_with_paren_and_without_paren_plus_ten + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_twelve = paren_groups_count_with_paren_and_without_paren_plus_eleven\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_thirteen\
    \ = paren_groups_count_with_paren_and_without_paren_plus_twelve + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_fourteen = paren_groups_count_with_paren_and_without_paren_plus_thirteen\
    \ + 1\n        val paren_groups_count_with_paren\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsws74d6.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprsws74d6.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"(\"\
    , \" ( \").replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\").replace(\") \"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ).replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpysglpf99.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpysglpf99.scala:14:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m).replace(\e[31m\"\
    ) \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpysglpf99.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m).replace(\e[31m\"\
    ) \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpysglpf99.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spac"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Write your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth = mutable.ListBuffer[Int]()\n        val paren_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum2\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum2 = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum3 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum3\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum4 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum4 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum5 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum5\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum6 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum6 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum7 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum7\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum8 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum8 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum9 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum9\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum10 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum10 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum11 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum11\
    \ = mutable.ListBuffer[Int]()\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr488_fzr.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr488_fzr.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr488_fzr.scala:11:25 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpr488_fzr.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr488_fzr.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr488_fzr.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqi1yoo8s.scala:21:268 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpqi1yoo8s.scala:22:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e[33mclass\e[0m \e[35mArrayOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqi1yoo8s.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz7lq9quj.scala:19:353 ----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\"\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                 unclosed string literal\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpz7lq9quj.scala:14:99 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpz7lq9quj.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_withou"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \").trim())\n        paren_group_strings.filter(x => !x.isEmpty)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp86mt8z8.scala:11:34\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\
    \"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_group_strings_sorted_without_spaces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"\").replace(\")\",\
    \ \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates\
    \ = paren_group_strings_sorted_without_spaces.distinct\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates.map(x => x.replace(\"\
    (\", \"\").replace(\")\", \"\"))\n        paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9u36vmxl.scala:11:91\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted\e\
    [0m = paren_group_strings.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                       Found:    Int\n\e[31m   |\e[0m       \
    \                                                Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9u36vmxl.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces\
    \ : \n\e[31m   |\e[0m  Array[String]\n\e[31m   |\e[0m)\n\e[31m   |\e[0mRequired:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        // Use a stack to keep track of which parenthesis\
    \ groups are open\n        val stack = mutable.Stack[String]()\n        // Use\
    \ a list to keep track of which parenthesis groups are closed\n        val closed_groups\
    \ = mutable.ListBuffer[String]()\n        // Use a list to keep track of which\
    \ parenthesis groups are open\n        val open_groups = mutable.ListBuffer[String]()\n\
    \        // Iterate over each character in the string\n        for (c <- paren_string)\
    \ {\n            // If character is a left parenthesis, push it onto the stack\n\
    \            if (c == '(') {\n                stack.push(c)\n            }\n \
    \           // If character is a right parenthesis, pop it from the stack\n  \
    \          else if (c == ')') {\n                stack.pop()\n            }\n\
    \            // If character is a left parenthesis, push it onto the stack\n \
    \           else if (c == '{') {\n                stack.push(c)\n            }\n\
    \            // If character is a right parenthesis, pop it from the stack\n \
    \           else if (c == '}') {\n                stack.pop()\n            }\n\
    \            // If character is a left curly brace, push it onto the stack\n \
    \           else if (c == '[') {\n                stack.push(c)\n            }\n\
    \            // If character is a right curly brace, pop it from the stack\n \
    \           else if (c == ']') {\n                stack.pop()\n            }\n\
    \            // If character is a left square brace, push it onto the stack\n\
    \            else if (c == '{') {\n                stack.push(c)\n           \
    \ }\n            // If character is a right square brace, pop it from the stack\n\
    \            else if (c == '}') {\n                stack.pop()\n            }\n\
    \            // If character is a space, ignore it\n            else if (c ==\
    \ ' ') {\n            }\n            // If character is a new line, ignore it\n\
    \            else if (c == '\\n') {\n            }\n            // If character\
    \ is a tab, ignore it\n            else if (c == '\\t') {\n            }\n   \
    \         // If character is a carriage return, ignore it\n            else if\
    \ (c == '\\r') {\n            }\n            // If character is a backslash, ignore\
    \ it\n            else if (c == '\\\\') {\n            }\n            // If character\
    \ is a comma, ignore it\n            else if (c == ',') {\n            }\n   \
    \         // If character is a dot, ignore it\n            else if (c == '.')\
    \ {\n            }\n            // If character is a colon, ignore it\n      \
    \      else if (c == ':') {\n            }\n            // If character is a semicolon,\
    \ ignore it\n            else if (c == ';') {\n            }\n            // If\
    \ character is a colon, ignore it\n            else if (c == '=') {\n        \
    \    }\n            // If character is a comma, ignore it\n            else if\
    \ (c == '+\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa7kp6x2o.scala:80:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (c == \e[31m'+\e\
    [0m\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0msymbol\
    \ literal '+ is no longer supported,\n\e[31m   |\e[0muse a string literal \"+\"\
    \ or an application Symbol(\"+\") instead,\n\e[31m   |\e[0mor enclose in braces\
    \ '{+} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also\
    \ `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpa7kp6x2o.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa7kp6x2o.scala:90:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpa7kp6x2o.scala:10:20 ------------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstack\e[0m = mutable.Stack[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa7kp6x2o.scala:12:28 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosed_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7kp6x2o.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mopen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: muta"
  stdout: ''
  timestamp: 1660013417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ) \"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp11mdyhfx.scala:14:99 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp11mdyhfx.scala:15:114 --------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                              ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp11mdyhfx.scala:16:129 --------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\") \"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                     "
  stdout: ''
  timestamp: 1660013375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_max = mutable.ListBuffer[Int]()\n        val paren_group_size_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe_6_8ube.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_size_min\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_size_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_max\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_size_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_sum\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_size_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_6_8ube.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size_avg\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_size_avg is already"
  stdout: ''
  timestamp: 1660013335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.append(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_group_string = paren_string.substring(0,paren_string.length-1)\n\
    \            paren_groups.append(paren_group_string)\n            val paren_group_length\
    \ = paren_string.length-1\n            val paren_group_open_braces = paren_string.substring(paren_group_length).split(\"\
    \\\\(\").length\n            val paren_group_close_braces = paren_string.substring(paren_group_length).split(\"\
    \\\\)\").length\n            if(paren_group_open_braces == paren_group_close_braces)\
    \ {\n                paren_stack.append(paren_string.substring(paren_group_length))\n\
    \            } else {\n                paren_stack.append(paren_string.substring(0,paren_group_length))\n\
    \            }\n        }\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo49dxxnj.scala:9:27 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                           Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo49dxxnj.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpunth_gp3.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpunth_gp3.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_index\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpunth_gp3.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_index\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_index is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpunth_gp3.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_open_index\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_index is already defined as \e[33mvalue\e[0m \e\
    [35mparen_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpunth_gp3.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_index\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val open_brace_count = 0\n        val close_brace_count = 0\n       \
    \ val space_count = 0\n        val paren_group = \"\"\n        val open_brace_open\
    \ = false\n        val close_brace_open = false\n        val space_open = false\n\
    \        val space_close = false\n        val paren_open = false\n        val\
    \ paren_close = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val space_close = false\n        val space_open = false\n \
    \       val paren_open = false\n        val paren_close = false\n        val open_brace_open\
    \ = false\n        val close_brace_open = false\n        val space_open = false\n\
    \        val space_close = false\n        val paren_open = false\n        val\
    \ paren_close = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val space_close = false\n        val space_open = false\n \
    \       val paren_open = false\n        val paren_close = false\n        val open_brace_open\
    \ = false\n        val close_brace_open = false\n        val space_open = false\n\
    \        val space_close = false\n        val paren_open = false\n        val\
    \ paren_close = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val space_close = false\n        val space_open = false\n \
    \       val paren_open = false\n        val paren_close = false\n        val open_brace_open\
    \ = false\n        val close_brace_open = false\n        val space_open = false\n\
    \        val space_close = false\n        val paren_open = false\n        val\
    \ paren_close = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val space_close = false\n        val space_open = false\n \
    \       val paren_open = false\n        val paren_close = false\n        val open_brace_open\
    \ = false\n        val close_brace_open = false\n        val space_open = false\n\
    \        val space_close = false\n        val paren_open = false\n        val\
    \ paren_close = false\n        val open_brace_close = false\n        val close_brace_close\
    \ = false\n        val space_close = false\n        val space_open = false\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9m30od3w.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mspace_close\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mspace_close\
    \ is already defined as \e[33mvalue\e[0m \e[35mspace_close\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9m30od3w.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspace_open\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspace_open is already defined as \e[33mvalue\e[0m \e[35mspace_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9m30od3w.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = \e[31mfalse\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_open\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_open\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9m30od3w.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_close\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_close is already defined as \e[33mvalue\e[0m \e[35mparen_close\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9m30od3w.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mopen_brace_open\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mopen_brace_open is already defined as \e[33mvalue\e[0m \e[35mopen_brace_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mN"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6bn6r7h5.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6bn6r7h5.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6bn6r7h5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_limit_reached is already defined as \e\
    [33mvalue\e[0m \e[35mparen_closed_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6bn6r7h5.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_limit_reached is already defined as \e[33mvalue\e\
    [0m \e[35mparen_open_depth_limit_reached\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6bn6r7h5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_limit_reached\e\
    [0m = mutable.List"
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size * 2\n        val paren_groups_size3 = paren_groups_size2\
    \ * 2\n        val paren_groups_size4 = paren_groups_size3 * 2\n        val paren_groups_size5\
    \ = paren_groups_size4 * 2\n        val paren_groups_size6 = paren_groups_size5\
    \ * 2\n        val paren_groups_size7 = paren_groups_size6 * 2\n        val paren_groups_size8\
    \ = paren_groups_size7 * 2\n        val paren_groups_size9 = paren_groups_size8\
    \ * 2\n        val paren_groups_size10 = paren_groups_size9 * 2\n        val paren_groups_size11\
    \ = paren_groups_size10 * 2\n        val paren_groups_size12 = paren_groups_size11\
    \ * 2\n        val paren_groups_size13 = paren_groups_size12 * 2\n        val\
    \ paren_groups_size14 = paren_groups_size13 * 2\n        val paren_groups_size15\
    \ = paren_groups_size14 * 2\n        val paren_groups_size16 = paren_groups_size15\
    \ * 2\n        val paren_groups_size17 = paren_groups_size16 * 2\n        val\
    \ paren_groups_size18 = paren_groups_size17 * 2\n        val paren_groups_size19\
    \ = paren_groups_size18 * 2\n        val paren_groups_size20 = paren_groups_size19\
    \ * 2\n        val paren_groups_size21 = paren_groups_size20 * 2\n        val\
    \ paren_groups_size22 = paren_groups_size21 * 2\n        val paren_groups_size23\
    \ = paren_groups_size22 * 2\n        val paren_groups_size24 = paren_groups_size23\
    \ * 2\n        val paren_groups_size25 = paren_groups_size24 * 2\n        val\
    \ paren_groups_size26 = paren_groups_size25 * 2\n        val paren_groups_size27\
    \ = paren_groups_size26 * 2\n        val paren_groups_size28 = paren_groups_size27\
    \ * 2\n        val paren_groups_size29 = paren_groups_size28 * 2\n        val\
    \ paren_groups_size30 = paren_groups_size29 * 2\n        val paren_groups_size31\
    \ = paren_groups_size30 * 2\n        val paren_groups_size32 = paren_groups_size31\
    \ * 2\n        val paren_groups_size33 = paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6pit3ofr.scala:42:34 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size33\e[0m\
    \ = paren_\n\e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: paren_\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pit3ofr.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_remainder_size = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwoqhn4ye.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwoqhn4ye.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = paren_groups_size_remainder + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpwoqhn4ye.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\e\
    [0m = paren_groups_size_remainder + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpwoqhn4ye.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m "
  stdout: ''
  timestamp: 1660013417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
    \ : List[String] = {\n        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjgj617u.scala:21:160 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptjgj617u.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013371
