name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // Explanation: 2 has the smallest even value,\
  \ and 2 has the smallest index.\n    // Example 2:\n    // Explanation: 2 has the\
  \ smallest even value, and 2 has the smallest index.\n    // Example 3:\n    //\
  \ Example 4:\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    def pluck(arr : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x < y)\n        val evensSortedSortedWithIndex =\
    \ evensSorted.zipWithIndex\n        val smalest_value = evensSortedSortedWithIndex.minBy(_._1)._2\n\
    \        val smalest_index = evensSortedSortedWithIndex.minBy(_._1)._1\n     \
    \   val smalest_even = evensSortedSortedWithIndex.filter(x => x._1 == smalest_value).minBy(_._1)._2\n\
    \        val smalest_even_index = evensSortedSortedWithIndex.filter(x => x._1\
    \ == smalest_value).minBy(_._1)._1\n        val smalest_even_even = evensSortedSortedWithIndex.filter(x\
    \ => x._1 == smalest_value).filter(x => x._2 == smalest_even).minBy(_._1)._2\n\
    \        val smalest_even_even_index = evensSortedSortedWithIndex.filter(x =>\
    \ x._1 == smalest_value).filter(x => x._2 == smalest_even).minBy(_._1)._1\n  \
    \      val smalest_even_even_even = evensSortedSortedWithIndex.filter(x => x._1\
    \ == smalest_value).filter(x => x._2 == smalest_even).filter(x => x._2 == smalest_even_even).minBy(_._1)._2\n\
    \        val smalest_even_even_even_index = evensSortedSortedWithIndex.filter(x\
    \ => x._1 == smalest_value).filter(x => x._2 == smalest_even).filter(x => x._2\
    \ == smalest_even_even).minBy(_._1)._1\n        val smalest_even_even_even_even\
    \ = evensSortedSortedWithIndex.filter(x => x._1 == smalest_value).filter(x =>\
    \ x._2 == smalest_even).filter(x => x._2 == smalest_even_even).filter(x => x._2\
    \ == smalest_even_even_even).minBy(_._1)._2\n        val smalest_even_even_even_even_index\
    \ = evensSortedSortedWithIndex.filter(x => x._1 == smalest_value).filter(x =>\
    \ x._2 == smalest_even).filter(x => x._2 == smalest_even_even).filter(x => x._2\
    \ == smalest_even_even_even).minBy(_._1)._1", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_value\
    \ = evens(smalest_even_index)\n        val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven % 2\n\
    \        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue % 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue % 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue %\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue % 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue % 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue %\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue % 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue % 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue %\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue % 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue % 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue %\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue % 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue % 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue %\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue % 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue % 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEven", "  \
    \      val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val evens_with_smallest_value\
    \ = evens.filter(x => x == smalest_value)\n        if (evens_with_smallest_value.isEmpty)\
    \ List(smalest_value, smalest_index)\n        else evens_with_smallest_value.head",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = even", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val minEven = evens.min\n            val\
    \ minIndex = arr.indexOf(minEven)\n            val minValue = arr.min\n      \
    \      val minIndexList = List(minIndex, minEven)\n            val minValueList\
    \ = List(minValue, minEven)\n            val minIndexSet = mutable.HashSet[Int]()\n\
    \            val minValueSet = mutable.HashSet[Int]()\n            val minIndexSet2\
    \ = mutable.HashSet[Int]()\n            val minValueSet2 = mutable.HashSet[Int]()\n\
    \            val minIndexSet3 = mutable.HashSet[Int]()\n            val minValueSet3\
    \ = mutable.HashSet[Int]()\n            val minIndexSet4 = mutable.HashSet[Int]()\n\
    \            val minValueSet4 = mutable.HashSet[Int]()\n            val minIndexSet5\
    \ = mutable.HashSet[Int]()\n            val minValueSet5 = mutable.HashSet[Int]()\n\
    \            val minIndexSet6 = mutable.HashSet[Int]()\n            val minValueSet6\
    \ = mutable.HashSet[Int]()\n            val minIndexSet7 = mutable.HashSet[Int]()\n\
    \            val minValueSet7 = mutable.HashSet[Int]()\n            val minIndexSet8\
    \ = mutable.HashSet[Int]()\n            val minValueSet8 = mutable.HashSet[Int]()\n\
    \            val minIndexSet9 = mutable.HashSet[Int]()\n            val minValueSet9\
    \ = mutable.HashSet[Int]()\n            val minIndexSet10 = mutable.HashSet[Int]()\n\
    \            val minValueSet10 = mutable.HashSet[Int]()\n            val minIndexSet11\
    \ = mutable.HashSet[Int]()\n            val minValueSet11 = mutable.HashSet[Int]()\n\
    \            val minIndexSet12 = mutable.HashSet[Int]()\n            val minValueSet12\
    \ = mutable.HashSet[Int]()\n            val minIndexSet13 = mutable.HashSet[Int]()\n\
    \            val minValueSet13 = mutable.HashSet[Int]()\n            val minIndexSet14\
    \ = mutable.HashSet[Int]()\n            val minValueSet14 = mutable.HashSet[Int]()\n\
    \            val minIndexSet15 = mutable.HashSet[Int]()\n", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n     \
    \   val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_value = smalest_even\n        val smalest_even_index_value\
    \ = smalest_even_index\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.take(smalest_index)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens.min) match {\n            case Some(index) =>\
    \ index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = smalest_evens_index match {\n            case\
    \ Some(index) => index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = smalest_evens_index match {\n            case\
    \ Some(index) => index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = smalest_evens_index match {\n            case\
    \ Some(index) => index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = smalest_evens_index match {\n            case\
    \ Some(index) => index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = smalest_evens_index match {\n            case\
    \ Some(index) => index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = smalest_evens_index match {\n            case\
    \ Some(index) => index\n            case None => -1\n        }\n        val smalest_evens_value\
    \ = smalest_evens.min\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOfMin\n\
    \        val smalest_even = evens.find(x => x == smalest_value)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = smalest_even._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_even_index_value = smalest_even_index_value._2\n        val smalest_even_index_value\
    \ = smalest_even_index_value._2\n        val smalest_even_index_value = smalest_even_index_value._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_even_index_value = smalest_even_index_value._2\n        val smalest_even_index_value\
    \ = smalest_even_index_value._2\n        val smalest_even_index_value = smalest_even_index_value._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_even_index_value = smalest_even_index_value._2\n        val smalest_even_index_value\
    \ = smalest_even_index_value._2\n        val smalest_even_index_value = smalest_even_index_value._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_even_index_value = smalest_even_index_value._2\n        val smalest_even_index_value\
    \ = smalest_even_index_value._2\n        val smalest_even_index_value = smalest_even_index_value._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_even_index_value = smalest_even_index_value._2\n        val smalest_even_index_value\
    \ = smalest_even_index_value._2\n        val smalest_even_index_value = smalest_even_index_value._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_even_index_value = smalest_even_index_value._2\n        val smalest_even_index_value\
    \ = smalest_even_index_value._2\n        val smalest_even_index_value = smalest_even_index_value._2\n\
    \        val smalest_even_index_value = smalest_even_index_value._2\n        val\
    \ smalest_", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ smalest_index\n        val smalest_even_value = smalest_value\n        val smalest_even_value_and_index\
    \ = smalest_value + smalest_even_index\n        val smalest_even_value_and_index_list\
    \ = List(smalest_even_value_and_index, smalest_even_value_and_index_list)\n  \
    \      val smalest_even_value_and_index_list_sorted = smalest_even_value_and_index_list.sortWith(_\
    \ < _)\n        val smalest_even_value_and_index_list_sorted_reversed = smalest_even_value_and_index_list_sorted.reverse\n\
    \        val smalest_even_value_and_index_list_sorted_reversed_sorted = smalest_even_value_and_index_list_sorted_reversed.sortWith(_\
    \ < _)\n        val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted.reverse\n       \
    \ val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted_reversed.sortWith(_\
    \ < _)\n        val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed.sortWith(_\
    \ < _)\n        val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortWith(_\
    \ < _)\n        val smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_even_value_and_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val smalest_even_value_and_index_list_", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_value\
    \ = evens(smalest_even_index)\n        val smalest_even_index_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value)\n   \
    \     val smalest_even_index_list_list = evens.indexOf(smalest_even_index_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list = evens.indexOf(smalest_even_index_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list = evens.indexOf(smalest_even_index_list_list_list_list_list_list_list)\n\
    \        val smalest_even_value_list = evens.indexOf(smalest_even_value_list)\n\
    \        val smalest_even_index_list_list_", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) Nil else List(smallest, index)\n      \
    \  result", "        val evens = arr.filter(_ % 2 == 0)\n        val smallestEven\
    \ = evens.min\n        val smallestIndex = evens.indexOf(smallestEven)\n     \
    \   val smalestValue = smallestEven % 2 == 0 ? smallestEven : smallestEven + 1\n\
    \        val result = List(smalestValue, smallestIndex)\n        if (arr.isEmpty)\
    \ result\n        else result.::(pluck(arr.filter(_ != smallestEven)))", "   \
    \     val evens = arr.filter(_ % 2 == 0)\n        val smallest = evens.min\n \
    \       val index = evens.indexOf(smallest)\n        val result = List(smallest,\
    \ index)\n        if (arr.isEmpty) result\n        else pluck(arr.drop(index))",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even_value\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_index_list = evens.take(smalest_even_index).toList\n\
    \        val smalest_even_index_list_with_zero = smalest_even_index_list.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero = smalest_even_index_list_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero = smalest_even_index_list_with_zero_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero.filter(_ != 0)\n   \
    \     val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero.filter(_ !=\
    \ 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero.filter(_\
    \ != 0)\n        val smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = smalest_even_index_list_with_zero_with_zero_with_zero_with_zero_with_zero.",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) Nil\n\
    \        else {\n            val smalest_value = evens.min\n            val index\
    \ = evens.indexOf(smalest_value)\n            val smalest_value_and_index = smalest_value\
    \ -> index\n            evens.filter(_ % 2 == 0).sortWith(_ < smalest_value).takeWhile(_\
    \ < smalest_value).map(smalest_value_and_index).toList\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n    \
    \    val index = evens.indexOf(smallest)\n        val result: List[Long] = List(smallest,\
    \ index)\n        if (evens.isEmpty) result\n        else result", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = List(even, index)\n\
    \        if (evens.isEmpty) result\n        else result.sortBy(-_)", "       \
    \ val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_value = smalest_even\n        val smalest_even_index_value\
    \ = smalest_even_index\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n        val smalest_even_index_value = smalest_even_index_value\n\
    \        val smalest_even_index_value = smalest_even_index_value\n        val\
    \ smalest_even_index_value = smalest_even_index_value\n        val smalest_even_index_value\
    \ = smalest_even_index_value\n", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even_value = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even_value)\n        val smalest_even_value_with_index\
    \ = smalest_value + smalest_index\n        val smalest_even_index_with_index =\
    \ smalest_index + smalest_even_value\n        val smalest_even_value_with_index_with_index\
    \ = smalest_value + smalest_index + smalest_even_value\n        val smalest_even_index_with_index_with_index\
    \ = smalest_index + smalest_even_value + smalest_even_index\n        val smalest_even_value_with_index_with_index_with_index\
    \ = smalest_value + smalest_index + smalest_even_value + smalest_even_index +\
    \ smalest_even_value_with_index\n        val smalest_even_index_with_index_with_index_with_index\
    \ = smalest_index + smalest_even_value + smalest_even_index + smalest_even_value_with_index\
    \ + smalest_even_index_with_index\n        val smalest_even_index_with_index_with_index_with_index_with_index\
    \ = smalest_index + smalest_even_value + smalest_even_index + smalest_even_value_with_index\
    \ + smalest_even_index_with_index + smalest_even_index_with_index_with_index\n\
    \        val smalest_even_index_with_index_with_index_with_index_with_index_with_index\
    \ = smalest_index + smalest_even_value + smalest_even_index + smalest_even_value_with_index\
    \ + smalest_even_index_with_index + smalest_even_index_with_index_with_index +\
    \ smalest_even_index_with_index_with_index_with_index\n        val smalest_even_index_with_index_with_index_with_index_with_index_with_index_with_index\
    \ = smalest_index + smalest_even_value + smalest_even_index + smalest_even_value_with_index\
    \ + smalest_even_index_with_index + smalest_even_index_with_index_with_index +\
    \ smalest_even_index_with_index_with_index_with_index + smalest_even_index_with_index_with_index_with_index_with_index\n\
    \        val smalest_even_index_with_index_with_index_with_index_with_index_with_index_with_index_with_index\
    \ = smalest_index + smalest_even_value + smalest_even_index + smalest_even_value_with",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_plus_one = smalest_even_index + 1\n        val\
    \ smalest_even_index_plus_two = smalest_even_index + 2\n        val smalest_even_index_plus_three\
    \ = smalest_even_index + 3\n        val smalest_even_index_plus_four = smalest_even_index\
    \ + 4\n        val smalest_even_index_plus_five = smalest_even_index + 5\n   \
    \     val smalest_even_index_plus_six = smalest_even_index + 6\n        val smalest_even_index_plus_seven\
    \ = smalest_even_index + 7\n        val smalest_even_index_plus_eight = smalest_even_index\
    \ + 8\n        val smalest_even_index_plus_nine = smalest_even_index + 9\n   \
    \     val smalest_even_index_plus_ten = smalest_even_index + 10\n        val smalest_even_index_plus_eleven\
    \ = smalest_even_index + 11\n        val smalest_even_index_plus_twelve = smalest_even_index\
    \ + 12\n        val smalest_even_index_plus_thirteen = smalest_even_index + 13\n\
    \        val smalest_even_index_plus_fourteen = smalest_even_index + 14\n    \
    \    val smalest_even_index_plus_fifteen = smalest_even_index + 15\n        val\
    \ smalest_even_index_plus_sixteen = smalest_even_index + 16\n        val smalest_even_index_plus_seventeen\
    \ = smalest_even_index + 17\n        val smalest_even_index_plus_eighteen = smalest_even_index\
    \ + 18\n        val smalest_even_index_plus_nineteen = smalest_even_index + 19\n\
    \        val smalest_even_index_plus_twenty = smalest_even_index + 20\n      \
    \  val smalest_even_index_plus_twenty_one = smalest_even_index + 21\n        val\
    \ smalest_even_index_plus_twenty_two = smalest_even_index + 22\n        val smalest_even_index_plus_twenty_three\
    \ = smalest_even_index + 23\n        val smalest_", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last).reverse\n       \
    \ val index = arr.lastIndexWhere(x => x % 2 == 0)\n        val smalest_value =\
    \ even.head\n        val smalest_index = index\n        val result = if (smalest_value\
    \ == 0) List(smalest_value, smalest_index) else even.takeWhile(x => x < smalest_value).reverse.zip(index).filter(x\
    \ => x._1 < x._2)\n        result", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result: List[Long] = if (index == -1) Nil else List(even, index)\n\
    \        return result", "        val evens = arr.filter(x => x % 2 == 0)\n  \
    \      val evensSorted = evens.sortWith(_ < _)\n        val smalest_value = evensSorted.head\n\
    \        val smalest_index = evensSorted.indexOf(0)\n        val smalest_even\
    \ = evensSorted.takeWhile(_ < smalest_value).last\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_even_index = evensSorted.indexOf(smalest_even)\n        val\
    \ smalest_even_index = evensSorted.indexOf(smalest_even)\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_even_index = evensSorted.indexOf(smalest_even)\n        val\
    \ smalest_even_index = evensSorted.indexOf(smalest_even)\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_even_index = evensSorted.indexOf(smalest_even)\n        val\
    \ smalest_even_index = evensSorted.indexOf(smalest_even)\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_even_index = evensSorted.indexOf(smalest_even)\n        val\
    \ smalest_even_index = evensSorted.indexOf(smalest_even)\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_even_index = evensSorted.indexOf(smalest_even)\n        val\
    \ smalest_even_index = evensSorted.indexOf(smalest_even)\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_even_index = evensSorted.indexOf(smalest_even)\n        val\
    \ smalest_even_index = evensSorted.indexOf(smalest_even)\n        val smalest_",
  "        val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x\
    \ < arr.last).reverse\n        if (even.isEmpty) List()\n        else {\n    \
    \        val smalest_value = even.head\n            val smalest_index = even.indexOf(0)\n\
    \            val index = arr.indexOf(smalest_value)\n            if (index ==\
    \ -1) List()\n            else {\n                val result = List(smalest_value,\
    \ smalest_index)\n                arr.drop(index).takeWhile(x => x != smalest_value).reverse.foreach(x\
    \ => result += List(x))\n                result\n            }\n        }", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = smalest_index\n   \
    \     val smalest_even_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_index\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = smalest_value\n        val smalest_even_index_value = smalest_value\n    \
    \    val smalest_even_index_value = smalest_value\n        val smalest_even_index_value\
    \ = ", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n\
    \        val smalest_value = evens.head\n        val smalest_index = evens.indexWhere(x\
    \ => x == smalest_value)\n        val smalest_even = evens(smalest_index)\n  \
    \      val smalest_even_index = evens.indexWhere(x => x == smalest_even)\n   \
    \     val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.take(smalest_even_index_list)\n        val smalest_even_index_list =\
    \ smalest_even_index_list.sortBy(x => x).reverse\n        val smalest_even_index_list\
    \ = smalest_even_index_list.take(1)\n        val smalest_even_index_list = smalest_even_index_list.sortBy(x\
    \ => x).reverse\n        val smalest_even_index_list = smalest_even_index_list.take(1)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.sort", "        val\
    \ even = arr.filter(_ % 2 == 0).sortBy(x => x).take(1)\n        if (even.isEmpty)\
    \ List()\n        else {\n            val smalest_value = even.head\n        \
    \    val index = arr.indexOf(smalest_value)\n            val result = List(smalest_value,\
    \ index)\n            if (arr.contains(smalest_value)) result :+ smalest_value\n\
    \            else result\n        }", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index =\
    \ evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even = evens(smalest_even_index)\n\
    \        val smalest_even_index = evens.indexOf(sm", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sorted\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOfFirst\
    \ { x => x == smallestEven }\n        val smallestEvenValue = smallestEven\n \
    \       val smallestEvenIndexList = List(smallestEvenIndex, smallestEvenIndex\
    \ + 1)\n        val smallestEvenValueList = List(smallestEvenValue, smallestEvenValue\
    \ + 1)\n        val smallestEvenIndexAndValue = smallestEvenIndexAndValueList(smallestEvenIndexList,\
    \ smallestEvenValueList)\n        smallestEvenIndexAndValue", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n     \
    \   val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = smalest_index\n   \
    \     val smalest_even_value = smalest_value\n        val smalest_even_index =\
    \ smalest_index\n        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_", "        val evens = arr.filter(_ % 2 == 0)\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = arr.filter(_ == even).sortWith(_ < _).take(index).map(_ + 1)\n        if (result.isEmpty)\
    \ List()\n        else result", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_value)\n  \
    \      val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven / 2\n\
    \        val smallestEvenIndex = smallestEvenIndex + 1\n        val result: List[Long]\
    \ = List(smallestEvenValue, smallestEvenIndex)\n        if (evensSorted.isEmpty)\
    \ result\n        else result", "        val even = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).take(1)\n        if (even.isEmpty) List()\n        else {\n          \
    \  val smalest_value = even.head\n            val smalest_index = even.indexWhere(x\
    \ => x == smalest_value)\n            val index = smalest_index\n            val\
    \ smalest_even = even.filter(x => x % 2 == 0)\n            val smalest_even_value\
    \ = smalest_even.head\n            val smalest_even_count = smalest_even.count\n\
    \            val smalest_even_count_index = smalest_even_count - 1\n         \
    \   val smalest_even_count_index = smalest_even_count_index - 1\n            val\
    \ smalest_even_count_index = smalest_even_count_index - 1\n            val smalest_even_count_index\
    \ = smalest_even_count_index - 1\n            val smalest_even_count_index = smalest_even_count_index\
    \ - 1\n            val smalest_even_count_index = smalest_even_count_index - 1\n\
    \            val smalest_even_count_index = smalest_even_count_index - 1\n   \
    \         val smalest_even_count_index = smalest_even_count_index - 1\n      \
    \      val smalest_even_count_index = smalest_even_count_index - 1\n         \
    \   val smalest_even_count_index = smalest_even_count_index - 1\n            val\
    \ smalest_even_count_index = smalest_even_count_index - 1\n            val smalest_even_count_index\
    \ = smalest_even_count_index - 1\n            val smalest_even_count_index = smalest_even_count_index\
    \ - 1\n            val smalest_even_count_index = smalest_even_count_index - 1\n\
    \            val smalest_even_count_index = smalest_even_count_index - 1\n   \
    \         val smalest_even_count_index = smalest_even_count_index - 1\n      \
    \      val smalest_even_count_index = smalest_even_count_index - 1\n         \
    \   val smalest_even_count_index = smalest_even_count_index - 1\n            val\
    \ smalest_even_count_index = smalest_even_count_index - 1\n            val smalest_even_count_index\
    \ = smalest_even_count_index - 1\n            val smalest_even_count_index = smalest_even_count_index\
    \ - 1\n            val smalest_even_count_index = smalest_even_count_index - 1\n\
    \            val smalest_", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val evensSorted = evens.sortWith((x, y) => x < y)\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val evensSorted = evensSorted.drop(1)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted\
    \ = evensSorted.sortWith((x, y) => x < y)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ evensSorted = evensSorted.drop(1)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x % 2 == 0)\n        val evensSorted = evensSorted.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val evensSorted = evensSorted.drop(1)\n\
    \        val evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val\
    \ evensSorted = evensSorted.sortWith((x, y) => x < y)\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val evensSorted = evensSorted.drop(1)\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x % 2 == 0)\n        val evensSorted\
    \ = evensSorted.sortWith((x, y) => x < y)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ evensSorted = evensSorted.drop(1)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x % 2 == 0)\n        val evensSorted = evensSorted.sortWith((x, y) => x < ",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smalest_value = evens.min\n            val smalest_index\
    \ = evens.indexOf(smalest_value)\n            val smalest_even = evens(smalest_index)\n\
    \            val smalest_even_index = evens.indexOf(smalest_even)\n          \
    \  val smalest_even_value = evens(smalest_even_index)\n            val smalest_even_index_plus_one\
    \ = smalest_even_index + 1\n            val smalest_even_index_plus_two = smalest_even_index\
    \ + 2\n            val smalest_even_index_plus_three = smalest_even_index + 3\n\
    \            val smalest_even_index_plus_four = smalest_even_index + 4\n     \
    \       val smalest_even_index_plus_five = smalest_even_index + 5\n          \
    \  val smalest_even_index_plus_six = smalest_even_index + 6\n            val smalest_even_index_plus_seven\
    \ = smalest_even_index + 7\n            val smalest_even_index_plus_eight = smalest_even_index\
    \ + 8\n            val smalest_even_index_plus_nine = smalest_even_index + 9\n\
    \            val smalest_even_index_plus_ten = smalest_even_index + 10\n     \
    \       val smalest_even_index_plus_eleven = smalest_even_index + 11\n       \
    \     val smalest_even_index_plus_twelve = smalest_even_index + 12\n         \
    \   val smalest_even_index_plus_thirteen = smalest_even_index + 13\n         \
    \   val smalest_even_index_plus_fourteen = smalest_even_index + 14\n         \
    \   val smalest_even_index_plus_fifteen = smalest_even_index + 15\n          \
    \  val smalest_even_index_plus_sixteen = smalest_even_index + 16\n           \
    \ val smalest_even_index_plus_seventeen = smalest_even_index + 17\n          \
    \  val smalest_even_index_plus_eighteen = smalest_even_index + 18\n          \
    \  val smalest_even_index_plus_nineteen = smalest_even_index + 19\n          \
    \  val smalest_even_index_plus_twenty = smalest_even_index + 20\n            val\
    \ smalest_even_index_plus_twenty_one = smalest_even_index + 21\n            val\
    \ smalest_even_index_plus_twenty_two = smalest_even_index + 22\n            val\
    \ smale", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even, smalest_index)\n\
    \        val smalest_even_value_in_list_index = evens.indexOf(smalest_even, smalest_even_index)\n\
    \        val smalest_even_value_in_list_value = evens.indexOf(smalest_even, smalest_even_index_in_list)\n\
    \        val smalest_even_value_in_list_value_in_list_index = evens.indexOf(smalest_even,\
    \ smalest_even_value_in_list_index)\n        val smalest_even_value_in_list_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_even_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_index = evens.indexOf(smalest_even,\
    \ smalest_even_value_in_list_value_in_list_value_in_list_index)\n        val smalest_even_value_in_list_value_in_list_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_even_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index\
    \ = ", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List(0) else evens.minBy(x => x)._2", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_index\
    \ = smalest_even_index + 1\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n   \
    \     val smalest_even_index_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list = smalest_even_index_in_list + 1\n", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_value)\n        val smalest_even_index_value =\
    \ evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n     \
    \   val smallestEvenIndexList = List(smallestEvenIndex, smallestEvenValue)\n \
    \       val smallestEvenIndexSet = smallestEvenIndexList.map(x => x.toString)\n\
    \        val smallestEvenIndexSetSet = smallestEvenIndexSet.map(x => x.toSet)\n\
    \        val smallestEvenIndexSetSet = smallestEvenIndexSetSet.map(x => x.toSet)\n\
    \        val smallestEvenIndexSetSetSet = smallestEvenIndexSetSet.map(x => x.toSet)\n\
    \        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x =>\
    \ x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.map(x\
    \ => x.toSet)\n        val smallestEvenIndexSetSetSetSet = smallestEvenIndexSetSet.",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val smalest_evens\
    \ = evens.takeWhile(_ < smalest_value)\n        val smalest_evens_index = evens.indexOf(smalest_value)\n\
    \        if (smalest_evens_index == -1) smalest_evens_index = evens.length\n \
    \       if (smalest_evens.length == 0) smalest_evens_index = 0\n        smalest_evens.take(smalest_evens_index).map(_\
    \ + smalest_index).toList", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.min\n            val index = evens.indexOf(smalest_value)\n        \
    \    val smalest_even = evens(index)\n            val smalest_even_index = evens.indexOf(smalest_even)\n\
    \            val smalest_even_value = evens(smalest_even_index)\n            val\
    \ smalest_even_index_value = evens.indexOf(smalest_even_value)\n            val\
    \ smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n       \
    \     val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_", "       \
    \ val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty)\
    \ List()\n        else evens.headOption.getOrElse(arr.minBy(x => x))", "     \
    \   val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n  \
    \      val index = evens.indexOf(even)\n        val smalest_value = arr.min\n\
    \        val smalest_index = arr.indexOf(smalest_value)\n        val smalest_even\
    \ = evens.filter(x => x % 2 == 0).min\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index = smalest_even_index match {\n            case\
    \ -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = evens.filter(x => x % 2 == 0).min\n        val smalest_even_value = smalest_even_value\
    \ match {\n            case -1 => -1\n            case x => x\n        }\n   \
    \     val smalest_even_value = smalest_even_value match {\n            case -1\
    \ => -1\n            case x => x\n        }\n        val smalest_even_value =\
    \ smalest_even_value match {\n            case -1 => -1\n            case x =>\
    \ x\n        }\n        val smalest_even_value = smalest_even_value match {\n\
    \            case -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = smalest_even_value match {\n            case -1 => -1\n            case x\
    \ => x\n        }\n        val smalest_even_value = smalest_even_value match {\n\
    \            case -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = smalest_even_value match {\n            case -1 => -1\n            case x\
    \ => x\n        }\n        val smalest_even_value = smalest_even_value match {\n\
    \            case -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = smalest_even_value match {\n            case -1 => -1\n            case x\
    \ => x\n        }\n        val smalest_even_value = smalest_even_value match {\n\
    \            case -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = smalest_even_value match {\n            case -1 => -1\n            case x\
    \ => x\n        }\n        val smalest_even_value = smalest_even_value match {\n\
    \            case -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = smalest_even_value match {\n            case -1 => -1\n            case x\
    \ => x\n        }\n        val smalest_even_value = smalest_even_value match {\n",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smalest_even_index_list_size\n        val smalest_even_index_list_size = evens.size\
    \ - smale", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_value)\n  \
    \      val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOfMin\n        val result = evens.filterNot(x\
    \ => x == smalest_value)\n        if (result.isEmpty) List(smalest_value, smalest_index)\n\
    \        else result.minBy(x => x)._2", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_value = smalest_even\n\
    \        val smalest_even_index = smalest_even_index\n        val smalest_even_value\
    \ = smalest_even_value\n        val smalest_even_index = smalest_even_index\n\
    \        val smalest_even_value = smalest_even_value\n        val smalest_even_index\
    \ = smalest_even_index\n        val smalest_even_value = smalest_even_value\n\
    \        val smalest_even_index = smalest_even_index\n        val smalest_even_value\
    \ = smalest_even_value\n        val smalest_even_index = smalest_even_index\n\
    \        val smalest_even_value = smalest_even_value\n        val smalest_even_index\
    \ = smalest_even_index\n        val smalest_even_value = smalest_even_value\n\
    \        val smalest_even_index = smalest_even_index\n        val smalest_even_value\
    \ = smalest_even_value\n        val smalest_even_index = smalest_even_index\n\
    \        val smalest_even_value = smalest_even_value\n        val smalest_even_index\
    \ = smalest_even_index\n        val smalest_even_value = smalest_even_value\n\
    \        val smalest_even_index = smalest_even_index\n        val smalest_even_value\
    \ = smalest_even_value\n        val smalest_even_index = smalest_even_index\n\
    \        val smalest_even_value = smalest_even_value\n        val smalest_even_index\
    \ = smalest_even_index\n        val smalest_even_value = smalest_even_value\n\
    \        val smalest_even_index = smalest_even_index\n        val smalest_even_value\
    \ = smalest_even_value\n        val smalest_even_index = smalest_even_index\n\
    \        val smalest_even_value = smalest_even_value\n        val smalest_even_index\
    \ = smalest_even_index\n        val smalest_even_value = smalest_even_value\n\
    \        val smalest_even_index = smalest_even_index\n        val smalest_even_value\
    \ = smalest_even_value\n        val smalest_even_index = smalest_even_index\n\
    \        val smalest_even_value = ", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n        val smalest_value\
    \ = evensSorted.head\n        val smalest_index = evensSorted.indexOf(0)\n   \
    \     val smalest_even = evensSorted.take(smalest_index).sum\n        val smalest_odd\
    \ = evensSorted.drop(smalest_index).sum\n        val smalest_even_index = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_odd_index = evensSorted.indexOf(smalest_odd)\n        val\
    \ smalest_even_value = evensSorted.take(smalest_even_index).sum\n        val smalest_odd_value\
    \ = evensSorted.drop(smalest_odd_index).sum\n        val smalest_even_index_list\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_odd_index_list = evensSorted.indexOf(smalest_odd)\n\
    \        val smalest_even_value_list = evensSorted.take(smalest_even_index_list).sum\n\
    \        val smalest_odd_value_list = evensSorted.drop(smalest_odd_index_list).sum\n\
    \        val smalest_even_index_list_list = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_odd_index_list_list = evensSorted.indexOf(smalest_odd)\n\
    \        val smalest_even_value_list = evensSorted.take(smalest_even_index_list_list).sum\n\
    \        val smalest_odd_value_list = evensSorted.drop(smalest_odd_index_list_list).sum\n\
    \        val smalest_even_index_list_list_list = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_odd_index_list_list_list = evensSorted.indexOf(smalest_odd)\n\
    \        val smalest_even_value_list = evensSorted.take(smalest_even_index_list_list_list).sum\n\
    \        val smalest_odd_value_list = evensSorted.drop(smalest_odd_index_list_list_list).sum\n\
    \        val smalest_even_index_list_list_list_list = evensSorted.indexOf(smalest_even)\n\
    \        val smalest_odd_index_list_list_list_list = evensSorted.indexOf(smalest_odd)\n\
    \        val smalest_even_value_list = evensSorted.take(smalest_even_index_list_",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.length == 0)\n\
    \            evenSmallestValueList :: evenSmallestIndexList\n        else if (evenSmallestValueList.length\
    \ == 0)\n            evenSmallestIndexList :: evenSmallestValueList\n        else\n\
    \            evenSmallestValueList :: evenSmallestIndexList", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val smallestEvenIndex = smallestEvenIndex.asInstanceOf[Int]\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenValueIndex\
    \ = arr.indexOf(smallestEvenValue)\n        val smallestEvenValueIndex = smallestEvenValueIndex.asInstanceOf[Int]\n\
    \        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n        val\
    \ smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        val smallestEvenValueIndex = smallestEvenValueIndex\
    \ - 1\n        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n     \
    \   val smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        val smallestEvenValueIndex = smallestEvenValueIndex\
    \ - 1\n        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n     \
    \   val smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        val smallestEvenValueIndex = smallestEvenValueIndex\
    \ - 1\n        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n     \
    \   val smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        val smallestEvenValueIndex = smallestEvenValueIndex\
    \ - 1\n        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n     \
    \   val smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        val smallestEvenValueIndex = smallestEvenValueIndex\
    \ - 1\n        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n     \
    \   val smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        val smallestEvenValueIndex = smallestEvenValueIndex\
    \ - 1\n        val smallestEvenValueIndex = smallestEvenValueIndex + 1\n     \
    \   val smallestEvenValueIndex = smallestEvenValueIndex - 1\n        val smallestEvenValueIndex\
    \ = smallestEvenValueIndex + 1\n        ", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (evens.isEmpty) List(smalest_value, smalest_index)\n\
    \        else {\n            val evens_with_smallest_index = evens.zip(evens.indexOf(0))\n\
    \            val smalest_value_with_smallest_index = evens_with_smallest_index.minBy(_._1)\n\
    \            val smalest_index_with_smallest_index = evens_with_smallest_index.minBy(_._2)\n\
    \            val smalest_value_with_largest_index = evens_with_smallest_index.maxBy(_._1)\n\
    \            val smalest_index_with_largest_index = evens_with_smallest_index.maxBy(_._2)\n\
    \            val smalest_value_with_largest_index_index = evens_with_smallest_index.zipWithIndex.minBy(_._1)\n\
    \            val smalest_index_with_largest_index_index = evens_with_smallest_index.zipWithIndex.minBy(_._2)\n\
    \            val smalest_value_with_largest_index_index_index = evens_with_smallest_index.zipWithIndex.maxBy(_._1)\n\
    \            val smalest_index_with_largest_index_index_index = evens_with_smallest_index.zipWithIndex.maxBy(_._2)\n\
    \            val smalest_value_with_largest_index_index_index_index = evens_with_smallest_index.zipWithIndex.zipWithIndex.minBy(_._1)\n\
    \            val smalest_index_with_largest_index_index_index_index = evens_with_smallest_index.zipWithIndex.zipWithIndex.minBy(_._2)\n\
    \            val smalest_value_with_largest_index_index_index_index_index = evens_with_smallest_index.zipWithIndex.zipWithIndex.maxBy(_._1)\n\
    \            val smalest_index_with_largest_index_index_index_index_index = evens_with_smallest_index.zipWithIndex.zipWithIndex.maxBy(_._2)\n\
    \            val smalest_value_with_largest_index_index_index_index_index_index\
    \ = evens_with_smallest_index.zipWithIndex.zipWithIndex.zipWithIndex.maxBy(_._1)\n\
    \            val smalest_index_with_largest_index_index_index_index_index_index\
    \ = evens_with_smallest_index.zipWithIndex.zipWithIndex.zipWithIndex.maxBy(_._2)\n\
    \            val smalest_value_with_largest_index_index_index_index_index_index_index\
    \ = even", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_index = if (smalest_even_index\
    \ == -1) -1 else smalest_even_index\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_value)\n  \
    \      val smalest_even_index_value = if (smalest_even_index_value == -1) -1 else\
    \ smalest_even_index_value\n        val smalest_even_index_value = if (smalest_even_index_value\
    \ == -1) -1 else smalest_even_index_value\n        val smalest_even_index_value\
    \ = if (smalest_even_index_value == -1) -1 else smalest_even_index_value\n   \
    \     val smalest_even_index_value = if (smalest_even_index_value == -1) -1 else\
    \ smalest_even_index_value\n        val smalest_even_index_value = if (smalest_even_index_value\
    \ == -1) -1 else smalest_even_index_value\n        val smalest_even_index_value\
    \ = if (smalest_even_index_value == -1) -1 else smalest_even_index_value\n   \
    \     val smalest_even_index_value = if (smalest_even_index_value == -1) -1 else\
    \ smalest_even_index_value\n        val smalest_even_index_value = if (smalest_even_index_value\
    \ == -1) -1 else smalest_even_index_value\n        val smalest_even_index_value\
    \ = if (smalest_even_index_value == -1) -1 else smalest_even_index_value\n   \
    \     val smalest_even_index_value = if (smalest_even_index_value == -1) -1 else\
    \ smalest_even_index_value\n        val smalest_even_index_value = if (smalest_even_index_value\
    \ == -1) -1 else smalest_even_index_value\n        val smalest_even_index_value\
    \ = if (smalest_even_index_value == -1) -1 else smalest_even_index_value\n   \
    \     val smalest_even_index_value = if (smalest_even_index_value == -1) -1 else\
    \ smalest_even_index_value\n        val smalest_even_index_value = if (smalest_even_index_value\
    \ == -1) -1 else smalest_even_index_value\n        val smalest_even_index_value\
    \ = if (smalest_even_index_value == -1) -1 else smalest_even_index_value\n   \
    \     val smalest_even_index_value = if (smalest_even_index_value == -1) -1 ",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val smalest_value = evens.take(index).min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens.take(smalest_index).min\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_and_index = smalest_even + smalest_index\n        val\
    \ smalest_even_and_index_list = List(smalest_even_and_index)\n        val smalest_even_and_index_list_with_zeros\
    \ = smalest_even_and_index_list ++ List(smalest_even_and_index)\n        val smalest_even_and_index_list_with_zeros_and_zeros\
    \ = smalest_even_and_index_list_with_zeros ++ List(smalest_even_and_index)\n \
    \       val smalest_even_and_index_list_with_zeros_and_zeros_and_zeros = smalest_even_and_index_list_with_zeros_and_zeros\
    \ ++ List(smalest_even_and_index)\n        val smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros\
    \ = smalest_even_and_index_list_with_zeros_and_zeros_and_zeros ++ List(smalest_even_and_index)\n\
    \        val smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ = smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros ++ List(smalest_even_and_index)\n\
    \        val smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ = smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ ++ List(smalest_even_and_index)\n        val smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ = smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ ++ List(smalest_even_and_index)\n        val smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ = smalest_even_and_index_list_with_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros_and_zeros\
    \ ++ List(smalest_even_and_index)\n        val smalest_even_and_index_list_with_zeros_and_zeros_and_",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smalest_value = evens.min\n            val index\
    \ = evens.indexOf(smalest_value)\n            val smalest_value_and_index = smalest_value\
    \ :: index :: Nil\n            smalest_value_and_index\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index = smalest_even_index match {\n            case\
    \ -1 => -1\n            case x => x\n        }\n        val smalest_even_value\
    \ = evens(smalest_even_index)\n        val smalest_even_value_index = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_value_index = smalest_even_value_index match {\n   \
    \         case -1 => -1\n            case x => x\n        }\n        val smalest_even_value_value\
    \ = evens(smalest_even_value_index)\n        val smalest_even_value_value_index\
    \ = evens.indexOf(smalest_even_value_value)\n        val smalest_even_value_value_index\
    \ = smalest_even_value_value_index match {\n            case -1 => -1\n      \
    \      case x => x\n        }\n        val smalest_even_value_value_value = evens(smalest_even_value_value_index)\n\
    \        val smalest_even_value_value_value_index = evens.indexOf(smalest_even_value_value_value)\n\
    \        val smalest_even_value_value_value_index = smalest_even_value_value_value_index\
    \ match {\n            case -1 => -1\n            case x => x\n        }\n   \
    \     val smalest_even_value_value_value_index = evens.indexOf(smalest_even_value_value_value)\n\
    \        val smalest_even_value_value_value_index = smalest_even_value_value_value_index\
    \ match {\n            case -1 => -1\n            case x => x\n        }\n   \
    \     val smalest_even_value_value_value_index = evens.indexOf(smalest_even_value_value_value)\n\
    \        val smalest_even_value_value_value_index = smalest_even_value_value_value_index\
    \ match {\n            case -1 => -1\n            case x => x\n        }\n   \
    \     val smalest_even_value_value_value_value_index = evens.indexOf(smalest_even_value_value_value)\n\
    \        val smalest_even_value_value_value_value_index = smalest_even_value_value_value_value_index\
    \ match {\n            case -1 => -1\n            case x => x\n        }\n   \
    \     val smalest_even_value_value_value_value_index = evens.indexOf(smalest_even_value_value_value)\n\
    \        val smalest_even_value_value_value_value_index = smalest_even_value_value_value_value_index\
    \ match {", "        val evens = arr.filter(x => x % 2 == 0)\n        val even\
    \ = evens.min\n        val index = evens.indexOf(even)\n        val result = if\
    \ (index == -1) Nil else List(even, index)\n        result", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smalest_value = evens.head\n       \
    \     val smalest_index = evens.indexWhere(x => x == smalest_value)\n        \
    \    val smalest_even = evens(smalest_index)\n            val smalest_even_index\
    \ = evens.indexWhere(x => x == smalest_even)\n            val smalest_even_value\
    \ = evens(smalest_even_index)\n            val smalest_even_index_list = List(smalest_even_index,\
    \ smalest_even_value)\n            val smalest_even_index_list_sorted = smalest_even_index_list.sortBy(x\
    \ => x).reverse\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x >= 0)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x >= 0)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x >= 0)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x >= 0)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x >= 0)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x >= 0)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sorted.takeWhile(x\
    \ => x < arr.length)\n            val smalest_even_index_list_sorted = smalest_even_index_list_sor",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smallestEven = evens.min\n            val smallestIndex\
    \ = evens.indexOf(smallestEven)\n            val smalestValue = smallestEven %\
    \ 2\n            List(smalestValue, smallestIndex)\n        }", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n        val\
    \ index = evens.indexOf(smallest)\n        val result = if (index == -1) Nil else\
    \ List(smallest, index)\n        result", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = List(even, index)\n        if (evens.isEmpty) result\n \
    \       else result.reverse", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smallestEven = evens.min\n        val index = evens.indexOf(smallestEven)\n\
    \        val smalestValue = evens(index)\n        val result: List[Long] = if\
    \ (evens.isEmpty) Nil else List(smallestEven, index)\n        result", "     \
    \   val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val\
    \ smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n \
    \       val smalest_even = evens.takeWhile(x => x % 2 == 0).min\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index = smalest_even_index\
    \ + 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val smalest_even_index = smalest_even_index - 1\n        val smalest_even_index\
    \ = smalest_even_index - 1\n        val smalest_even_index = smalest_even_index\
    \ - 1\n        val ", "        val evens = arr.filter(_ % 2 == 0)\n        val\
    \ smallest = evens.min\n        val index = evens.indexOf(smallest)\n        val\
    \ result = if (index == -1) List(smallest) else List(smallest, index)\n      \
    \  result", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val sm", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.take(smalest_index)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens.min) \n        val smalest_evens_value = smalest_evens.min\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens_value)\n      \
    \  val smalest_evens_index = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_evens_value)\n        val smalest_evens_index = evens.indexOf(",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_even = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_even)\n        val smalest_value\
    \ = evens(smalest_index)\n        val smalest_evens = evens.filter(x => x % 2\
    \ == smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n        val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens_value = smalest_evens(smalest_evens_index)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n     \
    \   val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_even)\n        val smalest_evens_value\
    \ = smalest_evens(smalest_evens_index)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n        val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens_value = smalest_evens(smalest_evens_index)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n     \
    \   val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_even)\n        val smalest_evens_value\
    \ = smalest_evens(smalest_evens_index)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n", "  \
    \      val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val smalest_value = arr.min\n\
    \        val smalest_index = arr.indexOf(smalest_value)\n        val smalest_even\
    \ = evens.filter(x => x == smalest_value).min\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index = if (smalest_even_index\
    \ == -1) -1 else smalest_even_index\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_value_index = evens.indexOf(smalest_even_value)\n  \
    \      val smalest_even_value_index = if (smalest_even_value_index == -1) -1 else\
    \ smalest_even_value_index\n        val smalest_even_value_even = evens(smalest_even_value_index)\n\
    \        val smalest_even_value_even_index = evens.indexOf(smalest_even_value_even)\n\
    \        val smalest_even_value_even_index = if (smalest_even_value_even_index\
    \ == -1) -1 else smalest_even_value_even_index\n        val smalest_even_value_even_value\
    \ = evens(smalest_even_value_even_index)\n        val smalest_even_value_even_value_index\
    \ = evens.indexOf(smalest_even_value_even_value)\n        val smalest_even_value_even_value_index\
    \ = if (smalest_even_value_even_value_index == -1) -1 else smalest_even_value_even_value_index\n\
    \        val smalest_even_value_even_value_even = evens(smalest_even_value_even_value_index)\n\
    \        val smalest_even_value_even_value_even_index = evens.indexOf(smalest_even_value_even_value_even)\n\
    \        val smalest_even_value_even_value_even_index = if (smalest_even_value_even_value_even_index\
    \ == -1) -1 else smalest_even_value_even_value_even_index\n        val smalest_even_value_even_value_even_value\
    \ = evens(smalest_even_value_even_value_even_index)\n        val smalest_even_value_even_value_even_value_index\
    \ = evens.indexOf(smalest_even_value_even_value_even_value)\n        val smalest_even_value_even_value_even_value_index\
    \ = if (smalest_even_value_even_value_even_value_index == -1) -1 else smalest_even_value_even_value_even_value_index\n\
    \        val smalest_even_value_even_value_even_value_even = evens(smalest_even_value_even_value_even_value_index)\n\
    \        val smalest_even_value_even_value_even_value_", "        val evens =\
    \ arr.filter(x => x % 2 == 0).sorted\n        val smalest_value = evens.head\n\
    \        val smalest_index = evens.indexOf(0)\n        val result = if (smalest_index\
    \ == -1) List(smalest_value, smalest_index) else evens.take(smalest_index).sorted\n\
    \        result", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOfMin\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even_index_list\
    \ = evens.toList\n        val smalest_even_index_list = evens.toList\n       \
    \ val smalest_even_index_list = evens.toList\n        val smalest_even", "   \
    \     val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = even", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x < y)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ smallestEvenValue = smallestEvenValue\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        if (smalest_even_index\
    \ == -1) {\n            List[Long]()\n        } else {\n            val smalest_even_value\
    \ = evens(smalest_even_index)\n            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \            val smalest_", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val result = evens.takeWhile(x => x != smalest_value).takeWhile(x =>\
    \ x != smalest_index).reverse\n        if (result.isEmpty) Nil\n        else result",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val smalest_even\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val smalest_value\
    \ = smalest_even\n        val smalest_index_in_evens = evens.indexOf(smalest_even)\n\
    \        val smalest_index_in_evens_plus_1 = evens.indexOf(smalest_even + 1)\n\
    \        val smalest_index_in_evens_plus_2 = evens.indexOf(smalest_even + 2)\n\
    \        val smalest_index_in_evens_plus_3 = evens.indexOf(smalest_even + 3)\n\
    \        val smalest_index_in_evens_plus_4 = evens.indexOf(smalest_even + 4)\n\
    \        val smalest_index_in_evens_plus_5 = evens.indexOf(smalest_even + 5)\n\
    \        val smalest_index_in_evens_plus_6 = evens.indexOf(smalest_even + 6)\n\
    \        val smalest_index_in_evens_plus_7 = evens.indexOf(smalest_even + 7)\n\
    \        val smalest_index_in_evens_plus_8 = evens.indexOf(smalest_even + 8)\n\
    \        val smalest_index_in_evens_plus_9 = evens.indexOf(smalest_even + 9)\n\
    \        val smalest_index_in_evens_plus_10 = evens.indexOf(smalest_even + 10)\n\
    \        val smalest_index_in_evens_plus_11 = evens.indexOf(smalest_even + 11)\n\
    \        val smalest_index_in_evens_plus_12 = evens.indexOf(smalest_even + 12)\n\
    \        val smalest_index_in_evens_plus_13 = evens.indexOf(smalest_even + 13)\n\
    \        val smalest_index_in_evens_plus_14 = evens.indexOf(smalest_even + 14)\n\
    \        val smalest_index_in_evens_plus_15 = evens.indexOf(smalest_even + 15)\n\
    \        val smalest_index_in_evens_plus_16 = evens.indexOf(smalest_even + 16)\n\
    \        val smalest_index_in_evens_plus_17 = evens.indexOf(smalest_even + 17)\n\
    \        val smalest_index_in_evens_plus_18 = evens.indexOf(smalest_even + 18)\n\
    \        val smalest_index_in_evens_plus_19 = evens.indexOf(smalest_even + 19)\n\
    \        val smalest_index_in_evens_plus_20 = evens.indexOf(smalest_even + 20)\n\
    \        val smalest_index_in_evens_plus_21 = evens.indexOf(smalest_even ", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) Nil\n\
    \        else {\n            val smallestEven = evens.min\n            val smallestIndex\
    \ = evens.indexOf(smallestEven)\n            val evensAfterSmallestIndex = evens.filter(_\
    \ != smallestEven)\n            val evensAfterSmallestIndexWithIndex = evensAfterSmallestIndex.zipWithIndex\n\
    \            evensAfterSmallestIndexWithIndex.filter(_._2 == smallestIndex).map(_._1)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        val smallestEven\
    \ = evens.min\n        val smallestIndex = evens.indexOf(smallestEven)\n     \
    \   val result = if (smallestEven != 0) evens.take(smallestIndex) else evens\n\
    \        result", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ smallest = evens.min\n        val index = evens.indexOf(smallest)\n        val\
    \ result = List(smallest, index)\n        if (arr.isEmpty) result\n        else\
    \ result.::(pluck(arr.filter(_ != smallest)))", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_value\
    \ = evens(smalest_even_index)\n        val smalest_even_index_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list = evens.indexOf(smalest_even)\n    \
    \    val smalest_even_index_list_list_list = evens.indexOf(smalest_even)\n   \
    \     val smalest_even_index_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = even", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smalest_value = evens.min\n        \
    \    val smalest_index = evens.indexOf(smalest_value)\n            val smalest_even_value\
    \ = evens(smalest_index)\n            val smalest_even_index = evens.indexOf(smalest_even_value)\n\
    \            val smalest_even_value_with_index = smalest_value + smalest_even_index\n\
    \            val smalest_even_value_with_index_list = List(smalest_even_value_with_index)\n\
    \            val smalest_even_value_with_index_list_sorted = smalest_even_value_with_index_list.sortWith((x,\
    \ y) => x < y)\n            val smalest_even_value_with_index_list_sorted_with_first_index\
    \ = smalest_even_value_with_index_list_sorted.take(1)\n            val smalest_even_value_with_index_list_sorted_with_first_index_and_index\
    \ = smalest_even_value_with_index_list_sorted_with_first_index._1 + smalest_even_value_with_index_list_sorted_with_first_index._2\n\
    \            val smalest_even_value_with_index_list_sorted_with_first_index_and_index_list\
    \ = List(smalest_even_value_with_index_list_sorted_with_first_index_and_index)\n\
    \            val smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted\
    \ = smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted.sortWith((x,\
    \ y) => x < y)\n            val smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index\
    \ = smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index._1\
    \ + smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index._2\n\
    \            val smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index_list\
    \ = List(smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index)\n\
    \            val smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index_list_sorted\
    \ = smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index_list_sorted.sortWith((x,\
    \ y) => x < y)\n            val smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index_list_sorted_with_first_index\
    \ = smalest_even_value_with_index_list_sorted_with_first_index_and_index_list_sorted_with_first_index_list_sorted_with_first_index._1\
    \ + smalest_even_value_with_index_", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n       \
    \ val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndex, smallestEvenValue)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValue\
    \ = smallestEvenIndexSorted.head\n        val smallestEvenIndexIndex = smallestEvenIndexSorted.indexOf(0)\n\
    \        val smallestEvenIndexValue = smallestEvenIndex\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndexValue, smallestEvenIndexIndex)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValue\
    \ = smallestEvenIndexSorted.head\n        val smallestEvenIndexIndex = smallestEvenIndexSorted.indexOf(0)\n\
    \        val smallestEvenIndexValue = smallestEvenIndex\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndexValue, smallestEvenIndexIndex)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValue\
    \ = smallestEvenIndexSorted.head\n        val smallestEvenIndexIndex = smallestEvenIndexSorted.indexOf(0)\n\
    \        val smallestEvenIndexValue = smallestEvenIndex\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndexValue, smallestEvenIndexIndex)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValue\
    \ = smallestEvenIndexSorted.head\n        val smallestEvenIndexIndex = smallestEvenIndexSorted.indexOf(0)\n\
    \        val smallestEvenIndexValue = smallestEvenIndex\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndexValue, smallestEvenIndexIndex)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValue\
    \ = smallestEvenIndexSorted.head\n        val smallestEvenIndexIndex = smallestEvenIndexSorted.indexOf(0)\n\
    \        val smallestEvenIndexValue = smallestEvenIndex\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndexValue, smallestEvenIndexIndex)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.take(smalest_index)\n\
    \        val smalest_evens_index = evens.indexOf(smalest_evens.min) match {\n\
    \            case Some(index) => index\n            case None => 0\n        }\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_value = smalest_evens_value\n\
    \        val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_value = smalest_evens_value\n\
    \        val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_value = smalest_evens_value\n\
    \        val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value\n        val smalest_evens_index\
    \ = smalest_evens_index + 1\n        val smalest_evens_value = smalest_evens_value\n\
    \        val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value\n        ", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_index_in_list_in_list = evens.indexOf(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list = evens.indexOf(smalest_even_index_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list = evens.indexOf(smalest_even_index_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list)\n\
    \        val smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_list\
    \ = evens.indexOf(smalest_even_index_in_list_in_list_in_list_in_list_in_list_in_list_in_list_in_",
  "        val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x\
    \ < arr.last).map(x => x).reverse\n        if (even.isEmpty) List()\n        else\
    \ even.headOption", "        val evens = arr.filter(x => x % 2 == 0)\n       \
    \ val smallestEven = evens.min\n        val index = evens.indexOf(smallestEven)\n\
    \        val smallestEvenValue = arr(index)\n        val result: List[Long] =\
    \ if (evens.isEmpty) Nil else List(smallestEvenValue, index)\n        result",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_).reverse\n        val smallest\
    \ = evens.head\n        val index = evens.indexOfFirst { _ == smallest }\n   \
    \     if (index == -1) List(smallest, 0)\n        else List(smallest, index)",
  "        val even = arr.filter(_ % 2 == 0).sortBy(x => x).take(1)\n        if (even.isEmpty)\
    \ List()\n        else even.head", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = if (index == -1) Nil else List(even, index)\n        result",
  "        val even = arr.filter(x => x % 2 == 0)\n        val evenSorted = even.sortWith((x,\
    \ y) => x < y)\n        val smalest_value = evenSorted.head\n        val smalest_index\
    \ = evenSorted.indexOf(0)\n        val index = evenSorted.indexOf(smalest_value)\n\
    \        val smalest_even_value = evenSorted.take(index).sum\n        val smalest_even_index_list\
    \ = evenSorted.take(index).zipWithIndex.filter(_._1 == smalest_value)\n      \
    \  val smalest_even_index_list = smalest_even_index_list.sortWith((x, y) => x\
    \ < y)\n        val smalest_even_index_list = smalest_even_index_list.take(1)\n\
    \        val smalest_even_index_list = smalest_even_index_list.last\n        val\
    \ smalest_even_index_list = smalest_even_index_list.last\n        val smalest_even_index_list\
    \ = smalest_even_index_list.last\n        val smalest_even_index_list = smalest_even_index_list.last\n\
    \        val smalest_even_index_list = smalest_even_index_list.last\n        val\
    \ smalest_even_index_list = smalest_even_index_list.last\n        val smalest_even_index_list\
    \ = smalest_even_index_list.last\n        val smalest_even_index_list = smalest_even_index_list.last\n\
    \        val smalest_even_index_list = smalest_even_index_list.last\n        val\
    \ smalest_even_index_list = smalest_even_index_list.last\n        val smalest_even_index_list\
    \ = smalest_even_index_list.last\n        val smalest_even_index_list = smalest_even_index_list.last\n\
    \        val smalest_even_index_list = smalest_even_index_list.last\n        val\
    \ smalest_even_index_list = smalest_even_index_list.last\n        val smalest_even_index_list\
    \ = smalest_even_index_list.last\n        val smalest_even_index_list = smalest_even_index_list.last\n\
    \        val smalest_even_index_list = smalest_even_index_list.last\n        val\
    \ smalest_even_index_list = smalest_even_index_list.last\n        val smalest_even_index_list\
    \ = smalest_even_index_list.last\n        val smalest_even_index_list = smalest_even_index_list.last\n\
    \        val smalest_even_index_list = smalest_even_index_list.last\n        val\
    \ smalest_even_index_list = smalest_even_index_list.last\n        val smalest_even_index_list\
    \ = smalest_even_index_list.", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index = smalest_even_index\
    \ + 1\n        val smalest_even_value = evens(smalest_even_index)\n        val\
    \ smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toInt\n        val smalest_even_value = smalest_even_value.toDouble\n\
    \        val smalest_even_value = smalest_even_value.toFloat\n        val smalest_even_value\
    \ = smalest_even_value.toBoolean\n        val smalest_even_value = smalest_even_value.toChar\n\
    \        val smalest_even_value = smalest_even_value.toByte\n        val smalest_even_value\
    \ = smalest_even_value.toShort\n        val smalest_even_value = smalest_even_value.toInt\n\
    \        val smalest_even_value = smalest_even_value.toLong\n        val smalest_even_value\
    \ = smalest_even_value.toFloat\n        val smalest_even_value = smalest_even_value.toDouble\n\
    \        val smalest_even_value = smalest_even_value.toBoolean\n        val smalest_even_value\
    \ = smalest_even_value.toChar\n        val smalest_even_value = smalest_even_value.toByte\n\
    \        val smalest_even_value = smalest_even_value.toShort\n        val smalest_even_value\
    \ = smalest_even_value.toInt\n        val smalest_even_value = smalest_even_value.toLong\n\
    \        val smalest_even_value = smalest_even_value.toFloat\n        val smalest_even_value\
    \ = smalest_even_value.toDouble\n        val smalest_even_value = smalest_even_value.toBoolean\n\
    \        val smalest_even_value = smalest_even_value.toChar\n        val smalest_even_value\
    \ = smalest_even_value.toByte\n        val smalest_even_value = smalest_even_value.toShort\n\
    \        val smalest_even_value = smalest_even_value.toInt\n        val smalest_even_value\
    \ = smalest_even_value.toLong\n        val smalest_even_value = smalest_even_value.toFloat\n\
    \        val smalest_even_value = smalest_even", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = if (index == -1) List[Long]() else List(even, index)\n \
    \       result", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x =>\
    \ x)\n        val smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n\
    \        val result = if (smalest_index == -1) List(smalest_value, smalest_index)\
    \ else evens.take(smalest_index).sortBy(x => x).reverse\n        result", "  \
    \      val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_value)\n        val smalest_even_index_value =\
    \ evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = (smallest, index)\n        if (arr.isEmpty) result\n   \
    \     else arr.take(index).concat(result)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOfMin\n        val smalest_even = evens.find(_ == smalest_value)\n\
    \        val smalest_even_index = smalest_even.get\n        val smalest_even_value\
    \ = smalest_even_index\n        val smalest_even_pos = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_pos_value = smalest_even_pos\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_even_pos_value\n        val smalest_even_pos_index\
    \ = smalest_even_pos_value\n        val smalest_even_pos_index = smalest_even_pos_value\n\
    \        val smalest_even_pos_index = smalest_ev", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result: List[Long] = if (index > 0) evens.take(index) else evens\n\
    \        result", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ smalest_even = evens.min\n        val smalest_index = evens.indexOf(smalest_even)\n\
    \        val smalest_value = evens(smalest_index)\n        val smalest_evens =\
    \ evens.filter(x => x % 2 == smalest_value)\n        val smalest_evens_index =\
    \ smalest_evens.indexOf(smalest_even)\n        val smalest_evens_value = smalest_evens(smalest_evens_index)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n    \
    \    val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n        val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_evens_value)\n        val smalest_evens_value\
    \ = smalest_evens(smalest_evens_index)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n    \
    \    val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n        val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_evens_value)\n        val smalest_evens_value\
    \ = smalest_evens(smalest_evens_index)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n    \
    \    val smalest_evens_value = smale", "        val evens = arr.filter(x => x\
    \ % 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (evens.isEmpty) List()\n        else evens.takeWhile(x\
    \ => x != smalest_value).map(x => (x, smalest_index)).toList", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n     \
    \   val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_value)\n        val smalest_even_index_value =\
    \ evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)\n        val smalest_even_index_value\
    \ = evens.indexOf(smalest_even_index_value)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smallests = evens.sortWith((x, y) => x < y)\n  \
    \      val smallest = smallests.head\n        val index = smallests.indexOf(0)\n\
    \        val result: List[Long] = if (smallest == 0) List(smallest) else List(smallest,\
    \ index)\n        result", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_value)\n  \
    \      val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  if (evens.isEmpty) Nil\n        else {\n            val smalest_value = evens.head\n\
    \            val smalest_index = evens.indexOf(0)\n            val evens_with_smallest_value\
    \ = evens.filter(x => x == smalest_value)\n            val evens_with_smallest_index\
    \ = evens_with_smallest_value.indexOf(0)\n            if (evens_with_smallest_index\
    \ > smalest_index) evens_with_smallest_value :: evens_with_smallest_index\n  \
    \          else evens_with_smallest_value :: smalest_index\n        }", "    \
    \    val evens = arr.filter(x => x % 2 == 0)\n        val smalest_even = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_even)\n        val smalest_value\
    \ = evens(smalest_index)\n        val smalest_evens = evens.filter(x => x % 2\
    \ == smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_even)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n    \
    \    val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n        val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_evens_value)\n        val smalest_evens_value\
    \ = smalest_evens(smalest_evens_index)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n    \
    \    val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n        val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_evens_value)\n        val smalest_evens_value\
    \ = smalest_evens(smalest_evens_index)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n    \
    \    val smalest_evens_value = smalest_evens(smalest_evens_index)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_evens_value)\n        val\
    \ smalest_evens_value = smale", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val even = evens.min\n        val index = arr.indexOf(even)\n  \
    \      val smalest_value = evens.filter(x => x % 2 == 0).min\n        val smalest_index\
    \ = arr.indexOf(smalest_value)\n        val result = List(smalest_value, smalest_index)\n\
    \        if (arr.isEmpty) {\n            result\n        } else {\n          \
    \  result\n        }", "        val evens = arr.filter(x => x % 2 == 0)\n    \
    \    val evensSorted = evens.sortWith((x, y) => x < y)\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val index = arr.indexOf(smallestEvenValue)\n    \
    \    val value = smallestEvenValue\n        val list = List[Long](smallestEvenValue,\
    \ smallestEvenIndex)\n        if (arr.isEmpty) {\n            list\n        }\
    \ else {\n            list\n        }", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n     \
    \   val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenIndex = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven / 2\n        val smallestEvenIndex = if (smallestEvenIndex ==\
    \ -1) -1 else smallestEvenIndex\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven / 2\n        val smallestEvenIndex = if (smallestEvenIndex ==\
    \ -1) -1 else smallestEvenIndex\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven / 2\n        val smallestEvenIndex = if (smallestEvenIndex ==\
    \ -1) -1 else smallestEvenIndex\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven / 2\n        val smallestEvenIndex = if (smallestEvenIndex ==\
    \ -1) -1 else smallestEvenIndex\n        val smallestEvenValue = smallestEven\
    \ / 2\n        val smallestEvenIndex = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven / 2\n        val smallestEvenIndex = if (smallestEven", "   \
    \     val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x <\
    \ arr.last).reverse\n        val index = even.indexOf(0)\n        val smalest_value\
    \ = even.take(index).min\n        val smalest_index = index\n        val result\
    \ = if (smalest_value == 0) List(smalest_value, smalest_index) else even.take(index).zip(even.drop(index)).filter(_._1\
    \ < smalest_value).map(_._1)\n        result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value = evens.head\n\
    \        val smalest_index = evens.indexOf(0)\n        val result = evens.takeWhile(x\
    \ => x != smalest_value).takeWhile(x => x != smalest_index).reverse\n        result\
    \ match {\n            case Nil => Nil\n            case x :: xs => x :: pluck(xs)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = even", "        val evens = arr.filter(x => x % 2 == 0)\n        val even\
    \ = evens.min\n        val index = evens.indexOf(even)\n        val result = List(even,\
    \ index)\n        if (arr.isEmpty) result\n        else pluck(arr.drop(index))",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n   \
    \     val smalest_even_index_list_value_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value_index_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value_index_list_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value_index_list_value = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value_index_list_value_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value_index_list_value_index_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value_index_list_value_index_list_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index_list_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index_list_value\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index_list_value_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index_list_value_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_value_index_list_value_index_list_value_index_list_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value_index_list_",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val smalest_value = evens.take(index).min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_evens\
    \ = evens.take(smalest_index)\n        val smalest_even = smalest_evens.min\n\
    \        val smalest_even_index = smalest_evens.indexOf(smalest_even)\n      \
    \  val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n    \
    \    val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n    \
    \    val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n    \
    \    val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n    \
    \    val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n        val\
    \ smalest_even", "        val even = arr.filter(x => x % 2 == 0).sorted\n    \
    \    val evenIndex = arr.indexWhere(x => x % 2 == 0)\n        val smalest_value\
    \ = even.head\n        val smalest_index = evenIndex\n        val result = if\
    \ (even.isEmpty) Nil\n        else even.takeWhile(x => x % 2 == 0).sorted\n  \
    \      result.takeWhile(x => x % 2 == 0).sorted", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_index = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n   \
    \     val smalest_even_index_list_value = evens.indexOf(smalest_even)\n      \
    \  val smalest_even_index_list_value = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_value = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n   \
    \     val smalest_even_index_list_value = evens.indexOf(smalest_even)\n      \
    \  val smalest_even_index_list_value = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_value = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n   \
    \     val smalest_even_index_list_value = evens.indexOf(smalest_even)\n      \
    \  val smalest_even_index_list_value = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_value = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even)\n   \
    \     val smalest_even_index_list_value = evens.indexOf(smalest_even)", "    \
    \    val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x <\
    \ arr.last).reverse\n        val index = arr.lastIndexWhere(x => x % 2 == 0)\n\
    \        val smalest_value = even.head\n        val smalest_index = index\n  \
    \      val result = if (smalest_value == 0) List(smalest_value, smalest_index)\
    \ else even.takeWhile(x => x < smalest_value).reverse.zip(index).map(x => x._1).reverse\n\
    \        result", "        val evens = arr.filter(_ % 2 == 0)\n        val smallest\
    \ = evens.min\n        val index = evens.indexOf(smallest)\n        val result\
    \ = if (index == -1) List(smallest) else List(smallest, index)\n        return\
    \ result", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_evens = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        if (smalest_evens_index == -1)\
    \ {\n            smalest_evens_index = 0\n        }\n        smalest_evens.take(smalest_evens_index).map(x\
    \ => smalest_value).mkString(\",\")", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index =\
    \ evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_value\
    \ = evens(smalest_even_index)\n        val smalest_even_index_in_list = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_list)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_array = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val smalest_even_index_in_list = evens.indexOf(smalest_even_value_in_array)\n\
    \        val smalest_even_value_in_array = evens(smalest_even_index_in_array)\n\
    \        val sm", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ smallest = evens.min\n        val index = evens.indexOf(smallest)\n        val\
    \ result = if (index == -1) List(smallest) else List(smallest, index)\n      \
    \  result", "        val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x\
    \ => x < arr.last).reverse\n        if (even.isEmpty) List()\n        else even.head\
    \ :: even.drop(even.indexOf(even.head)).map(x => arr.indexOf(x)).sortBy(x => x).takeWhile(x\
    \ => x < arr.last).reverse", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val evensSorted = evens.sorted\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ result = List(smallestEvenValue, smallestEvenIndex)\n        return result",
  "        val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n    \
    \    val index = arr.indexOf(even)\n        val smalest_value = arr.takeWhile(_\
    \ < even).min\n        val smalest_index = arr.indexOf(smalest_value)\n      \
    \  val smalest_even = evens.takeWhile(_ < smalest_value).min\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val smalest_even_index = arr.indexOf(smalest_even)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_index = arr.indexOf(smalest_even)\n\
    \        val ", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x < y)\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val smalestValue\
    \ = evenSmallest\n        val smalestIndex = (evensSorted.indexOf(evenSmallest)\
    \ + evenSmallestIndex) % evensSorted.length\n        val smalestValueAndIndex\
    \ = (smalestValue, smalestIndex)\n        if (evensSorted.isEmpty) {\n       \
    \     List[Long]()\n        } else {\n            List(smalestValueAndIndex)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else evens.minBy(x => x)._2", "        val even = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val index = even.indexOf(0)\n        if (index\
    \ >= 0) {\n            val value = even(index)\n            val result = List(value,\
    \ index)\n            if (even.length == 0) result\n            else result.reverse\n\
    \        }\n        else List()", "        val even = arr.filter(x => x % 2 ==\
    \ 0).sorted\n        val index = even.indexOf(0)\n        val smalest_value =\
    \ even.take(index).min\n        val smalest_index = even.indexOf(smalest_value)\n\
    \        val result = smalest_value :: smalest_index.toList\n        if (even.isEmpty)\
    \ result\n        else result", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        if (evens.isEmpty) List()\n        else {\n            val smallestEven\
    \ = evens.min\n            val smallestIndex = evens.indexOf(smallestEven)\n \
    \           val smallestEvenIndex = evens.indexOf(smallestEven)\n            val\
    \ smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n      \
    \      val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallestEvenValue)\n\
    \            val smallestEvenValue = smallestEven / 2\n            val smallestEvenIndex\
    \ = evens.indexOf(smallestEvenValue)\n            val smallestEvenValue = smallestEven\
    \ / 2\n            val smallestEvenIndex = evens.indexOf(smallest", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) Nil\n      \
    \  else evens.minBy(x => x)._2", "        val even = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < arr.last)\n        if (even.isEmpty) List()\n\
    \        else even.head", "        val evens = arr.filter(x => x % 2 == 0)\n \
    \       val evensSorted = evens.sorted\n        val smallestEven = evensSorted.head\n\
    \        val smallestIndex = evensSorted.indexOfMin\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEven)\n        val result = if (smallestEvenIndex\
    \ == -1) List(smallestEven) else List(smallestEven, smallestEvenIndex)\n     \
    \   result", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smalest_value = evens.min\n        \
    \    val smalest_index = evens.indexOf(smalest_value)\n            val smalest_even\
    \ = evens(smalest_index)\n            val smalest_even_index = evens.indexOf(smalest_even)\n\
    \            val smalest_even_value = evens(smalest_even_index)\n            val\
    \ smalest_even_index_plus_one = smalest_even_index + 1\n            val smalest_even_value_plus_one\
    \ = evens(smalest_even_index_plus_one)\n            val smalest_even_value_plus_two\
    \ = evens(smalest_even_index_plus_two)\n            val smalest_even_value_plus_three\
    \ = evens(smalest_even_index_plus_three)\n            val smalest_even_value_plus_four\
    \ = evens(smalest_even_index_plus_four)\n            val smalest_even_value_plus_five\
    \ = evens(smalest_even_index_plus_five)\n            val smalest_even_value_plus_six\
    \ = evens(smalest_even_index_plus_six)\n            val smalest_even_value_plus_seven\
    \ = evens(smalest_even_index_plus_seven)\n            val smalest_even_value_plus_eight\
    \ = evens(smalest_even_index_plus_eight)\n            val smalest_even_value_plus_nine\
    \ = evens(smalest_even_index_plus_nine)\n            val smalest_even_value_plus_ten\
    \ = evens(smalest_even_index_plus_ten)\n            val smalest_even_value_plus_eleven\
    \ = evens(smalest_even_index_plus_eleven)\n            val smalest_even_value_plus_twelve\
    \ = evens(smalest_even_index_plus_twelve)\n            val smalest_even_value_plus_thirteen\
    \ = evens(smalest_even_index_plus_thirteen)\n            val smalest_even_value_plus_fourteen\
    \ = evens(smalest_even_index_plus_fourteen)\n            val smalest_even_value_plus_fifteen\
    \ = evens(smalest_even_index_plus_fifteen)\n            val smalest_even_value_plus_sixteen\
    \ = evens(smalest_even_index_plus_sixteen)\n            val smalest_even_value_plus_seventeen\
    \ = evens(smalest_even_index_plus_seventeen)\n            val smalest_even_value_plus_eighteen\
    \ = evens(smalest_even_index_plus_e", "        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ smallestEven = evens.min\n            val smallestIndex = arr.indexOf(smallestEven)\n\
    \            val smallestValue = arr[smallestIndex]\n            val evenIndex\
    \ = arr.indexOf(smallestEven)\n            val evenValue = arr[evenIndex]\n  \
    \          val evenSmallestValue = arr[evenIndex].min(evenValue)\n           \
    \ val evenSmallestIndex = arr.indexOf(evenSmallestValue)\n            val evenSmallestEvenIndex\
    \ = arr.indexOf(evenSmallestValue)\n            val evenSmallestEvenValue = arr[evenSmallestEvenIndex]\n\
    \            val evenSmallestEvenIndexValue = arr[evenSmallestEvenIndex].min(evenSmallestEvenValue)\n\
    \            val evenSmallestEvenIndexValueIndex = arr.indexOf(evenSmallestEvenIndexValue)\n\
    \            val evenSmallestEvenIndexValueIndexValue = arr[evenSmallestEvenIndexValueIndex]\n\
    \            val evenSmallestEvenIndexValueIndexValueIndex = arr.indexOf(evenSmallestEvenIndexValueIndexValue)\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValue = arr[evenSmallestEvenIndexValueIndexValueIndex]\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValueIndex = arr.indexOf(evenSmallestEvenIndexValueIndexValueIndexValue)\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValueIndexValue = arr[evenSmallestEvenIndexValueIndexValueIndexValueIndex]\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndex\
    \ = arr.indexOf(evenSmallestEvenIndexValueIndexValueIndexValueIndexValue)\n  \
    \          val evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = arr[evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndex]\n     \
    \       val evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = arr.indexOf(evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValue)\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = arr.indexOf(evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue)\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = arr[evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex]\n\
    \            val evenSmallestEvenIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = arr.", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ smalest_index\n        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = ", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenValue\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenValue\n        val smallestEvenIndex = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenValue\n        val smallestEvenIndex =\
    \ smallest", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOfMin\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smalest_even)\n        val smalest_even_index_list_value\
    \ = evens.toList.indexOf(smale", "        val evens = arr.filter(_ % 2 == 0)\n\
    \        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) List(smallest) else List(smallest, index)\n\
    \        return result", "        val evens = arr.filter(x => x % 2 == 0)\n  \
    \      if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.min\n            val smallest_index = evens.indexOf(smalest_value)\n\
    \            val smalest_even = evens(smallest_index)\n            val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n            val smalest_even_index = if (smalest_even_index\
    \ == smallest_index) smalest_even_index else smalest_even_index + 1\n        \
    \    val smalest_even_value = evens(smalest_even_index)\n            val smalest_even_index_value\
    \ = evens(smalest_even_index_value)\n            val smalest_even_index_value\
    \ = if (smalest_even_index_value == smalest_even_index) smalest_even_index_value\
    \ else smalest_even_index_value + 1\n            val smalest_even_index_value\
    \ = if (smalest_even_index_value == smallest_index) smalest_even_index_value else\
    \ smalest_even_index_value + 1\n            val smalest_even_index_value = if\
    \ (smalest_even_index_value == smalest_even_index) smalest_even_index_value else\
    \ smalest_even_index_value + 1\n            val smalest_even_index_value = if\
    \ (smalest_even_index_value == smallest_index) smalest_even_index_value else smalest_even_index_value\
    \ + 1\n            val smalest_even_index_value = if (smalest_even_index_value\
    \ == smalest_even_index) smalest_even_index_value else smalest_even_index_value\
    \ + 1\n            val smalest_even_index_value = if (smalest_even_index_value\
    \ == smallest_index) smalest_even_index_value else smalest_even_index_value +\
    \ 1\n            val smalest_even_index_value = if (smalest_even_index_value ==\
    \ smalest_even_index) smalest_even_index_value else smalest_even_index_value +\
    \ 1\n            val smalest_even_index_value = if (smalest_even_index_value ==\
    \ smallest_index) smalest_even_index_value else smalest_even_index_value + 1\n\
    \            val smalest_even_index_value = if (smalest_even_index_value == smalest_even_index)\
    \ smalest_even_index_value else smalest_even_index_value + 1\n            val\
    \ smalest_even_index_value = if (smalest_even_index_value == smallest_index) smalest_even_index_value\
    \ else smalest_even_index_value + 1\n            val smalest_even_index_value\
    \ = if (smalest_even_index_value == smalest_even_index) smalest_even", "     \
    \   val evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = List(smallest,\
    \ index)\n        if (evens.isEmpty) result\n        else evens.take(1).map(x\
    \ => (x, index)).filter(_._1 == smallest).sortBy(_._1).head._2", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smalest_value = evensSorted.head\n        val smalest_index\
    \ = evensSorted.indexOf(0)\n        val result = evensSorted.takeWhile(x => x\
    \ != smalest_value).takeWhile(x => x != smalest_index).map(x => smalest_value)\n\
    \        if (result.isEmpty) result else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n\
    \        val smallestEven = evensSorted.head\n        val smallestIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenIndex = evensSorted.indexOf(smallestEven)\n        val\
    \ smallestEvenIndex = if (smallestEvenIndex == -1) -1 else smallestEvenIndex\n\
    \        val smallestEvenValue = evensSorted.take(smallestEvenIndex).sum\n   \
    \     val smallestEvenValueIndex = evensSorted.indexOf(smallestEvenValue)\n  \
    \      val smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else\
    \ smallestEvenValueIndex\n        val smallestEvenValueIndex = if (smallestEvenValueIndex\
    \ == -1) -1 else smallestEvenValueIndex\n        val smallestEvenValueIndex =\
    \ if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n        val\
    \ smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n\
    \        val smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else\
    \ smallestEvenValueIndex\n        val smallestEvenValueIndex = if (smallestEvenValueIndex\
    \ == -1) -1 else smallestEvenValueIndex\n        val smallestEvenValueIndex =\
    \ if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n        val\
    \ smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n\
    \        val smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else\
    \ smallestEvenValueIndex\n        val smallestEvenValueIndex = if (smallestEvenValueIndex\
    \ == -1) -1 else smallestEvenValueIndex\n        val smallestEvenValueIndex =\
    \ if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n        val\
    \ smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n\
    \        val smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else\
    \ smallestEvenValueIndex\n        val smallestEvenValueIndex = if (smallestEvenValueIndex\
    \ == -1) -1 else smallestEvenValueIndex\n        val smallestEvenValueIndex =\
    \ if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n        val\
    \ smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else smallestEvenValueIndex\n\
    \        val smallestEvenValueIndex = if (smallestEvenValueIndex == -1) -1 else\
    \ smallest", "        val even = arr.filter(_ % 2 == 0).sortBy(_).reverse\n  \
    \      if (even.isEmpty) List()\n        else even.head", "        val even =\
    \ arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x => x < arr.last).map(x\
    \ => x).reverse\n        if (even.isEmpty) List()\n        else even.head", " \
    \       val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n   \
    \     val index = evens.indexOf(even)\n        val smalest_value = evens(index)\n\
    \        val smalest_index = index\n        val result = List(smalest_value, smalest_index)\n\
    \        if (evens.isEmpty) result\n        else pluck(arr.filter(_ != smalest_value).take(smalest_index+1))",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  if (evens.isEmpty) Nil\n        else evens.takeWhile(x => x < evens.min).reverse",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val smallest =\
    \ evens.head\n        val index = evens.indexOfFirst { x => x % 2 == 0 }\n   \
    \     if (evens.isEmpty) List()\n        else if (index == -1) List(smallest)\n\
    \        else List(smallest, index)", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty) List()\n        else\
    \ evens.head", "        val even = arr.filter(x => x % 2 == 0).sortBy(x => x).takeWhile(x\
    \ => x < arr.last).reverse\n        val index = arr.lastIndexWhere(x => x % 2\
    \ == 0)\n        if (even.isEmpty) List()\n        else if (index == arr.length)\
    \ List(arr.last)\n        else even.take(index).sortBy(x => x).reverse.head",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_in_list\
    \ = evens.indexOf(smalest_even, smalest_index)\n        val smalest_even_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_index_in_list)\n        val smalest_even_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_index)\n        val smalest_even_value_in_list_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_value_in_list_index)\n \
    \       val smalest_even_value_in_list_value_in_list_value = evens.indexOf(smalest_even,\
    \ smalest_value_in_list_value_in_list_value_in_list_index)\n        val smalest_even_value_in_list_value_in_list_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value = evens.indexOf(smalest_even,\
    \ smalest_value_in_list_value_in_list_value_in_list_value_in_list_index)\n   \
    \     val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_value\
    \ = evens.indexOf(smalest_even, smalest_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_value_in_list_index)\n\
    \        val smalest_even_value_in_", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sorted\n        val smallest = evens.head\n        val index = evens.indexOfFirst\
    \ { x => x % 2 == 0 }\n        val result = if (index >= 0) evens.take(index)\
    \ else evens\n        result.sortWith(_ < _)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sorted\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOfMin\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val ", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = if (index ==\
    \ -1) List(smallest) else List(smallest, index)\n        result", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        if (smalest_even_index\
    \ == -1 || smalest_even_index == evens.size - 1) {\n            List[Long]()\n\
    \        } else {\n            List(smalest_value, smalest_even_index)\n     \
    \   }", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x < y)\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val smallestEven\
    \ = evenSmallest\n        val smallestEvenIndex = evenSmallestIndex\n        val\
    \ smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n\
    \        val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val smallestEvenIndex\
    \ = evenSmallestIndex\n        val smallestEvenIndex = evenSmallestIndex\n   \
    \     val smallestEvenIndex = evenSmallestIndex\n        val ", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val smalest_even\
    \ = evens.takeWhile(x => x % 2 == 0).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_index).last\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.takeWhile(x => x % 2 == 0).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_index).takeWhile(_ < smalest_even_index).reverse\n        val smalest_even_index_list_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_value = evens(smalest_even_index_list_index)\n\
    \        val smalest_even_index_list_index_list = evens.takeWhile(x => x % 2 ==\
    \ 0).takeWhile(_ < smalest_value).takeWhile(_ < smalest_index).takeWhile(_ < smalest_even_index_list_index).takeWhile(_\
    \ < smalest_even_index_list_index_list).reverse\n        val smalest_even_index_list_index_list_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_index_list_value\
    \ = evens(smalest_even_index_list_index_list_index)\n        val smalest_even_index_list_index_list_index_list\
    \ = evens.takeWhile(x => x % 2 == 0).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_index).takeWhile(_ < smalest_even_index_list_index_list_index).takeWhile(_\
    \ < smalest_even_index_list_index_list_index_list).takeWhile(_ < smalest_even_index_list_index_list_index_list_index).reverse\n\
    \        val smalest_even_index_list_index_list_index_list_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_index_list_index_list_value = evens(smalest_even_index_list_index_list_index_list_index)\n\
    \        val smalest_even_index_list_index_list_index_list_index_list = evens.takeWhile(x\
    \ => x % 2 == 0).takeWhile(_ < smalest_value).takeWhile(_ < smalest_index).takeWhile(_\
    \ < smalest_even_index_list_index_list_index_list_index).takeWhile(_ < smalest_even_index_list_index_list_",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List(-1L)\n\
    \        else evens.minBy(x => x)._2", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n     \
    \   val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven / 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val result: List[Long] = List(smallestEvenValue,\
    \ smallestEvenIndex)\n        if (evensSorted.isEmpty) {\n            result\n\
    \        } else {\n            result\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        if (evens.isEmpty) List()\n        else {\n \
    \           val smalest_value = evens.head\n            val smallest_index = evens.indexOf(0)\n\
    \            val smalest_even = evens.filter(x => x % 2 == smalest_value).head\n\
    \            val smalest_even_index = evens.indexOf(smalest_even)\n          \
    \  val smalest_even_index_plus_one = smalest_even_index + 1\n            val smalest_even_index_plus_two\
    \ = smalest_even_index + 2\n            val smalest_even_index_plus_three = smalest_even_index\
    \ + 3\n            val smalest_even_index_plus_four = smalest_even_index + 4\n\
    \            val smalest_even_index_plus_five = smalest_even_index + 5\n     \
    \       val smalest_even_index_plus_six = smalest_even_index + 6\n           \
    \ val smalest_even_index_plus_seven = smalest_even_index + 7\n            val\
    \ smalest_even_index_plus_eight = smalest_even_index + 8\n            val smalest_even_index_plus_nine\
    \ = smalest_even_index + 9\n            val smalest_even_index_plus_ten = smalest_even_index\
    \ + 10\n            val smalest_even_index_plus_eleven = smalest_even_index +\
    \ 11\n            val smalest_even_index_plus_twelve = smalest_even_index + 12\n\
    \            val smalest_even_index_plus_thirteen = smalest_even_index + 13\n\
    \            val smalest_even_index_plus_fourteen = smalest_even_index + 14\n\
    \            val smalest_even_index_plus_fifteen = smalest_even_index + 15\n \
    \           val smalest_even_index_plus_sixteen = smalest_even_index + 16\n  \
    \          val smalest_even_index_plus_seventeen = smalest_even_index + 17\n \
    \           val smalest_even_index_plus_eighteen = smalest_even_index + 18\n \
    \           val smalest_even_index_plus_nineteen = smalest_even_index + 19\n \
    \           val smalest_even_index_plus_twenty = smalest_even_index + 20\n   \
    \         val smalest_even_index_plus_twenty_one = smalest_even_index + 21\n \
    \           val smalest_even_index_plus_twenty_two = smalest_even_index + 22\n\
    \            val smalest_even_index_plus_twenty_three", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n        \
    \    val smallestEven = evens.min\n            val index = evens.indexOf(smallestEven)\n\
    \            val smallestEvenValue = smallestEven % 2\n            val smalestValue\
    \ = if (smallestEvenValue == 0) smallestEven else smallestEven + 1\n         \
    \   val smalestIndex = (index + 1) % arr.length\n            List(smalestValue,\
    \ smalestIndex)\n        }", "        val evens = arr.filter(_ % 2 == 0)\n   \
    \     val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index > 0) evens.take(index) else evens\n        result",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sorted\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ smallestEvenValue = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEven\n        val\
    \ smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue = smallestEven\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ smallestEvenValue = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEven\n        val\
    \ smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue = smallestEven\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ smallestEvenValue = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEven\n        val\
    \ smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue = smallestEven\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ smallestEvenValue = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndex =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEven\n        val\
    \ smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue = smallestEven\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val ",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = smalest_index\n   \
    \     val smalest_even_value = smalest_value\n        val smalest_even_index =\
    \ smalest_index\n        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (smalest_index > 0) {\n            val smalest_even\
    \ = evens(smalest_index)\n            val smalest_even_index = evens.indexOf(smalest_even)\n\
    \            val smalest_even_value = evens(smalest_even_index)\n            val\
    \ smalest_even_index_list = evens.take(smalest_even_index_list)\n            val\
    \ smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n \
    \           val smalest_even_index_list = smalest_even_index_list.take(1)\n  \
    \          val smalest_even_index_list = smalest_even_index_list.toList\n    \
    \        val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \            val smalest_even_index_list = smalest_even_index_list.take(1)\n \
    \           val smalest_even_index_list = smalest_even_index_list.toList\n   \
    \         val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \            val smalest_even_index_list = smalest_even_index_list.take(1)\n \
    \           val smalest_even_index_list = smalest_even_index_list.toList\n   \
    \         val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \            val smalest_even_index_list = smalest_even_index_list.take(1)\n \
    \           val smalest_even_index_list = smalest_even_index_list.toList\n   \
    \         val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \            val smalest_even_index_list = smalest_even_index_list.take(1)\n \
    \           val smalest_even_index_list = smalest_even_index_list.toList\n   \
    \         val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \            val smalest_even_index_list = smalest_even_index_list.take(1)\n \
    \           val smalest_even_index_list = smalest_even_index_list.toList\n   \
    \         val smalest_even_index_list = smalest_even_index_list.sortBy(x => x).reverse\n\
    \            val smalest_even_index_list = smalest_even_index_list.take(1)\n \
    \           val smalest_even_index_list = smalest_even_index_list.toList\n   \
    \         val smalest_even_index_list = smalest_even_index_list.sort", "     \
    \   val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smalest_value = evensSorted.head\n        val smalest_index\
    \ = evensSorted.indexOf(0)\n        val smalest_even = evensSorted.take(smalest_index)\n\
    \        val smalest_evenSorted = smalest_even.sortWith((x, y) => x < y)\n   \
    \     val smalest_evenSorted_index = smalest_evenSorted.indexOf(0)\n        val\
    \ smalest_evenSorted_value = smalest_evenSorted.take(smalest_evenSorted_index)\n\
    \        val smalest_evenSorted_value_index = smalest_evenSorted_value.indexOf(0)\n\
    \        val smalest_evenSorted_value_value = smalest_evenSorted_value.take(smalest_evenSorted_value_index)\n\
    \        val smalest_evenSorted_value_value_index = smalest_evenSorted_value_value.indexOf(0)\n\
    \        val smalest_evenSorted_value_value_value = smalest_evenSorted_value_value.take(smalest_evenSorted_value_value_index)\n\
    \        val smalest_evenSorted_value_value_value_index = smalest_evenSorted_value_value_value.indexOf(0)\n\
    \        val smalest_evenSorted_value_value_value_value = smalest_evenSorted_value_value_value.take(smalest_evenSorted_value_value_value_index)\n\
    \        val smalest_evenSorted_value_value_value_index = smalest_evenSorted_value_value_value_value.indexOf(0)\n\
    \        val smalest_evenSorted_value_value_value_value = smalest_evenSorted_value_value_value.take(smalest_evenSorted_value_value_value_index)\n\
    \        val smalest_evenSorted_value_value_value_index = smalest_evenSorted_value_value_value_value.indexOf(0)\n\
    \        val smalest_evenSorted_value_value_value_value = smalest_evenSorted_value_value_value_value.take(smalest_evenSorted_value_value_value_index)\n\
    \        val smalest_evenSorted_value_value_value_index = smalest_evenSorted_value_value_value_value.indexOf(0)\n\
    \        val smalest_evenSorted_value_value_value_value = smalest_evenSorted_value_value_value_value.take(smalest_evenSorted_value_value_value_index)\n\
    \        val smalest_evenSorted_value_value_value_index = smalest_evenSorted_value_value_value_value.indexOf(0)\n\
    \        val ", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sorted\n        val smallestEven = evensSorted.head\n  \
    \      val smallestIndex = evensSorted.indexOfMin\n        val smallestValue =\
    \ evensSorted.min\n        val result = arr.filter(x => x % 2 == 0 && x == smallestEven)\n\
    \        val resultSorted = result.sorted\n        val smallestEvenInResult =\
    \ resultSorted.head\n        val smallestIndexInResult = resultSorted.indexOfMin\n\
    \        val smallestValueInResult = resultSorted.min\n        if (smallestEvenInResult\
    \ == smallestEven) {\n            val resultWithSmallestIndex = arr.filter(x =>\
    \ x % 2 == 0 && x == smallestEven).map(x => x -> smallestIndexInResult)\n    \
    \        resultWithSmallestIndex.toList\n        } else {\n            val resultWithSmallestIndex\
    \ = arr.filter(x => x % 2 == 0 && x == smallestEven).map(x => x -> smallestIndexInResult)\n\
    \            resultWithSmallestIndex.toList\n        }", "        val even = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).take(1)\n        if (even.isEmpty) List()\n  \
    \      else {\n            val smalest_value = even(0)\n            val smalest_index\
    \ = even.indexOf(smalest_value)\n            val smalest_even = even.filter(x\
    \ => x % 2 == 0).takeWhile(_ < smalest_value)\n            if (smalest_even.isEmpty)\
    \ List()\n            else {\n                val smallest_even = smalest_even(0)\n\
    \                val smallest_index = even.indexOf(smallest_even)\n          \
    \      val smallest_even = even.filter(x => x % 2 == 0).takeWhile(_ < smallest_even)\n\
    \                if (smallest_even.isEmpty) List()\n                else {\n \
    \                   val smallest_even = smalest_even(0)\n                    val\
    \ smallest_index = even.indexOf(smallest_even)\n                    val smallest_even\
    \ = even.filter(x => x % 2 == 0).takeWhile(_ < smallest_even)\n              \
    \      if (smallest_even.isEmpty) List()\n                    else {\n       \
    \                 val smallest_even = smalest_even(0)\n                      \
    \  val smallest_index = even.indexOf(smallest_even)\n                        val\
    \ smallest_even = even.filter(x => x % 2 == 0).takeWhile(_ < smallest_even)\n\
    \                        if (smallest_even.isEmpty) List()\n                 \
    \       else {\n                            val smallest_even = smalest_even(0)\n\
    \                            val smallest_index = even.indexOf(smallest_even)\n\
    \                            val smallest_even = even.filter(x => x % 2 == 0).takeWhile(_\
    \ < smallest_even)\n                            if (smallest_even.isEmpty) List()\n\
    \                            else {\n                                val smallest_even\
    \ = smalest_even(0)\n                                val smallest_index = even.indexOf(smallest_even)\n\
    \                                val smallest_even = even.filter(x => x % 2 ==\
    \ 0).takeWhile(_ < smallest_even)\n                                if (smallest_even.isEmpty)\
    \ List()\n                                else {\n                           \
    \         val smallest_even = smalest_even(0)\n                              \
    \      val smallest_index = even.indexOf(smallest_even)\n                    \
    \                val smallest_even = even.filter(x => x % 2 == 0).takeWhile(_\
    \ < smallest_even)\n                                    if (smallest_even.isEmpty)\
    \ List()\n                                    else {\n                       \
    \                 val smallest_even = smalest_even(0)\n                      \
    \                  val smallest_index = even.indexOf(smallest_even)\n        \
    \                                val smallest_even = even.filter(x => x % 2 ==\
    \ 0).takeWhile(_ < smallest_even)\n                                        if\
    \ (smallest_even", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x - y)\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndex = smallestEvenIndex\n        val\
    \ result = arr.filter(_ != smallestEvenValue)\n        if (result.isEmpty) {\n\
    \            List[Long]()\n        } else {\n            val smallestEvenIndex\
    \ = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallestEvenIndex = smallestEvenIndex\n            val smallestEvenValue = smallestEvenValue\n\
    \            val result = arr.filter(_ != smallestEvenValue)\n            val\
    \ smallest", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_even = evens(smalest_index)\n        val smalest_even_index =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = even", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOfMin\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        val smalest_even_value = evens(smalest_even_index)\n        val smalest_even_index_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list = evens.indexOf(smalest_even)\n\
    \        val smalest_even_index_list_list_list_list_list_list_list_list_list =\
    \ evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = even", "        val evens = arr.filter(x => x % 2 == 0).sorted\n        if\
    \ (evens.isEmpty) List()\n        else {\n            val smallest = evens.head\n\
    \            val index = arr.indexOf(smallest)\n            val result = List(smallest,\
    \ index)\n            if (arr.contains(smallest)) result :+ smallest\n       \
    \     else result\n        }", "        val even = arr.filter(x => x % 2 == 0)\n\
    \        val evenSorted = even.sorted\n        val smallestEven = evenSorted.head\n\
    \        val smallestEvenIndex = evenSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val evenValues = evenSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = evenValues.sorted\n        val smallestEvenIndex\
    \ = evenValuesSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n\
    \        val evenValues = evenValuesSorted.filterNot(x => x == smallestEvenValue)\n\
    \        val evenValuesSorted = ", "        val evens = arr.filter(x => x % 2\
    \ == 0).sortBy(x => x)\n        val smallest = evens.head\n        val index =\
    \ evens.indexOf(smallest)\n        val result = List(smallest, index)\n      \
    \  if (arr.isEmpty) result\n        else result.sortBy(x => x._1).reverse", " \
    \       val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n     \
    \   val smallestEven = evens.head\n        val smallestIndex = evens.indexOf(0)\n\
    \        val result = if (smallestIndex == -1) List(smallestEven) else evens.take(smallestIndex).filter(_\
    \ % 2 == 0).sortBy(x => x).reverse\n        result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        val result = List(even, index)\n        if (arr.isEmpty) result\n   \
    \     else result.sortBy(-_)", "        val even = arr.filter(x => x % 2 == 0).sorted\n\
    \        val evenIndex = arr.indexWhere(x => x % 2 == 0)\n        val smalest_value\
    \ = even.head\n        val smalest_index = evenIndex\n        val result = if\
    \ (even.size == 0) Nil else List(smalest_value, smalest_index)\n        result",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x => x).reverse\n\
    \        val even = evens.head\n        val index = arr.indexOf(even)\n      \
    \  val result = List(even, index)\n        if (arr.isEmpty) result\n        else\
    \ pluck(arr.drop(index+1))", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        val result = evens.takeWhile(x => x != smalest_value).takeWhile(x\
    \ => x != smalest_index).reverse\n        if (result.isEmpty) result else List(smalest_value,\
    \ smalest_index)", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_index = evens.indexOf(smalest_even, smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even, smalest_even_index_list,\
    \ smalest_even_index_list_index)\n        val smalest_even_index_list_value_index\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value+1)\n        val smalest_even_index_list_value_index_value\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value+1, smalest_even_index_list_value_index_value+1)\n\
    \        val smalest_even_index_list_value_index_value_index_value = evens.indexOf(smalest_even,\
    \ smalest_even_index_list, smalest_even_index_list_index, smalest_even_index_list_value+1,\
    \ smalest_even_index_list_value_index_value+1, smalest_even_index_list_value_index_value_index_value+1)\n\
    \        val smalest_even_index_list_value_index_value_index_value_index_value\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value+1, smalest_even_index_list_value_index_value+1,\
    \ smalest_even_index_list_value_index_value_index_value+1, smalest_even_index_list_value_index_value_index_value_index_value_index_value+1)\n\
    \        val smalest_even_index_list_value_index_value_index_value_index_value_index_value_index_value\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value+1, smalest_even_index_list_value_index_value+1,\
    \ smalest_even_index_list_value_index_value_index_value+1, smalest_even_index_list_value_index_value_index_value_index_value+1,\
    \ smalest_even_index_list_value_index_value_index_value_index_value+1, smalest_even_index_list_value_index_value_index_value_index_value+1,\
    \ smalest_even_index_list_value", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sortWith((x, y) => x < y)\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex\n        val smalest_value = evensSortedWithIndex.head._2\n\
    \        val smalest_index = evensSortedWithIndex.head._1\n        val smalest_even\
    \ = evensSorted.filter(x => x == smalest_value).head\n        val smalest_evenIndex\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_evenValue = smalest_even\n\
    \        val smalest_evenIndex = smalest_evenIndex\n        val smalest_evenValue\
    \ = smalest_evenValue\n        val smalest_evenIndex = smalest_evenIndex\n   \
    \     val smalest_evenValue = smalest_evenValue\n        val smalest_evenIndex\
    \ = smalest_evenIndex\n        val smalest_evenValue = smalest_evenValue\n   \
    \     val smalest_evenIndex = smalest_evenIndex\n        val smalest_evenValue\
    \ = smalest_evenValue\n        val smalest_evenIndex = smalest_evenIndex\n   \
    \     val smalest_evenValue = smalest_evenValue\n        val smalest_evenIndex\
    \ = smalest_evenIndex\n        val smalest_evenValue = smalest_evenValue\n   \
    \     val smalest_evenIndex = smalest_evenIndex\n        val smalest_evenValue\
    \ = smalest_evenValue\n        val smalest_evenIndex = smalest_evenIndex\n   \
    \     val smalest_evenValue = smalest_evenValue\n        val smalest_evenIndex\
    \ = smalest_evenIndex\n        val smalest_evenValue = smalest_evenValue\n   \
    \     val smalest_evenIndex = smalest_evenIndex\n        val smalest_evenValue\
    \ = smalest_evenValue\n        val smalest_evenIndex = smalest_evenIndex\n   \
    \     val smalest_evenValue = smalest_evenValue\n        val smalest_evenIndex\
    \ = smalest_evenIndex\n        val smalest_evenValue = smalest_evenValue\n   \
    \     val smalest_evenIndex = smalest_evenIndex\n        val smalest_evenValue\
    \ = smalest_evenValue\n        val smalest_evenIndex = smalest_evenIndex\n   \
    \     val smalest_evenValue = smalest_evenValue\n        val smalest_evenIndex\
    \ = smalest_evenIndex\n        val smalest_evenValue = ", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y)\
    \ => x < y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven / 2\n\
    \        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEvenValue *\
    \ 2\n        val smallestEvenIndex = smallestEvenIndex + 1\n        val smallestEvenValue\
    \ = smallestEvenValue * 2\n        val smallestEvenIndex = smallestEvenIndex +\
    \ 1\n        val smallestEvenValue = smallestEvenValue * 2\n        val smallestEvenIndex\
    \ = smallestEvenIndex + 1\n        val smallestEvenValue = smallestEven", "  \
    \      val evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = List(smallest,\
    \ index)\n        if (arr.isEmpty) result\n        else result.sortBy(x => x).reverse",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        val smalest_evens\
    \ = evens.takeWhile(x => x != smalest_value)\n        val smalest_evens_index\
    \ = evens.indexOf(smalest_value)\n        if (smalest_evens_index > smalest_index)\
    \ {\n            smalest_evens_index\n        } else {\n            smalest_index\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.head\n            val smalest_index = evens.indexOf(0)\n           \
    \ val index = evens.indexOf(smalest_value)\n            val smalest_even = evens(index)\n\
    \            val smalest_even_index = evens.indexOf(smalest_even)\n          \
    \  if (smalest_even_index == index) List(smalest_value, smalest_index)\n     \
    \       else List(smalest_value, smalest_index, smalest_even, smalest_even_index)\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens.filter(x => x == smalest_value).min\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens.filter(x\
    \ => x == smalest_even).min\n        val smalest_even_index_value = evens.indexOf(smalest_even_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evens.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = even", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) List()\n        else evens.minBy(x\
    \ => x)._2", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_evens = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        if (smalest_evens_index == -1)\
    \ {\n            smalest_evens_index = evens.length\n        }\n        smalest_evens.take(smalest_evens_index).map(x\
    \ => x).mkString(\",\")", "        val evens = arr.filter(x => x % 2 == 0)\n \
    \       val evensSorted = evens.sortWith((x, y) => x < y)\n        val smallestEven\
    \ = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smallestEvenValue = smallestEven\n        val smallestEvenIndexList\
    \ = List(smallestEvenIndex, smallestEvenValue)\n        val smallestEvenIndexSorted\
    \ = smallestEvenIndexList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValue\
    \ = smallestEvenIndexSorted.head\n        val smallestEvenIndexIndex = smallestEvenIndexSorted.indexOf(0)\n\
    \        val smallestEvenIndexValue = smallestEvenIndexSorted.head\n        val\
    \ smallestEvenIndexValueList = List(smallestEvenIndexValue, smallestEvenIndexIndex)\n\
    \        val smallestEvenIndexValueSorted = smallestEvenIndexValueList.sortWith((x,\
    \ y) => x < y)\n        val smallestEvenIndexValueValue = smallestEvenIndexValueSorted.head\n\
    \        val smallestEvenIndexValueIndex = smallestEvenIndexValueSorted.indexOf(0)\n\
    \        val smallestEvenIndexValueValue = smallestEvenIndexValueSorted.head\n\
    \        val smallestEvenIndexValueValueList = List(smallestEvenIndexValueValue,\
    \ smallestEvenIndexValueIndex)\n        val smallestEvenIndexValueValueSorted\
    \ = smallestEvenIndexValueValueList.sortWith((x, y) => x < y)\n        val smallestEvenIndexValueValueValue\
    \ = smallestEvenIndexValueValueSorted.head\n        val smallestEvenIndexValueValueIndex\
    \ = smallestEvenIndexValueValueSorted.indexOf(0)\n        val smallestEvenIndexValueValueValue\
    \ = smallestEvenIndexValueValueSorted.head\n        val smallestEvenIndexValueValueValueList\
    \ = List(smallestEvenIndexValueValueValue, smallestEvenIndexValueValueIndex)\n\
    \        val smallestEvenIndexValueValueValueSorted = smallestEvenIndexValueValueValueList.sortWith((x,\
    \ y) => x < y)\n        val smallestEvenIndexValueValueValueValue = smallestEvenIndexValueValueValueSorted.head\n\
    \        val smallestEvenIndexValueValueValueIndex = smallestEvenIndexValueValueValueSorted.indexOf(0)\n\
    \        val smallestEvenIndexValueValueValueValue = smallestEvenIndexValueValueValueSorted.head\n\
    \        val smallestEvenIndexValueValueValueValueList = List(smallestEvenIndexValueValueValueValue,\
    \ smallestEvenIndexValueValueValueIndex)\n        val smallestEvenIndexValueValueValueValueSorted\
    \ = smallestEvenIndexValue", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_index = evens.indexOf(smalest_even, smalest_even_index_list)\n\
    \        val smalest_even_index_list_value = evens.indexOf(smalest_even, smalest_even_index_list,\
    \ smalest_even_index_list_index)\n        val smalest_even_index_list_value_index\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value) \n        val smalest_even_index_list_value_index_list\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value, smalest_even_index_list_value_index)\n      \
    \  val smalest_even_index_list_value_index_list_index = evens.indexOf(smalest_even,\
    \ smalest_even_index_list, smalest_even_index_list_index, smalest_even_index_list_value,\
    \ smalest_even_index_list_value_index, smalest_even_index_list_value_index_list)\n\
    \        val smalest_even_index_list_value_index_list_value = evens.indexOf(smalest_even,\
    \ smalest_even_index_list, smalest_even_index_list_index, smalest_even_index_list_value,\
    \ smalest_even_index_list_value_index, smalest_even_index_list_value_index_list,\
    \ smalest_even_index_list_value_index_list_index)\n        val smalest_even_index_list_value_index_list_value_index\
    \ = evens.indexOf(smalest_even, smalest_even_index_list, smalest_even_index_list_index,\
    \ smalest_even_index_list_value, smalest_even_index_list_value_index, smalest_even_index_list_value_index_list,\
    \ smalest_even_index_list_value_index_list_index, smalest_even_index_list_value_index_list_value)\n\
    \        val smalest_even_index_list_value_index_list_value_index_list = evens.indexOf(smalest_even,\
    \ smalest_even_index_list, smalest_even_index_list_index, smalest_even_index_list_value,\
    \ smalest_even_index_list_value_index, smalest_even_index_list_value_index_list,\
    \ smalest_even_index_list_", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        val result = if (smalest_index > 0) smalest_value\
    \ :: smalest_index :: Nil else Nil\n        result", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOfMin\n        val result = arr.filter(_ == smalest_value).sortWith(_\
    \ < _)\n        if (result.isEmpty) Nil\n        else List(smalest_value, smalest_index)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smalest_value = evensSorted.head\n        val smalest_index\
    \ = evensSorted.indexOf(0)\n        val index = evensSorted.indexOf(smalest_value)\n\
    \        val smalest_even = evensSorted.take(index)\n        val smalest_even_index\
    \ = evensSorted.indexOf(smalest_even)\n        val smalest_even_value = evensSorted.take(smalest_even_index)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(smalest_even_index_value)\n\
    \        val smalest_even_index_value = evensSorted.indexOf(sm", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val\
    \ index = arr.indexOf(even)\n        val smalest_value = evens.find(x => x % 2\
    \ == 0).get\n        val smalest_index = arr.indexOf(smalest_value)\n        val\
    \ result: List[Long] = if (smalest_index == -1) List(smalest_value) else List(smalest_value,\
    \ smalest_index)\n        result", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result: List[Long] = if (index == -1) List(smallest) else List(smallest,\
    \ index)\n        result", "        val evens = arr.filter(_ % 2 == 0)\n     \
    \   val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = arr.indexOf(smalest_even)\n        val smalest_even_value = arr(smalest_even_index)\n\
    \        val smalest_even_index_list = List(smalest_even_index, smalest_even_index)\n\
    \        val smalest_even_index_set = smalest_even_index_list.distinct\n     \
    \   val smalest_even_index_list = smalest_even_index_list.filter(_ != smalest_even_index)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.distinct\n        val\
    \ smalest_even_index_list = smalest_even_index_list.filter(_ != smalest_even_index)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.distinct\n        val\
    \ smalest_even_index_list = smalest_even_index_list.filter(_ != smalest_even_index)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.distinct\n        val\
    \ smalest_even_index_list = smalest_even_index_list.filter(_ != smalest_even_index)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.distinct\n        val\
    \ smalest_even_index_list = smalest_even_index_list.filter(_ != smalest_even_index)\n\
    \        val smalest_even_index_list = smalest_even_index_list.sortWith(_ < _)\n\
    \        val smalest_even_index_list = smalest_even_index_list.take(1)\n     \
    \   val smalest_even_index_list = smalest_even_index_list.distinct\n        val\
    \ smalest_even_index_list = smalest_even", "        val evens = arr.filter(_ %\
    \ 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (smalest_index == -1) evens.toList else evens.take(smalest_index).toList",
  "        val even = arr.filter(x => x % 2 == 0).sortBy(x => x).take(1)\n       \
    \ if (even.isEmpty) List()\n        else {\n            val smalest_value = even.head\n\
    \            val smalest_index = even.indexWhere(x => x == smalest_value)\n  \
    \          val smalest_value_and_index = smalest_value -> smalest_index\n    \
    \        val smalest_value_and_index_list = List(smalest_value_and_index)\n  \
    \          val smalest_value_and_index_list_sorted = smalest_value_and_index_list.sortBy(_._1).reverse\n\
    \            val smalest_value_and_index_list_sorted_takeOne = smalest_value_and_index_list_sorted.take(1)\n\
    \            val smalest_value_and_index_list_sorted_takeOne_1 = smalest_value_and_index_list_sorted_takeOne._1\n\
    \            val smalest_value_and_index_list_sorted_takeOne_2 = smalest_value_and_index_list_sorted_takeOne._2\n\
    \            val smalest_value_and_index_list_sorted_takeOne_3 = smalest_value_and_index_list_sorted_takeOne._3\n\
    \            val smalest_value_and_index_list_sorted_takeOne_4 = smalest_value_and_index_list_sorted_takeOne._4\n\
    \            val smalest_value_and_index_list_sorted_takeOne_5 = smalest_value_and_index_list_sorted_takeOne._5\n\
    \            val smalest_value_and_index_list_sorted_takeOne_6 = smalest_value_and_index_list_sorted_takeOne._6\n\
    \            val smalest_value_and_index_list_sorted_takeOne_7 = smalest_value_and_index_list_sorted_takeOne._7\n\
    \            val smalest_value_and_index_list_sorted_takeOne_8 = smalest_value_and_index_list_sorted_takeOne._8\n\
    \            val smalest_value_and_index_list_sorted_takeOne_9 = smalest_value_and_index_list_sorted_takeOne._9\n\
    \            val smalest_value_and_index_list_sorted_takeOne_10 = smalest_value_and_index_list_sorted_takeOne._10\n\
    \            val smalest_value_and_index_list_sorted_takeOne_11 = smalest_value_and_index_list_sorted_takeOne._11\n\
    \            val smalest_value_and_index_list_sorted_takeOne_12 = smalest_value_and_index_list_sorted_takeOne._12\n\
    \            val smalest_value_and_index_list_sorted_takeOne_13 = smalest_value_and_index_list_sorted_takeOne._13\n\
    \            val smalest_value_and_index_list_sorted_takeOne_14 = smale", "  \
    \      val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x < y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue\
    \ = smallestEvenValue\n        val evensSorted = evens.sortWith((x, y) => x <\
    \ y)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven\n   \
    \     val smallestEvenIndex = smallestEvenIndex"]
stop_tokens:
- "\n    }\n"
