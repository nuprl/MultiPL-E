name: HumanEval_113_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of strings, where each string consists of only digits, return\
  \ a list.\n    // Each element i of the output should be \"the number of odd elements\
  \ in the\n    // string i of the input.\" where all the i's should be replaced by\
  \ the number\n    // of odd digits in the i'th string of the input.\n    def oddCount(lst\
  \ : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
  1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
  271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
  \    }\n\n}\n"
completions: ["        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x\
    \ => {\n            val digits = x.toInt\n            val odd = digits % 2\n \
    \           odds.add(odd)\n        })\n        odds.toList", "        val odd\
    \ = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdd = str.filter(_.isDigit).count(_ % 2 != 0)\n            odd +=\
    \ numOdd.toString\n            even += str.filter(_.isDigit).count(_ % 2 == 0).toString\n\
    \        }\n        odd.toList ++ even.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => s.toIntList.foreach(i => if (i % 2 == 1) odds += 1))\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt)\n        odds.toList",
  "        val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            for(d <- digits) {\n                val odd = digits.length - digits.length\
    \ % d\n                odds.add(odd)\n            }\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n\
    \            val numOdds = s.length - s.filter(_.isDigit).length\n           \
    \ odds.+=(numOdds)\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.add(numOdds)\n        })\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n  \
    \          val str = lst(i)\n            val digits = str.map(_.toInt)\n     \
    \       val odd = digits.count(_ % 2 == 1)\n            odds.add(odd)\n      \
    \  }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(x => x != '0').count(x => x != '1')\n           \
    \ odds.add(oddDigits)\n        }\n        odds.toList", "        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odd(j) += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odd(j) += 1\n                 \
    \   case _ => odd(j) += 1\n                })\n        }\n        odd.toList",
  "        val odds = mutable.HashSet[Int]()\n        val evens = mutable.HashSet[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => evens += digits\n                case _ =>\
    \ odds += digits\n            }\n        })\n        val oddsCount = odds.size\n\
    \        val evensCount = evens.size\n        val result = mutable.ArrayBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  val oddDigits = s.toInt\n            val evenDigits = oddDigits.filter(_ %\
    \ 2 == 0)\n            val oddCount = oddDigits.filter(_ % 2 == 1).size\n    \
    \        val evenCount = evenDigits.size\n            val resultString = s\"The\
    \ number of odd digits in the $i string of the input is $oddCount\"\n        \
    \    val evenString = s\"The number of even digits in the $i string of the input\
    \ is $evenCount\"\n            result += s\"$resultString $evenString\\n\"\n \
    \       }\n        result.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += 1 // count odd digits\n                }\n  \
    \          }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(c => c >= '0' && c <= '9')\n            odds\
    \ += numOddDigits\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '1')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odds += (oddDigits\
    \ % 2)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(c => c.isDigit)\n            odds += numOddDigits\n\
    \        }\n        odds.toList", "        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val count = str.count(c => c != '0')\n            odd += count\n        }\n\
    \        odd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n    \
    \    for (i <- 0 until lst.size) {\n            val str = lst(i)\n           \
    \ val numOddDigits = str.count(c => c.isDigit)\n            odds += numOddDigits\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c.isDigit)\n            odds.+=((numOdds %\
    \ 2) + 1)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => odds += 0\n                case 1 => odds\
    \ += 0\n                case _ => odds += digits\n            }\n        })\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ lst.foreach(s => {\n            val digits = s.toInt\n            val odd =\
    \ digits % 2 != 0\n            if (odd) odds.add(digits)\n        })\n       \
    \ odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s\
    \ => {\n            val digits = s.toInt\n            odds += digits\n       \
    \ })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length\
    \ filter (x => x % 2 != 0)\n            odds.add(odd.length)\n        }\n    \
    \    odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n       \
    \ lst.foreach(s => {\n            val digits = s.toInt\n            val odd =\
    \ digits % 2\n            odds.add(odd)\n        })\n        odds.toList", " \
    \       val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            val s = lst(i)\n            val odd = s.filter(x => x != '0').count(x\
    \ => x != '1')\n            odds.add(odd)\n        }\n        odds.toList", " \
    \       val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for(i <- 0 until lst.size) {\n            val str = lst(i)\n           \
    \ for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n \
    \                   case '0' | '1' => odds += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ else => odds += 0\n                }\n            }\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ => odds += 0\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 1\n                    case _ => odds += 0\n              \
    \  })\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for (i <- 0 until lst.size) {\n            val str = lst(i)\n          \
    \  val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOddDigits = str.count(_\
    \ == '0')\n            odds += numOddDigits\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n\
    \            val s = lst(i)\n            val odd = s.filter(c => c != '0').length\n\
    \            odds.add(odd)\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n        \
    \    val str = lst(i)\n            for(j <- 0 until str.length) {\n          \
    \      if(str.charAt(j) match {\n                    case '0' | '1' => odds +=\
    \ 1 // odd digit\n                    case '0' => odds += 0 // even digit\n  \
    \                  case '1' => odds += 0 // even digit\n                    case\
    \ '0' | '1' => odds += 1 // odd digit\n                    case '0' => odds +=\
    \ 0 // even digit\n                    case '1' => odds += 0 // even digit\n \
    \                   case '0' | '1' => odds += 1 // odd digit\n               \
    \     case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '0' | '1' => odds += 1 // odd digit\n\
    \                    case '0' => odds += 0 // even digit\n                   \
    \ case '1' => odds += 0 // even digit\n                    case '0' | '1' => odds\
    \ += 1 // odd digit\n                    case '0' => odds += 0 // even digit\n\
    \                    case '1' => odds += 0 // even digit\n                   \
    \ case '0' | '1' => odds += 1 // odd digit\n                    case '0' => odds\
    \ += 0 // even digit\n                    case '1' => odds += 0 // even digit\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '0' | '1' => odds += 1 // odd digit\n\
    \                    case '0' => odds += 0 // even digit\n                   \
    \ case '1' => odds += 0 // even digit\n                    case '0' | '1' => odds\
    \ += 1 // odd digit\n                    case '0' => odds += 0 // even digit\n\
    \                    case '1' => odds += 0 // even digit\n                   \
    \ case '0' | '1' => odds += 1 // odd digit\n                    case '0' => odds\
    \ += 0 // even digit\n                    case '1' => odds += 0 // even digit\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '0' | '1' => odds += 1 // odd digit\n\
    \                    case '0' => odds += 0 // even digit\n                   \
    \ case '1' => odds += 0 // even digit\n                    case '0' | '1' => odds\
    \ += 1 // odd digit\n                    case '0' => odds += 0 // even digit\n\
    \                    case '1' => odds += 0 // ", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for(i <- 0 until lst.length){\n            val str = lst(i)\n          \
    \  for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }\n                else if(str.charAt(j)\
    \ == '1'){\n                    odds += 1\n                }\n            }\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val oddDigits = digits.filter(_.isOdd)\n\
    \            odds.add(oddDigits.length)\n        }\n        odds.toList", "  \
    \      val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds += 1 \n  \
    \              }\n            }\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.length)\n\
    \            odds += lst(i).filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.length)\n\
    \            odds += lst(i).count(x => x % 2 != 0)\n        odds.toList", "  \
    \      val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += str.charAt(j)\n\
    \                }\n            }\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val odd = digits.length filter (x => x % 2 != 0)\n            odds.add(odd.length)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOddDigits = str.count(_ == '1')\n            odds += numOddDigits\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(numOdds)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) == '1') odds\
    \ += (str.length - (j + 1))\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.forall(_.isDigit))\
    \ odds += x.toInt)\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(numOddDigits)\n        }\n        odds.toList", "      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length){\n   \
    \             if(str.charAt(j) == '0'){\n                    odds += 0\n     \
    \           }else{\n                    odds += (str.charAt(j).toInt - '0').abs()\n\
    \                }\n            }\n        }\n        odds.toList", "        val\
    \ odds = mutable.HashSet[Int]()\n        lst.foreach(x => {\n            val digits\
    \ = x.toInt\n            for(i <- 0 until digits) {\n                val digit\
    \ = digits % 10\n                if(digit % 2 == 1) odds += digit\n          \
    \  }\n        })\n        odds.toList.map(x => x.toString).reverse", "       \
    \ val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c.isDigit)\n\
    \            odds += numOdds\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.length)\n   \
    \         if (lst(i).forall(_.isDigit))\n                odds += lst(i).count(_\
    \ == '1')\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds += numOddDigits\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length.toDouble\
    \ / 2\n            odds.add(odd)\n        }\n        odds.toList", "        val\
    \ odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdd = str.count(c => c % 2 == 1)\n            if(numOdd > 0) {\n \
    \               odd += numOdd\n            } else {\n                even += numOdd\n\
    \            }\n        }\n        odd.toList ++ even.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            val oddDigits = str.filter(x => x != '0').count(x\
    \ => x != '1')\n            odds.add(oddDigits)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val oddDigits = digits.filter(_.isOdd)\n            odds.add(oddDigits.size)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds.add(numOddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' | '1' | '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a'\
    \ | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds +=\
    \ 1\n                    case 'b' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' |\
    \ 'i' | 'o' | 'u' | 'i' => odds += 2\n                    case 'c' | 't' | 'e'\
    \ | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 3\n       \
    \             case 'd' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' |\
    \ 'u' | 'i' => odds += 4\n                    case 'e' | 't' | 'e' | 'o' | 'u'\
    \ | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 5\n                   \
    \ case 'f' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' =>\
    \ odds += 6\n                    case 'g' | 't' | 'e' | 'o' | 'u' | 'i' | 'o'\
    \ | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 7\n                    case 'h' | 't'\
    \ | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 8\n \
    \                   case 'i' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' |\
    \ 'o' | 'u", "        val odds = mutable.ListBuffer[Int]()\n        for (i <-\
    \ 0 until lst.size) {\n            val str = lst(i)\n            val oddDigits\
    \ = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for(i <- 0 until lst.length) odds += lst(i).count(_ == '1')\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val s = lst(i)\n            for(j <- 0 until s.length) if(s(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds -= 1\n                case _ => ()\n            })\n        }\n       \
    \ odds.toList", "        val odds = mutable.HashSet[Int]()\n        for(i <- 0\
    \ until lst.size) {\n            val str = lst(i)\n            for(j <- 0 until\
    \ str.length) {\n                if(str.charAt(j) match {\n                  \
    \  case '0' | '1' => odds += 1 // count odd digits\n                    case '0'\
    \ => odds += 0 // count even digits\n                    case '1' => odds += 0\
    \ // count even digits\n                    case '2' | '3' | '4' | '5' | '6' |\
    \ '7' | '8' | '9' => odds += 0 // count even digits\n                    case\
    \ 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'\
    \ | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\
    \ => odds += 0 // count even digits\n                    case 'A' | 'B' | 'C'\
    \ | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P'\
    \ | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 0 //\
    \ count even digits\n                    case '*' => odds += 0 // count even digits\n\
    \                    case '-' => odds += 0 // count even digits\n            \
    \        case '/' => odds += 0 // count even digits\n                    case\
    \ '%' => odds += 0 // count even digits\n                    case '+' => odds\
    \ += 0 // count even digits\n                    case '=' => odds += 0 // count\
    \ even digits\n                    case '<' => odds += 0 // count even digits\n\
    \                    case '>' => odds += 0 // count even digits\n            \
    \        case '!' => odds += 0 // count even digits\n                    case\
    \ '?' => odds += 0 // count even digits\n                    case '@' => odds\
    \ += 0 // count even digits\n                    case '#' => odds += 0 // count\
    \ even digits\n                    case '$' => odds += 0 // count even digits\n\
    \                    case '%' => odds += 0 // count even digits\n            \
    \        case '&' => odds += 0 // count even digits\n                    case\
    \ '|' => odds += 0 // count even digits\n                    case '~' => odds\
    \ += 0 // count even digits\n                    case '*' => odds += 0 // count\
    \ even digits\n                    case '-' => odds += 0 // count even digits\n\
    \                    case '/' => odds += 0 // count even digits\n            \
    \        case '%' => odds += 0 // count even digits\n                    case\
    \ '+' => odds += 0 // count even digits\n                    case '=' => odds\
    \ += 0 // count even digits\n", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ case _ => odds += 1\n                }\n            }\n        }\n        odds.toList",
  "        val odd = mutable.ListBuffer.empty[String]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOddDigits = str.count(_\
    \ == '0')\n            odd.append((numOddDigits.toDouble / lst.size).toString)\n\
    \        }\n        odd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) odds += digits(i)\n        })\n        odds.toList", "  \
    \      val odds = mutable.HashSet[Int]()\n        lst.foreach(x => if (x.forall(_.isDigit))\
    \ odds += x.toInt)\n        odds.toList.map(x => s\"${x} odd digits in ${lst(x)}\"\
    )", "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '0')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n \
    \       lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                if(digits % 2 == 1) {\n              \
    \      odds += digits\n                }\n            }\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n  \
    \          val s = lst(i)\n            val oddDigits = s.filter(_.isDigit).count(_\
    \ % 2 != 0)\n            odds.add(oddDigits)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'o' | 'n' | 's'\
    \ | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd'\
    \ => odds += 1\n                    case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd'\
    \ | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't'\
    \ | 'e' | 'o' | 'n' | 's' | 'd' => odds += 2\n                    case 'a' | 't'\
    \ | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e'\
    \ | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' => odds += 3\n \
    \                   case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' |\
    \ 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o'\
    \ | 'n' | 's' | 'd' => odds += 4\n                    case 'a' | 't' | 'e' | 'o'\
    \ | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | '",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.length)\n\
    \            if (lst(i).forall(_.isDigit))\n                odds += lst(i).filter(_.isDigit).length\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     lst.foreach(x => if (x.toString.toInt == 0) odds += 0 else {\n         \
    \   val digits = x.toString.toInt\n            val odd = digits % 2\n        \
    \    odds += odd\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=(odd)\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '0')\n\
    \            odds += numOdds\n        }\n        odds.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odd += x.toString.toInt)\n        odd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '1')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt)\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.length)\n\
    \            if (lst(i).forall(_.isDigit))\n                odds += lst(i).filter(_.isDigit).length\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n  \
    \      odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n     \
    \   for(i <- 0 until lst.size) {\n            val str = lst(i)\n            for(j\
    \ <- 0 until str.length) {\n                if(str.charAt(j) == '1') {\n     \
    \               odds += (str.length - (j + 1))\n                }\n          \
    \  }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => ", " \
    \       val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.length)\
    \ {\n            val str = lst(i)\n            val numOdds = str.filter(_.isDigit).length\n\
    \            odds += numOdds\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.length) odds +=\
    \ lst(i).count(_ == '1')\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.matches(\"\\\\d+\")) odds += x.toInt)\n      \
    \  odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n        for\
    \ (i <- 0 until lst.size) {\n            val str = lst(i)\n            val numOdds\
    \ = str.count(c => c.isDigit)\n            odds.add(numOdds)\n        }\n    \
    \    odds.toList", "        val odds = mutable.ListBuffer[Int]()\n        lst.foreach(s\
    \ => {\n            val digits = s.toInt\n            digits match {\n       \
    \         case 0 => odds += 0\n                case _ => odds += digits\n    \
    \        }\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for (i <- 0 until lst.size) {\n            val str = lst(i)\n          \
    \  val digits = str.filter(_.isDigit)\n            val odd = digits.length filter\
    \ (_ % 2 == 1)\n            odds.add(odd.length)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '0')\n\
    \            odds.+=((numOdds % 2))\n        }\n        odds.toList", "      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val odd = digits.length filter (x => x % 2 != 0)\n            odds.add(odd.length)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.add(numOdds)\n        })\n        odds.toList.map(i => s\"${i}\
    \ odd digits in ${lst(0)}\")", "        val odds = mutable.HashSet[Int]()\n  \
    \      lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                if(digits % 2 == 1) {\n              \
    \      odds.add(digits)\n                }\n            }\n        })\n      \
    \  odds.toList.map(x => x.toString).mkString(\",\")", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.map(_.toInt)\n            for(j <- 0 until digits.size)\
    \ {\n                val digit = digits(j)\n                if(digit % 2 == 1)\
    \ {\n                    odds += digit\n                }\n            }\n   \
    \     }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_ match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=(numOdds)\n        })\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            for(j <- 0 until str.length) {\n     \
    \           if(str.charAt(j) match {\n                    case '0' => odds +=\
    \ 0\n                    case '1' => odds += 1\n                    case '2' =>\
    \ odds += 2\n                    case '3' => odds += 3\n                    case\
    \ '4' => odds += 4\n                    case '5' => odds += 5\n              \
    \      case '6' => odds += 6\n                    case '7' => odds += 7\n    \
    \                case '8' => odds += 8\n                    case '9' => odds +=\
    \ 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' => odds += 0\n \
    \                   case '1' => odds += 1\n                    case '2' => odds\
    \ += 2\n                    case '3' => odds += 3\n                    case '4'\
    \ => odds += 4\n                    case '5' => odds += 5\n                  \
    \  case '6' => odds += 6\n                    case '7' => odds += 7\n        \
    \            case '8' => odds += 8\n                    case '9' => odds += 9\n\
    \                    case 'a' => odds += 10\n                    case 'b' => odds\
    \ += 11\n                    case 'c' => odds += 12\n                    case\
    \ 'd' => odds += 13\n                    case 'e' => ", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt.isOdd) odds += x.toString.toInt\
    \ else ())\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+= odd\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n\
    \            val digits = s.toInt\n            val odd = digits % 2\n        \
    \    odds.add(odd)\n        }\n        odds.toList", "        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdd = str.count(c => c %\
    \ 2 == 1)\n            odd += numOdd\n            even += str.count(c => c % 2\
    \ == 0)\n        }\n        odd.toList ++ even.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case _ => break\n\
    \                })\n        }\n        odds.toList", "        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) odd += (str.charAt(j) match {\n            \
    \    case '1' => 1\n                case '0' => 0\n                case _ => -1\n\
    \            })\n        }\n        odd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.filter(_.isDigit).filter(_.isOdd).length\n            odds.add(numOdds)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odd = mutable.ListBuffer.empty[Int]\n    \
    \    lst.foreach(x => if (x.toString.toInt == 0) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odd += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x\
    \ => ", "        val odds = mutable.ListBuffer[Int]()\n        lst.foreach(s =>\
    \ {\n            val digits = s.toInt\n            digits match {\n          \
    \      case 0 => ()\n                case _ => {\n                    for (i <-\
    \ 0 until digits) odds += digits(i)\n                }\n            }\n      \
    \  })\n        lst.map(s => s\"${s.length} odd digits in $s\")", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n\
    \            val s = lst(i)\n            val odd = s.filter(x => x != '0').count(x\
    \ => x != '1')\n            odds.+= odd\n        }\n        odds.toList", "  \
    \      val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ => odd(j) += 1\n                    case '2' | '3' | '4' | '5' | '6' | '7' |\
    \ '8' | '9' => odd(j) += 1\n                    case 'a' | 'b' | 'c' | 'd' | 'e'\
    \ | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'\
    \ | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odd(j) += 1\n           \
    \         case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'\
    \ | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'\
    \ | 'Y' | 'Z' => odd(j) += 1\n                    case '!' | '@' | '#' | '$' |\
    \ '%' | '^' | '&' | '*' | '(' | ')' | '-' | '+' | '=' | '/' | ':' | ';' | '<'\
    \ | '>' | '?' | '[' | ']' | '\\\\' | ':' | ',' | '.' | '|' | '\\n' | '\\r' | '\\\
    t' => {\n                        odd(j) += 1\n                    }\n        \
    \            else => odd(j) += 1\n                }\n            }\n        }\n\
    \        odd.toList", "        val odds = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until lst.size) {\n            val str = lst(i)\n            val numOddDigits\
    \ = str.filter(_.isDigit).length\n            odds += numOddDigits\n        }\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     lst.foreach(x => {\n            val digits = x.toInt\n            val odd\
    \ = digits % 2\n            odds.+=( odd )\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val oddDigits = digits.filter(d => d % 2 != 0)\n            odds.add(oddDigits.size)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.count(_ == '1')\n            odds += numOdds\n        }\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ for (i <- 0 until lst.size) {\n            val str = lst(i)\n            val\
    \ numOdds = str.count(c => c.isDigit)\n            odds += numOdds\n        }\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ for(i <- 0 until lst.size) {\n            val str = lst(i)\n            for(j\
    \ <- 0 until str.length) {\n                if(str.charAt(j) match {\n       \
    \             case '0' | '1' => odds += 1\n                    case '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    else =>\
    \ odds += 0\n                }\n            }\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ => odds += 0\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 1\n                    else => odds += 0\n                })\n\
    \        }\n        odds.toList", "        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val count = str.count(_ == '1')\n            odd.add(s\"$count odd digits\
    \ in $str\")\n        }\n        odd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer[Int]()\n        lst.foreach(s => {\n    \
    \        val digits = s.toInt\n            odds += digits\n        })\n      \
    \  odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s\
    \ => {\n            val oddDigits = s.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }\n                else if(str.charAt(j)\
    \ == '1'){\n                    odds += 1\n                }\n            }\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     lst.foreach(s => {\n            val digits = s.toInt\n            val odd\
    \ = digits % 2 != 0\n            odds.+=(odd)\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length){\n   \
    \             if(str.charAt(j) == '0'){\n                    odds += 0\n     \
    \           }\n                else{\n                    odds += str.charAt(j)\
    \ - '0'\n                }\n            }\n        }\n        odds.toList", " \
    \       val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += str.charAt(j)\n\
    \                }\n            }\n        }\n        odds.toList", "        val\
    \ odds = mutable.HashSet[Int]()\n        for(i <- 0 until lst.size) {\n      \
    \      val str = lst(i)\n            for(j <- 0 until str.length) {\n        \
    \        val digit = str.charAt(j)\n                if(digit == '1') {\n     \
    \               odds.add(1)\n                }\n                else {\n     \
    \               odds.add(0)\n                }\n            }\n        }\n   \
    \     odds.toList.map(i => lst(i))", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=numOdds\n        })\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n          \
    \  case x if x.forall(_.isDigit) => odds += x.toInt\n            case _ => ()\n\
    \        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds += numOddDigits\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=(numOdds)\n        })\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n            val\
    \ digits = x.toInt\n            for(i <- 0 until digits) odds += digits(i)\n \
    \       })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.filter(_.isDigit)\n            for(d <- digits) {\n    \
    \            val odd = digits.length - str.count(_ == d)\n                odds.add(odd)\n\
    \            }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n  \
    \      odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n     \
    \   for (i <- 0 until lst.length) {\n            val str = lst(i)\n          \
    \  val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x != '0').count(x => x != '1')\n       \
    \     odds.add(oddDigits)\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.length) odds +=\
    \ lst(i).count(_ == '1')\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt == x) odds += 1 )\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.length)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c\
    \ % 2 != 0)\n            odds.add(numOdds)\n        }\n        odds.toList", " \
    \       val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ => odds += 0\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 1\n                    else => odds += 0\n                }\n\
    \            }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c.isDigit).filter(_ % 2 == 1).length\n    \
    \        odds.add(numOdds)\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.HashSet[Int]()\n        lst.foreach(s => {\n            val digits\
    \ = s.toInt\n            val odd = digits % 2 != 0\n            if (odd) odds.add(digits)\n\
    \        })\n        odds.toList.map(i => s\"${i} odd digits in ${lst(i)}\")",
  "        val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.length){\n\
    \            val s = lst(i)\n            for(j <- 0 until s.length){\n       \
    \         if(s(j).isDigit){\n                    odds += s(j).asDigit.toInt\n\
    \                }\n            }\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_ % 2 !=\
    \ 0).length\n            odds.add(oddDigits)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c\
    \ % 2 == 1)\n            odds.add(numOdds)\n        }\n        odds.toList", " \
    \       val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n\
    \            val digits = s.toInt\n            val odd = digits % 2\n        \
    \    odds.add(odd)\n        })\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }else{\n                    odds\
    \ += 1\n                }\n            }\n        }\n        odds.toList", " \
    \       val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').filter(x => x != '1')\n            odds.add(oddDigits.length)\n  \
    \      }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length)\n                if(s(j) match {\n             \
    \       case '0' | '1' => odds += 0\n                    case '2' | '3' | '4'\
    \ | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    case _ => odds\
    \ += 1\n                })\n        }\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.HashSet[Int]()\n        lst.foreach(s => {\n            val digits\
    \ = s.toInt\n            for(i <- 0 until digits) {\n                odds += digits(i)\n\
    \            }\n        })\n        val res = lst.map(s => s\"${s.toInt} ${odds.size}\"\
    )\n        res.toList", "        val odds = mutable.ListBuffer.empty[Int]\n  \
    \      lst.foreach(s => {\n            val digits = s.toInt\n            val odd\
    \ = digits % 2\n            odds.+=( odd )\n        })\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case _ => odds += 0\n                })\n        \
    \    }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '2' | '3' | '4' | '5' | '6' | '7'\
    \ | '8' | '9' => odds += 0 // even digit\n                    case 'a' | 'b' |\
    \ 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ 0 // even digit\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F'\
    \ | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S'\
    \ | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 0 // even digit\n     \
    \               case '*' => odds += 0 // even digit\n                    case\
    \ '/' => odds += 0 // even digit\n                    case '-' => odds += 0 //\
    \ even digit\n                    case '+' => odds += 0 // even digit\n      \
    \              case '(' | ')' => odds += 0 // even digit\n                   \
    \ case '{' | '}' => odds += 0 // even digit\n                    case '[' | ']'\
    \ => odds += 0 // even digit\n                    case '<' | '>' => odds += 0\
    \ // even digit\n                    case '=' | '>=' | '<='| '!='| '==' | '!='\
    \ => odds += 0 // even digit\n                    case '|' => odds += 0 // even\
    \ digit\n                    case '?' => odds += 0 // even digit\n           \
    \         case '!' => odds += 0 // even digit\n                    case '%' =>\
    \ odds += 0 // even digit\n                    case '&' => odds += 0 // even digit\n\
    \                    case '^' => odds += 0 // even digit\n                   \
    \ case '~' => odds += 0 // even digit\n                    case '*' => odds +=\
    \ 0 // even digit\n                    case '/' => odds += 0 // even digit\n \
    \                   case '+' => odds += 0 // even digit\n                    case\
    \ '-' => odds += 0 // even digit\n                    case '*' => odds += 0 //\
    \ even digit\n                    case '/' => odds += 0 // even digit\n      \
    \              case '+' => odds += 0 // even digit\n                    case '-'\
    \ => odds += ", "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s\
    \ => {\n            val digits = s.toInt\n            digits match {\n       \
    \         case 0 => odds += 0\n                case _ => odds += digits\n    \
    \        }\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val c = str.charAt(j)\n \
    \               if(c == '1') {\n                    odds += 1 \n             \
    \   }\n            }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }else{\n                    odds\
    \ += (str.charAt(j).toInt.toDouble % 2).toInt\n                }\n           \
    \ }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odd = mutable.ListBuffer[Int]()\n        for(i\
    \ <- 0 until lst.size) {\n            val str = lst(i)\n            for(j <- 0\
    \ until str.length)\n                if(str.charAt(j) == '1') odd += 1 \n    \
    \    }\n        odd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                odds += digits(i) % 2 match {\n      \
    \              case 0 => 1\n                    case 1 => 0\n                \
    \    case _ => -1\n                }\n            }\n        })\n        lst.map(x\
    \ => x.toString + odds(x.toInt))", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(c => c.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '0')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += (str.length - j)\n                }\n       \
    \     }\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length) odds += lst(i).count(_ == '1')\n      \
    \  odds.toList", "        val odds = mutable.ListBuffer[Int]()\n        for(i\
    \ <- 0 until lst.size) {\n            val str = lst(i)\n            for(j <- 0\
    \ until str.length) {\n                if(str.charAt(j) match {\n            \
    \        case '0' | '1' => odds += 0\n                    case '2' | '3' | '4'\
    \ | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    case 'a' | 'b'\
    \ | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ 2\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' |\
    \ 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'\
    \ | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 3\n                    case '!' | '@'\
    \ | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '+' | '-' | '/' | ':' | '<'\
    \ | '>' | '?' | ';' | '{' | '|' | '\\\\' | '}' | ',' | '.' | '~' | ':' | ';' |\
    \ ':' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!'\
    \ | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.'\
    \ | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?'\
    \ | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.'\
    \ | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!'\
    \ | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.'\
    \ | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?'\
    \ | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.'\
    \ | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!'\
    \ | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.'\
    \ | '", "        val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val numOdds = str.filter(x\
    \ => x != '0').count(x => x % 2 != 0)\n            odds.add(numOdds)\n       \
    \ }\n        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n   \
    \     for(i <- 0 until lst.size) {\n            val s = lst(i)\n            for(j\
    \ <- 0 until s.length)\n                if(s(j) match {\n                    case\
    \ '0' | '1' => odds += 0\n                    case '2' | '3' | '4' | '5' | '6'\
    \ | '7' | '8' | '9' => odds += 1\n                    else => odds += 0\n    \
    \            })\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.filter(_.isDigit)\n            for(d <- digits) {\n    \
    \            odds += d.toInt\n            }\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n\
    \            val digits = x.toInt\n            val odd = digits % 2\n        \
    \    odds.add(odd)\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => s.toInts.foreach(i => if (i % 2 == 1) odds += 1))\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ lst.foreach(x => {\n            val digits = x.toInt\n            val odd =\
    \ digits % 2\n            odds.add(odd)\n        })\n        odds.toList", " \
    \       val odd = mutable.ListBuffer.empty[Int]\n        val even = mutable.ListBuffer.empty[Int]\n\
    \        val evenOdd = mutable.ListBuffer.empty[Int]\n        lst.foreach(x =>\
    \ {\n            val y = x.toInt\n            if (y % 2 == 0) {\n            \
    \    even += y\n            } else {\n                odd += y\n            }\n\
    \        })\n        evenOdd += even.sum\n        evenOdd += odd.sum\n       \
    \ evenOdd.toList", "        val odds = mutable.ListBuffer.empty[Int]\n       \
    \ for(i <- 0 until lst.size) {\n            val s = lst(i)\n            for(j\
    \ <- 0 until s.length)\n                if(s(j) match {\n                    case\
    \ '0' | '1' => odds += 0\n                    case '2' | '3' | '4' | '5' | '6'\
    \ | '7' | '8' | '9' => odds += 1\n                    else => odds += 0\n    \
    \            })\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            odds\
    \ += digits\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(_ % 2 != 0).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for(i <- 0 until lst.size) {\n            val str = lst(i)\n           \
    \ for(j <- 0 until str.length)\n                if(str.charAt(j) == '1') odds\
    \ += (str.length-j-1)\n        }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=( odd )\n        })\n        odds.toList",
  "        val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            if\
    \ (digits % 2 == 0) {\n                even += x\n            } else {\n     \
    \           odd += x\n            }\n        })\n        odd.toList ++ even.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n\
    \            val digits = s.toInt\n            val odd = digits % 2\n        \
    \    odds.+=(odd)\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds += numOdds\n        })\n        odds.toList", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n            val\
    \ digits = s.toInt\n            val odd = digits % 2\n            odds.+=(odd)\n\
    \        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer[Int]()\n       \
    \ for(i <- 0 until lst.size) {\n            val str = lst(i)\n            for(j\
    \ <- 0 until str.length)\n                if(str.charAt(j) match {\n         \
    \           case '0' | '1' => odds += 0\n                    case '2' | '3' |\
    \ '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    case 'a'\
    \ | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'\
    \ | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds\
    \ += 2\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H'\
    \ | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'\
    \ | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 3\n                    case '!' | '@'\
    \ | '#' | '%' | '^' | '&' | '*' | '+' | '?' | '/' | ':' | '|' | '<' | '>' | '?'\
    \ | '.' | '-' | '+' | '*' | '/' | '+' | '*' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+", " \
    \       val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 10\n                    case\
    \ 'b' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds\
    \ += 11\n                    case 'c' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' => odds += 12\n                    case 'd' | 't' |\
    \ 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 13\n  \
    \                  case 'e' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' |\
    \ 'i' | 'o' | 'u' => odds += 14\n                    case 'f' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 15\n            \
    \        case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds\
    \ += 0\n                    case 'a' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' => odds += 10\n                    case 'b' | 't' |\
    \ 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | '", "        val odds\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            val digits = str.filter(_.isDigit)\n \
    \           val oddDigits = digits.filter(d => d % 2 == 1)\n            odds.add(oddDigits.length)\n\
    \        }\n        odds.toList"]
stop_tokens:
- "\n    }\n"
