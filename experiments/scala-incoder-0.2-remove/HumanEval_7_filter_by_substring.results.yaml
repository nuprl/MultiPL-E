language: scala
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
