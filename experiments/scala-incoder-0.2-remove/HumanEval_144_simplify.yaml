name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    def simplify(x\
  \ : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
