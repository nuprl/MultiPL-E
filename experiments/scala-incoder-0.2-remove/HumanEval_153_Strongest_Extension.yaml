name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    def\
  \ StrongestExtension(class_name : String, extensions : List[String]) : String =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extensions_map = extensions.map(x => x.toUpperCase.charAt(0)\
    \ - x.toLowerCase.charAt(0)).toMap\n        val strength = extensions_map.values.max\n\
    \        val extensions_sorted = extensions_map.toSeq.sortWith(_ > _)\n      \
    \  val extensions_sorted = extensions_sorted.take(strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => class_name + x)\n        extensions_sorted.mkString(\"\
    \")", "        val extensions_count = extensions.map(_.length).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n        val\
    \ strength = extensions_count_upper - extensions_count_lower\n        val strength_str\
    \ = if (strength == 0) \"0\" else strength.toString\n        val extensions_count_str\
    \ = if (extensions_count == 0) \"0\" else extensions_count.toString\n        val\
    \ extensions_count_upperStr = if (extensions_count_upper == 0) \"0\" else extensions_count_upper.toString\n\
    \        val extensions_count_lowerStr = if (extensions_count_lower == 0) \"0\"\
    \ else extensions_count_lower.toString\n        val class_name_str = if (class_name\
    \ == \"\") \"\" else class_name\n        val extensions_str = if (extensions ==\
    \ Nil) \"\" else extensions.mkString(\",\")\n        val strength_str = if (strength\
    \ == 0) \"0\" else strength_str\n        val extensions_count_str = if (extensions_count\
    \ == 0) \"0\" else extensions_count_str\n        val extensions_count_upperStr\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upperStr\n  \
    \      val extensions_count_lowerStr = if (extensions_count_lower == 0) \"0\"\
    \ else extensions_count_lowerStr\n        val class_name_str = if (class_name\
    \ == \"\") \"\" else class_name_str\n        val extensions_str = if (extensions\
    \ == Nil) \"\" else extensions_str\n        val strength_str = if (strength ==\
    \ 0) \"0\" else strength_str\n        val extensions_count_str = if (extensions_count\
    \ == 0) \"0\" else extensions_count_str\n        val extensions_count_upperStr\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upperStr\n  \
    \      val extensions_count_lowerStr = if (extensions_count_lower == 0) \"0\"\
    \ else extensions_count_lowerStr\n        val class_name_str = if (class_name\
    \ == \"\") \"\" else class_name_str\n        val extensions_str = if (extensions\
    \ == Nil) \"\" else extensions_str\n        val strength_str = if (strength ==\
    \ 0) \"0\" else strength_str\n        val extensions_count_str = if (extensions_count\
    \ == 0) \"0\" else extensions_count_str\n        val extensions_count_upperStr\
    \ = if (extensions_count_upper == 0) \"0\" else extensions_count_upperStr\n  \
    \      val extensions_count_lowerStr = if (extensions_count_lower == 0) \"0\"\
    \ else extensions_count_lowerStr\n        val class_name_str = if (class_name\
    \ == \"\") \"\" else class_name_str\n        val extensions_str = if (extensions\
    \ == Nil) \"\" else extensions_str", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map(e._1)\n            val m = extensions_map(e._2)\n\
    \            val strength = c.length - m.length\n            if (strength > s)\
    \ s \n            else strength\n        }\n        val class_name_with_strength\
    \ = class_name_map ++ Map((class_name, strength))\n        val strongest_extension\
    \ = class_name_with_strength.maxBy(_._2)._1\n        val strongest_extension_strength\
    \ = class_name_with_strength.maxBy(_._2)._2\n        val strongest_extension_strength_str\
    \ = strongest_extension_strength.toString\n        val strongest_extension_strength_str_with_extension\
    \ = strongest_extension_strength_str + strongest_extension\n        strongest_extension_strength_str_with_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (acc, x) => acc + (x._2 -\
    \ x._1) }\n        val extension_strength = extensions_map.foldLeft(0) { (acc,\
    \ x) => acc + (x._2 - x._1) }\n        if (extension_strength > strength) class_name_map.getOrElse(class_name,\
    \ \"\") \n        else extensions_map.getOrElse(extensions_map.keys.toList.sortBy(x\
    \ => x), \"\")", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        extensions_sorted.head", "  \
    \      val extensions_count = extensions.length\n        val extensions_count_map\
    \ = extensions.groupBy(x => x.toUpperCase).mapValues(_.length)\n        val extensions_count_map_sorted\
    \ = extensions_count_map.toSeq.sortBy(_._1).reverse\n        val extensions_count_map_sorted_first\
    \ = extensions_count_map_sorted.head\n        val extensions_count_map_sorted_first_key\
    \ = extensions_count_map_sorted.keys.toSeq.sortBy(_._1).head\n        val extensions_count_map_sorted_first_value\
    \ = extensions_count_map_sorted.values.toSeq.sortBy(_._1).head\n        val extensions_count_map_sorted_first_key_value\
    \ = extensions_count_map_sorted.mapValues(_._2)\n        val extensions_count_map_sorted_first_key_value_sorted\
    \ = extensions_count_map_sorted_first_key_value.sortBy(_._1).reverse\n       \
    \ val extensions_count_map_sorted_first_key_value_sorted_first = extensions_count_map_sorted_first_key_value_sorted.head\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key = extensions_count_map_sorted_first_key_value_sorted.keys.toSeq.sortBy(_._1).head\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_value =\
    \ extensions_count_map_sorted_first_key_value_sorted.values.toSeq.sortBy(_._1).head\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key_value\
    \ = extensions_count_map_sorted_first_key_value_sorted.mapValues(_._2)\n     \
    \   val extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted\
    \ = extensions_count_map_sorted_first_key_value_sorted_first_key_value.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted_first\
    \ = extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted.head\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted_first_key\
    \ = extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted.keys.toSeq.sortBy(_._1).head\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted_first_value\
    \ = extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted.values.toSeq.sortBy(_._1).head\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted_first_key_value\
    \ = extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted.mapValues(_._2)\n\
    \        val extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted_first_key_value_sorted\
    \ = extensions_count_map_sorted_first_key_value_sorted_first_key_value_sorted_first_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (acc, x) => acc + (x._2 -\
    \ x._1) }\n        val strongest_extension = extensions_map.find(x => x._2 ==\
    \ strength)._1\n        class_name_map.find(x => x._2 == strength)._1 + \".\"\
    \ + strongest_extension", "        val extensions_count = extensions.map(x =>\
    \ x.toUpperCase).distinct.length\n        val class_name_count = class_name.map(x\
    \ => x.toUpperCase).distinct.length\n        val strength = extensions_count -\
    \ class_name_count\n        if (strength > 0) {\n            val extension = extensions.filter(x\
    \ => x.toUpperCase.contains(class_name.substring(class_name_count)))\n       \
    \     if (extension.length > 0) {\n                val extension_strength = extension.map(x\
    \ => x.toUpperCase.indexOf(class_name.substring(class_name_count)).asInstanceOf[Int]).sum\n\
    \                if (extension_strength > 0) {\n                    class_name.substring(class_name_count)\
    \ + extension.filter(x => x.toUpperCase.contains(class_name.substring(class_name_count)))(0).toUpperCase\n\
    \                } else {\n                    class_name.substring(class_name_count)\
    \ + extension.filter(x => x.toUpperCase.contains(class_name.substring(class_name_count)))(0).toUpperCase\n\
    \                }\n            } else {\n                class_name.substring(class_name_count)\
    \ + extensions.filter(x => x.toUpperCase.contains(class_name.substring(class_name_count)))(0).toUpperCase\n\
    \            }\n        } else {\n            class_name.substring(class_name_count)\
    \ + extensions.filter(x => x.toUpperCase.contains(class_name.substring(class_name_count)))(0).toUpperCase\n\
    \        }", "        val extensions_count = extensions.map(x => x.length).sum\n\
    \        val extensions_count_upper = extensions.map(x => x.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(x => x.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"No extensions\" else (strength *\
    \ 100).toString + \"%\"\n        val extensions_str = extensions.map(x => x.toUpperCase).mkString(\"\
    ,\")\n        val extensions_str_lower = extensions.map(x => x.toLowerCase).mkString(\"\
    ,\")\n        val extensions_str = if (extensions_count == 0) \"No extensions\"\
    \ else extensions_str\n        val extensions_str = if (extensions_count_upper\
    \ == 0) \"No extensions\" else extensions_str\n        val extensions_str = if\
    \ (extensions_count_lower == 0) \"No extensions\" else extensions_str\n      \
    \  val extensions_str = if (extensions_count_upper == 0) \"No extensions\" else\
    \ extensions_str\n        val extensions_str = if (extensions_count_lower == 0)\
    \ \"No extensions\" else extensions_str\n        val extensions_str = if (extensions_count_upper\
    \ == 0) \"No extensions\" else extensions_str\n        val extensions_str = if\
    \ (extensions_count_lower == 0) \"No extensions\" else extensions_str\n      \
    \  val extensions_str = if (extensions_count_upper == 0) \"No extensions\" else\
    \ extensions_str\n        val extensions_str = if (extensions_count_lower == 0)\
    \ \"No extensions\" else extensions_str\n        val extensions_str = if (extensions_count_upper\
    \ == 0) \"No extensions\" else extensions_str\n        val extensions_str = if\
    \ (extensions_count_lower == 0) \"No extensions\" else extensions_str\n      \
    \  val extensions_str = if (extensions_count_upper == 0) \"No extensions\" else\
    \ extensions_str\n        val extensions_str = if (extensions_count_lower == 0)\
    \ \"No extensions\" else extensions_str\n        val extensions_str = if (extensions_count_upper\
    \ == 0) \"No extensions\" else extensions_str\n        val extensions_str = if\
    \ (extensions_count_lower == 0) \"No extensions\" else extensions_str\n      \
    \  val extensions_str = if (extensions_count_upper == 0) \"No extensions\" else\
    \ extensions_str\n        val extensions_str = if (extensions_count_lower == 0)\
    \ \"No extensions\" else extensions_str\n        val extensions_str = if (extensions_count_upper\
    \ == 0) \"No extensions\" else extensions_str\n        val extensions_str = if\
    \ (extensions_count_lower == 0) \"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_low",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a')) \n        val strength = extensions_map.reduce((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_map.sortWith((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_sorted.takeWhile(e\
    \ => e != -1)\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e.toUpperCase.takeWhile(_ == 'A') - e.toUpperCase.takeWhile(_ == 'a'))\n \
    \       extensions_sorted.reduce((a, b) => if (a > b) a else b).mkString(\".\"\
    ) + extensions_sorted.last", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted = extensions_count_sorted.sort\n        val\
    \ extensions_count_sorted = extensions_count_sorted.reverse\n        val extensions_count_sorted\
    \ = extensions_count_sorted.takeWhile(_ < strength)\n        val extensions_count_sorted\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted = extensions_count_sorted.takeWhile(_\
    \ < strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_", "        val extensions_map =\
    \ extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n      \
    \  val strength = extensions_map.getOrElse(class_name, 0)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_first = extensions_sorted.head\n\
    \        val extension_last = extensions_sorted.last\n        val extension_strength\
    \ = extensions_map.getOrElse(extension_first, 0)\n        val extension_strength_fraction\
    \ = extension_strength.toDouble / extension_strength_fraction\n        val extension_strength_fraction\
    \ = extension_strength_fraction.toInt\n        val extension_strength_fraction\
    \ = extension_strength_fraction.toString.substring(extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength_fraction.substring(0, extension_strength_fraction.length\
    \ - 1)\n        val extension_strength_fraction = extension_strength_fraction.substring(0,\
    \ extension_strength_fraction.length - 1)\n        val extension_strength_fraction\
    \ = extension_strength", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n        val max_strength = extensions_map.max\n\
    \        val max_extension = extensions_map.find(e => e == max_strength)\n   \
    \     val class_name = class_name.toUpperCase\n        val extension_name = max_extension.getOrElse(\"\
    No extension\")\n        s\"$class_name.$extension_name\"", "        var strongest\
    \ = \"\"\n        var strength = -1\n        extensions.foreach(e => {\n     \
    \       val c = e.toUpperCase\n            val l = e.toLowerCase\n           \
    \ val cap = c.length\n            val sm = l.length\n            val diff = cap\
    \ - sm\n            if (diff > strength) {\n                strongest = e\n  \
    \              strength = diff\n            }\n        })\n        return class_name\
    \ + \".\" + strongest", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0) { (s,\
    \ x) =>\n            val class_name_map_x = class_name_map.getOrElse(x, x)\n \
    \           val class_name_map_x_upper = class_name_map_x.toUpperCase\n      \
    \      val class_name_map_x_lower = class_name_map_x.toLowerCase\n           \
    \ val class_name_map_x_upper_sm = class_name_map_x_upper.size - class_name_map_x_lower.size\n\
    \            val class_name_map_x_lower_sm = class_name_map_x_lower.size - class_name_map_x_upper.size\n\
    \            val class_name_map_x_upper_cap = class_name_map_x_upper.size - class_name_map_x_upper_sm\n\
    \            val class_name_map_x_lower_cap = class_name_map_x_lower.size - class_name_map_x_lower_sm\n\
    \            val strength_x_upper = if (class_name_map_x_upper_cap > 0) class_name_map_x_upper_cap\
    \ else 0\n            val strength_x_lower = if (class_name_map_x_lower_cap >\
    \ 0) class_name_map_x_lower_cap else 0\n            val strength_x_upper_sm =\
    \ if (class_name_map_x_upper_sm > 0) class_name_map_x_upper_sm else 0\n      \
    \      val strength_x_lower_sm = if (class_name_map_x_lower_sm > 0) class_name_map_x_lower_sm\
    \ else 0\n            s + strength_x_upper + strength_x_lower + strength_x_upper_sm\
    \ + strength_x_lower_sm\n        }\n        val class_name_map_upper = class_name_map.toMap.toList\n\
    \        val class_name_map_lower = class_name_map.toList.reverse\n        val\
    \ class_name_map_upper_sm = class_name_map_upper.size - class_name_map_lower.size\n\
    \        val class_name_map_lower_sm = class_name_map_lower.size - class_name_map_upper.size\n\
    \        val class_name_map_upper_cap = class_name_map_upper.size - class_name_map_upper_sm\n\
    \        val class_name_map_lower_cap = class_name_map_lower.size - class_name_map_lower_sm\n\
    \        val strength_upper = if (class_name_map_upper_cap > 0) class_name_map_upper_cap\
    \ else 0\n        val strength_lower = if (class_name_map_lower_cap > 0) class_name_map_lower_cap\
    \ else 0\n        val strength_upper_sm = if (class_name_map_upper_sm > 0) class_name_map_upper_sm\
    \ else 0\n        val strength_lower_sm = if (class_name_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0)((acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)))\n        val strength_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2).reverse.takeWhile(x => x._2 > 0).map(x => x._1).mkString(\".\")\n \
    \       val strength_sorted_sorted = strength_sorted.sortBy(x => x._1).reverse.mkString(\"\
    .\")\n        val strength_sorted_sorted_sorted = strength_sorted_sorted.sortBy(x\
    \ => x._1).reverse.mkString(\".\")\n        val strength_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted.sortBy(x => x._1).reverse.mkString(\".\")\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted = strength_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse.mkString(\".\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted_sorted.sortBy(x => x._1).reverse.mkString(\"\
    .\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted =\
    \ strength_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x._1).reverse.mkString(\"\
    .\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x._1).reverse.mkString(\"\
    .\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse.mkString(\".\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse.mkString(\".\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse.mkString(\".\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse.mkString(\".\")\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a')) \n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sorted.length\
    \ - 1).mkString(\".\")\n        val extensions_sorted = extensions_sorted.toUpperCase.take(extensions_sor",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_fraction = strength / extensions_count.toDouble\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength_fraction\
    \ - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => ", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val strongest_extension = sorted_extensions.find(e => e._2 == strength).getOrElse(\"\
    \")\n        class_name + \".\" + strongest_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a')) \n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val strength = extensions_sorted.last\n        val class_name_with_strength\
    \ = class_name + \".\" + extensions_sorted.take(strength).mkString\n        val\
    \ extensions_without_strength = extensions_sorted.drop(strength)\n        val\
    \ extensions_without_strength_sorted = extensions_without_strength.toList.sortWith(_\
    \ < _)\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.take(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_strength_sorted = extensions_without_strength_sorted.drop(extensions_without_strength_sorted.length\
    \ - 1).mkString\n        val extensions_without_", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val max_value = extensions_map.max\n        val max_key\
    \ = extensions_map.keys.toList.max\n        val max_extension = extensions_map.get(max_key)\n\
    \        val class_name_with_max_extension = class_name + max_extension\n    \
    \    val extensions_with_same_strength = extensions_map.filter(_._1 == max_value).keys\n\
    \        val extensions_with_same_strength_sorted = extensions_with_same_strength.sorted\n\
    \        val extensions_with_same_strength_sorted.head", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val max_value = extensions_map.max\n        val max_key\
    \ = extensions_map.keys.max\n        val max_extension = extensions_map.find(e\
    \ => e == max_value).get\n        val max_extension_name = max_extension.split(\"\
    .\").last\n        val max_extension_strength = max_extension.split(\".\").last.count(_\
    \ == 'A') - max_extension.split(\".\").last.count(_ == 'a')\n        val max_extension_strength_str\
    \ = max_extension_strength.toString\n        val max_extension_strength_str =\
    \ max_extension_strength_str.substring(0, max_extension_strength_str.length -\
    \ 1)\n        val max_extension_strength_str = max_extension_strength_str + max_extension_name\
    \ + \".\"\n        val max_extension_strength_str = max_extension_strength_str\
    \ + max_extension_name + max_extension_strength_str\n        class_name + max_extension_strength_str",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        extension + class_name_map.getOrElse(strength, \"\")", "    \
    \    val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') -\
    \ e.toUpperCase.count(_ == 'a') + 1)\n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val max_extension = extensions_sorted.last\n        val max_extension_strength\
    \ = extensions_sorted.last\n        val class_name_with_max_extension = class_name\
    \ + max_extension\n        val class_name_with_max_extension_strength = class_name\
    \ + max_extension_strength\n        if (extensions_map.contains(max_extension_strength))\
    \ {\n            class_name_with_max_extension_strength\n        } else {\n  \
    \          class_name_with_max_extension\n        }", "        var strongest_extension\
    \ = \"\"\n        var strongest_extension_strength = -1\n        var extension_strength\
    \ = 0\n        for(extension <- extensions){\n            extension_strength =\
    \ extension.count(_ == class_name.charAt(0).toUpper)\n            if(extension_strength\
    \ > strongest_extension_strength){\n                strongest_extension_strength\
    \ = extension_strength\n                strongest_extension = extension\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_str = strength.toString\n   \
    \     val extensions_str = extensions.map(_.toString)\n        val extensions_count\
    \ = extensions_str.length\n        val extensions_count_upper = extensions_str.map(_.toUpperCase).length\n\
    \        val extensions_count_lower = extensions_str.map(_.toLowerCase).length\n\
    \        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - strength_str.toUpperCase\
    \ \n        val strength_upper = strength_str.toUpperCase - strength_str.toLowerCase\
    \ \n        val strength_lower = strength_str.toLowerCase - ", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted = extensions_count_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_index = extensions_count_sorted_reversed_sorted.indexWhere(_\
    \ > extensions_count)\n        val extensions_count_sorted_reversed_sorted_index_2\
    \ = extensions_count_sorted_reversed_sorted_index - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_3 = extensions_count_sorted_reversed_sorted_index_2\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_sorted_index_4\
    \ = extensions_count_sorted_reversed_sorted_index_3 - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_5 = extensions_count_sorted_reversed_sorted_index_4\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_sorted_index_6\
    \ = extensions_count_sorted_reversed_sorted_index_5 - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_7 = extensions_count_sorted_reversed_sorted_index_6\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_sorted_index_8\
    \ = extensions_count_sorted_reversed_sorted_index_7 - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_9 = extensions_count_sorted_reversed_sorted_index_8\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_sorted_index_10\
    \ = extensions_count_sorted_reversed_sorted_index_9 - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_11 = extensions_count_sorted_reversed_sorted_index_10\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_sorted_index_12\
    \ = extensions_count_sorted_reversed_sorted_index_11 - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_13 = extensions_count_sorted_reversed_sorted_index_12\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_sorted_index_14\
    \ = extensions_count_sorted_reversed_sorted_index_13 - 1 // -1 because index starts\
    \ from 0\n        val extensions_count_sorted_reversed_sorted_index_15 = extensions_count_sorted_reversed_sorted_index_14\
    \ - 1 // -1 because index starts from 0\n        val extensions_count_sorted_reversed_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_count = extensions_map.filter(_._2 > 0).map(_._2).sum\n\
    \        val extensions_count_sorted = extensions_count.sortBy(_ * -1)\n     \
    \   val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toList\n      \
    \  val extensions_count_sorted = extensions_count_sorted.sortBy(_ * -1)\n    \
    \    val extensions_count_sorted = extensions_count_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => -x)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x <\
    \ strength)\n        val extensions_sorted = extensions_sorted.reverse\n     \
    \   val extensions_sorted = extensions_sorted.mkString(\"\")\n        val extensions_sorted\
    \ = extensions_sorted.replaceAll(\"(.)\", \"$1.\")\n        val extensions_sorted\
    \ = extensions_sorted.replaceAll(\"([a-z])\", \"$1\")\n        val extensions_sorted\
    \ = extensions_sorted.replaceAll(\"([A-Z])\", \"$1\")\n        class_name + \"\
    .\" + extensions_sorted", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase).toMap\n        val class_name_map =\
    \ class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.map(_.toString.toInt).sum\n    \
    \    val strongest_extension = extensions_map.values.sortWith(_ < _).head\n  \
    \      val class_name_with_strongest_extension = class_name_map.get(strongest_extension)\n\
    \        val class_name_with_strongest_extension_str = if (class_name_with_strongest_extension\
    \ == None) \"\" else class_name_with_strongest_extension.mkString(\".\") + \"\
    .\"\n        val strongest_extension_str = if (strongest_extension == None) \"\
    \" else strongest_extension.mkString(\".\") + \".\"\n        val strength_str\
    \ = if (strength == 0) \"0\" else strength.toString\n        val strongest_extension_strength_str\
    \ = if (strongest_extension == None) \"\" else strongest_extension_strength.mkString(\"\
    .\") + \".\"\n        val class_name_with_strongest_extension_strength_str = if\
    \ (class_name_with_strongest_extension_strength == None) \"\" else class_name_with_strongest_extension_strength.mkString(\"\
    .\") + \".\"\n        val strongest_extension_strength_strength_str = if (strongest_extension_strength\
    \ == None) \"\" else strongest_extension_strength.mkString(\".\") + \".\"\n  \
    \      val class_name_with_strongest_extension_strength_strength_str = if (class_name_with_strongest_extension_strength_strength\
    \ == None) \"\" else class_name_with_strongest_extension_strength_strength.mkString(\"\
    .\") + \".\"\n        val strongest_extension_strength_strength_strength_str =\
    \ if (strongest_extension_strength_strength == None) \"\" else strongest_extension_strength_strength.mkString(\"\
    .\") + \".\"\n        val class_name_with_strongest_extension_strength_strength_strength_str\
    \ = if (class_name_with_strongest_extension_strength_strength_strength == None)\
    \ \"\" else class_name_with_strongest_extension_strength_strength_strength.mkString(\"\
    .\") + \".\"\n        val strongest_extension_strength_strength_strength_strength_str\
    \ = if (strongest_extension_strength_strength_strength == None) \"\" else strongest_extension_strength_strength_strength.mkString(\"\
    .\") + \".", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.values.sortWith(_\
    \ < _)\n        val extension_strength = extensions_sorted.last\n        val extension_first\
    \ = extensions_sorted.head\n        val extension_last = extensions_sorted.last\n\
    \        val extension_strength_str = extension_strength.toString\n        val\
    \ extension_first_str = extension_first.toString\n        val extension_last_str\
    \ = extension_last.toString\n        val extension_strength_str_length = extension_strength_str.length\n\
    \        val extension_first_str_length = extension_first_str.length\n       \
    \ val extension_last_str_length = extension_last_str.length\n        val extension_strength_str_length_diff\
    \ = extension_strength_str_length - extension_first_str_length\n        val extension_first_str_length_diff\
    \ = extension_first_str_length - extension_last_str_length\n        val extension_last_str_length_diff\
    \ = extension_last_str_length - extension_strength_str_length\n        val extension_strength_str_length_diff_percentage\
    \ = extension_strength_str_length_diff / extension_strength_str_length\n     \
    \   val extension_first_str_length_diff_percentage = extension_first_str_length_diff\
    \ / extension_first_str_length\n        val extension_last_str_length_diff_percentage\
    \ = extension_last_str_length_diff / extension_last_str_length\n        val extension_strength_str_length_diff_percentage_rounded\
    \ = math.round(extension_strength_str_length_diff_percentage * 100) / 100\n  \
    \      val extension_first_str_length_diff_percentage_rounded = math.round(extension_first_str_length_diff_percentage\
    \ * 100) / 100\n        val extension_last_str_length_diff_percentage_rounded\
    \ = math.round(extension_last_str_length_diff_percentage * 100) / 100\n      \
    \  val extension_strength_str_length_diff_percentage_rounded_rounded = math.round(extension_strength_str_length_diff_percentage_rounded\
    \ * 100) / 100\n        val extension_first_str_length_diff_percentage_rounded_rounded\
    \ = math.round(extension_first_str_length_diff_percentage_rounded * 100) / 100\n\
    \        val extension_last_str_length_diff_percentage_rounded_rounded = math.round(extension_last_str_length_diff_percentage_rounded\
    \ * 100) / 100\n        val extension_strength_str_length_diff_percentage_rounded_rounded_rounded\
    \ = math.round(extension_strength_str_length_diff_percentage_rounded_rounded *\
    \ 100) / 100\n        val extension_first_str_length_diff_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0)((x, y) => (x._2 - y._2))\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x._2 > strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => x._1)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \")\n        val class_name_sorted = class_name_map.toSeq.sortBy(x => x._2).reverse\n\
    \        val class_name_sorted = class_name_sorted.takeWhile(x => x._2 > strength)\n\
    \        val class_name_sorted = class_name_sorted.map(x => x._1)\n        val\
    \ class_name_sorted = class_name_sorted.mkString(\"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Z]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^a-z]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        val class_name_sorted\
    \ = class_name_sorted.replaceAll(\"[^A-Za-z0-9]\", \"\")\n", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val strength = extensions_count_sorted.last.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted = extensions_count_sorted.sort\n        val\
    \ extensions_count_sorted = extensions_count_sorted.reverse\n        val extensions_count_sorted\
    \ = extensions_count_sorted.takeWhile(_ < strength)\n        val extensions_count_sorted\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted = extensions_count_sorted.takeWhile(_\
    \ < strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_count_sorted.takeWhile(_ < strength)\n\
    \        val extensions_count_sorted = extensions_count_sorted.reverse\n     \
    \   val extensions_count_sorted = extensions_", "        val extensions_map =\
    \ extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key_value = extensions_map.getOrElse(max_key,\
    \ 0)\n        val max_key_value_str = max_key_value.toString\n        val max_key_value_str_length\
    \ = max_key_value_str.length\n        val max_key_value_str_length_with_dots =\
    \ max_key_value_str_length + 2\n        val max_key_value_str_length_with_dots_str\
    \ = max_key_value_str_length_with_dots.toString\n        val max_key_value_str_length_with_dots_str_length\
    \ = max_key_value_str_length_with_dots_str.length\n        val max_key_value_str_length_with_dots_str_length_with_dots\
    \ = max_key_value_str_length_with_dots_str_length + 2\n        val max_key_value_str_length_with_dots_str_length_with_dots_str\
    \ = max_key_value_str_length_with_dots_str_length_with_dots.toString\n       \
    \ val max_key_value_str_length_with_dots_str_length_with_dots_str_length = max_key_value_str_length_with_dots_str_length_with_dots_str.length\n\
    \        val max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots\
    \ = max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str.length\n\
    \        val max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str\
    \ = max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str.length\n\
    \        val max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length\
    \ = max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length_with_dots_str.length\n\
    \        val max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length_with_dots\
    \ = max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length_with_dots_str.length\n\
    \        val max_key_value_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length_with_dots_str_length_with_dots\
    \ = max_key_value_str_length_with_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a')).toMap\n  \
    \      val strength = extensions_map.values.max\n        val extension = extensions_map.values.find(_\
    \ == strength).getOrElse(\"\")\n        className + extension", "        // Your\
    \ code here\n        val extension_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name = class_name.capitalize\n        val extension_strength\
    \ = extension_map.filter(_._2 > class_name.charAt(class_name.length - 1)).map(_._1).sum\n\
    \        val extension_strength_sorted = extension_map.filter(_._2 > class_name.charAt(class_name.length\
    \ - 1)).sortBy(_._1).reverse\n        val extension_strength_sorted_first = extension_strength_sorted.head\n\
    \        val extension_strength_sorted_first_index = extension_strength_sorted.indexOf(_._1)\n\
    \        val extension_strength_sorted_first_value = extension_strength_sorted.apply(extension_strength_sorted_first_index)\n\
    \        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value.length\n\
    \        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ / 2\n        val extension_strength_sorted_first_value_length = extension_strength_sorted_first_value_length\
    \ * -1\n        val extension_strength_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) - e.toLowerCase.charAt(0)).toMap\n        val class_name_map\
    \ = class_name.map(c => c.toUpperCase.charAt(0) - c.toLowerCase.charAt(0)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((acc, e) => acc + extensions_map(e))\n\
    \        val strongest_extension = extensions.find(e => e.toUpperCase.charAt(0)\
    \ - e.toLowerCase.charAt(0) == strength)\n        strongest_extension match {\n\
    \            case Some(extension) => class_name + extension\n            case\
    \ None => class_name\n        }", "        // Write your code here\n        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strongest_extension = extensions_map.filter(_._2 > class_name_map.get(_._1)).head._1\n\
    \        class_name + \".\" + strongest_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a')) \n        val strength = extensions_map.max\n        val extensions_with_same_strength\
    \ = extensions_map.filter(_ == strength)\n        val extensions_with_same_strength_sorted\
    \ = extensions_with_same_strength.sortWith(_ < _)\n        val extensions_with_same_strength_sorted_first\
    \ = extensions_with_same_strength_sorted.head\n        val extensions_with_same_strength_sorted_last\
    \ = extensions_with_same_strength_sorted.last\n        val extensions_with_same_strength_sorted_first_index\
    \ = extensions_with_same_strength_sorted.indexOf(extensions_with_same_strength_sorted_first)\n\
    \        val extensions_with_same_strength_sorted_last_index = extensions_with_same_strength_sorted.indexOf(extensions_with_same_strength_sorted_last)\n\
    \        val extensions_with_same_strength_sorted_first_index_plus_one = extensions_with_same_strength_sorted_first_index\
    \ + 1\n        val extensions_with_same_strength_sorted_last_index_minus_one =\
    \ extensions_with_same_strength_sorted_last_index - 1\n        val extensions_with_same_strength_sorted_first_index_minus_one\
    \ = extensions_with_same_strength_sorted_first_index - 1\n        val extensions_with_same_strength_sorted_last_index_plus_one\
    \ = extensions_with_same_strength_sorted_last_index + 1\n        val extensions_with_same_strength_sorted_first_index_plus_one\
    \ = extensions_with_same_strength_sorted_first_index + 1\n        val extensions_with_same_strength_sorted_last_index_minus_one\
    \ = extensions_with_same_strength_sorted_last_index - 1\n        val extensions_with_same_strength_sorted_first_index_minus_one\
    \ = extensions_with_same_strength_sorted_first_index - 1\n        val extensions_with_same_strength_sorted_last_index_minus_one\
    \ = extensions_with_same_strength_sorted_last_index - 1\n        val extensions_with_same_strength_sorted_first_index_plus_one\
    \ = extensions_with_same_strength_sorted_first_index + 1\n        val extensions_with_same_strength_sorted_last_index_plus_one\
    \ = extensions_with_same_strength_sorted_last_index + 1\n        val extensions_with_same_strength_sorted_first_index_minus_one\
    \ = extensions_with_same_strength_sorted_first_index - 1\n        val extensions_with_same_strength_sorted_last_index_minus_one\
    \ = extensions_", '        // Your code here', "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a > b)\n        val extension_strength = extensions_sorted.last\n    \
    \    val class_name_with_extension = class_name + extensions_sorted.takeWhile(_\
    \ > extension_strength).mkString(\".\") + \".\"\n        val class_name_with_extension_strength\
    \ = class_name_with_extension + extension_strength\n        if (extensions_map.size\
    \ > 1) {\n            val extensions_with_same_strength = extensions_sorted.takeWhile(_\
    \ == extension_strength)\n            val extensions_with_same_strength_sorted\
    \ = extensions_with_same_strength.sortWith((a, b) => a > b)\n            val extensions_with_same_strength_sorted\
    \ = extensions_with_same_strength_sorted.take(extensions_with_same_strength_sorted.size\
    \ - 1).mkString(\".\") + \".\"\n            val extensions_with_same_strength_sorted\
    \ = extensions_with_same_strength_sorted + extension_strength\n            val\
    \ class_name_with_extension_with_same_strength = class_name_with_extension_strength\
    \ + extensions_with_same_strength_sorted.mkString(\".\") + \".\"\n           \
    \ val class_name_with_extension_with_same_strength_strength = class_name_with_extension_with_same_strength\
    \ + extension_strength\n            if (extensions_with_same_strength_sorted.size\
    \ > 1) {\n                val extensions_with_same_strength_sorted = extensions_with_same_strength_sorted.take(extensions_with_same_strength_sorted.size\
    \ - 1).mkString(\".\") + \".\"\n                val extensions_with_same_strength_sorted\
    \ = extensions_with_same_strength_sorted + extension_strength\n              \
    \  val class_name_with_extension_with_same_strength_with_same_strength = class_name_with_extension_with_same_strength_strength\
    \ + extensions_with_same_strength_sorted.mkString(\".\") + \".\"\n           \
    \     val class_name_with_extension_with_same_strength_with_same_strength_strength\
    \ = class_name_with_extension_with_same_strength_with_same_strength + extension_strength\n\
    \                if (extensions_with_same_strength_sorted.size > 2) {\n      \
    \              val extensions_with_same_strength_sorted = extensions_with_same_strength_sorted.take(extensions_with_same_strength_sorted.size\
    \ - 2).mkString(\".\"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - extensions_count_lower\n  \
    \      val strength_lower = extensions_count_lower - extensions_count_upper\n\
    \        val strength_total = strength_upper + strength_lower + strength\n   \
    \     val strength_total_upper = strength_upper + strength_total\n        val\
    \ strength_total_lower = strength_lower + strength_total\n        val strength_total_total\
    \ = strength_total_upper + strength_total_lower + strength_total\n        val\
    \ strength_total_total_upper = strength_total_upper + strength_total_total\n \
    \       val strength_total_total_lower = strength_total_lower + strength_total_total\n\
    \        val strength_total_total_total = strength_total_total + strength_total_total_upper\
    \ + strength_total_total_lower + strength_total_total\n        val strength_total_total_total_upper\
    \ = strength_total_total_upper + strength_total_total_total\n        val strength_total_total_total_lower\
    \ = strength_total_total_lower + strength_total_total_total\n        val strength_total_total_total_total\
    \ = strength_total_total_total + strength_total_total_total_upper + strength_total_total_total_lower\
    \ + strength_total_total_total\n        val strength_total_total_total_total_upper\
    \ = strength_total_total_total_upper + strength_total_total_total_total\n    \
    \    val strength_total_total_total_total_lower = strength_total_total_total_lower\
    \ + strength_total_total_total_total\n        val strength_total_total_total_total_total\
    \ = strength_total_total_total_total + strength_total_total_total_total_upper\
    \ + strength_total_total_total_total_lower + strength_total_total_total_total\n\
    \        val strength_total_total_total_total_upper = strength_total_total_total_total_upper\
    \ + strength_total_total_total_total_total\n        val strength_total_total_total_total_lower\
    \ = strength_total_total_total_total_lower + strength_total_total_total_total_total\n\
    \        val strength_total_total_total_total_total = strength_total_total_total_total\
    \ + strength_total_total_total_total_upper + strength_total_total_total_total_lower\
    \ + strength_total_total_total_total\n        val strength_total_total_total_total_total_upper\
    \ = strength_total_total_total_total_upper + strength_total_total_total_total_total\n\
    \        val strength_total_total_total_total_total_lower = strength", "     \
    \   val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) - e.toLowerCase.charAt(0)).groupBy(_).mapValues(_.length)\n\
    \        val max_strength = extensions_map.maxBy(_._2)._1\n        val max_extension\
    \ = extensions_map.maxBy(_._2)._2\n        s\"$class_name.$max_extension\"", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)))\n        val strength_sorted = extensions_map.toSeq.sortBy(x\
    \ => -x._2).reverse\n        val strongest_extension = strength_sorted.head._1\n\
    \        val strongest_extension_strength = strength_sorted.head._2\n        val\
    \ class_name_with_strongest_extension = class_name_map.getOrElse(strongest_extension,\
    \ \"\")\n        val strongest_extension_class_name = class_name_map.getOrElse(strongest_extension,\
    \ \"\")\n        val strongest_extension_class_name_with_strongest_extension =\
    \ class_name_with_strongest_extension + strongest_extension_class_name\n     \
    \   val strongest_extension_class_name_with_strongest_extension_strength = strongest_extension_class_name_with_strongest_extension\
    \ + strongest_extension_strength\n        strongest_extension_class_name_with_strongest_extension_strength",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a')) \n        val strength = extensions_map.max\n\
    \        val extension = extensions_map.find(e => e == strength).get\n       \
    \ class_name + \".\" + extension", "        val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val strength\
    \ = class_name_map.get(class_name_map.keys.toList.sortBy(_._1).last)\n       \
    \ val extension_strength = extensions_map.get(extensions_map.keys.toList.sortBy(_._1).last)\n\
    \        val strength_diff = strength - extension_strength\n        if(strength_diff\
    \ == 0) class_name_map.get(class_name_map.keys.toList.sortBy(_._1).last)\n   \
    \     else class_name_map.get(class_name_map.keys.toList.sortBy(_._1).last) +\
    \ extensions_map.get(extensions_map.keys.toList.sortBy(_._1).last)", "       \
    \ val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((x, y) => (x._2 - y._2))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 > strength)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x._1)\n        val\
    \ extensions_sorted = extensions_sorted.mkString(\"\")\n        val class_name_sorted\
    \ = class_name_map.toSeq.sortBy(x => x._2).reverse\n        val class_name_sorted\
    \ = class_name_sorted.takeWhile(x => x._2 > strength)\n        val class_name_sorted\
    \ = class_name_sorted.map(x => x._1)\n        val class_name_sorted = class_name_sorted.mkString(\"\
    \")\n        val extensions_sorted.mkString(class_name_sorted + \".\")", "   \
    \     val extensions_count = extensions.map(_.length).sum\n        val class_name_length\
    \ = class_name.length\n        val strength = extensions_count / (class_name_length\
    \ - extensions_count)\n        val extension = extensions.find(_.toUpperCase.count(_\
    \ == class_name.charAt(class_name_length - 1)) > 0)\n        extension.getOrElse(\"\
    \")", "        var strength = 0\n        var extension = \"\"\n        for(i <-\
    \ 0 until extensions.length) {\n            val c = extensions(i)\n          \
    \  val l = c.length\n            val cap = c.toUpperCase.length\n            val\
    \ sm = c.toLowerCase.length\n            val fraction = cap - sm\n           \
    \ val strength_new = fraction * strength\n            if(strength_new > strength)\
    \ {\n                extension = extensions(i)\n                strength = strength_new\n\
    \            }\n        }\n        className + extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val strength = extensions_map.max\n        val extension\
    \ = extensions_map.find(e => e == strength).getOrElse(\"No extension with that\
    \ strength\")\n        s\"$class_name.$extension\"", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_frac = extensions_count_diff / extensions_count_upper\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / extensions_count_lower\n\
    \        val extensions_count_diff_frac_upper = extensions_count_diff_frac / extensions_count_upper\n\
    \        val extensions_count_diff_frac_lower = extensions_count_diff_frac / ",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_.length < _.length)\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed_length\
    \ = extensions_count_sorted_reversed.map(_.length)\n        val extensions_count_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length.sum\n        val extensions_count_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length.sortWith(_.sum < _.sum)\n        val\
    \ extensions_count_sorted_reversed_length_sum_sorted_reversed = extensions_count_sorted_reversed_length_sum_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortWith(_.sum\
    \ < _.sum)\n        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reverse",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a')) \n        val extensions_sorted = extensions_map.toSeq.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.length-1)\n\
    \        val extensions_sorted = extensions_sorted.map(e => class_name + e.toUpperCase.take(e.toUpperCase.length))\n\
    \        extensions_sorted.head", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_cap = extensions.map(_.length).filter(_ > 0).sum\n\
    \        val extensions_count_sm = extensions.map(_.toLowerCase.length).filter(_\
    \ > 0).sum\n        val extensions_count_cap_sm = extensions.map(_.toUpperCase.length).filter(_\
    \ > 0).sum\n        val strength = extensions_count_cap - extensions_count_sm\n\
    \        val strength_upper = extensions_count_upper - extensions_count_sm\n \
    \       val strength_lower = extensions_count_lower - extensions_count_sm\n  \
    \      val strength_cap = extensions_count_cap - extensions_count_cap_sm\n   \
    \     val strength_sm = extensions_count_sm - extensions_count_cap_sm\n      \
    \  val strength_upper_cap = extensions_count_upper - extensions_count_cap_sm\n\
    \        val strength_lower_cap = extensions_count_lower - extensions_count_cap_sm\n\
    \        val strength_cap_sm = extensions_count_cap_sm - extensions_count_sm\n\
    \        val strength_sm_upper = extensions_count_sm - extensions_count_upper\n\
    \        val strength_sm_lower = extensions_count_sm - extensions_count_lower\n\
    \        val strength_upper_cap_sm = extensions_count_upper - extensions_count_cap_sm\n\
    \        val strength_lower_cap_sm = extensions_count_lower - extensions_count_cap_sm\n\
    \        val strength_upper_sm_lower = extensions_count_upper - extensions_count_sm_lower\n\
    \        val strength_lower_sm_upper = extensions_count_lower - extensions_count_sm_upper\n\
    \        val strength_upper_sm_lower_cap = extensions_count_upper - extensions_count_sm_lower_cap\n\
    \        val strength_lower_sm_upper_cap = extensions_count_lower - extensions_count_sm_upper_cap\n\
    \        val strength_upper_sm_lower_cap_sm = extensions_count_upper - extensions_count_sm_lower_cap_sm\n\
    \        val strength_lower_sm_upper_sm_lower = extensions_count_lower - extensions_count_sm_upper_sm_lower\n\
    \        val strength_lower_sm_upper_sm_lower_cap = extensions_count_lower - extensions_count_sm_upper_sm_lower_cap\n\
    \        val strength_lower_sm_upper_sm_lower_cap_sm = extensions_count_lower\
    \ - extensions_count_sm_upper_sm_lower_cap_sm\n        val strength_lower_sm_upper_sm_lower_cap_sm_upper\
    \ = extensions_count_lower - extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2\
    \ > class_name_map.get(_._2)).map(_._1).length\n        val extension = extensions_map.filter(_._2\
    \ == class_name_map.get(_._2)).head\n        s\"$class_name.$extension\"", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val class_name_count\
    \ = class_name.length\n        val strength = extensions_count - class_name_count\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_first = extensions_sorted.head\n       \
    \ val extensions_last = extensions_sorted.last\n        val extension_first =\
    \ extensions_first.length\n        val extension_last = extensions_last.length\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension_first = extensions_first\n        val extension_last = extensions_last\n\
    \        val extension_length = extension_last - extension_first\n        val\
    \ extension", "        val extensions_count = extensions.map(_.length).sum\n \
    \       val extensions_count_sorted = extensions.map(_.length).sort\n        val\
    \ extensions_count_sorted_reversed = extensions_count_sorted.reverse\n       \
    \ val extensions_count_sorted_reversed_index = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.head)\n\
    \        val extensions_count_sorted_reversed_index_next = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next =\
    \ extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next_next\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next_next_next\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next_next_next\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next_next_next_next\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next_next_next_next_next\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        val extensions_count_sorted_reversed_index_next_next_next_next_next_next_next_next_next_next\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 != class_name)\n\
    \        val extensions_sorted = extensions_sorted.map(x => x._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.replaceFirst(class_name,\
    \ \"\")\n        extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val max_value = extensions_map.max\n        val max_key = extensions_map.keys.toList.sortBy(_\
    \ * -1)(math.abs(_))\n        val max_extension = extensions_map(max_key)\n  \
    \      val class_name_with_max_extension = class_name + max_extension\n      \
    \  val class_name_with_max_extension_without_extension = class_name_with_max_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension.dropRight(1)\n        val\
    \ class_name_with_max_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = class_name_with_max_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.dropRight(1)\n\
    \        val class_name_with_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.toSet.count(_ == class_name_map.get(_))\n\
    \        val strongest_extension = extensions_map.values.toList.sortWith(_ < _).head\n\
    \        s\"$class_name.$strongest_extension\"", "        val extensions_map =\
    \ extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ ==\
    \ 'a') + 1)\n        val max_extension = extensions_map.max\n        val max_extension_map\
    \ = extensions_map.filter(_ == max_extension)\n        val max_extension_map_sorted\
    \ = max_extension_map.sortWith(_ < _)\n        val max_extension_map_sorted =\
    \ max_extension_map_sorted.head\n        val class_name_with_max_extension = class_name\
    \ + max_extension_map_sorted\n        return class_name_with_max_extension", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted_reverse\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted_reverse.foldLeft(0)(_ + _)\n        val extensions_count_sorted_reversed_divided\
    \ = extensions_count_sorted_reverse / extensions_count_sorted\n        val extensions_count_sorted_reversed_divided_minus_1\
    \ = extensions_count_sorted_reversed_divided - 1\n        val extensions_count_sorted_reversed_divided_minus_1_minus_1\
    \ = extensions_count_sorted_reversed_divided_minus_1 - 1\n        val extensions_count_sorted_reversed_divided_minus_1_minus_2\
    \ = extensions_count_sorted_reversed_divided_minus_1_minus_1 - 2\n        val\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_3 = extensions_count_sorted_reversed_divided_minus_1_minus_1\
    \ - 3\n        val extensions_count_sorted_reversed_divided_minus_1_minus_4 =\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_1 - 4\n        val extensions_count_sorted_reversed_divided_minus_1_minus_5\
    \ = extensions_count_sorted_reversed_divided_minus_1_minus_1 - 5\n        val\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_6 = extensions_count_sorted_reversed_divided_minus_1_minus_1\
    \ - 6\n        val extensions_count_sorted_reversed_divided_minus_1_minus_7 =\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_1 - 7\n        val extensions_count_sorted_reversed_divided_minus_1_minus_8\
    \ = extensions_count_sorted_reversed_divided_minus_1_minus_1 - 8\n        val\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_9 = extensions_count_sorted_reversed_divided_minus_1_minus_1\
    \ - 9\n        val extensions_count_sorted_reversed_divided_minus_1_minus_10 =\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_1 - 10\n        val extensions_count_sorted_reversed_divided_minus_1_minus_11\
    \ = extensions_count_sorted_reversed_divided_minus_1_minus_1 - 11\n        val\
    \ extensions_count_sorted_reversed_divided_minus_1_minus_12 = extensions_count_sorted_reversed_divided_minus_1_minus_1\
    \ - 12\n        val extensions_count_sorted_reversed_divided_minus_1_minus_13\
    \ = extensions_count_sorted_reverse", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted_reverse = extensions_count_sorted.reverse\n    \
    \    val extensions_count_sorted_reversed = extensions_count_sorted_reverse.foldLeft(0)(_\
    \ + _)\n        val extensions_count_sorted_reversed_divided = extensions_count_sorted_reversed\
    \ / extensions_count.toDouble\n        val extensions_count_sorted_reversed_divided_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided)\n        val extensions_count_sorted_reversed_divided_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded)\n        val\
    \ extensions_count_sorted_reversed_divided_rounded_rounded_rounded = math.round(extensions_count_sorted_reversed_divided_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\
    \        val extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = math.round(extensions_count_sorted_reversed_divided_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_roun",
  "        val extensions_count = extensions.length\n        val extensions_count_map\
    \ = extensions.groupBy(x => x.toUpperCase).mapValues(_.length)\n        val extensions_count_map_sorted\
    \ = extensions_count_map.toSeq.sortBy(_._1).reverse\n        val extensions_count_map_sorted_first\
    \ = extensions_count_map_sorted.head\n        val extensions_count_map_sorted_first_key\
    \ = extensions_count_map_sorted.head._1\n        val extensions_count_map_sorted_first_value\
    \ = extensions_count_map_sorted.head._2\n        val extensions_count_map_sorted_first_index\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))\n        val extensions_count_map_sorted_first_key_index\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._1\n        val extensions_count_map_sorted_first_value_index\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._2\n        val extensions_count_map_sorted_first_key_value\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._1\n        val extensions_count_map_sorted_first_value_value\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._2\n        val extensions_count_map_sorted_first_key_value_strength\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._1\n        val extensions_count_map_sorted_first_value_value_strength\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._2\n        val extensions_count_map_sorted_first_key_value_strength_strength\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._1\n        val extensions_count_map_sorted_first_value_value_strength_strength\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._2\n        val extensions_count_map_sorted_first_key_value_strength_strength_strength\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._1\n        val extensions_count_map_sorted_first_value_value_strength_strength_strength\
    \ = extensions_count_map_sorted.indexOf((extensions_count_map_sorted_first_key,\
    \ extensions_count_map_sorted_first_value))._2\n        val ", "        var strongest_extension\
    \ = \"\"\n        var strength = 0\n        for(extension <- extensions){\n  \
    \          val cap = extension.filter(x => x.isUpper).length\n            val\
    \ sm = extension.filter(x => x.isLower).length\n            val strength = cap\
    \ - sm\n            if(strength > strongest_extension.length){\n             \
    \   strongest_extension = extension\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension", "        // Write your code here\n\
    \        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n\
    \        val strongest_extension = extensions_map.getOrElse(strength, \"\")\n\
    \        class_name + \".\" + strongest_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val max_value = extensions_map.max\n        val max_key\
    \ = extensions_map.keys.max\n        val max_extension = extensions_map.find(_\
    \ == max_value).get\n        val max_extension_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n        val max_extension_key_map\
    \ = max_extension_map.keys.max\n        val max_extension_key_value = max_extension_key_map.find(_\
    \ == max_key).get\n        val max_extension_key_value_map = max_extension_key_map.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val max_extension_key_value_key_map = max_extension_key_value_map.keys.max\n\
    \        val max_extension_key_value_key_value = max_extension_key_value_key_map.find(_\
    \ == max_key).get\n        val max_extension_key_value_key_value_map = max_extension_key_value_key_map.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val max_extension_key_value_key_value_key_map = max_extension_key_value_key_value_map.keys.max\n\
    \        val max_extension_key_value_key_value_key_value = max_extension_key_value_key_value_key_map.find(_\
    \ == max_key).get\n        val max_extension_key_value_key_value_key_value_map\
    \ = max_extension_key_value_key_value_key_map.map(e => e.toUpperCase.count(_ ==\
    \ 'A') - e.toUpperCase.count(_ == 'a') + 1)\n        val max_extension_key_value_key_value_key_value_key_map\
    \ = max_extension_key_value_key_value_key_value_map.keys.max\n        val max_extension_key_value_key_value_key_value_key_value\
    \ = max_extension_key_value_key_value_key_value_key_map.find(_ == max_key).get\n\
    \        val max_extension_key_value_key_value_key_value_key_value_map = max_extension_key_value_key_value_key_value_key_value_map.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val max_extension_key_value_key_value_key_value_key_value_key_map = max_extension_key_value_key_value_key_value_key_value_key_map.keys.max\n\
    \        val max_extension_key_value_key_value_key_value_key_value_key_value =\
    \ max_extension_key_value_key_value_key_value_key_value_key_value_map.find(_ ==\
    \ max_", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (s, e) =>\n            val\
    \ cap = class_name_map(e._1)\n            val sm = class_name_map(e._2)\n    \
    \        val strength_of_extension = cap - sm\n            if (strength_of_extension\
    \ > s) strength_of_extension else s\n        }\n        val extension_strength\
    \ = extensions_map.foldLeft(0) { (s, e) =>\n            val cap = class_name_map(e._1)\n\
    \            val sm = class_name_map(e._2)\n            val strength_of_extension\
    \ = cap - sm\n            if (strength_of_extension > s) strength_of_extension\
    \ else s\n        }\n        val extension_strength_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted = extension_strength_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted = extension_strength_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted = extension_strength_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted = extension_strength_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted_sorted = extension_strength_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extension_strength_", "        var strongest = extensions(0)\n  \
    \      var strength = extensions(0).length\n        for(i <- 1 until extensions.size)\
    \ {\n            if(extensions(i).length < strength) {\n                strongest\
    \ = extensions(i)\n                strength = extensions(i).length\n         \
    \   }\n        }\n        class_name + \".\" + strongest", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.map(_.length).sort\n\
    \        val strength = extensions_count_sorted.last\n        val extensions_count_sorted_sorted\
    \ = extensions_count_sorted.sort\n        val strength_sorted = extensions_count_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted = extensions_count_sorted_sorted.sort\n\
    \        val strength_sorted_sorted = extensions_count_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n \
    \       val strength_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.last\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort\n\
    \        val strength_sorted_sorted_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val max_value = extensions_map.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_extension = extensions_map(max_key)\n        val class_name_with_max_extension\
    \ = class_name + max_extension\n        val extensions_with_same_strength = extensions.filter(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') == max_value)\n\
    \        val extensions_with_same_strength_sorted = extensions_with_same_strength.sortWith(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val extensions_with_same_strength_sorted_key\
    \ = extensions_with_same_strength_sorted.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a'))\n        val extensions_with_same_strength_sorted_key_max\
    \ = extensions_with_same_strength_sorted_key.max\n        val extensions_with_same_strength_sorted_key_max_key\
    \ = extensions_with_same_strength_sorted_key_max.keys.max\n        val extensions_with_same_strength_sorted_key_max_value\
    \ = extensions_with_same_strength_sorted_key_max.values.max\n        val extensions_with_same_strength_sorted_key_max_extension\
    \ = extensions_with_same_strength_sorted_key_max(extensions_with_same_strength_sorted_key_max_key)\n\
    \        val class_name_with_max_extension_with_same_strength = class_name_with_max_extension\
    \ + extensions_with_same_strength_sorted_key_max_extension\n        val extensions_with_same_strength_sorted_key_max_extension_sorted\
    \ = extensions_with_same_strength_sorted_key_max.sortWith(_.toUpperCase.count(_\
    \ == 'A') - _.toUpperCase.count(_ == 'a'))\n        val extensions_with_same_strength_sorted_key_max_extension_sorted_key\
    \ = extensions_with_same_strength_sorted_key_max_extension_sorted.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a'))\n        val extensions_with_same_strength_sorted_key_max_extension_sorted_key_max\
    \ = extensions_with_same_strength_sorted_key_max_extension_sorted_key.max\n  \
    \      val extensions_with_same_strength_sorted_key_max_extension_sorted_key_max_key\
    \ = extensions_with_same_strength_sorted_key_max_extension_sorted_key_max.keys.max\n\
    \        val extensions_with_same_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)) }\n      \
    \  val extension = extensions_map.maxBy(_._2)._1\n        val extension_map =\
    \ extensions_map.filter(_._1 == extension)\n        val extension_str = extension_map.foldLeft(\"\
    \") { (acc, x) => acc + (x._1 + \".\") }\n        extension_str + class_name +\
    \ extension", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'a')) \n        val strength = extensions_map.max\n\
    \        val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n     \
    \   val extensions_sorted = extensions_sorted.takeWhile(_ < strength)\n      \
    \  val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        className + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_diff = extensions_count - extensions_count_upper\n \
    \       val extensions_count_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper = extensions_count - extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count - extensions_count_lower\n\
    \        val extensions_count_diff_diff_diff_upper", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val strength = extensions_map.max\n        val extensions_sorted\
    \ = extensions_map.toList.sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(strength)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\")\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_class\
    \ = extensions_sorted.head._1\n        val extension_class_name = extension_class.substring(0,1).toUpperCase\n\
    \        val extension_class_name_with_extension = extension_class_name + extension_class.substring(1,extension_class.length)\n\
    \        val extension_class_name_with_extension_strength = extension_class_name_with_extension\
    \ + extension_strength.toString\n        val extension_class_name_with_extension_strength_without_extension\
    \ = extension_class_name_with_extension_strength.replaceFirst(extension_class_name,\
    \ \"\")\n        val extension_class_name_with_extension_strength_without_extension_without_extension\
    \ = extension_class_name_with_extension_strength_without_extension.replaceFirst(extension_class_name_with_extension,\
    \ \"\")\n        val extension_class_name_with_extension_strength_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_strength_without_extension_without_extension.replaceFirst(extension_class_name_with_extension_strength,\
    \ \"\")\n        val extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_strength_without_extension_without_extension_without_extension.replaceFirst(extension_class_name_with_extension_strength_without_extension,\
    \ \"\")\n        val extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension.replaceFirst(extension_class_name_with_extension_strength_without_extension_without_extension,\
    \ \"\")\n        val extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension.replaceFirst(extension_class_name_with_extension_strength_without_extension_without_extension_without_extension,\
    \ \"\")\n        val extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_strength_without_extension_without_extension_without_extension_without_extension_without_extension.replaceFirst(extension_class_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = first_extension.count(_ == 'A') - first_extension.count(_ == 'B')\n      \
    \  if (strength == 0) first_extension\n        else if (strength > first_extension_strength)\
    \ first_extension\n        else class_name + first_extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        s\"\
    $class_name.$extension\"", "        var strength = 0\n        var extension =\
    \ \"\"\n        for(extension <- extensions) {\n            val cap = extension.filter(_.isUpper).length\n\
    \            val sm = extension.filter(_.isLower).length\n            val strength\
    \ = cap - sm\n            if(strength > 0) {\n                extension = extension\n\
    \                strength = strength\n            }\n        }\n        return\
    \ class_name + extension", "        var strongest_extension = \"\"\n        var\
    \ strongest_extension_strength = -1\n        var extensions_count = extensions.length\n\
    \        var class_name_count = class_name.length\n        var extensions_count_sorted\
    \ = extensions.sorted\n        var class_name_count_sorted = class_name.sorted\n\
    \        var extensions_count_sorted_length = extensions_count_sorted.length\n\
    \        var class_name_count_sorted_length = class_name_count_sorted.length\n\
    \        var extensions_count_sorted_length_min = extensions_count_sorted_length\n\
    \        var class_name_count_sorted_length_min = class_name_count_sorted_length\n\
    \        var extensions_count_sorted_length_max = extensions_count_sorted_length\n\
    \        var class_name_count_sorted_length_max = class_name_count_sorted_length\n\
    \        var extensions_count_sorted_length_max_index = extensions_count_sorted_length_max\n\
    \        var class_name_count_sorted_length_max_index = class_name_count_sorted_length_max\n\
    \        var extensions_count_sorted_length_max_value = extensions_count_sorted_length_max\n\
    \        var class_name_count_sorted_length_max_value = class_name_count_sorted_length_max\n\
    \        var extensions_count_sorted_length_max_value_length = extensions_count_sorted_length_max_value.length\n\
    \        var class_name_count_sorted_length_max_value_length = class_name_count_sorted_length_max_value.length\n\
    \        var extensions_count_sorted_length_max_value_length_min = extensions_count_sorted_length_max_value_length\n\
    \        var class_name_count_sorted_length_max_value_length_min = class_name_count_sorted_length_max_value_length\n\
    \        var extensions_count_sorted_length_max_value_length_max = extensions_count_sorted_length_max_value_length\n\
    \        var class_name_count_sorted_length_max_value_length_max = class_name_count_sorted_length_max_value_length\n\
    \        var extensions_count_sorted_length_max_value_length_max_index = extensions_count_sorted_length_max_value_length_max\n\
    \        var class_name_count_sorted_length_max_value_length_max_index = class_name_count_sorted_length_max_value_length_max\n\
    \        var extensions_count_sorted_length_max_value_length_max_value = extensions_count_sorted_length_max_value_length_max\n\
    \        var class_name_count_sorted_length_max_value_length_max_value = class_name_count_sorted_length_max_value_length_max\n\
    \        var extensions_count_sorted_length_max_value_length_max_value_length\
    \ = extensions_count_sorted_length_max_value_length_max_value.length\n       \
    \ var class_name_count_sorted_length_max_value_length_max_value_length = class_name_count_sorted_length_max_value_length_max_value.length\n\
    \        var extensions_count_sorted_length_max_value_length_max_value_length_min\
    \ = extensions_count_sorted_length_max_value_length_max_value_length\n       \
    \ var class_name_count_sorted_length_max_value_length_max_value_length_min = class_name_count_sorted_length_max_value_length_max_value_length\n\
    \        var extensions_count_sorted_length_max_value_length_max_value_length_max\
    \ = extensions_count_sorted_length_max_value_length_max_value_length\n       \
    \ var class_name_count_sorted_length_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_sorted = extensions.sortWith(x\
    \ => extensions_map(x.toUpperCase).compareTo(extensions_map(x.toLowerCase)))\n\
    \        val extensions_sorted = extensions_sorted.map(x => x.toUpperCase).mkString(\"\
    .\")\n        class_name + extensions_sorted", "        val extensions_count =\
    \ extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val class_name_str = if (class_name_upper\
    \ == class_name_lower) class_name_upper else class_name_lower + \".\" + class_name_upper\n\
    \        val extensions_str = extensions.map(_.toString).mkString(\".\")\n   \
    \     val extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count.toString\n\
    \        val extensions_count_upper_str = if (extensions_count_upper == 0) \"\
    0\" else extensions_count_upper.toString\n        val extensions_count_lower_str\
    \ = if (extensions_count_lower == 0) \"0\" else extensions_count_lower.toString\n\
    \        val strength_str = if (strength == 0) \"0\" else strength_str\n     \
    \   val extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count_str\n\
    \        val extensions_count_upper_str = if (extensions_count_upper == 0) \"\
    0\" else extensions_count_upper_str\n        val extensions_count_lower_str =\
    \ if (extensions_count_lower == 0) \"0\" else extensions_count_lower_str\n   \
    \     val strength_str = if (strength == 0) \"0\" else strength_str\n        val\
    \ extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count_str\n\
    \        val extensions_count_upper_str = if (extensions_count_upper == 0) \"\
    0\" else extensions_count_upper_str\n        val extensions_count_lower_str =\
    \ if (extensions_count_lower == 0) \"0\" else extensions_count_lower_str\n   \
    \     val strength_str = if (strength == 0) \"0\" else strength_str\n        val\
    \ extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count_str\n\
    \        val extensions_count_upper_str = if (extensions_count_upper == 0) \"\
    0\" else extensions_count_upper_str\n        val extensions_count_lower_str =\
    \ if (extensions_count_lower == 0) \"0\" else extensions_count_lower_str\n   \
    \     val strength_str = if (strength == 0) \"0\" else strength_str\n        val\
    \ extensions_count_str = if (extensions_count == 0) \"0\" else extensions_count_str\n\
    \        val extensions_count_upper_str = if (extensions_count_upper == 0) \"\
    0\" else extensions_count_upper_str\n        val extensions_count_lower_str =\
    \ if (extensions_count_lower == 0) ", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length)\n        val\
    \ strength = extensions_count_sorted.last.size - extensions_count_sorted.head.size\n\
    \        val class_name_with_extension = class_name + extensions.map(_.capitalize).mkString(\"\
    \")\n        val extensions_with_same_strength = extensions_count_sorted.takeWhile(_.size\
    \ == strength)\n        val extensions_with_same_strength_sorted = extensions_with_same_strength.sortBy(_.length)\n\
    \        val extensions_with_same_strength_first = extensions_with_same_strength_sorted.head\n\
    \        val extensions_with_same_strength_first_sorted = extensions_with_same_strength_sorted.sortBy(_.length)\n\
    \        val extensions_with_same_strength_first_first = extensions_with_same_strength_sorted.takeWhile(_.size\
    \ == 1).head\n        val extensions_with_same_strength_first_first_sorted = extensions_with_same_strength_sorted.takeWhile(_.size\
    \ == 1).sortBy(_.length)\n        val extensions_with_same_strength_first_first_first\
    \ = extensions_with_same_strength_sorted.takeWhile(_.size == 1).takeWhile(_.size\
    \ == 1).head\n        val extensions_with_same_strength_first_first_first_sorted\
    \ = extensions_with_same_strength_sorted.takeWhile(_.size == 1).takeWhile(_.size\
    \ == 1).sortBy(_.length)\n        val extensions_with_same_strength_first_first_first_first\
    \ = extensions_with_same_strength_sorted.takeWhile(_.size == 1).takeWhile(_.size\
    \ == 1).takeWhile(_.size == 1).head\n        val extensions_with_same_strength_first_first_first_first_sorted\
    \ = extensions_with_same_strength_sorted.takeWhile(_.size == 1).takeWhile(_.size\
    \ == 1).takeWhile(_.size == 1).sortBy(_.length)\n        val extensions_with_same_strength_first_first_first_first_first\
    \ = extensions_with_same_strength_sorted.takeWhile(_.size == 1).takeWhile(_.size\
    \ == 1).takeWhile(_.size == 1).takeWhile(_.size == 1).head\n        val extensions_with_same_strength_first_first_first_first_first_sorted\
    \ = extensions_with_same_strength_sorted.takeWhile(_.size == 1).takeWhile(_.size\
    \ == 1).takeWhile(_.size == 1).takeWhile(_.size == 1).takeWhile(_.size == 1).sortBy(_.length)\n\
    \        val extensions_with_same_strength_first_first_first_first_first_first\
    \ = extensions_with_same_strength_sor", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val strength = extensions_map.max\n        val extension = extensions_map.find(e\
    \ => e == strength).get\n        s\"$class_name.$extension\"", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n \
    \       val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extension_strength = extensions_sorted.head._2\n        val extension_class\
    \ = extensions_sorted.head._1\n        if (strength == extension_strength) {\n\
    \            class_name + extension_class\n        } else {\n            class_name\
    \ + extension_class + extension_strength.toString\n        }", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).reduce(_ +\
    \ _)\n        val strongest_extension = extensions_map.values.filter(x => x ==\
    \ strength).head\n        class_name + \".\" + strongest_extension", "       \
    \ val extensions_map = extensions.map(x => x.toUpperCase.charAt(0) - x.toLowerCase.charAt(0)).zipWithIndex.toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.values.toList.sortWith(_ < _)\n        val first_extension\
    \ = sorted_extensions.head\n        val first_extension_strength = extensions_map.get(first_extension)\n\
    \        if (first_extension_strength != strength) first_extension\n        else\
    \ class_name + sorted_extensions.map(x => x.toUpperCase).mkString(\"\")", "  \
    \      val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n    \
    \    val extension = extensions_map.getOrElse(strength, \"\")\n        s\"$class_name.$extension\"",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list\
    \ = extensions_sorted.map(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list_sorted\
    \ = extensions_sorted_list.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list_sorted\
    \ = extensions_sorted_list.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list_sorted\
    \ = extensions_sorted_list.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list_sorted\
    \ = extensions_sorted_list.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list_sorted\
    \ = extensions_sorted_list.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted_list_sorted\
    \ = extensions_sorted_list.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted_list_sorted = extensions_sorted_list.sortBy(x => ",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.values.toList\n        val extensions_count_sorted\
    \ = extensions_count.sortBy(x => -x)\n        val extensions_count_sorted = extensions_count_sorted.take(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.getOrElse(0)\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.toInt\n       \
    \ val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toInt\n        val extensions_count_sorted = extensions_count_sorted.toInt\n\
    \        val extensions_count_sorted = extensions_count_sorted.", "        var\
    \ strength = 0\n        var extension = \"\"\n        for(i <- 0 until extensions.length)\
    \ {\n            val c = extensions(i)\n            val l = c.length\n       \
    \     val cap = c.toUpperCase.length\n            val sm = c.toLowerCase.length\n\
    \            val strength = cap - sm\n            if(strength > 0) {\n       \
    \         extension = extensions(i)\n                strength = cap - sm\n   \
    \         }\n        }\n        return class_name + extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val class_name_map = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val max_strength = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_value)\n        val max_key_class_name =\
    \ class_name_map.get(max_key_value)\n        val max_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name)\n        val max_key_class_name_key_value\
    \ = extensions_map.get(max_key_class_name)\n        val max_key_class_name_key_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name\
    \ = class_name_map.get(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name)\n        val\
    \ max_key_class_name_key_class_name_key_value = extensions_map.get(max_key_class_name_key_class_name)\n\
    \        val max_key_class_name_key_class_name_key_key_index = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_index = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_value = extensions_map.get(max_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => if (x < y) x else\
    \ y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_map.values.toList.",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).toArray\n        val max_strength = strength.max\n\
    \        val max_key = extensions_map.keys.find(x => strength.contains(x)).max\n\
    \        val max_value = extensions_map.get(max_key)\n        max_key match {\n\
    \            case x if strength.contains(x) => x\n            case x if strength.contains(max_value)\
    \ => max_value\n            case _ => \"\"\n        }", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B')).toMap\n        val extensions_sorted = extensions_map.toSeq.sortWith(_._2\
    \ > _._2)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.length-1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toList\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \")\n        val extensions_sorted = extensions_sorted.replaceAll(\"[^A-Z]\",\
    \ \"\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"^\", \"\
    \").replaceAll(\"$\", \"\")\n        class_name + extensions_sorted", "      \
    \  val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val strength = extensions_map.max\n        val extension\
    \ = extensions_map.find(e => e == strength).get\n        class_name + extension",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_diff = extensions_count\
    \ - extensions_count_upper\n        val extensions_count_diff_lower = extensions_count\
    \ - extensions_count_lower\n        val extensions_count_diff_upper = extensions_count\
    \ - extensions_count_upper\n        val extensions_count_diff_diff = extensions_count\
    \ - extensions_count_diff\n        val extensions_count_diff_diff_lower = extensions_count\
    \ - extensions_count_diff_lower\n        val extensions_count_diff_diff_upper\
    \ = extensions_count - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff\
    \ = extensions_count - extensions_count_diff_diff\n        val extensions_count_diff_diff_diff_lower\
    \ = extensions_count - extensions_count_diff_diff_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff\
    \ = extensions_count - extensions_count_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_lower\
    \ = extensions_count - extensions_count_diff_diff_diff_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff\
    \ = extensions_count - extensions_count_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count - extensions_count_diff_diff_diff_diff_lower\n        val\
    \ extensions_count_diff_diff_diff_diff_diff_upper = extensions_count - extensions_count_diff_diff_diff_diff_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff = extensions_count\
    \ - extensions_count_diff_diff_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ = extensions_count - extensions_count_diff_diff_diff_diff_diff_lower\n     \
    \   val extensions_count_diff_diff_diff_diff_diff_diff_upper = extensions_count\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff\
    \ = extensions_count - extensions_count_diff_diff_diff_diff_diff_diff\n      \
    \  val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count - extensions_count_diff_diff_", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_count = extensions_map.values.count(_ == 0)\n        val\
    \ extensions_count_map = extensions_count.zip(extensions_map).filter(_._2 == 1).map(_._1)\n\
    \        val extensions_count_sorted = extensions_count_map.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n        val extensions_count_sorted = extensions_count_sorted.take(extensions_count_sorted.length-1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toSeq.sortWith(_ <\
    \ _)\n", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase)\n        val extensions_count = extensions_map.values.toSet.size\n\
    \        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase)\n\
    \        val class_name_count = class_name_map.values.toSet.size\n        val\
    \ strength = extensions_count - class_name_count\n        val extension = extensions_map.values.toSet.min\n\
    \        val class_name = class_name_map.values.toSet.min\n        val extension_name\
    \ = extension.mkString.concat(\".\").concat(\".\")\n        class_name.concat(extension_name)",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val max_value = extensions_map.max\n\
    \        val max_key = extensions_map.keys.max\n        val max_extension = extensions_map.find(_\
    \ == max_value).get\n        val max_extension_name = max_extension.substring(max_extension.lastIndexOf('.')\
    \ + 1)\n        val class_name_with_max_extension = class_name + max_extension_name\n\
    \        val class_name_with_max_extension_str = class_name_with_max_extension\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_2 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_3\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_4 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_5\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_6 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_7\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_8 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_9\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_10 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_11\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_12 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_13\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_with_max_extension_str_with_extension_14 = class_name_with_max_extension_str\
    \ + \".\" + max_extension_name\n        val class_name_with_max_extension_str_with_extension_15\
    \ = class_name_with_max_extension_str + \".\" + max_extension_name\n        val\
    \ class_name_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_sum = extensions_count_upper\
    \ + extensions_count_lower + strength\n        val strength_sum_upper = extensions_count_upper\
    \ + strength_upper\n        val strength_sum_lower = extensions_count_lower +\
    \ strength_lower\n        val strength_sum_sum = extensions_count_upper + extensions_count_lower\
    \ + strength_sum\n        val strength_sum_sum_upper = extensions_count_upper\
    \ + strength_sum_upper\n        val strength_sum_sum_lower = extensions_count_lower\
    \ + strength_sum_lower\n        val strength_sum_sum_sum = extensions_count_upper\
    \ + extensions_count_lower + strength_sum_sum\n        val strength_sum_sum_sum_upper\
    \ = extensions_count_upper + strength_sum_sum_upper\n        val strength_sum_sum_sum_lower\
    \ = extensions_count_lower + strength_sum_sum_lower\n        val strength_sum_sum_sum_sum\
    \ = extensions_count_upper + extensions_count_lower + strength_sum_sum_sum\n \
    \       val strength_sum_sum_sum_sum_upper = extensions_count_upper + strength_sum_sum_sum_upper\n\
    \        val strength_sum_sum_sum_sum_lower = extensions_count_lower + strength_sum_sum_sum_lower\n\
    \        val strength_sum_sum_sum_sum_sum = extensions_count_upper + extensions_count_lower\
    \ + strength_sum_sum_sum_sum\n        val strength_sum_sum_sum_sum_sum_upper =\
    \ extensions_count_upper + strength_sum_sum_sum_sum_upper\n        val strength_sum_sum_sum_sum_sum_lower\
    \ = extensions_count_lower + strength_sum_sum_sum_sum_sum\n        val strength_sum_sum_sum_sum_sum_sum\
    \ = extensions_count_upper + extensions_count_lower + strength_sum_sum_sum_sum_sum_sum\n\
    \        val strength_sum_sum_sum_sum_sum_sum_upper = extensions_count_upper +\
    \ strength_sum_sum_sum_sum_sum_upper\n        val strength_sum_sum_sum_sum_sum_sum_lower\
    \ = extensions_count_lower + strength_sum_sum_sum_sum_sum_sum\n        val strength_sum_sum_sum_sum_sum_sum_sum\
    \ = extensions_count_upper + extensions_count_lower + strength_sum_sum_sum_sum_sum_sum_sum\n\
    \        val strength_sum_sum_sum_sum_", "        var extensions_count = extensions.length\n\
    \        var extensions_strength = extensions_count.toDouble\n        var extensions_name\
    \ = \"\"\n        var extensions_name_count = 0\n        var extensions_name_strength\
    \ = 0\n        var extensions_name_strongest = \"\"\n        var extensions_name_strongest_count\
    \ = 0\n        var extensions_name_strongest_strength = 0\n        var extensions_name_strongest_index\
    \ = 0\n        var extensions_name_strongest_index_count = 0\n        var extensions_name_strongest_index_strength\
    \ = 0\n        var extensions_name_strongest_index_index = 0\n        var extensions_name_strongest_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_strength = 0\n      \
    \  var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n        var extensions_name_strongest_index_index_index_count\
    \ = 0\n        var extensions_name_strongest_index_index_index_strength = 0\n\
    \        var extensions_name_strongest_index_index_index = 0\n", '        // Your
    code here', "        val extensions_count = extensions.map(_.length).sum\n   \
    \     val extensions_count_map = extensions.map(x => (x.length, x)).toMap\n  \
    \      val extensions_count_map_sorted = extensions_count_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_first = extensions_count_map_sorted.head\n\
    \        val extensions_count_map_sorted_first_key = extensions_count_map_sorted_first.last\n\
    \        val extensions_count_map_sorted_first_value = extensions_count_map_sorted_first.last._2\n\
    \        val extensions_count_map_sorted_first_value_length = extensions_count_map_sorted_first_value.length\n\
    \        val extensions_count_map_sorted_first_value_length_upper = extensions_count_map_sorted_first_value_length.toCharArray.filter(x\
    \ => x.toUpper == x).length\n        val extensions_count_map_sorted_first_value_length_lower\
    \ = extensions_count_map_sorted_first_value_length.toCharArray.filter(x => x.toLower\
    \ == x).length\n        val extensions_count_map_sorted_first_value_length_diff\
    \ = extensions_count_map_sorted_first_value_length_upper - extensions_count_map_sorted_first_value_length_lower\n\
    \        val extensions_count_map_sorted_first_value_length_diff_upper = extensions_count_map_sorted_first_value_length_diff\
    \ / extensions_count_map_sorted_first_value_length_length_upper\n        val extensions_count_map_sorted_first_value_length_diff_lower\
    \ = extensions_count_map_sorted_first_value_length_diff / extensions_count_map_sorted_first_value_length_length_lower\n\
    \        val extensions_count_map_sorted_first_value_length_diff_diff_upper =\
    \ extensions_count_map_sorted_first_value_length_diff_upper / extensions_count_map_sorted_first_value_length_length_upper\n\
    \        val extensions_count_map_sorted_first_value_length_diff_diff_lower =\
    \ extensions_count_map_sorted_first_value_length_diff_lower / extensions_count_map_sorted_first_value_length_length_lower\n\
    \        val extensions_count_map_sorted_first_value_length_diff_diff_diff_upper\
    \ = extensions_count_map_sorted_first_value_length_diff_diff_upper / extensions_count_map_sorted_first_value_length_length_upper\n\
    \        val extensions_count_map_sorted_first_value_length_diff_diff_diff_lower\
    \ = extensions_count_map_sorted_first_value_length_diff_diff_lower / extensions_count_map_sorted_first_value_length_length_lower\n\
    \        val extensions_count_map_sorted_first_value_length_diff_diff_diff_upper\
    \ = extensions_count_map_sorted_first_value_length_diff_diff_diff_upper / extensions_count_map_sorted_first_value_length_length_upper\n\
    \        val extensions_count_map_sorted_first_value_length_diff_diff_diff_lower\
    \ = extensions_count_map_sorted_first_value_length_diff_diff_diff_lower / extensions_count_map_sorted_first_value_length_length_",
  "        val extensions_count = extensions.map(_.length).sum\n        val class_name_length\
    \ = class_name.length\n        val extensions_length_sum = extensions.map(_.length).sum\n\
    \        val strength = extensions_length_sum / extensions_count - class_name_length\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_sorted = extensions_sorted.head\n      \
    \  val class_name_length = class_name_length + extensions_sorted.length\n    \
    \    val class_name = class_name + extensions_sorted\n        class_name", '        //
    Your code here', "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B')).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.take(extensions_sorted.length / 2)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._2).mkString(\".\")\n        class_name + extensions_sorted",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last.toDouble\
    \ / extensions_count.toDouble\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_sorted = extensions.sortBy(_.length)\n        val extensions_sorted\
    \ = extensions.sortBy(_.", "        val extensions_map = extensions.map(x => x.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map(x._1) - x._1).sum\n        val\
    \ extensions_sorted = extensions_map.values.sortBy(x => x._1).reverse\n      \
    \  val extensions_sorted_sorted = extensions_sorted.sortBy(x => x._1).reverse\n\
    \        val extensions_sorted_sorted_sorted = extensions_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted.sortBy(x => x._1).reverse\n       \
    \ val extensions_sorted_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_map = extensions.map(_.length).zipWithIndex.toMap\n\
    \        val extensions_count_map_sorted = extensions_count_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_with_zero = extensions_count_map_sorted.map(_._2)\n\
    \        val extensions_count_map_sorted_with_zero_with_zero = extensions_count_map_sorted_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero.map(_ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero.map(_ + 0)\n   \
    \     val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 0)\n        val extensions_count_map_sorted_with_zero_with_", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_ < _)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_ < _)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_ < _)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_ < _)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_ < _)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_ < _)\n", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toList.max\n     \
    \   val extensions_sorted = extensions_map.values.sortBy(x => x - strength)\n\
    \        val extensions_sorted = extensions_sorted.take(1).mkString.concat(\"\
    .\").concat(extensions_sorted.last)\n        extensions_sorted", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a') + 1)\n        val strength = extensions_map.max\n        val extensions_sorted\
    \ = extensions_map.toList.sortWith(_ < _)\n        val extension_strength = extensions_sorted.head\n\
    \        val extension_class = extensions_sorted.last\n        val extension_class_name\
    \ = extension_class.replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")\n\
    \        val extension_class_name_with_extension = extension_class_name + extension_extension\n\
    \        val extension_class_name_with_extension_strength = extension_class_name_with_extension\
    \ + extension_strength\n        val extension_class_name_with_extension_strength_sorted\
    \ = extension_class_name_with_extension_strength.sortWith(_ < _)\n        val\
    \ extension_class_name_with_extension_strength_sorted_with_extension_strength\
    \ = extension_class_name_with_extension_strength_sorted.head\n        val extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_strength.sortWith(_\
    \ < _)\n        val extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted.head\n\
    \        val extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength.sortWith(_\
    \ < _)\n        val extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted.head\n\
    \        val extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength.sortWith(_\
    \ < _)\n        val extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_strength_sorted_with_extension_strength_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val strength = extensions_map.max\n\
    \        val extensions_with_same_strength = extensions_map filter (e => e ==\
    \ strength)\n        val extensions_with_same_strength_sorted = extensions_with_same_strength.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first = extensions_with_same_strength_sorted\
    \ take 1\n        val extensions_with_same_strength_sorted_first_sorted = extensions_with_same_strength_sorted_first.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first =\
    \ extensions_with_same_strength_sorted_first_sorted take 1\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted\
    \ = extensions_with_same_strength_sorted_first_sorted_first.sortWith(_ < _)\n\
    \        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted take 1\n  \
    \      val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted_first.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first\
    \ = extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted.sortWith(_\
    \ < _)\n        val extensions_with_same_strength_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted_first_sorted\
    \ = extensions_with_same_strength", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extension_length = extensions_sorted.map(_.length).sum\n\
    \        val extension_strength = extensions_sorted.map(_.length).sum - extension_length\n\
    \        val extension_sorted = extensions_sorted.sortWith((a, b) => extension_strength\
    \ - a.length - b.length)\n        val extension_first = extension_sorted.head\n\
    \        val extension_last = extension_sorted.last\n        val extension_first_length\
    \ = extension_first.length\n        val extension_last_length = extension_last.length\n\
    \        val extension_first_strength = extension_first.length - extension_first_length\n\
    \        val extension_last_strength = extension_last.length - extension_last_length\n\
    \        val extension_first_sorted = extension_first.sortWith((a, b) => extension_first_strength\
    \ - a.length - b.length)\n        val extension_last_sorted = extension_last.sortWith((a,\
    \ b) => extension_last_strength - a.length - b.length)\n        val extension_first_first\
    \ = extension_first_sorted.head\n        val extension_first_last = extension_first_sorted.last\n\
    \        val extension_last_first = extension_last_sorted.head\n        val extension_last_last\
    \ = extension_last_sorted.last\n        val extension_first_first_length = extension_first_first.length\n\
    \        val extension_first_last_length = extension_first_last.length\n     \
    \   val extension_last_first_length = extension_last_first.length\n        val\
    \ extension_last_last_length = extension_last_last.length\n        val extension_first_first_strength\
    \ = extension_first_first.length - extension_first_first_length\n        val extension_first_last_strength\
    \ = extension_first_last.length - extension_first_last_length\n        val extension_last_first_strength\
    \ = extension_last_first.length - extension_last_first_length\n        val extension_last_last_strength\
    \ = extension_last_last.length - extension_last_last_length\n        val extension_first_first_sorted\
    \ = extension_first_first.sortWith((a, b) => extension_first_first_strength -\
    \ a.length - b.length)\n        val extension_first_last_sorted = extension_first_last.sortWith((a,\
    \ b) => extension_first_last_strength - a.length - b.length)\n        val extension_last_first_sorted\
    \ = extension_last_first.sortWith((a, b) => extension_last_first_strength - a.length\
    \ - b.length)\n        val extension_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_sorted = extensions_sorted.find(_._2 == strength)\n   \
    \     val extension = extension_sorted._1\n        val extension_class = extension_sorted._2\n\
    \        val extension_class_map = extension_class.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extension_class_sorted = extension_class_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_class_sorted = extension_class_sorted.find(_._2 == strength)\n\
    \        val extension_class = extension_class_sorted._1\n        val extension_class_map\
    \ = extension_class.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val\
    \ extension_class_sorted = extension_class_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extension_class_sorted = extension_class_sorted.find(_._2 == strength)\n\
    \        val extension_class = extension_class_sorted._1\n        val extension_class_map\
    \ = extension_class.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val\
    \ extension_class_sorted = extension_class_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extension_class_sorted = extension_class_sorted.find(_._2 == strength)\n\
    \        val extension_class = extension_class_sorted._1\n        val extension_class_map\
    \ = extension_class.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val\
    \ extension_class_sorted = extension_class_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extension_class_sorted = extension_class_sorted.find(_._2 == strength)\n\
    \        val extension_class = extension_class_sorted._1\n        val extension_class_map\
    \ = extension_class.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val\
    \ extension_class_sorted = extension_class_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extension_class_sorted = extension_class_sorted.find(_._2 == strength)\n\
    \        val extension_class = extension_class_sorted._1\n        val extension_class_map\
    \ = extension_class.map(x => (x.toUpperCase, x.toLowerCase)).to", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => if (a > b) a else\
    \ b)\n        val extensions_sorted = extensions_map.values.sortWith((a, b) =>\
    \ a > b)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x <=\
    \ strength).mkString(\".\")\n        val extensions_sorted = extensions_sorted.dropWhile(x\
    \ => x <= strength).mkString(\".\")\n        val extensions_sorted = extensions_sorted.dropRight(1).mkString(\"\
    .\")\n        class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => x.toUpperCase.charAt(0) - x.toLowerCase.charAt(0)).toMap\n        val strength\
    \ = extensions_map.values.sum\n        val extensions_sorted = extensions_map.toSeq.sortWith(_._2\
    \ > _._2)\n        val extensions_sorted = extensions_sorted.take(1).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\") + extensions_sorted.last\n\
    \        val class_name = class_name.substring(0, class_name.lastIndexOf('.'))\
    \ + \".\" + extensions_sorted\n        class_name", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n \
    \       val extensions_sorted = extensions_map.values.sortWith((a, b) => math.signum(a-b))\n\
    \        val strongest_extension = extensions_sorted.head\n        val class_name_with_strongest_extension\
    \ = class_name + strongest_extension\n        val class_name_with_strongest_extension_lowercase\
    \ = class_name_with_strongest_extension.toLowerCase\n        val class_name_with_strongest_extension_uppercase\
    \ = class_name_with_strongest_extension.toUpperCase\n        val class_name_with_strongest_extension_uppercase_sm\
    \ = class_name_with_strongest_extension_uppercase.replaceAll(\"[^A-Z]\", \"\"\
    )\n        val class_name_with_strongest_extension_uppercase_ca = class_name_with_strongest_extension_uppercase.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_with_strongest_extension_lowercase_sm\
    \ = class_name_with_strongest_extension_lowercase.replaceAll(\"[^a-z]\", \"\"\
    )\n        val class_name_with_strongest_extension_lowercase_ca = class_name_with_strongest_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_strongest_extension_lowercase_cap\
    \ = class_name_with_strongest_extension_lowercase.replaceAll(\"[^A-Z]\", \"\"\
    )\n        val class_name_with_strongest_extension_uppercase_ca_sm = class_name_with_strongest_extension_uppercase_ca.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_strongest_extension_uppercase_ca_cap\
    \ = class_name_with_strongest_extension_uppercase_ca.replaceAll(\"[^A-Z]\", \"\
    \")\n        val class_name_with_strongest_extension_lowercase_ca_sm = class_name_with_strongest_extension_lowercase_ca.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_strongest_extension_lowercase_ca_cap\
    \ = class_name_with_strongest_extension_lowercase_ca.replaceAll(\"[^A-Z]\", \"\
    \")\n        val class_name_with_strongest_extension_lowercase_sm_cap = class_name_with_strongest_extension_lowercase_sm.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_strongest_extension_lowercase_cap_sm\
    \ = class_name_with_strongest_extension_lowercase_cap.replaceAll(\"[^A-Z]\", \"\
    \")\n        val class_name_with_strongest_extension_lowercase_cap_ca = class_name_with_strongest_extension_lowercase_cap.replace",
  "        val extensions_map = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.take(1).map(_._2).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"(.)\", \"\
    $1\")\n        class_name + extensions_sorted", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extension_strength = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.toDouble\
    \ / extensions_count_lower.toDouble\n        val extension_strength_upper = extensions_count.toDouble\
    \ / extensions_count_upper.toDouble\n        val extension_strength_lower = extensions_count.to",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_fraction = strength / extensions_count_upper\n\
    \        val extensions_count_fraction = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction2 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction3 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction4 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction5 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction6 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction7 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction8 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction9 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction10 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction11 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction12 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction13 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction14 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction15 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction16 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction17 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction18 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction19 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction20 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction21 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction22 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction23 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction24 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction25 = extensions_count / extensions_count_upper\n\
    \        val extensions_count_fraction26 = extensions_count / extensions_count_lower\n\
    \        val extensions_count_fraction27 = extensions_count / ", "        // Your\
    \ code here\n        val extensions_count = extensions.map(_.length).sum\n   \
    \     val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions.sortWith(_.length\
    \ < _.length)\n        val extension_first = extensions_sorted.head\n        val\
    \ extension_last = extensions_sorted.last\n        val extension_strength = extension_first.length\
    \ - extension_last.length\n        if (strength == extension_strength) {\n   \
    \         class_name + extension_first\n        } else {\n            class_name\
    \ + extension_last\n        }", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n        val\
    \ max_strength = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key_value = extensions_map.getOrElse(max_key,\
    \ 0)\n        val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_value\
    \ = max_key_value % 1\n        val max_key_value = max_key_value + max_key\n \
    \       val max_key_value = max_key_value / max_value\n        val max_key_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum = extensions_count_sorted_length.sum\n\
    \        val extensions_count_sorted_length_product = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product2 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product3 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product4 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product5 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product6 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product7 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product8 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product9 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product10 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product11 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product12 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product13 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product14 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product15 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product16 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product17 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product18 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product19 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product20 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product21 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product22 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product23 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product24 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product25 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product26 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_product27 = extensions_count_sorted_length.product\n\
    \        val extensions_count_sorted_length_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (s, x) =>\n            val c = class_name_map(x)\n            val e = extensions_map(x)\n\
    \            val sm = extensions_map(e._2)\n            val cap = extensions_map(e._1)\n\
    \            s + math.abs(cap - sm)\n        }\n        val max_strength = extensions_map.values.max\n\
    \        val max_key = extensions_map.values.maxBy(x => x.length)\n        val\
    \ max_extension = extensions_map.values.maxBy(x => x.length)\n        val max_extension_map\
    \ = max_extension.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val\
    \ max_extension_strength = max_extension_map.values.max\n        val max_extension_strength_map\
    \ = max_extension_strength.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n  \
    \      val max_extension_strength_max_key = max_extension_strength_map.values.maxBy(x\
    \ => x.length)\n        val max_extension_strength_max_key_map = max_extension_strength_max_key.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val max_extension_strength_max_key_max_extension\
    \ = max_extension_strength_max_key_map.values.maxBy(x => x.length)\n        val\
    \ max_extension_strength_max_key_max_extension_map = max_extension_strength_max_key_max_extension.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val max_extension_strength_max_key_max_extension_max_extension_map\
    \ = max_extension_strength_max_key_max_extension_max_extension.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val max_extension_strength_max_key_max_extension_max_extension_max_extension_map\
    \ = max_extension_strength_max_key_max_extension_max_extension_max_extension.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val max_extension_strength_max_key_max_extension_max_extension_max_extension_max_extension_map\
    \ = max_extension_strength_max_key_max_extension_max_extension_max_extension_max_extension.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val max_extension_strength_max_key_max_extension_max_extension_max_extension_max_extension_max_extension_map\
    \ = max_extension_strength_max_key_max_extension_max_extension_max_extension_max_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val max_value = extensions_map.max\n\
    \        val max_key = extensions_map.keys.toList.sortBy(_ - max_value).last\n\
    \        val max_extension = extensions_map(max_key)\n        val class_name =\
    \ class_name.substring(0, class_name.lastIndexOf('.')) + \".\" + max_extension\n\
    \        return class_name", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith(_.length < _.length)\n\
    \        val strength = extensions_count_sorted.map(_.length).sum / extensions_count\n\
    \        val extensions_count_sorted = extensions_count_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted = extensions_count_sorted.takeWhile(_\
    \ < extensions_count)\n        val extensions_count_sorted = extensions_count_sorted.take(1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_.toUpperCase).mkString\n\
    \        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"[^A-Z]\"\
    , \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    ^\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [A-Z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [a-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [^A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    ^\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [^A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    ^\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [^A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    ^\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [^A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    ^\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [^A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    ^\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [A-Za-z]\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    [^A-Z", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (s, x) =>\n            val\
    \ c = class_name_map(x)\n            val e = extensions_map(x)\n            val\
    \ cap = c._1.toUpperCase.length\n            val sm = c._2.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) strength else\
    \ s\n        }\n        val extension = extensions_map.get(strength)\n       \
    \ if (extension == None) \"\"\n        else class_name + \".\" + extension._1",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => if (a > b) a else\
    \ b)\n        val extensions_sorted = extensions_map.values.sortBy(x => x)\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(x => x < strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\") + extensions_sorted.last\n\
    \        class_name + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - extensions_count_lower\n  \
    \      val strength_lower = extensions_count_lower - extensions_count_upper\n\
    \        if (strength == 0) class_name\n        else if (strength_upper == 0)\
    \ class_name + extensions.last\n        else if (strength_lower == 0) class_name\
    \ + extensions.last\n        else if (strength_upper < strength_lower) class_name\
    \ + extensions.last\n        else class_name + extensions.sortBy(_.length).last",
  '        // Your code here', "        var strongest_extension = \"\"\n        var\
    \ strongest_extension_strength = -1\n        var extension_strength = 0\n    \
    \    extensions.foreach { extension =>\n            extension_strength = extension.count(_\
    \ == class_name.charAt(0).toUpper)\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength\n     \
    \           strongest_extension = extension\n            }\n        }\n      \
    \  return strongest_extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n        val\
    \ strength_sum = strength.sum\n        if (strength_sum == 0) \"\"\n        else\
    \ class_name match {\n            case x if x.toUpperCase.length < strength_sum\
    \ => \"\"\n            case x if x.toUpperCase.length == strength_sum => x.toUpperCase\n\
    \            case x if x.toUpperCase.length > strength_sum => x.toUpperCase.substring(strength_sum)\n\
    \            case x => x.toUpperCase\n        }", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0)((acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)))\n        val strongest_extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        val class_name = class_name_map.getOrElse(strength, \"\")\n \
    \       val strongest_extension_name = strongest_extension.split(\"\\\\W\").head\n\
    \        val class_name_with_strongest_extension = class_name + \".\" + strongest_extension_name\n\
    \        val strongest_extension_strength = class_name_map.getOrElse(strength,\
    \ 0).toString\n        val strongest_extension_strength_str = strongest_extension_strength.substring(0,\
    \ strongest_extension_strength.length - 3)\n        val strongest_extension_strength_str\
    \ = strongest_extension_strength_str + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_extension_strength_str = strongest_extension_strength_str\
    \ + strongest_extension_strength_str.substring(strongest_extension_strength_str.length\
    \ - 3)\n        val strongest_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length <= strength).mkString(\".\")\n        extensions_sorted\
    \ + class_name", "        val extensions_count = extensions.map(x => x.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith((x, y) => x.length\
    \ - y.length)\n        val extensions_count_sorted = extensions_count_sorted.map(x\
    \ => x.length)\n        val extensions_count_sorted = extensions_count_sorted.sum\n\
    \        val extensions_count_sorted = extensions_count_sorted.toDouble\n    \
    \    val extensions_count_sorted = extensions_count_sorted.toInt\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toLong\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toFloat\n        val extensions_count_sorted = extensions_count_sorted.toDouble\n\
    \        val extensions_count_sorted = extensions_count_sorted.toFloat\n     \
    \   val extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toLong\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toDouble\n    \
    \    val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toLong\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toDouble\n    \
    \    val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toLong\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toDouble\n    \
    \    val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toLong\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.toDouble\n    \
    \    val extensions_count_sorted = extensions_count_sorted.toFloat\n        val\
    \ extensions_count_sorted = extensions_count_sorted.toInt\n        val extensions_count_sorted\
    \ = extensions_count_sorted.toLong\n        val extensions_count_sorted = extensions_count_sorted.toFloat\n\
    \        val extensions_count_sorted = extensions_count_sorted.to", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => b.length - a.length)\n        val extensions_count_sorted_length\
    \ = extensions_count_sorted.map(_.length).sum\n        val extensions_count_sorted_length_sorted\
    \ = extensions_count_sorted.sortWith((a, b) => b.length - a.length)\n        val\
    \ extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted_", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed.sort\n        val extensions_count_sorted_reversed_sorted_first\
    \ = extensions_count_sorted_reversed_sorted.head\n        val extensions_count_sorted_reversed_sorted_first_index\
    \ = extensions_count_sorted.indexOf(extensions_count_sorted_reversed_sorted_first)\n\
    \        val extensions_count_sorted_reversed_sorted_first_index_plus_1 = extensions_count_sorted_reversed_sorted_first_index\
    \ + 1 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_1\
    \ = extensions_count_sorted_reversed_sorted_first_index_plus_1 - 1 \n        val\
    \ extensions_count_sorted_reversed_sorted_first_index_minus_2 = extensions_count_sorted_reversed_sorted_first_index_minus_1\
    \ - 2 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_3\
    \ = extensions_count_sorted_reversed_sorted_first_index_minus_2 - 3 \n       \
    \ val extensions_count_sorted_reversed_sorted_first_index_minus_4 = extensions_count_sorted_reversed_sorted_first_index_minus_3\
    \ - 4 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_5\
    \ = extensions_count_sorted_reversed_sorted_first_index_minus_4 - 5 \n       \
    \ val extensions_count_sorted_reversed_sorted_first_index_minus_6 = extensions_count_sorted_reversed_sorted_first_index_minus_5\
    \ - 6 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_7\
    \ = extensions_count_sorted_reversed_sorted_first_index_minus_6 - 7 \n       \
    \ val extensions_count_sorted_reversed_sorted_first_index_minus_8 = extensions_count_sorted_reversed_sorted_first_index_minus_7\
    \ - 8 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_9\
    \ = extensions_count_sorted_reversed_sorted_first_index_minus_8 - 9 \n       \
    \ val extensions_count_sorted_reversed_sorted_first_index_minus_10 = extensions_count_sorted_reversed_sorted_first_index_minus_9\
    \ - 10 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_11\
    \ = extensions_count_sorted_reversed_sorted_first_index_minus_10 - 11 \n     \
    \   val extensions_count_sorted_reversed_sorted_first_index_minus_12 = extensions_count_sorted_reversed_sorted_first_index_minus_11\
    \ - 12 \n        val extensions_count_sorted_reversed_sorted_first_index_minus_13\
    \ = extensions_count_sorted_reversed_sorted_first_index_minus_12 - 13 \n     \
    \   val extensions_count_sorted_reversed_sorted_first_", "        val extensions_count\
    \ = extensions.length\n        val extensions_count_upper = extensions_count.toString.toUpperCase\n\
    \        val extensions_count_lower = extensions_count.toString.toLowerCase\n\
    \        val extensions_count_upper_small = extensions_count_upper.length - extensions_count_lower.length\n\
    \        val extensions_count_lower_small = extensions_count_lower.length - extensions_count_upper.length\n\
    \        val extensions_count_upper_small_frac = extensions_count_upper_small\
    \ / extensions_count_upper.length\n        val extensions_count_lower_small_frac\
    \ = extensions_count_lower_small / extensions_count_lower.length\n        val\
    \ extensions_count_upper_small_frac_frac = extensions_count_upper_small_frac /\
    \ extensions_count_upper.length\n        val extensions_count_lower_small_frac_frac\
    \ = extensions_count_lower_small_frac / extensions_count_lower.length\n      \
    \  val extensions_count_upper_small_frac_frac_frac = extensions_count_upper_small_frac_frac\
    \ / extensions_count_upper.length\n        val extensions_count_lower_small_frac_frac_frac\
    \ = extensions_count_lower_small_frac_frac / extensions_count_lower.length\n \
    \       val extensions_count_upper_small_frac_frac_frac_frac = extensions_count_upper_small_frac_frac_frac\
    \ / extensions_count_upper.length\n        val extensions_count_lower_small_frac_frac_frac_frac\
    \ = extensions_count_lower_small_frac_frac_frac / extensions_count_lower.length\n\
    \        val extensions_count_upper_small_frac_frac_frac_frac_frac = extensions_count_upper_small_frac_frac_frac_frac\
    \ / extensions_count_upper.length\n        val extensions_count_lower_small_frac_frac_frac_frac_frac\
    \ = extensions_count_lower_small_frac_frac_frac_frac / extensions_count_lower.length\n\
    \        val extensions_count_upper_small_frac_frac_frac_frac_frac_frac = extensions_count_upper_small_frac_frac_frac_frac_frac\
    \ / extensions_count_upper.length\n        val extensions_count_lower_small_frac_frac_frac_frac_frac_frac\
    \ = extensions_count_lower_small_frac_frac_frac_frac_frac / extensions_count_lower.length\n\
    \        val extensions_count_upper_small_frac_frac_frac_frac_frac_frac_frac =\
    \ extensions_count_upper_small_frac_frac_frac_frac_frac_frac / extensions_count_upper",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val extensions_map = extensions_map.toMap\n\
    \        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_map = extensions_map.toSeq.sortBy(_._2).reverse\n        val\
    \ extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val\
    \ extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val\
    \ extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val\
    \ extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val\
    \ extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_map = extensions_map.toSeq.sortBy(_._1).reverse\n    \
    \    val extension", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2)\n    \
    \    val first_extension = sorted_extensions.head._1\n        val second_extension\
    \ = sorted_extensions.last._1\n        if (strength == 0) first_extension\n  \
    \      else if (strength == -1) second_extension\n        else first_extension\
    \ + second_extension", "        val extensions_count = extensions.map(x => x.length).sum\n\
    \        val extensions_count_sorted = extensions.map(x => x.length).sort\n  \
    \      val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted = extensions_count_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed = extensions_count_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted.reverse\n        val\
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_",
  "        // Your code here\n        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val class_name_str = class_name.replaceAll(\"[^A-Z]\", \"\")\n        val\
    \ class_name_str_upper = class_name_str.toUpperCase\n        val class_name_str_lower\
    \ = class_name_str.toLowerCase\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = class_name_str_upper.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_str_lower = class_name_str_lower.replaceAll(\"\
    [^a-z]\", \"\")\n        val class_name_str_upper = ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0)((x, y) => if (x > y) x else y)\n        val extensions_strength\
    \ = extensions_map.foldLeft(0)((x, y) => if (x > y) x else y)\n        val strength_diff\
    \ = strength - extensions_strength\n        if (strength_diff == 0) class_name_map.getOrElse(extensions_map.getOrElse(extensions_map.last,\
    \ extensions_map.last), extensions_map.last)\n        else class_name_map.getOrElse(extensions_map.getOrElse(extensions_map.last,\
    \ extensions_map.last), extensions_map.last) + extensions_map.last", "       \
    \ // Your code here\n        val extensions_count = extensions.map(x => x.length).sum\n\
    \        val extensions_count_sorted = extensions.map(x => x.length).sortWith(_\
    \ < _)\n        val strength = extensions_count_sorted.last\n        val extensions_count_sorted_with_strength\
    \ = extensions_count_sorted.zip(strength)\n        val extensions_count_sorted_with_strength_sorted\
    \ = extensions_count_sorted_with_strength.sortWith(_._1 < _._1)\n        val extensions_count_sorted_with_strength_sorted_with_strength\
    \ = extensions_count_sorted_with_strength_sorted.last\n        val extensions_count_sorted_with_strength_sorted_with_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength.last\n        val\
    \ extensions_count_sorted_with_strength_sorted_with_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_strength_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = extensions_count_sorted_with_strength_sorted_with_strength_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength_strength_strength.last\n\
    \        val extensions_count_sorted_with_strength_sorted_with_strength_strength_strength_strength_strength_strength_strength",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val max_value = extensions_map.max\n\
    \        val max_key = extensions_map.keys.toList.max\n        val max_extension\
    \ = extensions_map(max_key)\n        val class_name_with_max_extension = class_name\
    \ + max_extension\n        val extensions_with_same_strength = extensions_map.filter(_._1\
    \ == max_value)\n        val max_extension_with_same_strength = extensions_with_same_strength.keys.toList.max\n\
    \        val max_extension_with_same_strength_extension = extensions_with_same_strength(max_extension_with_same_strength)\n\
    \        class_name_with_max_extension + \".\" + max_extension_with_same_strength_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (s, x) =>\n            val\
    \ c = class_name_map(x)\n            val e = extensions_map(x)\n            val\
    \ cap = c._1.toUpperCase.length\n            val sm = c._2.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) strength else\
    \ s\n        }\n        val class_name_with_strength = class_name_map.foldLeft(\"\
    \") { (s, x) =>\n            val c = class_name_map(x)\n            val e = extensions_map(x)\n\
    \            val cap = c._1.toUpperCase.length\n            val sm = c._2.toUpperCase.length\n\
    \            val strength = cap - sm\n            if (strength > s) x + \".\"\
    \ + e else x + \".\" + e\n        }\n        val class_name_with_strength_sorted\
    \ = class_name_with_strength.split(\"\\\\.\").sortWith(_ < _)\n        val class_name_with_strength_sorted_last\
    \ = class_name_with_strength_sorted.last\n        val class_name_with_strength_sorted_last_upper\
    \ = class_name_with_strength_sorted_last.toUpperCase\n        val class_name_with_strength_sorted_last_lower\
    \ = class_name_with_strength_sorted_last.toLowerCase\n        val class_name_with_strength_sorted_last_with_extension\
    \ = class_name_with_strength_sorted_last_upper + class_name_with_strength_sorted_last_lower\n\
    \        val class_name_with_strength_sorted_last_with_extension_sorted = class_name_with_strength_sorted_last_with_extension.split(\"\
    \\\\.\").sortWith(_ < _)\n        val class_name_with_strength_sorted_last_with_extension_sorted_last\
    \ = class_name_with_strength_sorted_last_with_extension_sorted.last\n        val\
    \ class_name_with_strength_sorted_last_with_extension_sorted_last_upper = class_name_with_strength_sorted_last_with_extension_sorted_last.toUpperCase\n\
    \        val class_name_with_strength_sorted_last_with_extension_sorted_last_lower\
    \ = class_name_with_strength_sorted_last_with_extension_sorted_last.toLowerCase\n\
    \        val class_name_with_strength_sorted_last_with_extension_sorted_last_with_extension\
    \ = class_name_with_strength_sorted_last_with_extension_sorted_last_upper + class_name_with_strength_sorted_last_with_extension_sorted_last_lower\n\
    \        val class_name_with_strength_sorted_last_with_extension_sorted_last_with_extension_sorted\
    \ = class_name_with_strength_sorted_last_with_extension_sorted_last_with_extension.split(\"\
    \\\\.\").sort", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    if (extensions_count > 1) {\n            val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n            val extension_first = extensions_sorted.head\n\
    \            val extension_last = extensions_sorted.last\n            val extension_strength\
    \ = extension_last.length - extension_first.length\n            if (extension_strength\
    \ > strength) {\n                class_name + extension_first\n            } else\
    \ {\n                class_name + extension_last\n            }\n        } else\
    \ {\n            class_name\n        }", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extension = extensions.find(_.toUpperCase.count(_\
    \ == class_name.charAt(class_name_length)).toDouble / class_name_length < strength)\n\
    \        extension.getOrElse(\"\")", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => if (x > y) x else y)\n        val extensions_sorted = extensions_map.values.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x <= strength)\n        val extensions_sorted = extensions_sorted.map(x =>\
    \ class_name + x.toString).mkString(\".\")\n        extensions_sorted.head", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (acc, x) =>\n           \
    \ val upper = x._1.toUpperCase\n            val lower = x._1.toLowerCase\n   \
    \         val strength_upper = extensions_map.get(upper).map(_.toUpperCase).getOrElse(0)\n\
    \            val strength_lower = extensions_map.get(lower).map(_.toLowerCase).getOrElse(0)\n\
    \            acc + strength_upper - strength_lower\n        }\n        val strongest_extension\
    \ = class_name_map.filter(_._1 == strength).map(_._2).head\n        s\"$class_name.$strongest_extension\"",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a')) \n        val strength_map = extensions_map.toMap\n\
    \        val strength = strength_map.getOrElse(class_name, 0)\n        val extension\
    \ = extensions_map.maxBy(_._2)._1\n        val extension_strength = extensions_map.getOrElse(extension,\
    \ 0)\n        val strength_percentage = strength_percentage / 100\n        val\
    \ strength_percentage_rounded = strength_percentage * 100\n        val extension_percentage\
    \ = extension_strength / strength\n        val extension_percentage_rounded =\
    \ extension_percentage * 100\n        val strength_rounded = strength * 100\n\
    \        val extension_rounded = extension * 100\n        val extension_rounded_rounded\
    \ = extension_rounded * 100\n        val extension_rounded_rounded_rounded = extension_rounded_rounded\
    \ * 100\n        val extension_rounded_rounded_rounded_rounded = extension_rounded_rounded_rounded\
    \ * 100\n        val extension_rounded_rounded_rounded_rounded_rounded = extension_rounded_rounded_rounded_rounded\
    \ * 100\n        val extension_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_rounded_rounded_rounded_rounded_rounded * 100\n        val extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_rounded_rounded_rounded_rounded_rounded_rounded * 100\n        val\
    \ extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded =\
    \ extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded * 100\n  \
    \      val extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ * 100\n        val extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ * 100\n        val extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ * 100\n        val extension_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_rounded_roun", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val class_name_sorted = class_name_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_first = extensions_sorted.head._2\n        val class_name_first\
    \ = class_name_sorted.head._2\n        val extensions_last = extensions_sorted.last._2\n\
    \        val class_name_last = class_name_sorted.last._2\n        val extensions_first_index\
    \ = extensions_sorted.indexOf((extensions_first.toUpperCase + extensions_first).toLowerCase)\n\
    \        val class_name_first_index = class_name_sorted.indexOf((class_name_first.toUpperCase\
    \ + class_name_first).toLowerCase)\n        val extensions_last_index = extensions_sorted.indexOf((extensions_last.toUpperCase\
    \ + extensions_last).toLowerCase)\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last.toUpperCase\
    \ + class_name_last).toLowerCase)\n        val extensions_first_value = extensions_sorted.apply(extensions_first_index)._2\n\
    \        val class_name_first_value = class_name_sorted.apply(class_name_first_index)._2\n\
    \        val extensions_last_value = extensions_sorted.apply(extensions_last_index)._2\n\
    \        val class_name_last_value = class_name_sorted.apply(class_name_last_index)._2\n\
    \        val extensions_first_key = extensions_sorted.apply(extensions_first_index)._1\n\
    \        val class_name_first_key = class_name_sorted.apply(class_name_first_index)._1\n\
    \        val extensions_last_key = extensions_sorted.apply(extensions_last_index)._1\n\
    \        val class_name_last_key = class_name_sorted.apply(class_name_last_index)._1\n\
    \        val extensions_first_key_value = extensions_sorted.apply(extensions_first_index)._2\n\
    \        val class_name_first_key_value = class_name_sorted.apply(class_name_first_index)._2\n\
    \        val extensions_last_key_value = extensions_sorted.apply(extensions_last_index)._2\n\
    \        val class_name_last_key_value = class_name_sorted.apply(class_name_last_index)._2\n\
    \        val extensions_first_key_key = extensions_sorted.apply(extensions_first_index)._1\n\
    \        val class_name_first_key_key = class_", "        val extensions_map =\
    \ extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ ==\
    \ 'a')) \n        val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n\
    \        val extensions_sorted = extensions_sorted.take(extensions_sorted.length-1)\n\
    \        val extensions_sorted = extensions_sorted.map(e => class_name + e.toUpperCase.take(e.toUpperCase.length-1))\n\
    \        extensions_sorted.head", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = strength.toString.substring(0,1)\n        val strength_int\
    \ = strength.toString.substring(1,2)\n        val strength_float = strength.toString.substring(2,3)\n\
    \        val strength_double = strength.toString.substring(3,4)\n        val strength_long\
    \ = strength.toString.substring(4,5)\n        val strength_char = strength.toString.substring(5,6)\n\
    \        val strength_short = strength.toString.substring(6,7)\n        val strength_int\
    \ = strength_int.toInt\n        val strength_float = strength_float.toFloat\n\
    \        val strength_double = strength_double.toDouble\n        val strength_long\
    \ = strength_long.toLong\n        val strength_char = strength_char.toChar\n \
    \       val strength_short = strength_short.toShort\n        val strength_str\
    \ = strength_str.toString.toUpperCase\n        val strength_int = strength_int.toString.toUpperCase\n\
    \        val strength_float = strength_float.toString.toUpperCase\n        val\
    \ strength_double = strength_double.toString.toUpperCase\n        val strength_long\
    \ = strength_long.toString.toUpperCase\n        val strength_char = strength_char.toString.toUpperCase\n\
    \        val strength_short = strength_short.toString.toUpperCase\n        val\
    \ strength_str = strength_str.toString.toUpperCase\n        val strength_int =\
    \ strength_int.toString.toUpperCase\n        val strength_float = strength_float.toString.toUpperCase\n\
    \        val strength_double = strength_double.toString.toUpperCase\n        val\
    \ strength_long = strength_long.toString.toUpperCase\n        val strength_char\
    \ = strength_char.toString.toUpperCase\n        val strength_short = strength_short.toString.toUpperCase\n\
    \        val strength_str = strength_str.toString.toUpperCase\n        val strength_int\
    \ = strength_int.toString.toUpperCase\n        val strength_float = strength_float.toString.toUpperCase\n\
    \        val strength_double = strength_double.toString.toUpperCase\n        val\
    \ strength_long = strength_long.toString.toUpperCase\n        val strength_char\
    \ = strength_char.toString.toUpperCase\n        val strength_short = strength_short.toString.toUpperCase\n\
    \        val strength_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith((a, b) => b.length\
    \ - a.length)\n        val strength = extensions_count_sorted.map(_.length).sum\
    \ / extensions_count_sorted.length\n        val class_name_length = class_name.length\n\
    \        val extensions_length_sorted = extensions_count.sortWith((a, b) => b\
    \ - a)\n        val extensions_length_sorted_length = extensions_length_sorted.sum\n\
    \        val extensions_length_sorted_length_sorted = extensions_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length = extensions_length_sorted_length_sorted.sum\n\
    \        val extensions_length_sorted_length_sorted_length_sorted = extensions_length_sorted_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_length_sorted_length_sorted_length_sorted.sum\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted.sortWith((a, b) => b\
    \ - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted.sum\n \
    \       val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sum\n\
    \        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b - a)\n        val extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val strength = extensions_map.max\n\
    \        val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n     \
    \   val extensions_sorted = extensions_sorted.takeWhile(_ < strength)\n      \
    \  val extensions_sorted = extensions_sorted.mkString(\".\")\n        val extensions_sorted\
    \ = extensions_sorted.replaceAll(\"\\\\..*\", \"\")\n        class_name + extensions_sorted",
  "        val extensions_map = extensions.map(x => x.toUpperCase.count(_ == 'A')\
    \ - x.toUpperCase.count(_ == 'a')).toMap\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.take(extensions_sorted.length\
    \ / 2)\n        val extensions_sorted = extensions_sorted.map(_._2).mkString(\"\
    .\")\n        class_name + extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) - e.toUpperCase.charAt(1).toInt)\n        val strength\
    \ = extensions_map.reduceLeft(_ + _)\n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val extension_str = extensions_sorted.map(e => class_name + e.toUpperCase).mkString(\"\
    .\")\n        val strength_str = if (strength == 0) \"0\" else strength.toString\n\
    \        extension_str + \".\" + strength_str", "        val extensions_map =\
    \ extensions.map(e => e.map(c => (c.toUpperCase, c.toLowerCase)).toMap)\n    \
    \    val strengths = extensions_map.values.map(_.length)\n        val max_strength\
    \ = strengths.max\n        val max_extension = extensions_map.values.filter(_.length\
    \ == max_strength).head\n        val max_extension_str = max_extension.mkString.replaceAll(\"\
    \\\\W\", \"\")\n        val class_name_str = class_name.mkString.replaceAll(\"\
    \\\\W\", \"\")\n        val max_extension_class_name = max_extension_str + \"\
    .\" + max_extension_str\n        val max_extension_class_name_str = max_extension_class_name\
    \ + \".\" + max_extension_class_name\n        val max_extension_class_name_str_2\
    \ = max_extension_class_name_str + \".\" + max_extension_class_name_str\n    \
    \    val max_extension_class_name_str_3 = max_extension_class_name_str_2 + \"\
    .\" + max_extension_class_name_str_2\n        val max_extension_class_name_str_4\
    \ = max_extension_class_name_str_3 + \".\" + max_extension_class_name_str_3\n\
    \        val max_extension_class_name_str_5 = max_extension_class_name_str_4 +\
    \ \".\" + max_extension_class_name_str_4\n        val max_extension_class_name_str_6\
    \ = max_extension_class_name_str_5 + \".\" + max_extension_class_name_str_5\n\
    \        val max_extension_class_name_str_7 = max_extension_class_name_str_6 +\
    \ \".\" + max_extension_class_name_str_6\n        val max_extension_class_name_str_8\
    \ = max_extension_class_name_str_7 + \".\" + max_extension_class_name_str_7\n\
    \        val max_extension_class_name_str_9 = max_extension_class_name_str_8 +\
    \ \".\" + max_extension_class_name_str_8\n        val max_extension_class_name_str_10\
    \ = max_extension_class_name_str_9 + \".\" + max_extension_class_name_str_9\n\
    \        val max_extension_class_name_str_11 = max_extension_class_name_str_10\
    \ + \".\" + max_extension_class_name_str_10\n        val max_extension_class_name_str_12\
    \ = max_extension_class_name_str_11 + \".\" + max_extension_class_name_str_11\n\
    \        val max_extension_class_name_str_13 = max_extension_class_name_str_12\
    \ + \".\" + max_extension_class_name_str_12\n        val max_extension_class_name_str_14\
    \ = max_extension_class_name_str_13 + \".\" + max_extension_class_name_str_13\n\
    \        val max_extension_class_name_str_15 = max_extension_class_name_str_14\
    \ + \".\" + max_extension_class_name_str_14\n        val max_extension_class_name_str_16\
    \ = max_extension", "        val extensions_map = extensions.map(e => (e.toUpperCase.size,\
    \ e.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val strongest_extension = extensions_map.values.find(x\
    \ => x == strength).head\n        s\"$class_name.$strongest_extension\"", "  \
    \      // Write your code here\n        val extension_map = extensions.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extension_map.filter(_._2.length\
    \ == class_name_map.get(_._2)).length\n        val strongest_extension = extension_map.filter(_._2.length\
    \ == strength).sortBy(_._1).head._2\n        class_name_map.get(strongest_extension)",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'a') + 1)\n        val strength = extensions_map.max\n\
    \        val extensions_sorted = extensions_map.toList.sortWith(_ < _)\n     \
    \   val extension_strength = extensions_sorted.head\n        val extension_class\
    \ = extensions_sorted.last\n        val extension_class_name = extension_class.replaceAll(\"\
    [A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")\n        val extension_class_name_with_extension\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_2\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_3\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_4\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_5\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_6\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_7\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_8\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_9\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_10\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_11\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_12\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_13\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_14\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_15\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_16\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_17\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_18\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_19\
    \ = extension_class_name + \".\" + extension_strength\n        val extension_class_name_with_extension_20\
    \ = extension_class_name + \".\" + extension_strength\n        val ", "      \
    \  val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).toList.max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.take(extensions_sorted.length-1)\n        val extensions_sorted\
    \ = extensions_sorted.map(_._2).mkString(\".\")\n        val extensions_sorted\
    \ = extensions_sorted.replaceAll(\"\\\\W\", \"\")\n        class_name + extensions_sorted",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortBy(_.length).reverse\n        val extensions_count_sorted_index\
    \ = extensions_count_sorted.indexOf(extensions_count)\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extensions_count_sorted_index_prev\
    \ = extensions_count_sorted_index - 1\n        val extensions_count_sorted_index_next\
    \ = extensions_count_sorted_index + 1\n        val extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => if (a > b) a else b)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extension = extensions_sorted.find(x => x._2 == strength).get._1\n\
    \        class_name + extension", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a')).toMap\n  \
    \      val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val first_extension = sorted_extensions.head\n\
    \        val class_name = class_name.substring(0, class_name.lastIndexOf('.'))\n\
    \        val extension_name = first_extension.substring(0, first_extension.lastIndexOf('.'))\n\
    \        val extension_strength = extensions_map.get(extension_name)\n       \
    \ if (extension_strength == null) {\n            val sorted_extensions_2 = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \            val first_extension_2 = sorted_extensions_2.head\n            val\
    \ extension_name_2 = first_extension_2.substring(0, first_extension_2.lastIndexOf('.'))\n\
    \            val extension_strength_2 = extensions_map.get(extension_name_2)\n\
    \            if (extension_strength_2 == null) {\n                val sorted_extensions_3\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n                val first_extension_3\
    \ = sorted_extensions_3.head\n                val extension_name_3 = first_extension_3.substring(0,\
    \ first_extension_3.lastIndexOf('.'))\n                val extension_strength_3\
    \ = extensions_map.get(extension_name_3)\n                if (extension_strength_3\
    \ == null) {\n                    val sorted_extensions_4 = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \                    val first_extension_4 = sorted_extensions_4.head\n      \
    \              val extension_name_4 = first_extension_4.substring(0, first_extension_4.lastIndexOf('.'))\n\
    \                    val extension_strength_4 = extensions_map.get(extension_name_4)\n\
    \                    if (extension_strength_4 == null) {\n                   \
    \     val sorted_extensions_5 = extensions_map.toSeq.sortBy(_._1).reverse\n  \
    \                      val first_extension_5 = sorted_extensions_5.head\n    \
    \                    val extension_name_5 = first_extension_5.substring(0, first_extension_5.lastIndexOf('.'))\n\
    \                        val extension_strength_5 = extensions_map.get(extension_name_5)\n\
    \                        if (extension_strength_5 == null) {\n               \
    \             val sorted_extensions_6 = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \                            val first_extension_6 = sorted_extensions_6.head\n\
    \                            val extension_name_6 = first_extension_6.substring(0,\
    \ first_extension_6.lastIndexOf('.'))\n                            val extension_strength_6\
    \ = extensions_map.get(extension_name_6)\n                            if (extension_strength_6\
    \ == null) {\n                                val sorted_extensions_7 = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \                                val first_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)\
    \ { (s, e) =>\n            val c = class_name_map.getOrElse(e, \"\")\n       \
    \     val c = c.toUpperCase\n            val s = c.length - s.length\n       \
    \     s + s\n        }\n        val class_name = class_name_map.getOrElse(\"\"\
    , \"\")\n        val class_name = class_name.toUpperCase\n        val extension\
    \ = extensions_map.getOrElse(\"\", \"\")\n        val extension = extension.toUpperCase\n\
    \        val extension = extension.substring(0, extension.length - extension.indexOf(\"\
    .\"))\n        val extension = extension.substring(0, extension.indexOf(\".\"\
    ))\n        val extension = extension.substring(0, extension.indexOf(\".\"))\n\
    \        val extension = extension.substring(0, extension.indexOf(\".\"))\n  \
    \      val extension = extension.substring(0, extension.indexOf(\".\"))\n    \
    \    val extension = extension.substring(0, extension.indexOf(\".\"))\n      \
    \  val extension = extension.substring(0, extension.indexOf(\".\"))\n        val\
    \ extension = extension.substring(0, extension.indexOf(\".\"))\n        val extension\
    \ = extension.substring(0, extension.indexOf(\".\"))\n        val extension =\
    \ extension.substring(0, extension.indexOf(\".\"))\n        val extension = extension.substring(0,\
    \ extension.indexOf(\".\"))\n        val extension = extension.substring(0, extension.indexOf(\"\
    .\"))\n        val extension = extension.substring(0, extension.indexOf(\".\"\
    ))\n        val extension = extension.substring(0, extension.indexOf(\".\"))\n\
    \        val extension = extension.substring(0, extension.indexOf(\".\"))\n  \
    \      val extension = extension.substring(0, extension.indexOf(\".\"))\n    \
    \    val extension = extension.substring(0, extension.indexOf(\".\"))\n      \
    \  val extension = extension.substring(0, extension.indexOf(\".\"))\n        val\
    \ extension = extension.substring(0, extension.indexOf(\".\"))\n        val extension\
    \ = extension.substring(0, extension.indexOf(\".\"))\n        val extension =\
    \ extension.substring(0, extension.indexOf(\".\"))\n        val extension = extension.substring(0,\
    \ extension.indexOf(\".\"))\n        val extension = extension.substring(0, extension.indexOf(\"\
    .\"))\n        val extension = extension.substring(0, extension.indexOf(\".\"\
    ))\n        val extension = extension.substring(0, extension.indexOf(\".\"))\n\
    \        val extension = extension.substring(0, extension.indexOf(\".\"))\n  \
    \      val extension = extension.substring(0, extension.indexOf(\".\"))\n    \
    \    val extension = extension.substring(0, extension.indexOf(\".\"))\n      \
    \  val extension = extension.substring(0, extension.indexOf(\".\"))\n        ",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) - e.toUpperCase.charAt(1).toInt)\n\
    \        val strength = extensions_map.reduce((a, b) => math.max(a, b))\n    \
    \    val extensions_sorted = extensions_map.sortWith((a, b) => a < b)\n      \
    \  val extension_strength = extensions_sorted.last\n        val extension_class\
    \ = extensions_sorted.head\n        val extension_class_name = extension_class.substring(0,1).toUpper\
    \ + extension_class.substring(1).toLowerCase\n        val extension_class_name_sorted\
    \ = extension_class_name.sortWith((a, b) => a < b)\n        val extension_class_name_strength\
    \ = extension_class_name_sorted.last\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.head\n        val extension_class_name_strength\
    \ = extension_class_name_strength.toString.toInt\n        val extension_class_name_strength_sorted\
    \ = extension_class_name_strength.sortWith((a, b) => a < b)\n        val extension_class_name_strength_sorted\
    \ = extension_class_name_strength_sorted.last\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.head\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.toString.toInt\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.toString\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.substring(0,1).toUpper + extension_class_name_sorted.substring(1).toLowerCase\n\
    \        val extension_class_name_sorted = extension_class_name_sorted.sortWith((a,\
    \ b) => a < b)\n        val extension_class_name_strength_sorted = extension_class_name_strength_sorted.last\n\
    \        val extension_class_name_sorted = extension_class_name_sorted.head\n\
    \        val extension_class_name_sorted = extension_class_name_sorted.toString.toInt\n\
    \        val extension_class_name_sorted = extension_class_name_sorted.toString\n\
    \        val extension_class_name_sorted = extension_class_name_sorted.substring(0,1).toUpper\
    \ + extension_class_name_sorted.substring(1).toLowerCase\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.sortWith((a, b) => a < b)\n        val extension_class_name_strength_sorted\
    \ = extension_class_name_strength_sorted.last\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.head\n        val extension_class_name_sorted\
    \ = extension_class_name_sorted.toString.toInt\n        val ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0)((acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n\
    \        val strongest_extension = extensions_map.maxBy(x => x._2)._2\n      \
    \  val class_name = class_name_map.maxBy(x => x._2)._2\n        val extension\
    \ = extensions_map.maxBy(x => x._1)._1\n        s\"$class_name.$strongest_extension.$extension\"",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B')).toMap\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.take(1).map(_._2)\n       \
    \ val extensions_sorted = extensions_sorted.toList\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e)\n        extensions_sorted.head",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map(x._1) -\
    \ class_name_map(x._2)).sum\n        val strongest_extension = extensions_map.values.filter(x\
    \ => x._1 == strength).head._2\n        class_name + \".\" + strongest_extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).toArray\n        val max_strength = strength.max\n\
    \        val max_key = extensions_map.keys.toArray.max\n        val max_value\
    \ = strength.max\n        val max_key = extensions_map.keys.toArray.max\n    \
    \    val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.values.toList.sortWith((x,\
    \ y) => x < y)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ > 0)\n        val extensions_sorted = extensions_sorted.reverse\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_ > 0)\n        val extensions_sorted\
    \ = extensions_sorted.reverse\n        val extensions_sorted = extensions_", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val class_name_length\
    \ = class_name.length\n        val extension_length = extensions_count.toDouble\
    \ / class_name_length\n        val strength = extension_length - extensions_count.toDouble\n\
    \        val extension_strength = extension_length - strength\n        val extension_strength_str\
    \ = extension_strength.toString\n        val extension_strength_str_length = extension_strength_str.length\n\
    \        val extension_strength_str_length_str = extension_strength_str_length.toString\n\
    \        val extension_strength_str_length_str_length = extension_strength_str_length_str.length\n\
    \        val extension_strength_str_length_str_length_str = extension_strength_str_length_str_length.toString\n\
    \        val extension_strength_str_length_str_length_str_length = extension_strength_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str = extension_strength_str_length_str_length_str_length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length =\
    \ extension_strength_str_length_str_length_str_length_str.length.toString\n  \
    \      val extension_strength_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString\n\
    \        val extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = extension_strength_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.length.toString",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_map\
    \ = extensions.map(_.length).zipWithIndex.toMap\n        val extensions_count_map_sorted\
    \ = extensions_count_map.toSeq.sortBy(_._1).reverse\n        val extensions_count_map_sorted_with_zero\
    \ = extensions_count_map_sorted.map(_._2)\n        val extensions_count_map_sorted_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero.map(_ + 1).filter(_ > 0)\n        val\
    \ extensions_count_map_sorted_with_zero_with_zero_with_zero = extensions_count_map_sorted_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero.map(_ + 1).filter(_\
    \ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => x - y)\n      \
    \  val extension = extensions_map.values.find(x => x == strength).getOrElse(\"\
    \")\n        val class_name_with_extension = class_name + extension\n        val\
    \ class_name_with_extension_lowercase = class_name_with_extension.toLowerCase\n\
    \        val class_name_with_extension_uppercase = class_name_with_extension.toUpperCase\n\
    \        val extension_lowercase = extension.toLowerCase\n        val extension_uppercase\
    \ = extension.toUpperCase\n        val extension_length = extension.length\n \
    \       val extension_length_lowercase = extension_lowercase.length\n        val\
    \ extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase = extension_lowercase.length\n       \
    \ val extension_length_uppercase = extension_uppercase.length\n        val extension_length_lowercase\
    \ = extension_lowercase.length\n        val extension_length_uppercase = extension_uppercase.length\n\
    \        val extension_length_lowercase", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'a') + 1)\n    \
    \    val strength = extensions_map.max\n        val extensions_sorted = extensions_map.toList.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.takeWhile(_ < strength)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\")\n        class_name\
    \ + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val strength_sum = strength_upper\
    \ + strength_lower\n        if (strength_sum > 0) {\n            val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n      \
    \      val extensions_sorted = extensions.sortWith((a, b) => strength_sum - a.length\
    \ - b.length)\n            val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_sum - a.length - b.length)\n            val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n        \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength_sum - a.length\
    \ - b.length)\n            val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_sum - a.length - b.length)\n            val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n        \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength_sum - a.length\
    \ - b.length)\n            val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_sum - a.length - b.length)\n            val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n        \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength_sum - a.length\
    \ - b.length)\n            val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_sum - a.length - b.length)\n            val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n        \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength_sum - a.length\
    \ - b.length)\n            val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_sum - a.length - b.length)\n            val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n        \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength_sum - a.length\
    \ - b.length)\n            val extensions_sorted = extensions.sortWith((a, b)\
    \ => strength_sum - a.length - b.length)\n            val extensions_sorted =\
    \ extensions.sortWith((a, b) => strength_sum - a.length - b.length)\n        \
    \    val extensions_sorted = extensions.sortWith((", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) - e.toLowerCase.charAt(0)).toMap\n\
    \        val extensions_count = extensions_map.values.toSet.size\n        val\
    \ extensions_sum = extensions_map.values.sum\n        val strength = extensions_sum\
    \ / extensions_count\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > ", '        //
    Your code here', "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_map = extensions.map(_.length).zipWithIndex.toMap\n\
    \        val extensions_count_map_sorted = extensions_count_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_with_zero = extensions_count_map_sorted.map(_._2)\n\
    \        val extensions_count_map_sorted_with_zero_with_zero = extensions_count_map_sorted_with_zero.map(_\
    \ + 1).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero.map(_ + 1).filter(_ > 0).filter(_\
    \ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero.map(_ + 1).filter(_\
    \ > 0).filter(_ > 0).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0)\n\
    \        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_\
    \ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_\
    \ > 0).filter(_ > 0)\n        val extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\
    \ = extensions_count_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero.map(_\
    \ + 1).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_ > 0).filter(_\
    \ > 0).filter(_ > ", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.indexWhere(x => x == max_strength)\n        val\
    \ max_extension = extensions(max_key)\n        val class_name = class_name_map.get(max_extension)\n\
    \        class_name.getOrElse(\"\")", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = class_name_map.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._2).reverse\n        val extension_strength = extensions_sorted.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n        if (strength == extension_strength)\
    \ {\n            class_name_map.getOrElse(class_name, \"\")\n        } else {\n\
    \            val strength_sorted = extensions_sorted.sortBy(x => x._1).reverse\n\
    \            val extension_strength_sorted = strength_sorted.foldLeft(0) { (acc,\
    \ x) => acc + (x._2 - x._1) }\n            if (strength_sorted == extension_strength_sorted)\
    \ {\n                class_name_map.getOrElse(class_name, \"\")\n            }\
    \ else {\n                val strength_sorted_sorted = extensions_sorted.sortBy(x\
    \ => x._1).reverse\n                val extension_strength_sorted_sorted = strength_sorted_sorted.foldLeft(0)\
    \ { (acc, x) => acc + (x._2 - x._1) }\n                if (strength_sorted_sorted\
    \ == extension_strength_sorted_sorted) {\n                    class_name_map.getOrElse(class_name,\
    \ \"\")\n                } else {\n                    val strength_sorted_sorted_sorted\
    \ = extensions_sorted.sortBy(x => x._1).reverse\n                    val extension_strength_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted.foldLeft(0) { (acc, x) => acc + (x._2 - x._1)\
    \ }\n                    if (strength_sorted_sorted_sorted == extension_strength_sorted_sorted_sorted)\
    \ {\n                        class_name_map.getOrElse(class_name, \"\")\n    \
    \                } else {\n                        val strength_sorted_sorted_sorted_sorted\
    \ = extensions_sorted.sortBy(x => x._1).reverse\n                        val extension_strength_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted.foldLeft(0) { (acc, x) => acc + (x._2\
    \ - x._1) }\n                        if (strength_sorted_sorted_sorted_sorted\
    \ == extension_strength_sorted_sorted_sorted_sorted) {\n                     \
    \       class_name_map.getOrElse(class_name, \"\")\n                        }\
    \ else {\n                            val strength_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted.sortBy(x => x._1).reverse\n                            val\
    \ extension_strength_sorted_sorted_sorted_sorted_sorted = strength_sorted_sorted_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed.sort\n        val extensions_count_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted.reverse\n        val extensions_count_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed.sort\n        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted.reverse\n        val\
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(x => -x)\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x < strength)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    \") + extensions_sorted.last\n        extensions_sorted", "        val extensions_count\
    \ = extensions.map(x => x.toUpperCase).distinct.length\n        val extensions_count_upper\
    \ = extensions.map(x => x.toUpperCase).distinct.length\n        val extensions_count_lower\
    \ = extensions.map(x => x.toLowerCase).distinct.length\n        val strength =\
    \ extensions_count_upper - extensions_count_lower\n        val class_name_upper\
    \ = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n\
    \        val extensions_count_upper = extensions.map(x => x.toUpperCase).distinct.length\n\
    \        val extensions_count_lower = extensions.map(x => x.toLowerCase).distinct.length\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(x\
    \ => x.toUpperCase).distinct.length\n        val extensions_count_lower = extensions.map(x\
    \ => x.toLowerCase).distinct.length\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(x => x.toUpperCase).distinct.length\n        val extensions_count_lower\
    \ = extensions.map(x => x.toLowerCase).distinct.length\n        val strength =\
    \ extensions_count_upper - extensions_count_lower\n        val class_name_upper\
    \ = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n\
    \        val extensions_count_upper = extensions.map(x => x.toUpperCase).distinct.length\n\
    \        val extensions_count_lower = extensions.map(x => x.toLowerCase).distinct.length\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(x\
    \ => x.toUpperCase).distinct.length\n        val extensions_count_lower = extensions.map(x\
    \ => x.toLowerCase).distinct.length\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper\
    \ = extensions.map(x => x.toUpperCase).distinct.length\n        val extensions_count_lower\
    \ = extensions.map(x => x.toLowerCase).distinct.length\n        val strength =\
    \ extensions_count_upper - extensions_count_lower\n        val class_name_upper\
    \ = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n\
    \        val extensions_count_upper = extensions.map(x => x.", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) - e.toLowerCase.charAt(0)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => if (a > b) a else\
    \ b)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"(.)\\\\1\"\
    , \"$1\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"([A-Z])\"\
    , \"$1\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"([a-z])\"\
    , \"$1\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"([A-Za-z])\"\
    , \"$1\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"([A-Z])([a-z])\"\
    , \"$1_$2\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([a-z])([A-Z])\", \"$1_$2\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([A-Z])([A-Za-z])\", \"$1_$2\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([a-z])([A-Z])([A-Za-z])\", \"$1_$2_$3\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([A-Z])([A-Za-z])([A-Z])\", \"$1_$2_$3\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([a-z])([A-Z])([A-Za-z])\", \"$1_$2_$3\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([A-Z])([A-Za-z])([A-Z])([A-Za-z])\", \"$1_$2_$3_$4\")\n        val extensions_sorted\
    \ = extensions_sorted.replaceAll(\"([a-z])([A-Z])([A-Za-z])([A-Z])\", \"$1_$2_$3_$4\"\
    )\n        val extensions_sorted = extensions_sorted.replaceAll(\"([A-Z])([A-Za-z])([A-Z])([A-Za-z])\"\
    , \"$1_$2_$3_$4\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\
    ([a-z])([A-Z])([A-Za-z])([A-Z])([A-Za-z])\", \"$1_$2_$3_$4_$5\")\n        val\
    \ extensions_sorted = extensions_sorted.replaceAll(\"([A-Z])([A-Za-z])([", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortBy(_.length)\n        val extensions_count_sorted_length =\
    \ extensions_count_sorted.map(_.length)\n        val extensions_count_sorted_length_sorted\
    \ = extensions_count_sorted.sortBy(_.length)\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortBy(_.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortBy(_.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortBy(_.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(_.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sor",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val ", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = class_name_map.foldLeft(0)((x, y) => (x._2 - y._2))\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val extension_strength\
    \ = extensions_sorted.foldLeft(0)((x, y) => (x._2 - y._2))\n        if (strength\
    \ == extension_strength) {\n            class_name_map.foldLeft(class_name)((x,\
    \ y) => (x._1 + y._1))\n        } else {\n            val max_strength = extension_strength.max\n\
    \            val max_extension = extensions_sorted.find(x => x._2 == max_strength)\n\
    \            class_name_map.foldLeft(class_name)((x, y) => (x._1 + \".\" + max_extension._1))\n\
    \        }", "        val extensions_count = extensions.map(_.length).sum\n  \
    \      val extensions_count_sorted = extensions.map(_.length).sort\n        val\
    \ strength = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted = extensions_count_sorted.takeWhile(_\
    \ <= strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.takeWhile(_ <=\
    \ strength)\n        val extensions_count_sorted = extensions_count_sorted.reverse",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        extension", "        val extensions_map = extensions.map(e =>\
    \ (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val class_name_map = class_name.map(c\
    \ => (c.toUpperCase -> 1)).toMap\n        val max_extension_strength = extensions_map.values.max\n\
    \        val max_extension_strength_class_name = class_name_map.values.max\n \
    \       val max_extension_strength_class_name_with_extensions = max_extension_strength_class_name\
    \ match {\n            case Some(class_name) if (class_name_map.get(class_name).isDefined)\
    \ => class_name\n            case _ => max_extension_strength_class_name\n   \
    \     }\n        val max_extension_strength_class_name_with_extensions_map = max_extension_strength_class_name_with_extensions.map(c\
    \ => (c -> 1)).toMap\n        val max_extension_strength_class_name_with_extensions_map_with_extensions\
    \ = max_extension_strength_class_name_with_extensions_map.map(c => (c -> extensions_map.getOrElse(c,\
    \ _)))\n        val max_extension_strength_class_name_with_extensions_map_with_extensions_sorted\
    \ = max_extension_strength_class_name_with_extensions_map_with_extensions.sortBy(_._1).reverse\n\
    \        val max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions\
    \ = max_extension_strength_class_name_with_extensions_map_with_extensions_sorted.take(1).getOrElse(max_extension_strength_class_name_with_extensions_map_with_extensions_sorted.head)\n\
    \        val max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted\
    \ = max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions.sortBy(_._1).reverse\n\
    \        val max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted\
    \ = max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted.take(1).getOrElse(max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted.head)\n\
    \        val max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted_with_extensions\
    \ = max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted.take(1).getOrElse(max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted.head)\n\
    \        val max_extension_strength_class_name_with_extensions_map_with_extensions_sorted_with_extensions_sorted_with_extensions_sorted\
    \ = max_extension"]
stop_tokens:
- "\n    }\n"
