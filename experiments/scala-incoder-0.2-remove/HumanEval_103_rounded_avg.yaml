name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n :\
  \ Long, m : Long) : Either[String, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        if (n <= m) Right(roundToNearestInt(m))\n        else Left(s\"\
    $n must be greater than $m\")", "        val avg = n / m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      if (rounded == avg) {\n            Right(binary)\n        } else {\n  \
    \          Left(s\"$n / $m is $avg, not $rounded\")\n        }", "        if (n\
    \ == 0 || m == 0) Right(-1)\n        if (n > m) Right(-1)\n        val avg = n\
    \ / m\n        val rounded = math.round(avg)\n        val binary = binary(rounded)\n\
    \        Right(binary)", "        val sum = n to m by -1\n        val avg = sum.sum\
    \ / sum.count\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin == 0) Right(bin) else Left(s\"$bin is not a valid binary number\"\
    )\n        result", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg)\n        val binary = binary(rounded)\n\
    \        val result = if (rounded == 0) Right(rounded) else Left(binary)\n   \
    \     result", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg).toBinaryString\n        if (rounded ==\
    \ 0) {\n            Right(rounded)\n        } else {\n            Left(s\"${rounded}:\
    \ ${sum.size - sum.indexWhere(x => x == rounded)}\")\n        }", "        val\
    \ sum : Long = n to m by -1\n        val sumOfSquares : Long = sum.map(x => x\
    \ * x).sum\n        val avg : Long = sumOfSquares / sum.length\n        val roundedAvg\
    \ = math.round(avg)\n        val binaryAvg = math.pow(2,roundedAvg)\n        val\
    \ result = Right(binaryAvg)\n        result", "        val avg = n/m\n       \
    \ val rounded = math.round(avg)\n        val binary = binary(rounded)\n      \
    \  val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not an\
    \ average of $n through $m\")\n        result", "        val sum = (n to m).sum\n\
    \        val avg = sum / m\n        val rounded = math.round(avg)\n        val\
    \ binary = binary(rounded)\n        val result = if (rounded == 0) Right(binary)\
    \ else Left(s\"$rounded is not an integer\")\n        result", "        if (n\
    \ == 0 || m == 0) Right(-1)\n        else if (n > m) Right(-1)\n        else if\
    \ (n == m) Right(n / 2)\n        else Left(s\"$n to $m is too large\")", "   \
    \     val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg).toBinaryString\n        val result = if (rounded == avg) Right(rounded)\
    \ else Left(s\"$rounded is not an average\")\n        result", "        val sum\
    \ = n to m\n        val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"$rounded is not an integer.\")\n        result match\
    \ {\n            case Right(rounded) => Right(rounded)\n            case Left(msg)\
    \ => Left(msg)\n        }", "        val avg = n to m by -1\n        val sum =\
    \ n to m by -1\n        val avg = avg.sum / avg.length\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val ", "        if (n > m) Right(-1)\n        else {\n            val\
    \ sum = (n to m).foldLeft(0)(_ + _)\n            val avg = sum / m\n         \
    \   val rounded = math.round(avg)\n            val binary = Integer.toBinaryString(rounded)\n\
    \            Right(binary)\n        }", "        val sum = n to m\n        val\
    \ avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n        val\
    \ binary = Integer.toBinaryString(rounded)\n        val result = if (rounded ==\
    \ 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result",
  "        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n        val\
    \ bin = math.round(avg).toBinaryString\n        val right = if (bin.size == 0)\
    \ -1 else bin.charAt(bin.length - 1)\n        val left = if (bin.size == 0) -1\
    \ else bin.charAt(0)\n        val result = if (right == '1') left else right\n\
    \        Right(result)", "        val n = math.max(math.min(n, m), -1)\n     \
    \   val m = math.max(math.min(m, n), -1)\n        val sum = n + m\n        val\
    \ avg = sum / 2\n        val bin = math.round(avg).toBinaryString\n        val\
    \ result = if (bin == \"\") Right(bin) else Left(s\"$bin is not an integer.\"\
    )\n        result", "        val avg = n to m by -1\n        val sum = 0L\n  \
    \      val count = 0L\n        avg.foreach(x => sum += x)\n        avg.foreach(x\
    \ => count += 1)\n        val avg = sum / count\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else bin.charAt(0)\n        Left(result)",
  "        val sum : Long = n to m by -1\n        val sumOfSquares : Long = sum.map(x\
    \ => x * x).sum\n        val avg : Long = sumOfSquares / sum.length\n        val\
    \ roundedAvg : Long = math.round(avg)\n        val binaryAvg : Long = math.pow(10,\
    \ math.ceil(math.log10(roundedAvg)))\n        val result : Either[String, Long]\
    \ = if (roundedAvg == binaryAvg) Right(roundedAvg) else Left(s\"$roundedAvg does\
    \ not equal $binaryAvg\")\n        result", "        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / sum.size\n      \
    \  val bin = Integer.toBinaryString(avg)\n        val res = if (bin.length ==\
    \ 1) Right(bin) else Left(s\"${bin.length} bit average\")\n        res", "   \
    \     val avg = n to m by -1\n        val sum = n to m by 1\n        val avg =\
    \ avg.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n     \
    \   val result = if (bin.size == 0) -1 else bin.charAt(bin.length - 1)\n     \
    \   val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 2)\n      \
    \  val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 3)\n        val\
    \ right = if (bin.size == 0) -1 else bin.charAt(bin.length - 4)\n        val left\
    \ = if (bin.size == 0) -1 else bin.charAt(bin.length - 5)\n        val right =\
    \ if (bin.size == 0) -1 else bin.charAt(bin.length - 6)\n        val left = if\
    \ (bin.size == 0) -1 else bin.charAt(bin.length - 7)\n        val right = if (bin.size\
    \ == 0) -1 else bin.charAt(bin.length - 8)\n        val left = if (bin.size ==\
    \ 0) -1 else bin.charAt(bin.length - 9)\n        val right = if (bin.size == 0)\
    \ -1 else bin.charAt(bin.length - 10)\n        val left = if (bin.size == 0) -1\
    \ else bin.charAt(bin.length - 11)\n        val right = if (bin.size == 0) -1\
    \ else bin.charAt(bin.length - 12)\n        val left = if (bin.size == 0) -1 else\
    \ bin.charAt(bin.length - 13)\n        val right = if (bin.size == 0) -1 else\
    \ bin.charAt(bin.length - 14)\n        val left = if (bin.size == 0) -1 else bin.charAt(bin.length\
    \ - 15)\n        val right = if (bin.size == 0) -1 else bin.charAt(bin.length\
    \ - 16)\n        val left = if (bin.size == 0) -1 else bin.charAt(bin.length -\
    \ 17)\n        val right = if (bin.size == 0) -1 else bin.charAt(bin.length -\
    \ 18)\n        val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 19)\n\
    \        val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 20)\n\
    \        val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 21)\n \
    \       val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 22)\n \
    \       val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 23)\n  \
    \      val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 24)\n  \
    \      val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 25)\n   \
    \     val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 26)\n   \
    \     val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 27)\n    \
    \    val right = if (bin.size == 0) ", "        val avg = n to m by -1\n     \
    \   val sum = n to m by -1\n        val avg = avg.sum / sum.size\n        val\
    \ bin = math.round(avg).toBinaryString\n        val result = if (bin.length ==\
    \ 1) \"0\" + bin else bin\n        Right(result)", "        if (n == 0 || m ==\
    \ 0) Right(-1)\n        else if (n > m) Right(-1)\n        else if (n == m) Right(n\
    \ / 2)\n        else Left(-1)", "        val avg = n to m by -1\n        val sum\
    \ = n to m by -1\n        val avg = sum.sum / sum.count\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.length == 0) \"-1\" else bin\n        Left(result)",
  "        if (n == 0 || m == 0) {\n            Right(-1)\n        } else if (n >\
    \ m) {\n            Right(-1)\n        } else {\n            val sum = (n to m).foldLeft(0)(_\
    \ + _)\n            val avg = sum / m\n            val rounded = math.round(avg)\n\
    \            Right(rounded)\n        }", "        val avg = n to m by -1\n   \
    \     val sum = avg.sum\n        val avg = sum / avg.length\n        val bin =\
    \ Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n            Left(s\"\
    $bin is too short\")\n        } else {\n            Right(avg)\n        }", " \
    \       val sum = (n to m).sum\n        val avg = sum / m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ a round number\")\n        result", "        val avg = n + (m / 2)\n       \
    \ if (avg > m) Left(s\"$avg exceeds $m\")\n        else if (avg < n) Right(avg)\n\
    \        else Right(s\"$avg equals $m\")", "        val sum = (n to m).sum\n \
    \       val avg = sum / m\n        val rounded = math.round(avg)\n        val\
    \ binary = binary(rounded)\n        val result = if (rounded == 0) Right(binary)\
    \ else Left(s\"$rounded is not a binary number\")\n        result", "        val\
    \ sum = mutable.ListBuffer[Long]()\n        val avg = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n    \
    \        return Left(s\"$n is greater than $m\")\n        }\n        for (i <-\
    \ n until m) {\n            sum += i\n            avg += i\n        }\n      \
    \  val avg = sum.toDouble / avg.length\n        val rounded = Math.round(avg).toBinaryString\n\
    \        if (rounded == 0) {\n            return Right(rounded)\n        }\n \
    \       val result = Right(rounded)\n        result.fold(Left(_), Right(_))",
  "        val avg = n/m\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        if (rounded > m) Right(-1)\n        else Left(binary)",
  "        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n        val\
    \ bin = math.round(avg).toBinaryString\n        val result = if (bin == \"\")\
    \ -1 else bin\n        Right(result)", "        val avg = n / m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer, $binary is returned\")\n        result", "        val n = math.max(math.min(n,\
    \ m), -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = (n\
    \ to m).sum\n        val avg = sum / m\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else Right(bin)\n        result", " \
    \       val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.toList\n        val sum = sum.toList\n        val avg = avg.sum / sum.size\n\
    \        val bin = math.round(avg).toBinaryString\n        val bin = bin.substring(bin.length\
    \ - 1)\n        val right = bin.length - 1\n        val left = bin.length\n  \
    \      val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val ", "        val avg = n to m\
    \ by -1\n        val sum = 0\n        val sumOfSquares = 0\n        val binary\
    \ = \"\"\n        for(i <- 0 until avg.length) {\n            val value = avg(i)\n\
    \            sum += value\n            sumOfSquares += value * value\n       \
    \     binary += value.toBinaryString\n        }\n        val avg = sum / avg.length\n\
    \        val squareOfAvg = sumOfSquares / avg.length\n        if(squareOfAvg ==\
    \ 0) Right(binary) else Left(s\"${binary} is not an exact binary number\")", " \
    \       val avg = n to m by -1\n        val sum = 0\n        val count = 0\n \
    \       for(i <- 0 until avg.length) {\n            sum += avg(i)\n          \
    \  count += 1\n        }\n        if(count > 0) Right(sum.toInt)\n        else\
    \ Left(s\"$n to $m doesn't include $n\")", "        if (n >= m) Right(-1)\n  \
    \      else {\n            val sum = n to m\n            val avg = sum.sum / sum.size\n\
    \            val bin = math.round(avg).toBinaryString\n            Right(bin)\n\
    \        }", "        if (n > m) {\n            Left(s\"$n is greater than $m\"\
    )\n        } else if (n == m) {\n            Right(n)\n        } else {\n    \
    \        val avg = n + (m - 1) / 2\n            val binary = math.round(avg).toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = math.round(avg).toBinaryString\n        val result = if (bin ==\
    \ \"\") -1 else bin\n        Left(result)", "        val sum = n to m\n      \
    \  val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n     \
    \   val binary = math.pow(2,rounded)\n        val result = if (rounded == 0) Right(binary)\
    \ else Left(s\"$rounded is not a power of 2\")\n        result", "        val\
    \ avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n \
    \       if (bin.length < 8) {\n            Left(s\"$n through $m average is $avg\"\
    )\n        } else {\n            Right(bin)\n        }", "        val sum = n\
    \ to m\n        val avg = sum.sum / sum.length\n        val rounded = math.round(avg).toBinaryString\n\
    \        val result = Right(rounded)\n        if (rounded == 0) Left(s\"$rounded\
    \ is zero\")\n        else result", "        val sum = n to m\n        val avg\
    \ = sum.sum / sum.length\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        val result = if (rounded == 0) Right(rounded) else\
    \ Left(s\"$rounded is not a binary number\")\n        result", "        val avg\
    \ = n to m by -1\n        val sum = n to m by -1\n        val avg = avg.sum /\
    \ avg.length\n        val bin = Integer.toBinaryString(Math.round(avg))\n    \
    \    val right = bin.substring(bin.length - 1)\n        val left = bin.substring(0,\
    \ bin.length - 1)\n        val result = if (right == left) Right(avg) else Left(s\"\
    $n to $m is $avg\")\n        result", "        if (n >= m) Right(-1)\n       \
    \ else {\n            val sum = n to m by -1\n            val avg = sum.sum /\
    \ sum.length\n            val bin = math.round(avg).toBinaryString\n         \
    \   Right(bin)\n        }", "        val avg = n + (m - n) / 2\n        val bin\
    \ = math.round(avg).toBinaryString\n        val result = if (bin.size == m) Right(bin)\
    \ else Left(s\"$n through $m do not add up to $avg\")\n        result", "    \
    \    val avg = n/m\n        val rounded = math.round(avg)\n        val binary\
    \ = Integer.toBinaryString(rounded)\n        if (rounded > m) Left(s\"$rounded\
    \ > $m\")\n        else if (rounded < n) Right(s\"$rounded < $n\")\n        else\
    \ Right(binary)", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin.size\
    \ == 0) Left(s\"$n to $m is $avg\") else Right(bin)\n        result", "      \
    \  if (n == 0 || m == 0) Right(-1)\n        if (n > m) Right(-1)\n        val\
    \ sum = n to m by -1\n        val sum = sum.map(x => x.toLong).toList\n      \
    \  val sum = sum.foldLeft(0)(_ + _)\n        val avg = sum / sum.length\n    \
    \    val rounded = math.round(avg)\n        val binary = rounded.toBinaryString\n\
    \        val result = Right(binary)\n        result", "        val avg = n / m\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == avg) Right(binary) else Left(s\"$n / $m is\
    \ not an average of $n through $m\")\n        result", "        val avg = n /\
    \ (m + 1)\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = Right(binary)\n        if (n > m) Left(s\"$n cannot be greater\
    \ than $m\")\n        else result", "        val avg = n + (m - 1) / 2\n     \
    \   val bin = math.ceil(avg).toBinaryString\n        val result = if (bin.size\
    \ == m) Right(bin) else Left(\"Invalid input\")\n        result", "        val\
    \ avg = n to m by -1\n        val sum = avg.sum\n        val avg = sum / avg.length\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)", "        val avg = n / m\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg) Right(binary) else Left(s\"$n / $m is $avg, not $rounded\"\
    )", "        val sum : Long = n to m by -1\n        val sumOfSquares : Long =\
    \ sum.map(x => x * x).sum\n        val avg = sumOfSquares / sum.sum\n        val\
    \ roundedAvg = math.round(avg)\n        val binary = Integer.toBinaryString(roundedAvg)\n\
    \        val result = Right(binary)\n        result", "        val avg = ((n +\
    \ m) / 2).round\n        val binary = Integer.toBinaryString(avg)\n        if\
    \ (binary.length < 8) {\n            Left(s\"$n through $m average is $avg, which\
    \ is not an integer.\")\n        } else {\n            Right(avg)\n        }",
  "        val avg = n / m\n        val rounded = math.round(avg)\n        val binary\
    \ = Integer.toBinaryString(rounded)\n        val result = Right(binary)\n    \
    \    if (n > m) Left(s\"$n > $m\")\n        else result", "        val sum = n\
    \ to m\n        val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"$rounded is not a binary number\")\n        result ",
  "        val avg = n to m by -1\n        val sum = 0L\n        val sumOfSquares\
    \ = 0L\n        val count = 1L\n        val sumOfSquareOfSquares = 0L\n      \
    \  val sumOfSquareOfSquareOfSquares = 0L\n        val sumOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquares = 0L\n      \
    \  val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0L\n        val\
    \ sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0L\n        val\
    \ sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0L\n\
    \        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOf", "        if (n < m) Right(-1)\n        else\
    \ {\n            val avg = n + (m - 1) / 2\n            val bin = math.round(avg).toBinaryString\n\
    \            Right(bin)\n        }", "        val avg = n/m\n        val rounded\
    \ = math.round(avg)\n        val binary = binary(rounded)\n        val result\
    \ = if (rounded == m) Right(binary) else Left(s\"$rounded is not an average of\
    \ $n through $m\")\n        result", "        val sum = n to m\n        val avg\
    \ = sum.sum / sum.size\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        val result = if (rounded == 0) Right(rounded) else\
    \ Left(binary)\n        result", "        val avg = n to m by -1\n        val\
    \ sum = 0L\n        val num = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsSum = mutable.ListBuffer[Long]()\n        for (i <- 0 until avg.length)\
    \ {\n            sum += avg(i)\n            num += 1\n            nums += avg(i)\n\
    \            numsSum += avg(i)\n        }\n        if (num > m) {\n          \
    \  Left(s\"$num is not greater than $m\")\n        } else if (num == m) {\n  \
    \          Right(sum.toLong)\n        } else {\n            val avg = sum.toDouble\
    \ / num\n            val bin = nums.map(x => if (x == 0) \"0\" else if (x == 1)\
    \ \"1\" else \"10\").mkString\n            Right(s\"$sum is $avg which is $bin\
    \ and $nums sum is $numsSum\")\n        }", "        val avg = ((n + m) / 2.0).toInt\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin == \"\") Left(s\"\
    $n through $m is $avg\")\n        else Right(bin)", "        if (n <= m) Right(round(n/m)*m)\n\
    \        else Left(s\"$n must be greater than $m\")", "        val avg = n / m\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg) Right(binary) else Left(s\"$n / $m is $avg, not $rounded\"\
    )", "        val avg = n/m\n        val rounded = math.round(avg)\n        val\
    \ binary = binary(rounded)\n        val result = if (rounded == m) Right(binary)\
    \ else Left(s\"$rounded is not an average of $m and $n\")\n        result", " \
    \       val sum : Long = n to m by -1\n        val avg = sum.sum / sum.length\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 0) Left(s\"$avg cannot be represented as a binary number\") else Right(bin)\n\
    \        result", "        val avg = n + (m - 1) / 2\n        val bin = math.round(avg).toBinaryString\n\
    \        if (bin.length == 0) Left(s\"$avg can't be rounded to a binary number\"\
    )\n        else if (bin.length == 1) Right(bin)\n        else Left(s\"$avg can't\
    \ be rounded to a binary number with $bin.length digits\")", "        if (n <=\
    \ m) Right(n / m)\n        else if (n > m) Left(-1)\n        else Left(-1)", " \
    \       val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg)\n        val binary = binary(rounded)\n        val right =\
    \ if (rounded > m) -1 else rounded\n        val left = if (rounded < n) -1 else\
    \ rounded\n        val result = if (binary == 0) Left(s\"$left is too small\"\
    ) else if (binary == 1) Right(s\"$right is too large\") else Left(s\"$left is\
    \ too large\")\n        result", "        val sum = n to m\n        val avg =\
    \ sum.sum / sum.size\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        val result = if (rounded == 0) Right(rounded) else\
    \ Left(s\"$rounded is not a binary number\")\n        result", "        val avg\
    \ = n to m by -1\n        val sum = 0L\n        val num = 0L\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val numsSum = mutable.ListBuffer[Long]()\n\
    \        val numsSum2 = mutable.ListBuffer[Long]()\n        val numsSum3 = mutable.ListBuffer[Long]()\n\
    \        val numsSum4 = mutable.ListBuffer[Long]()\n        val numsSum5 = mutable.ListBuffer[Long]()\n\
    \        val numsSum6 = mutable.ListBuffer[Long]()\n        val numsSum7 = mutable.ListBuffer[Long]()\n\
    \        val numsSum8 = mutable.ListBuffer[Long]()\n        val numsSum9 = mutable.ListBuffer[Long]()\n\
    \        val numsSum10 = mutable.ListBuffer[Long]()\n        val numsSum11 = mutable.ListBuffer[Long]()\n\
    \        val numsSum12 = mutable.ListBuffer[Long]()\n        val numsSum13 = mutable.ListBuffer[Long]()\n\
    \        val numsSum14 = mutable.ListBuffer[Long]()\n        val numsSum15 = mutable.ListBuffer[Long]()\n\
    \        val numsSum16 = mutable.ListBuffer[Long]()\n        val numsSum17 = mutable.ListBuffer[Long]()\n\
    \        val numsSum18 = mutable.ListBuffer[Long]()\n        val numsSum19 = mutable.ListBuffer[Long]()\n\
    \        val numsSum20 = mutable.ListBuffer[Long]()\n        val numsSum21 = mutable.ListBuffer[Long]()\n\
    \        val numsSum22 = mutable.ListBuffer[Long]()\n        val numsSum23 = mutable.ListBuffer[Long]()\n\
    \        val numsSum24 = mutable.ListBuffer[Long]()\n        val numsSum25 = mutable.ListBuffer[Long]()\n\
    \        val numsSum26 = mutable.ListBuffer[Long]()\n        val numsSum27 = mutable.ListBuffer[Long]()\n\
    \        val numsSum28 = mutable.ListBuffer[Long]()\n        val numsSum29 = mutable.ListBuffer[Long]()\n\
    \        val numsSum30 = mutable.ListBuffer[Long]()\n        val numsSum31 = mutable.",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == avg) Right(binary) else Left(s\"$rounded is\
    \ not an average of $n through $m\")\n        result", "        val avg = n/m\n\
    \        val rounded = math.round(avg)\n        val binary = binary(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer.\")\n        result", "        val avg = n to m by -1\n     \
    \   val sum = avg.reduceLeft(_ + _)\n        val avg = sum / avg.length\n    \
    \    val bin = Integer.toBinaryString(avg)\n        val right = if (avg == 0)\
    \ \"0\" else bin.substring(bin.length - 1, 1)\n        val left = if (avg == 0)\
    \ \"0\" else bin.substring(0, bin.length - 1)\n        val result = if (avg ==\
    \ 0) \"-1\" else left + right\n        Right(result)", "        val avg = ((n\
    \ + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n        if (bin.length\
    \ < 8) {\n            Left(s\"$n through $m average is $avg, rounded to $bin\"\
    )\n        } else {\n            Right(avg)\n        }", "        val avg = ((n\
    \ + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n        if (bin.length\
    \ < m) Left(s\"$n to $m is $avg\")\n        else Right(bin)", "        val avg\
    \ = n to m by -1\n        val sum = n to m by -1\n        val avg = sum.sum /\
    \ sum.size\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        Left(result)", "        val avg\
    \ = n to m by -1\n        val sum = 0L\n        val num = 0L\n        val binary\
    \ = \"\"\n        val bin = mutable.ListBuffer[String]()\n        val binary =\
    \ bin.mkString\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.", "        val avg = n to m by -1\n        val sum = 0L\n        val\
    \ count = 0L\n        avg.foreach(i => sum += i)\n        avg.foreach(i => count\
    \ += 1)\n        val avg = sum / count\n        val bin = math.round(avg).toBinaryString\n\
    \        val right = bin.dropRight(1)\n        val left = bin.dropLeft(1)\n  \
    \      val result = if (right == left) Right(bin) else Left(s\"$right != $left\"\
    )\n        result", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer.\")\n        result", "        val avg = n/m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded == m) Right(binary)\n        else Left(s\"$rounded cannot be converted\
    \ to binary\")", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg)\n        val binary = binary(rounded)\n\
    \        val result = if (rounded == 0) Right(rounded) else Left(s\"$rounded is\
    \ not an integer.\")\n        result match {\n            case Right(rounded)\
    \ => Right(rounded)\n            case Left(err) => Left(err)\n        }", "  \
    \      val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.sum / avg.length\n        val bin = math.round(avg).toBinaryString\n \
    \       val result = if (bin == 0) Right(bin) else Left(s\"$bin is not a valid\
    \ binary number\")\n        result", "        val avg = n + (m - 1) / 2\n    \
    \    val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded < 0)\n            Left(s\"$rounded is less than 0\")\n  \
    \      else if (rounded > m)\n            Right(s\"$rounded is greater than $m\"\
    )\n        else\n            Right(s\"$rounded is $binary\")", "        val sum\
    \ = n to m\n        val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = Integer.toBinaryString(rounded)\n        val result = if\
    \ (rounded == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n \
    \       result", "        val sum = n to m\n        val avg = sum.sum / sum.length\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) Right(bin) else Left(s\"$bin is not a valid binary number\")\n       \
    \ result", "        val avg = n to m by -1\n        val sum = n to m by 1\n  \
    \      val avg = avg.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val right = bin.takeRight(1)\n        val left = bin.dropRight(1)\n \
    \       val result = if (right.equals(left)) Right(bin) else Left(s\"$n to $m\
    \ is $avg\")\n        result", "        val avg = n to m by -1\n        val sum\
    \ = n to m by -1\n        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == 0) Right(bin) else Left(s\"$bin is not a valid\
    \ binary number\")\n        result", "        val sum = n to m\n        val avg\
    \ = sum.map(x => math.round(x)).sum / sum.length\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == 0) Right(bin) else Left(s\"$bin is not a valid\
    \ binary number\")\n        result", "        val avg = n to m by -1\n       \
    \ val sum = n to m by -1\n        val avg = sum.sum / sum.size\n        val bin\
    \ = math.round(avg).toBinaryString\n        val result = if (bin == \"\") -1 else\
    \ bin\n        Left(result)", "        if (n <= m) Right(n / m)\n        else\
    \ Left(s\"$n must be greater than $m\")", "        val avg = n + (m / 2)\n   \
    \     val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n through $m average is $rounded\")", "        val avg = n to\
    \ m by -1\n        val sum = avg.map(_.toInt).sum\n        val avg = sum / avg.length\n\
    \        val bin = Integer.toBinaryString(avg)\n        val result = if (bin.length\
    \ == 0) \"-1\" else bin\n        Left(result)", "        val avg = n + (m-1) /\
    \ 2.0\n        val bin = Integer.toBinaryString(avg)\n        val right = bin.substring(bin.length-1)\n\
    \        val left = bin.substring(0, bin.length-1)\n        val result = if (right.equals(\"\
    1\") && left.equals(\"0\")) Right(avg) else Left(s\"$avg does not round to nearest\
    \ integer\")\n        result", "        val avg = n / m\n        val rounded =\
    \ math.round(avg)\n        val binary = binary(rounded)\n        val result =\
    \ if (rounded == m) Right(binary) else Left(s\"$rounded is not an average of $m\
    \ and $n\")\n        result", "        val sum = n to m\n        val avg = sum.sum\
    \ / sum.size\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer.\")\n        result", "        val avg = ((n + m) / 2)\n    \
    \    val bin = math.round(avg).toBinaryString\n        if (bin.length == 1)\n\
    \            Right(bin)\n        else if (bin.length == 0)\n            Left(s\"\
    $n $m is too small\")\n        else\n            Left(s\"$n $m is too large\")",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg)\n        val binary = binary(rounded)\n        val right =\
    \ if (rounded == m) -1 else m\n        Right(binary, right)", "        val sum\
    \ = n to m\n        val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n\
    \        val binary = Integer.toBinaryString(rounded)\n        val result = if\
    \ (rounded == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n \
    \       result", "        val avg = n to m by -1\n        val sum = n to m by\
    \ 1\n        val avg = avg.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.length == 0) \"-1\" else bin\n        Left(result)",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.sum / avg.length\n        val bin = math.round(avg).toBinaryString\n \
    \       val result = if (bin.length == 1) \"0\" else bin\n        val result =\
    \ if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val ", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg)\n        val binary = math.pow(2,rounded).toInt\n\
    \        val result = if (binary == 1) \"1\" else \"0\"\n        val errorMsg\
    \ = if (binary == 1) \"The average is too high\" else \"The average is too low\"\
    \n        Right(rounded)", "        val avg = n to m by -1\n        val sum =\
    \ 0L\n        val binary = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ avg.length) {\n            sum += avg(i)\n            binary.add(avg(i))\n \
    \       }\n        if(binary.size == 0) {\n            Left(s\"$n to $m is empty\"\
    )\n        } else {\n            Right(sum.toBinaryString())\n        }", "  \
    \      val sum = mutable.ListBuffer[Long]()\n        val avg = mutable.ListBuffer[Long]()\n\
    \        for(i <- n until m){\n            sum += i\n            avg += i\n  \
    \      }\n        if(sum.size == 0){\n            Left(s\"Sum is zero\")\n   \
    \     }\n        else if(sum.size == 1){\n            Right(sum.head)\n      \
    \  }\n        else{\n            val avg = sum.sum / sum.size\n            val\
    \ bin = math.ceil(avg).toBinaryString\n            Right(bin)\n        }", " \
    \       val avg = n / (m - n + 1) // average of n through m\n        val rounded\
    \ = math.round(avg).toInt // round to nearest integer\n        val binary = binary(rounded)\
    \ // convert rounded to binary\n        val result = if (rounded == 0) Right(0)\
    \ else Left(binary)\n        result", "        if (n > m) Left(s\"$n is greater\
    \ than $m\")\n        else if (n == m) Right(m)\n        else Right(roundToNearestInt(m)\
    \ + roundToNearestInt(n) - roundToNearestInt(m) - roundToNearestInt(n))", "  \
    \      val sum = n to m\n        val avg = sum.map(x => (x / 2).floor).sum\n \
    \       val bin = sum.map(x => (x / 2).floor).map(x => Integer.toBinaryString(x)).mkString\n\
    \        val right = if (n == m) Right(bin) else Left(s\"$n to $m doesn't include\
    \ $n\")\n        val left = if (n == m) Left(bin) else Right(s\"$n to $m doesn't\
    \ include $m\")\n        val result = if (avg == 0) right else Left(s\"$avg is\
    \ $bin\")\n        result", "        val avg = ((n + m) / 2.0).toInt\n       \
    \ val binary = avg.toBinaryString\n        val result = if (binary == \"\") -1\
    \ else binary.toLong\n        Right(result)", "        val avg = ((n + m) / 2)\n\
    \        val bin = Integer.toBinaryString(avg)\n        val binLen = bin.length\n\
    \        val leftPart = bin.substring(0, binLen - 1)\n        val rightPart =\
    \ bin.substring(binLen - 1, bin.length)\n        val leftPart = leftPart.toInt\n\
    \        val rightPart = rightPart.toInt\n        val result = if (leftPart ==\
    \ 0 && rightPart == 0) Right(avg) else Left(s\"$leftPart $rightPart\")\n     \
    \   result", "        val avg = n to m by -1\n        val sum = avg.reduceLeft(_\
    \ + _)\n        val avg = sum / avg.length\n        val bin = scala.math.pow(10,\
    \ avg.toInt)\n        val rounded = math.round(bin)\n        val result = rounded\
    \ / bin\n        val str = result.toString\n        val right = str.substring(str.length\
    \ - 1)\n        val left = str.substring(0, str.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n", "        val avg = n + (m - 1) / 2\n        val rounded = math.round(avg)\n\
    \        val binary = Integer.toBinaryString(rounded)\n        if (rounded ==\
    \ avg)\n            Right(binary)\n        else\n            Left(s\"$n to $m\
    \ average is $avg, rounded to $rounded\")", "        val avg = n to m by -1\n\
    \        val sum = 0\n        val binary = new mutable.HashSet[Long]()\n     \
    \   val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n  \
    \      val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()", "        val sum = mutable.ListBuffer.empty[Long]\n\
    \        val count = mutable.ListBuffer.empty[Long]\n        for (i <- n until\
    \ m) {\n            sum :+= i\n            count :+= 1\n        }\n        if\
    \ (sum.size == 0) {\n            Left(s\"Sum is zero\")\n        } else if (sum.size\
    \ == 1) {\n            Right(sum.head / count.head)\n        } else {\n      \
    \      val avg = sum.sum / count.sum\n            val rounded = math.round(avg).toBinaryString\n\
    \            Right(rounded)\n        }", "        val avg = n to m by -1\n   \
    \     val sum = n to m by -1\n        val avg = avg.sum / avg.length\n       \
    \ val bin = Integer.toBinaryString(avg)\n        val right = bin.substring(bin.length\
    \ - m.toString.length)\n        val left = bin.substring(0, bin.length - m.toString.length)\n\
    \        val result = if (right == \"\") Left(left) else Right(right)\n      \
    \  result", "        val avg = n to m by -1\n        val sum = n to m by -1\n\
    \        val avg = avg.sum / avg.length\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$n to $m is $avg\")\n    \
    \    } else {\n            Right(bin)\n        }", "        val avg = n to m by\
    \ -1\n        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n  \
    \      val bin = math.round(avg).toBinaryString\n        val right = bin.charAt(bin.length\
    \ - 1) == '1'\n        val left = bin.charAt(0) == '1'\n        val result = if\
    \ (right) Right(bin) else Left(s\"$bin is not a valid binary number\")\n     \
    \   result", "        val sum = n to m by -1\n        val avg = sum.sum / sum.length\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin\
    \ == \"\") -1 else bin.charAt(0)\n        Right(result)", "        val avg = n\
    \ / m\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an even number\")\n        result", "        val sum = n to m\n        val\
    \ avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n        val\
    \ binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not a binary number\")\n        result", "        val\
    \ sum = n to m\n        val avg = sum.sum / sum.length\n        val rounded =\
    \ math.round(avg).toInt\n        val binary = binary(rounded)\n        val result\
    \ = if (rounded == 0) Right(rounded) else Left(s\"$rounded is not a binary number\"\
    )\n        result ", "        val avg = n/m\n        val rounded = math.round(avg).toInt\n\
    \        val binary = Integer.toBinaryString(rounded)\n        if (rounded > m)\
    \ Left(s\"$n cannot be greater than $m\")\n        else if (rounded < 0) Right(-1)\n\
    \        else Right(binary)", "        val avg = n / m\n        val rounded =\
    \ math.round(avg)\n        val binary = binary(rounded)\n        val result =\
    \ if (rounded == 0) Right(binary) else Left(s\"${binary} is not an integer.\"\
    )\n        result", "        val avg = ((n + m) / 2).round\n        val bin =\
    \ Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n            Left(s\"\
    $n through $m average is $avg\")\n        } else {\n            Right(bin)\n \
    \       }", "        val avg = n/m\n        val roundedAvg = math.round(avg)\n\
    \        val binary = binary(roundedAvg)\n        val result = if(rounded == -1)\
    \ Right(-1) else Left(binary)\n        result", "        val n = math.max(math.min(n,\
    \ m), -1L)\n        val m = math.max(math.min(m, n), -1L)\n        val sum = n\
    \ + m\n        val avg = sum / 2\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == sum.toBinaryString) Right(bin) else Left(s\"\
    $n to $m is $sum, which is $avg. Convert to binary: $bin\")\n        result",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.toList\n        val sum = sum.toList\n        val avg = avg.map(x => x.toBinaryString).mkString\n\
    \        val sum = sum.map(x => x.toBinaryString).mkString\n        val avg =\
    \ avg.toBinaryString\n        val sum = sum.toBinaryString\n        val avg =\
    \ avg.toInt\n        val sum = sum.toInt\n        val avg = if (avg > 0) avg else\
    \ -1\n        val sum = if (sum > 0) sum else -1\n        val avg = if (avg >\
    \ 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n        val avg\
    \ = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n   \
    \     val avg = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else\
    \ -1\n        val avg = if (avg > 0) avg else -1\n        val sum = if (sum >\
    \ 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n        val sum\
    \ = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n   \
    \     val sum = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else\
    \ -1\n        val sum = if (sum > 0) sum else -1\n        val avg = if (avg >\
    \ 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n        val avg\
    \ = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n   \
    \     val avg = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else\
    \ -1\n        val avg = if (avg > 0) avg else -1\n        val sum = if (sum >\
    \ 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n        val sum\
    \ = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n   \
    \     val sum = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else\
    \ -1\n        val sum = if (sum > 0) sum else -1\n        val avg = if (avg >\
    \ 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n        val avg\
    \ = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n   \
    \     val ", "        val avg = n / (m + 1)\n        val rounded = math.round(avg)\n\
    \        val binary = Integer.toBinaryString(rounded)\n        val result = if\
    \ (rounded == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n \
    \       result", "        val avg = n / m\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == m)\
    \ Right(binary) else Left(s\"$rounded is not an average of $n through $m\")\n\
    \        result", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == 0) {\n            Right(binary)\n        } else if (rounded\
    \ == 1) {\n            Left(s\"$rounded is too small to be an average\")\n   \
    \     } else {\n            Left(s\"$rounded is too large to be an average\")\n\
    \        }", "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length == 1) Right(binary)\n        else if (binary.length\
    \ == 2) Left(s\"$binary\")\n        else Left(s\"$binary$binary\")", "       \
    \ val n = math.max(math.min(n, m), 1L)\n        val m = math.max(math.min(m, n),\
    \ 1L)\n        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin.size\
    \ == 0) \"-1\" else bin\n        Right(result)", "        val avg = n/m\n    \
    \    val rounded = math.round(avg)\n        val binary = binary(rounded)\n   \
    \     val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $m and $n\")\n        result", "        if (n >= m) Right(-1)\n\
    \        else {\n            val sum = scala.math.round(n/m)*m\n            val\
    \ avg = sum/m \n            val bin = scala.math.round(avg).toBinaryString\n \
    \           Right(bin)\n        }", "        val avg = n to m by -1\n        val\
    \ sum = n to m by -1\n        val avg = avg.sum / avg.length\n        val bin\
    \ = math.ceil(avg).toBinaryString\n        val result = if (bin.size == m) Right(bin)\
    \ else Left(s\"$n to $m is $avg\")\n        result", "        val sum = (n to\
    \ m).sum\n        val avg = sum / m\n        val rounded = math.round(avg)\n \
    \       val binary = math.pow(2,rounded)\n        val result = if (rounded ==\
    \ 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = sum / avg\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin.charAt(bin.length - 1) == '1') Right(bin) else Left(\"-1\")\n    \
    \    result", "        if (n == 0 || m == 0) {\n            Left(s\"$n or $m is\
    \ 0\")\n        } else if (n > m) {\n            Left(s\"$n is greater than $m\"\
    )\n        } else {\n            val sum = n to m\n            val avg = sum.sum\
    \ / sum.size\n            Right(math.round(avg).toBinary)\n        }", "     \
    \   val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg).toBinaryString\n        val result = Right(rounded)\n    \
    \    if (n > m) Left(s\"$n > $m\")\n        else result", "        val avg = n\
    \ to m by -1\n        val sum = n to m by -1\n        val avg = avg.sum / sum.sum\n\
    \        val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 0) -1 else bin\n        Left(result)", "        val sum = n to m\n      \
    \  val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toBinaryString\n\
    \        val result = if (rounded == avg) Right(rounded) else Left(s\"$rounded\
    \ is not an integer.\")\n        result", "        val avg = n/m\n        val\
    \ rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded < 0) Right(s\"$n cannot be less than 0\")\n        else Right(binary)",
  "        val avg = n/m\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        val result = if (rounded == 0) Right(binary) else\
    \ Left(s\"$rounded is not a binary number\")\n        result", "        val avg\
    \ = n/m\n        val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$rounded > $m\")\n        else if (rounded <\
    \ n) Right(s\"$rounded < $n\")\n        else Right(binary)", "        val avg\
    \ = n to m by -1\n        val sum = 0L\n        val binary = new mutable.HashSet[Long]()\n\
    \        val bin = binary.toList\n        for(i <- 0 until bin.length){\n    \
    \        sum += bin(i)\n        }\n        val avg = sum / bin.length\n      \
    \  val binary = binary.toList\n        val bin = binary.toList\n        val bin\
    \ = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n \
    \       val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin", "        val avg = n / m\n        val rounded = math.round(avg)\n    \
    \    val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == 0) Right(binary) else Left(s\"$n through $m is $rounded and should be $binary\"\
    )\n        result", "        val avg = n/m\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(binary) else Left(s\"$rounded is not a whole number\")\n        result",
  "        val sum = mutable.ListBuffer[Long]()\n        val avg = mutable.ListBuffer[Long]()\n\
    \        for (i <- n until m) {\n            sum += i\n            avg +=i\n \
    \       }\n        val sum = sum.sum\n        val avg = sum / sum.length\n   \
    \     val rounded = math.round(avg)\n        val binary = binary(rounded)\n  \
    \      val result = if (rounded == 0) Right(rounded) else Left(binary)\n     \
    \   result", "        val avg = n to m by -1\n        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.size == 1) \"0\" + bin else bin\n        val right\
    \ = if (bin.size == 1) \"1\" + bin else bin\n        val left = if (bin.size ==\
    \ 1) \"0\" + bin else bin\n        val result = if (bin.size == 1) \"0\" + bin\
    \ else bin\n        val right = if (bin.size == 1) \"1\" + bin else bin\n    \
    \    val left = if (bin.size == 1) \"0\" + bin else bin\n        val result =\
    \ if (bin.size == 1) \"0\" + bin else bin\n        val right = if (bin.size ==\
    \ 1) \"1\" + bin else bin\n        val left = if (bin.size == 1) \"0\" + bin else\
    \ bin\n        val result = if (bin.size == 1) \"0\" + bin else bin\n        val\
    \ right = if (bin.size == 1) \"1\" + bin else bin\n        val left = if (bin.size\
    \ == 1) \"0\" + bin else bin\n        val result = if (bin.size == 1) \"0\" +\
    \ bin else bin\n        val right = if (bin.size == 1) \"1\" + bin else bin\n\
    \        val left = if (bin.size == 1) \"0\" + bin else bin\n        val result\
    \ = if (bin.size == 1) \"0\" + bin else bin\n        val right = if (bin.size\
    \ == 1) \"1\" + bin else bin\n        val left = if (bin.size == 1) \"0\" + bin\
    \ else bin\n        val result = if (bin.size == 1) \"0\" + bin else bin\n   \
    \     val right = if (bin.size == 1) \"1\" + bin else bin\n        val left =\
    \ if (bin.size == 1) \"0\" + bin else bin\n        val result = if (bin.size ==\
    \ 1) \"0\" + bin else bin\n        val right = if (bin.size == 1) \"1\" + bin\
    \ else bin\n        val left = if (bin.size == 1) \"0\" + bin else bin\n     \
    \   val result = if (bin.size == 1) \"0\" + bin else bin\n        val right =\
    \ if (bin.size == 1) \"1\" + bin else bin\n        val left = if (bin.size ==\
    \ 1) \"0\" + bin else bin\n        val result = if (bin.size == 1) \"0\" + bin\
    \ else bin\n        val right = if (bin.size == 1) \"1\" + bin else bin\n    \
    \    val left = if (bin.size == 1) \"0\" + bin else bin\n        val result =\
    \ if (bin.size == 1) \"0\" + bin else bin\n        val right = if (bin.", "  \
    \      if (n == 0 || m == 0) Right(-1)\n        else if (n > m) Right(-1)\n  \
    \      else if (n == m) Right(n / 2)\n        else if (n % 2 == 0) Right(n / 2)\n\
    \        else Right(-1)", "        if (n <= m) Right(n / m)\n        else if (n\
    \ > m) Left(-1)\n        else Right(-1)", "        val avg = n to m by -1\n  \
    \      val sum = 0L\n        val count = mutable.ListBuffer[Long]()\n        avg.foreach(x\
    \ => sum += x)\n        avg.foreach(x => count += x)\n        val avg = sum /\
    \ count.sum\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin.size == 0) -1 else bin.charAt(bin.length - 1)\n        Left(result)",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = avg.sum / avg.length\n        val binary = scala.math.round(avg).toBinaryString\n\
    \        val result = if (binary == \"\") -1 else binary.toLong\n        Left(s\"\
    $n to $m average = $result\")", "        val avg = n/m\n        val rounded =\
    \ math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n    \
    \    val result = if (rounded == 0) Right(binary) else Left(s\"$n through $m is\
    \ $rounded and cannot be rounded to a binary number\")\n        result", "   \
    \     val avg = n/m\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        val result = if (rounded == m) Right(binary) else\
    \ Left(s\"$rounded is not an average of $m and $n\")\n        result", "     \
    \   val avg = ((n + m) / 2)\n        val binary = avg.toBinaryString\n       \
    \ val result = if (n >= m) Right(binary) else Left(s\"$n to $m is not possible\"\
    )\n        result", "        val avg = n/m\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(binary) else Left(s\"$rounded is not an integer.\")\n        result",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg)\n        val binary = binary(rounded)\n        val result\
    \ = if (rounded == 0) Right(rounded) else Left(binary)\n        result", "   \
    \     val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val right = if (rounded == 0) \"-1\" else binary\n        val left = if\
    \ (rounded == 0) \"-1\" else binary.reverse\n        Left(s\"$n through $m is\
    \ $avg and rounded to $rounded. Binary is $left and $right\")", "        val avg\
    \ = n / m\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n / $m is $avg, which is not an average of $n through $m\")",
  "        val avg = n/m\n        val rounded = math.round(avg)\n        val binary\
    \ = binary(rounded)\n        val result = if (rounded == m) Right(binary) else\
    \ Left(s\"$rounded is not an average of $n through $m\")\n        result", " \
    \       if (n > m) {\n            Left(s\"$n is greater than $m\")\n        }\
    \ else {\n            val sum = n to m by -1\n            val avg = sum.sum /\
    \ sum.length\n            Right(math.round(avg).toBinary)\n        }", "     \
    \   val avg = n / m\n        val rounded = math.round(avg)\n        val binary\
    \ = Integer.toBinaryString(rounded)\n        val right = if (rounded == 0) \"\
    0\" + binary else binary\n        val left = if (rounded == 0) \"1\" + binary\
    \ else binary\n        val result = if (rounded == 0) \"-1\" else right\n    \
    \    Left(result)", "        val sum = n to m by -1\n        val avg = sum.sum\
    \ / sum.size\n        val bin = math.round(avg).toBinaryString\n        if (bin.length\
    \ == 1) Right(bin)\n        else Left(s\"$bin is not a valid binary number\")",
  "        val sum = n to m\n        val avg = sum.foldLeft(0.0) { (sum, elem) =>\
    \ sum + elem}\n        val rounded = math.round(avg)\n        val binary = rounded.toBinaryString\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not a whole number\")\n        result", "        val avg = n to m by -1\n  \
    \      val sum = n to m by 1\n        val avg = avg.sum / sum.size\n        val\
    \ bin = math.round(avg).toBinaryString\n        val result = if (bin.size == 0)\
    \ -1 else bin\n        Left(result)", "        val avg = n + (m - 1) / 2\n   \
    \     val bin = math.round(avg).toBinaryString\n        val result = if (bin ==\
    \ \"1\") Right(bin) else Left(s\"$n through $m average = ${avg}. Rounded to $bin\"\
    )\n        result", "        val sum = n to m\n        val avg = sum.sum / sum.size\n\
    \        val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$rounded is greater than $m\")\n        else\
    \ if (rounded < n) Right(s\"$rounded is less than $n\")\n        else Right(binary)",
  "        val avg = n to m by -1\n        val sum = n to m by -1\n        val avg\
    \ = sum.sum / sum.count\n        val bin = math.round(avg).toBinaryString\n  \
    \      val result = if (bin == 0) Right(bin) else Left(s\"$bin is not a valid\
    \ binary number\")\n        result", "        if (n >= m) Right(-1)\n        else\
    \ {\n            val avg = n + (m - 1) / 2\n            val bin = math.ceil(avg).toBinaryString\n\
    \            Right(bin)\n        }", "        val avg = n/m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == 0) Right(binary) else Left(s\"$n through $m\
    \ is $avg, rounded to $rounded\")\n        result", "        val avg = n to m\
    \ by -1\n        val sum = n to m by -1\n        val avg = avg.toList\n      \
    \  val sum = sum.toList\n        val avg = avg.sum / sum.sum\n        val avg\
    \ = math.round(avg)\n        val bin = Integer.toBinaryString(avg)\n        val\
    \ right = bin.substring(bin.length - 1)\n        val left = bin.substring(0, bin.length\
    \ - 1)\n        val right = right.substring(0, 1)\n        val left = left.substring(0,\
    \ 1)\n        val right = right.substring(1).toLong\n        val left = left.substring(1).toLong\n\
    \        val right = right.asInstanceOf[Either[String, Long]]\n        val left\
    \ = left.asInstanceOf[Either[String, Long]]\n        if (right.right.equals(left.right))\
    \ {\n            right\n        } else {\n            left\n        }", "    \
    \    val avg = n to m by -1\n        val sum = 0L\n        val num = 0L\n    \
    \    val num2 = 0L\n        val num3 = 0L\n        val num4 = 0L\n        val\
    \ num5 = 0L\n        val num6 = 0L\n        val num7 = 0L\n        val num8 =\
    \ 0L\n        val num9 = 0L\n        val num10 = 0L\n        val num11 = 0L\n\
    \        val num12 = 0L\n        val num13 = 0L\n        val num14 = 0L\n    \
    \    val num15 = 0L\n        val num16 = 0L\n        val num17 = 0L\n        val\
    \ num18 = 0L\n        val num19 = 0L\n        val num20 = 0L\n        val num21\
    \ = 0L\n        val num22 = 0L\n        val num23 = 0L\n        val num24 = 0L\n\
    \        val num25 = 0L\n        val num26 = 0L\n        val num27 = 0L\n    \
    \    val num28 = 0L\n        val num29 = 0L\n        val num30 = 0L\n        val\
    \ num31 = 0L\n        val num32 = 0L\n        val num33 = 0L\n        val num34\
    \ = 0L\n        val num35 = 0L\n        val num36 = 0L\n        val num37 = 0L\n\
    \        val num38 = 0L\n        val num39 = 0L\n        val num40 = 0L\n    \
    \    val num41 = 0L\n        val num42 = 0L\n        val num43 = 0L\n        val\
    \ num44 = 0L\n        val num45 = 0L\n        val num46 = 0L\n        val num47\
    \ = 0L\n        val num48 = 0L\n        val num49 = 0L\n        val num50 = 0L\n\
    \        val num51 = 0L\n        val num52 = 0L\n        val num53 = 0L\n    \
    \    val num54 = 0L\n        val num55 = 0L\n        val num56 = 0L\n        val\
    \ num57 = 0L\n        val num58 = 0L\n        val num59 = 0L\n        val num60\
    \ = 0L\n        val num61 = 0L\n        val num62 = 0L\n        val num63 = 0L\n\
    \        val num64 = 0L\n        val num65 = 0L\n        val num66 = 0L\n    \
    \    val num67 = 0L\n        val num68 = 0L\n        val num69 = 0L\n        val\
    \ num70 = 0L\n        val num71 = 0L\n", "        val avg = n/m\n        val roundedAvg\
    \ = math.round(avg).toInt\n        val binaryAvg = Integer.toBinaryString(roundedAvg)\n\
    \        val result = Right(binaryAvg)\n        if (n > m) Left(s\"$n > $m\")\n\
    \        else result", "        val avg = n / (m - n + 1) // average of n through\
    \ m\n        val rounded = math.round(avg * 2).toInt // round to nearest integer\n\
    \        val binary = Integer.toBinaryString(rounded)\n        if (binary == \"\
    \") Right(rounded)\n        else Left(s\"$rounded is not a round integer\")",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == 0) Right(binary)\n        else Left(s\"$rounded is not\
    \ a round number\")", "        val n = math.max(math.min(n, m), -1)\n        val\
    \ m = math.max(math.min(m, n), -1)\n        val sum = n + m\n        val avg =\
    \ sum / 2\n        val bin = math.round(avg).toBinaryString\n        val result\
    \ = if (bin == \"\") Right(-1) else Left(bin)\n        result", "        val avg\
    \ = n/m\n        val rounded = math.round(avg)\n        val binary = binary(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer.\")\n        result", "        val avg = ((n + m) / 2.0).toInt\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)", "        val avg = n to m by\
    \ -1\n        val sum = n to m by -1\n        val avg = avg.sum / sum.size\n \
    \       val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)", "        val avg = n to m by\
    \ -1\n        val sum = 0L\n        val count = mutable.ListBuffer[Long]()\n \
    \       for (i <- 0 until avg.length) {\n            sum += avg(i)\n         \
    \   count += i\n        }\n        val avg = sum / count.length\n        val bin\
    \ = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n            Right(bin)\n\
    \        } else {\n            Left(s\"$bin is not a valid binary number\")\n\
    \        }", "        val avg = n + (m - 1) / 2\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == n)\
    \ Right(rounded) else Left(s\"$rounded is not the correct answer\")\n        result",
  "        val sum = (n to m).foldLeft(0)(_ + _)\n        val avg = sum / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg) Right(binary) else Left(s\"$n to $m is $avg, which\
    \ is not an exact multiple of $m\")", "        val avg = n to m by -1\n      \
    \  val sum = n to m by 1\n        val avg = avg.sum / sum.size\n        val bin\
    \ = math.round(avg).toBinaryString\n        val result = if (bin.size == 1) \"\
    0\" + bin else bin\n        Right(result)", "        val sum = n to m\n      \
    \  val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n   \
    \     val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(binary)\n        result", "        val avg = n/m\n        val rounded\
    \ = math.round(avg)\n        val binary = binary(rounded)\n        val result\
    \ = if (rounded == m) Right(binary) else Left(s\"$rounded is not an average of\
    \ $n through $m\")\n        result", "        val avg = n/m\n        val rounded\
    \ = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded < 0) Right(-1)\n        else Right(binary)", "        val avg =\
    \ n to m by -1\n        val sum = avg.sum\n        val avg = sum / avg.length\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)", "        val sum = n to m\n\
    \        val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"$rounded is not a binary number\")\n        result",
  "        val sum = n to m\n        val avg = sum.sum / sum.size\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer.\")\n        result", "        val avg = n / m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer.\")\n        result", "        val avg = n / m\n        val rounded\
    \ = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n  \
    \      val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer, $binary is returned\")\n        result", "        val avg = n /\
    \ m\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n / $m is $avg, not $rounded\")", "        val sum = n to m\n\
    \        val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"${rounded} in binary is ${binary}\")\n        result",
  "        val avg = n/m\n        val rounded = math.round(avg).toInt\n        if(rounded\
    \ == avg)\n            Right(rounded)\n        else\n            Left(s\"${rounded}\
    \ in ${n} to ${m} is ${avg}. Avg should be ${rounded}.\")", "        val avg =\
    \ n / m\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n / $m is $avg, which is not an average of $n through $m\")",
  "        if (n <= m) Right(n + (m - n) / 2)\n        else Left(s\"$n is greater\
    \ than $m\")", "        val sum = mutable.ListBuffer.empty[Long]\n        val\
    \ avg = mutable.ListBuffer.empty[Long]\n        for(i <- n until m){\n       \
    \     sum += i\n            avg +=i\n        }\n        val avg = sum.sum / sum.size\n\
    \        val bin = math.round(avg).toBinaryString\n        if(bin.length == 1){\n\
    \            Right(bin)\n        }else{\n            Left(s\"$bin is not a valid\
    \ binary number\")\n        }"]
stop_tokens:
- "\n    }\n"
