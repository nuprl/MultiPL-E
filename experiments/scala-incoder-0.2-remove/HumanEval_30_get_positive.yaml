name: HumanEval_30_get_positive
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return only positive numbers in the list.\n    def getPositive(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
  \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
  \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
  \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
  \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
  \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val positive = l.filter(_ > 0)\n        positive", '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0).toList', '        l.filter(_
    > 0)', '        l.filter(x => x >= 0).toList', '        l.filter(x => x > 0)',
  '        l.filter(x => x >= 0)', "        val positive = l.filter(x => x >= 0)\n\
    \        positive", "        val positive = l.filter(x => x >= 0)\n        positive",
  "        val positive = l.filter(_ > 0)\n        positive", "        val positive\
    \ = l.filter(_ > 0)\n        positive", '        l.filter(_ > 0)', "        val\
    \ positive = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if\
    \ (i > 0) positive+=i\n        }\n        positive.toList", "        val positive\
    \ = mutable.ListBuffer[Long]()\n        l.foreach { x => if (x > 0) positive.append(x)\
    \ }\n        positive.toList", '        l.filter(_ > 0)', '        l.filter(_
    > 0)', '        l.filter(x => x >= 0).toList', '        l.filter(x => x >= 0)',
  '        l.filter(x => x >= 0).toList', "        val positive = l.filter(x => x\
    \ >= 0)\n        positive", '        l.filter(x => x >= 0).toList', "        val\
    \ positive = l.filter(_ > 0)\n        positive", '        l.filter(x => x >= 0).toList',
  '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(x
    => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0)',
  '        l.filter(x => x >= 0)', "        val positive = l.filter(_ > 0)\n     \
    \   positive", "        val positive = l.filter(x => x >= 0)\n        positive",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ > 0) positives += x)\n        positives.toList", "        val positive = l.filter(x\
    \ => x >= 0)\n        positive", '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0)', "        val positive = l.filter(_ > 0)\n        positive", '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0)', "        val positive = l.filter(_\
    \ > 0)\n        positive", '        l.filter(x => x >= 0).toList', '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0).toList', '        l.filter(x
    => x > 0)', "        val positive = l.filter(x => x >= 0).toList\n        positive",
  '        l.filter(x => x > 0)', "        val positive = mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (i >= 0) positive+=i\n        }\n    \
    \    positive.toList", "        val positive = mutable.ListBuffer[Long]()\n  \
    \      for (i <- l) {\n            if (i >= 0) {\n                positive.append(i)\n\
    \            }\n        }\n        positive.toList", '        l.filter(x => x
    >= 0)', '        l.filter(_ > 0)', '        l.filter(x => x >= 0).toList', '        l.filter(x
    => x >= 0).toList', '        l.filter(_ > 0)', '        l.filter(x => x >= 0)',
  '        l.filter(x => x >= 0).toList', '        l.filter(x => x >= 0)', '        l.filter(x
    => x >= 0)', '        l.filter(x => x >= 0).toList', '        l.filter(x => x
    >= 0).toList', '        l.filter(_ > 0)', '        l.filter(x => x >= 0).toList',
  '        l.filter(_ > 0)', '        l.filter(_ > 0)', '        l.filter(_ > 0)',
  '        l.filter(_ > 0)', "        val positive = l.filter(x => x >= 0)\n     \
    \   positive", "        val positive = mutable.ListBuffer[Long]()\n        for\
    \ (i <- l)\n            if (i > 0)\n                positive.append(i)\n     \
    \   positive.toList", '        l.filter(_ > 0)', '        l.filter(_ > 0)', " \
    \       val positive = l.filter(x => x >= 0)\n        positive", "        val\
    \ positive = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if\
    \ (i > 0) positive+=i\n        }\n        positive.toList", '        l.filter(x
    => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)', '        l.filter(x
    => x > 0)', '        l.filter(_ > 0)', '        l.filter(x => x >= 0).toList',
  "        val positive = l.filter(_ > 0)\n        positive", "        val positive\
    \ = l.filter(x => x > 0)\n        positive", '        l.filter(x => x >= 0)',
  '        l.filter(_ > 0)', '        l.filter(x => x >= 0).toList', "        val\
    \ positive = l.filter(x => x >= 0)\n        positive", "        val positive =\
    \ l.filter(x => x >= 0)\n        positive", '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0).toList', "        val positive = l.filter(x => x >= 0).toList\n   \
    \     positive", "        val positive = mutable.ListBuffer[Long]()\n        for\
    \ (i <- l) {\n            if (i >= 0) positive+=i\n        }\n        positive.toList",
  '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(x
    => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)', "   \
    \     val positive = mutable.ListBuffer[Long]()\n        for (i <- l) {\n    \
    \        if (i >= 0) positive+=i\n        }\n        positive.toList", '        l.filter(x
    => x > 0)', '        l.filter(_ > 0)', "        val positive = l.filter(_ > 0)\n\
    \        positive", '        l.filter(x => x >= 0)', '        l.filter(x => x
    >= 0)', '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(x
    => x > 0)', '        l.filter(_ > 0)', "        val positive = mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (i >= 0) positive+=i\n        }\n    \
    \    positive.toList", "        val positive = mutable.ListBuffer[Long]()\n  \
    \      for (i <- l) {\n            if (i >= 0)\n                positive.append(i)\n\
    \        }\n        positive.toList", '        l.filter(x => x >= 0).toList',
  "        val positive = l.filter(_ > 0)\n        positive", '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0)', '        l.filter(x => x
    >= 0)', "        val positive = l.filter(_ > 0)\n        positive", '        l.filter(_
    > 0)', "        val positive = mutable.ListBuffer[Long]()\n        for (i <- l)\n\
    \            if (i >= 0)\n                positive.append(i)\n        positive.toList",
  '        l.filter(x => x >= 0).toList', '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0).toList', '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0)', '        l.filter(x => x
    >= 0).toList', '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0).toList',
  '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0).toList', "     \
    \   val positives = mutable.ListBuffer[Long]()\n        for (i <- l)\n       \
    \     if (i > 0)\n                positives += i\n        positives.toList", '        l.filter(_
    > 0)', '        l.filter(x => x >= 0)', "        val positive = l.filter(_ > 0)\n\
    \        positive", "        val positive = l.filter(_ > 0)\n        positive",
  "        val positives = mutable.ListBuffer[Long]()\n        for (i <- l if i >=\
    \ 0) positives += i\n        positives.toList", '        l.filter(x => x >= 0).toList',
  '        l.filter(_ > 0)', "        val positive = l.filter(x => x >= 0)\n     \
    \   positive", '        l.filter(x => x > 0).distinct', "        val positive\
    \ = l.filter(_ > 0)\n        positive", '        l.filter(x => x >= 0)', '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0)', "        val positive = l.filter(x\
    \ => x >= 0)\n        positive", '        l.filter(x => x >= 0)', '        l.filter(_
    > 0)', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0).toList', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)',
  "        val positive = l.filter(_ > 0)\n        positive", '        l.filter(_
    > 0)', '        l.filter(_ > 0)', '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0).toList', '        l.filter(_ > 0)', '        l.filter(x => x >= 0).toList',
  '        l.filter(x => x >= 0).toList', "        val positive = l.filter(_ > 0)\n\
    \        positive", '        l.filter(_ > 0)', "        val positive = mutable.ListBuffer[Long]()\n\
    \        for (i <- l if i >= 0) positive.append(i)\n        positive.toList",
  '        l.filter(x => x >= 0).toList', "        val positive = mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (i > 0) positive+=i\n        }\n     \
    \   positive.toList", '        l.filter(x => x >= 0)', '        l.filter(x =>
    x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)', "      \
    \  val positive = mutable.ListBuffer[Long]()\n        for (i <- l) {\n       \
    \     if (i >= 0) positive+=i\n        }\n        positive.toList", "        val\
    \ positive = l.filter(x => x >= 0)\n        positive", '        l.filter(x =>
    x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0)', "        val positive = l.filter(x => x >= 0)\n        positive",
  '        l.filter(x => x >= 0).toList', '        l.filter(x => x >= 0).toList',
  '        l.filter(x => x > 0)', "        val positive = l.filter(_ > 0)\n      \
    \  positive", "        val positives = mutable.ListBuffer[Long]()\n        for(i\
    \ <- l if i >= 0) positives += i\n        positives.toList", "        val positive\
    \ = l.filter(_ > 0)\n        positive", '        l.filter(_ > 0)', "        val\
    \ positive = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if\
    \ (i >= 0) {\n                positive.append(i)\n            }\n        }\n \
    \       positive.toList", '        l.filter(x => x >= 0).toList', '        l.filter(x
    => x >= 0)', "        val positive = l.filter(x => x >= 0)\n        positive",
  '        l.filter(x => x >= 0).toList', '        l.filter(x => x >= 0)', '        l.filter(x
    => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(_ > 0)', '        l.filter(x
    => x >= 0)', '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0)',
  '        l.filter(x => x >= 0)', '        l.filter(x => x >= 0).toList', "     \
    \   val positive = l.filter(_ > 0)\n        positive", '        l.filter(x =>
    x >= 0)', '        l.filter(x => x >= 0).toList', "        val positive = mutable.ListBuffer[Long]()\n\
    \        for (i <- l if i >= 0) positive+=i\n        positive.toList", '        l.filter(_
    > 0)', "        val positive = mutable.ListBuffer[Long]()\n        for(i <- l\
    \ if i > 0) positive.append(i)\n        positive.toList", "        val positive\
    \ = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (i > 0)\
    \ positive+=i\n        }\n        positive.toList", "        val positive = l.filter(_\
    \ > 0)\n        positive", '        l.filter(x => x >= 0)', '        l.filter(x
    => x > 0)']
stop_tokens:
- "\n    }\n"
