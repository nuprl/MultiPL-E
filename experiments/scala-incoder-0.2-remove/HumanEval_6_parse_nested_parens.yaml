name: HumanEval_6_parse_nested_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n    // For each of the group, output the deepest\
  \ level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of\
  \ nesting while ((())) has three.\n    def parseNestedParens(paren_string : String)\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
  \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
  )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
completions: ["        val paren_stack = mutable.Stack[String]()\n        val paren_stack_string\
    \ = mutable.Stack[String]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_string = mutable.Stack[Int]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_level_level = mutable.Stack[Int]()\n        val\
    \ paren_stack_level_level_level_string = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_copy = paren_array.clone()\n \
    \       val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_size = paren_array_copy.length\n\
    \        val paren_array_copy = paren_array_copy.drop(1)\n        val paren_array_size\
    \ = paren_array_copy.length\n        val paren_array_copy = paren_array_copy.drop(1)\n\
    \        val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_size = paren_array_copy.length\n\
    \        val paren_array_copy = paren_array_copy.drop(1)\n        val paren_array_size\
    \ = paren_array_copy.length\n        val paren_array_copy = paren_array_copy.drop(1)\n\
    \        val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_size = paren_array_copy.length\n\
    \        val paren_array_copy = paren_array_copy.drop(1)\n        val paren_array_size\
    \ = paren_array_copy.length\n        val paren_array_copy = paren_array_copy.drop(1)\n\
    \        val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_size = paren_array_copy.length\n\
    \        val paren_array_copy = paren_array_copy.drop(1)\n        val paren_array_size\
    \ = paren_array_copy.length\n        val paren_array_copy = paren_array_copy.drop(1)\n\
    \        val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_size = paren_array_copy.length\n\
    \        val paren_array_copy = paren_array_copy.drop(1)\n        val paren_array_size\
    \ = paren_array_copy.length\n        val paren_array_copy = paren_array_copy.drop(1)\n\
    \        val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_size = paren_array_copy.length\n\
    \        val paren_array_copy = paren_array_copy.drop(1)\n        val paren_array_size\
    \ = paren_array_copy.length\n        val paren_array_copy = paren_array_copy.drop(1)\n\
    \        val paren_array_size = paren_array_copy.length\n        val paren_array_copy\
    \ = paren_array_copy.drop(1)\n        val paren_array_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_map = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_reverse = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_reverse2 = mutable.Map[Long, String]()\n        val\
    \ paren_stack_map_reverse3 = mutable.Map[Long, String]()\n        val paren_stack_map_reverse4\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_reverse5 = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_reverse6 = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_reverse7 = mutable.Map[Long, String]()\n        val\
    \ paren_stack_map_reverse8 = mutable.Map[Long, String]()\n        val paren_stack_map_reverse9\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_reverse10 = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_reverse11 = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_reverse12 = mutable.Map[Long, String]()\n       \
    \ val paren_stack_map_reverse13 = mutable.Map[Long, String]()\n        val paren_stack_map_reverse14\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_reverse15 = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_reverse16 = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_reverse17 = mutable.Map[Long, String]()\n       \
    \ val paren_stack_map_reverse18 = mutable.Map[Long, String]()\n        val paren_stack_map_reverse19\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_reverse20 = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_reverse21 = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_reverse22 = mutable.Map[Long, String]()\n       \
    \ val paren_stack_map_reverse23 = mutable.Map[Long, String]()\n        val paren_stack_map_reverse24\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_reverse25 = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_reverse26 = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_reverse27 = mutable.Map[Long, String]()\n       \
    \ val paren_stack_map_reverse28 = mut", "        val paren_array = paren_string.split(\"\
    \ \").toList\n        val paren_array_size = paren_array.size\n        val max_level\
    \ = 0\n        val max_level_size = 0\n        val level_size = 0\n        val\
    \ level_size_list: List[Long] = Nil\n        val paren_array_size_with_level:\
    \ List[Long] = Nil\n        val paren_array_size_with_level_list: List[Long] =\
    \ Nil\n        val paren_array_size_with_level_list2 = Nil\n        val paren_array_size_with_level_list3\
    \ = Nil\n        val paren_array_size_with_level_list4 = Nil\n        val paren_array_size_with_level_list5\
    \ = Nil\n        val paren_array_size_with_level_list6 = Nil\n        val paren_array_size_with_level_list7\
    \ = Nil\n        val paren_array_size_with_level_list8 = Nil\n        val paren_array_size_with_level_list9\
    \ = Nil\n        val paren_array_size_with_level_list10 = Nil\n        val paren_array_size_with_level_list11\
    \ = Nil\n        val paren_array_size_with_level_list12 = Nil\n        val paren_array_size_with_level_list13\
    \ = Nil\n        val paren_array_size_with_level_list14 = Nil\n        val paren_array_size_with_level_list15\
    \ = Nil\n        val paren_array_size_with_level_list16 = Nil\n        val paren_array_size_with_level_list17\
    \ = Nil\n        val paren_array_size_with_level_list18 = Nil\n        val paren_array_size_with_level_list19\
    \ = Nil\n        val paren_array_size_with_level_list20 = Nil\n        val paren_array_size_with_level_list21\
    \ = Nil\n        val paren_array_size_with_level_list22 = Nil\n        val paren_array_size_with_level_list23\
    \ = Nil\n        val paren_array_size_with_level_list24 = Nil\n        val paren_array_size_with_level_list25\
    \ = Nil\n        val paren_array_size_with_level_list26 = Nil\n        val paren_array_size_with_level_list27\
    \ = Nil\n        val paren_array_size_with_level_list28 = Nil\n        val paren_array_size_with_level_list29\
    \ = Nil\n        val paren_array_size_with_level_list30 = Nil\n        val paren_array_size_with_level_list31\
    \ = Nil\n        val paren_array_size_with_level_list32 = Nil\n        val paren_array_size_with_",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_index = 0\n        for (i <- 0 until paren_array.length)\
    \ {\n            if (paren_array(i) == \"(\") {\n                val level = (paren_array(i)\
    \ - \"(\").length\n                if (level > max_level) {\n                \
    \    max_level = level\n                    max_level_index = i\n            \
    \    }\n            }\n        }\n        val max_level_array = paren_array.take(max_level_index\
    \ + 1).reverse\n        val max_level_array_length = max_level_array.length\n\
    \        val max_level_array_length = max_level_array_length + 1\n        val\
    \ max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_array_length + 1\n        val max_level_array_length\
    \ = max_level_array_length + 1\n        val max_level_array_length = max_level_array_length\
    \ + 1\n        val max_level_array_length = max_level_array_length + 1\n     \
    \   val max_level_array_length = max_level_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_length = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_paren_array = new Array[String](paren_array_length)\n\
    \        for (i <- 0 until paren_array_length) {\n            val paren_array_element\
    \ = paren_array(i)\n            val paren_array_element_length = paren_array_element.length\n\
    \            if (paren_array_element_length == 1) {\n                max_level\
    \ = if (paren_array_element == \"(\") 1 else max_level\n                max_level_paren_array(i)\
    \ = paren_array_element\n            } else if (paren_array_element_length ==\
    \ 2) {\n                if (paren_array_element == \"(\") {\n                \
    \    max_level = if (paren_array_element == \"(\") 1 else max_level\n        \
    \        }\n                else if (paren_array_element == \")\") {\n       \
    \             max_level = if (paren_array_element == \"(\") 1 else max_level\n\
    \                }\n                else {\n                    max_level = if\
    \ (paren_array_element == \"(\") 1 else max_level\n                }\n       \
    \         max_level_paren_array(i) = paren_array_element\n            }\n    \
    \    }\n        val max_level_paren_array_length = max_level_paren_array.length\n\
    \        val max_level_paren_array_elements = max_level_paren_array.map(x => x.toLong)\n\
    \        val max_level_paren_array_elements_length = max_level_paren_array_elements.length\n\
    \        val max_level_paren_array_elements_set = max_level_paren_array_elements.toSet\n\
    \        val max_level_paren_array_elements_set_length = max_level_paren_array_elements_set.length\n\
    \        val max_level_paren_array_elements_set_sum = max_level_paren_array_elements_set.sum\n\
    \        val max_level_paren_array_elements_set_sum_length = max_level_paren_array_elements_set_sum.length\n\
    \        val max_level_paren_array_elements_set_sum_product = max_level_paren_array_elements_set.product\n\
    \        val max_level_paren_array_elements_set_sum_product_length = max_level_paren_array_elements_set_sum_product.length\n\
    \        val max_level_paren_array_elements_set_sum_product_product = max_level_paren_array_elements_set.product\n\
    \        val max_level_paren_array_elements_set_sum_product_product_length = max_level_paren_array_elements_set_sum_product_product.length\n\
    \        val max_level_paren_array_elements_set_sum_product_product_product =\
    \ max_level_paren_array_elements_set.product\n        val max_level_paren_array_elements_set_sum_product_product_product_length\
    \ = max_level_paren_array_elements_set_sum_product_product_product.length\n  \
    \      val max_level_paren_array_elements_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        var paren_array_index = 0\n     \
    \   var paren_array_level = 0\n        while(paren_array_index < paren_array_size)\
    \ {\n            val paren_array_element = paren_array(paren_array_index)\n  \
    \          if(paren_array_element == \"(\") {\n                paren_array_level\
    \ += 1\n                paren_array_list += paren_array_level\n              \
    \  paren_array_index += 1\n            } else if(paren_array_element == \")\"\
    ) {\n                paren_array_level -= 1\n                paren_array_list\
    \ += paren_array_level\n                paren_array_index += 1\n            }\
    \ else {\n                paren_array_list += paren_array_level\n            \
    \    paren_array_index += 1\n            }\n        }\n        paren_array_list.toList",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size_array = Array.fill(paren_array_max_size)(0)\n\
    \        val paren_array_max_size_array_size = paren_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size = paren_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array = Array.fill(paren_array_max_size_array_max_size)(0)\n\
    \        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array =\
    \ Array.fill(paren_array_max_size_array_max_size_array_max_size)(0)\n        val\
    \ paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = Array.fill(paren_array_max_size_array_max_size_array_max_size_array_max_size)(0)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = Array.fill(paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size)(0)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = Array.fill(paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size)(0)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = Array.fill(paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size)(0)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = Array.fill(paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size)(0)\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = Array.fill(paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_array = new Array[Long](paren_array.length)\n        val\
    \ paren_level = new Array[Long](paren_array.length)\n        for (i <- 0 until\
    \ paren_array.length) {\n            val paren_level = paren_array(i).length\n\
    \            if (paren_level > max_level) {\n                max_level = paren_level\n\
    \                max_level_array(i) = max_level\n            }\n            if\
    \ (paren_level == max_level) {\n                max_level_array(i) = max_level\n\
    \            }\n        }\n        val max_level_array_length = max_level_array.length\n\
    \        val max_level_array_length_2 = max_level_array_length * max_level_array_length\n\
    \        val max_level_array_length_3 = max_level_array_length_2 * max_level_array_length\n\
    \        val max_level_array_length_4 = max_level_array_length_3 * max_level_array_length\n\
    \        val max_level_array_length_5 = max_level_array_length_4 * max_level_array_length\n\
    \        val max_level_array_length_6 = max_level_array_length_5 * max_level_array_length\n\
    \        val max_level_array_length_7 = max_level_array_length_6 * max_level_array_length\n\
    \        val max_level_array_length_8 = max_level_array_length_7 * max_level_array_length\n\
    \        val max_level_array_length_9 = max_level_array_length_8 * max_level_array_length\n\
    \        val max_level_array_length_10 = max_level_array_length_9 * max_level_array_length\n\
    \        val max_level_array_length_11 = max_level_array_length_10 * max_level_array_length\n\
    \        val max_level_array_length_12 = max_level_array_length_11 * max_level_array_length\n\
    \        val max_level_array_length_13 = max_level_array_length_12 * max_level_array_length\n\
    \        val max_level_array_length_14 = max_level_array_length_13 * max_level_array_length\n\
    \        val max_level_array_length_15 = max_level_array_length_14 * max_level_array_length\n\
    \        val max_level_array_length_16 = max_level_array_length_15 * max_level_array_length\n\
    \        val max_level_array_length_17 = max_level_array_length_16 * max_level_array_length\n\
    \        val max_level_array_length_18 = max_level_array_length_17 * max_level_array_length\n\
    \        val max_level_array_length_19 = max_level_array_length_18 * max_level_array_length\n\
    \        val max_level_array_length_20 = max_level_array_length_19 * max_level_array_length\n\
    \        val max_level_array_length_21 = max_level_array_length_20 * max_level_array_length\n\
    \        val max_level_array_length_22 = max_level_array_length_21 * max_level_array_length\n\
    \        val max_level_", "        val paren_array = paren_string.split(\" \"\
    )\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size_array = Array.fill(paren_array_max_size)(0)\n\
    \        var paren_array_max_size_array_index = 0\n        var paren_array_max_size_array_index_count\
    \ = 0\n        var paren_array_max_size_array_index_sum = 0\n        var paren_array_max_size_array_index_sum_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n        var paren_array_max_size_array_index_product = 1\n        var paren_array_max_size_array_index_product_count\
    \ = 0\n", "        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_levels = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = parseNestedParens(paren_group)\n\
    \            if (paren_group_levels.size > max_level) {\n                max_level\
    \ = paren_group_levels.size\n                max_levels ++= paren_group_levels.toList\n\
    \            }\n        }\n        max_level.toList", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val max_level = 0\n        val max_level_list:\
    \ List[Long] = Nil\n        for (paren_group <- paren_groups) {\n            val\
    \ paren_group_levels = paren_group.split(\"\\\\(\").length\n            if (paren_group_levels\
    \ > max_level) {\n                max_level = paren_group_levels\n           \
    \     max_level_list = Nil\n            }\n            if (paren_group_levels\
    \ == max_level) {\n                max_level_list ::= paren_group_levels\n   \
    \         }\n        }\n        max_level_list", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_array = new Array[Long](paren_array_size)\n     \
    \   val paren_array_index = 0\n        val paren_array_index_array = new Array[Long](paren_array_size)\n\
    \        val paren_array_index_array_size = 0\n        val paren_array_index_array_index\
    \ = 0\n        val paren_array_index_array_index_size = 0\n        val paren_array_index_array_index_index\
    \ = 0\n        val paren_array_index_array_index_index_size = 0\n        val paren_array_index_array_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_size = 0\n      \
    \  val paren_array_index_array_index_index_index_index = 0\n        val paren_array_index_array_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index = 0\n\
    \        val paren_array_index_array_index_index_index_index_index_size = 0\n\
    \        val paren_array_index_array_index_index_index_index_index_index = 0\n\
    \        val paren_array_index_array_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_", "        val paren_array = paren_string.split(\" \"\
    )\n        val max_level = 0\n        val max_level_index = 0\n        val level_count\
    \ = paren_array.length\n        val paren_array_copy = paren_array.clone()\n \
    \       val paren_array_copy2 = paren_array.clone()\n        val paren_array_copy3\
    \ = paren_array.clone()\n        val paren_array_copy4 = paren_array.clone()\n\
    \        val paren_array_copy5 = paren_array.clone()\n        val paren_array_copy6\
    \ = paren_array.clone()\n        val paren_array_copy7 = paren_array.clone()\n\
    \        val paren_array_copy8 = paren_array.clone()\n        val paren_array_copy9\
    \ = paren_array.clone()\n        val paren_array_copy10 = paren_array.clone()\n\
    \        val paren_array_copy11 = paren_array.clone()\n        val paren_array_copy12\
    \ = paren_array.clone()\n        val paren_array_copy13 = paren_array.clone()\n\
    \        val paren_array_copy14 = paren_array.clone()\n        val paren_array_copy15\
    \ = paren_array.clone()\n        val paren_array_copy16 = paren_array.clone()\n\
    \        val paren_array_copy17 = paren_array.clone()\n        val paren_array_copy18\
    \ = paren_array.clone()\n        val paren_array_copy19 = paren_array.clone()\n\
    \        val paren_array_copy20 = paren_array.clone()\n        val paren_array_copy21\
    \ = paren_array.clone()\n        val paren_array_copy22 = paren_array.clone()\n\
    \        val paren_array_copy23 = paren_array.clone()\n        val paren_array_copy24\
    \ = paren_array.clone()\n        val paren_array_copy25 = paren_array.clone()\n\
    \        val paren_array_copy26 = paren_array.clone()\n        val paren_array_copy27\
    \ = paren_array.clone()\n        val paren_array_copy28 = paren_array.clone()\n\
    \        val paren_array_copy29 = paren_array.clone()\n        val paren_array_copy30\
    \ = paren_array.clone()\n        val paren_array_copy31 = paren_array.clone()\n\
    \        val paren_array_copy32 = paren_array.clone()\n        val paren_array_copy33\
    \ = paren_array.clone()\n        val paren_array_copy34 = paren_array.clone()\n\
    \        val paren_array_copy35 = paren_array.clone()\n        val paren_array_copy36\
    \ = paren_array.clone()\n        val paren_array_copy37 = paren_array.clone()\n\
    \        val paren_array_copy38 = paren_array.", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_list\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size2 = mutable.ListBuffer.empty[Long]\n   \
    \     val paren_stack_map_list_size3 = mutable.ListBuffer.empty[Long]\n      \
    \  val paren_stack_map_list_size4 = mutable.ListBuffer.empty[Long]\n        val\
    \ paren_stack_map_list_size5 = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size6\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size7 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size8 = mutable.ListBuffer.empty[Long]\n   \
    \     val paren_stack_map_list_size9 = mutable.ListBuffer.empty[Long]\n      \
    \  val paren_stack_map_list_size10 = mutable.ListBuffer.empty[Long]\n        val\
    \ paren_stack_map_list_size11 = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size12\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size13 =\
    \ mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size14 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size15 = mutable.ListBuffer.empty[Long]\n  \
    \      val paren_stack_map_list_size16 = mutable.ListBuffer.empty[Long]\n    \
    \    val paren_stack_map_list_size17 = mutable.ListBuffer.empty[Long]\n      \
    \  val paren_stack_map_list_size18 = mutable.ListBuffer.empty[Long]\n        val\
    \ paren_stack_map_list_size19 = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size20\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size21 =\
    \ mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size22 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size23 = mutable.ListBuffer.empty[Long]\n  \
    \      val paren_stack_map_list_size24 = mutable.ListBuffer.empty[Long]\n    \
    \    val paren_stack_map_list_size25 = mutable.ListBuffer.empty[Long]\n      \
    \  val paren_stack_", "        val paren_stack = mutable.Stack[String]()\n   \
    \     val paren_stack_map = mutable.Map[String, Long]()\n        val paren_stack_map_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_list = List[Long]()\n\
    \        for (paren_string <- paren_array) {\n            val paren_array = paren_string.split(\"\
    (\")\n            val level = 0\n            val level_list = List[Long]()\n \
    \           for (paren_string <- paren_array) {\n                val paren_array\
    \ = paren_string.split(\")\")\n                val level_diff = paren_array.length\
    \ - level\n                if (level_diff > level) {\n                    level\
    \ = level_diff\n                }\n                val level_list_temp = level_list.take(level\
    \ + 1).reverse\n                level_list_temp += level\n                level_list\
    \ = level_list_temp\n            }\n            if (level > max_level) {\n   \
    \             max_level = level\n                max_level_list = level_list\n\
    \            }\n        }\n        max_level_list", "        val paren_array =\
    \ paren_string.split(\" \")\n        val max_level = 0\n        val max_level_index\
    \ = 0\n        val levels = mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ paren_array.length) {\n            if (paren_array(i) == \"(\") {\n        \
    \        levels += 1\n            } else if (paren_array(i) == \")\") {\n    \
    \            levels -= 1\n            }\n            if (levels > max_level) {\n\
    \                max_level = levels\n                max_level_index = i\n   \
    \         }\n        }\n        levels.toList", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val y = x.trim\n            if (y.isEmpty)\
    \ return\n            if (paren_stack.nonEmpty) {\n                if (paren_stack.last\
    \ == y) return\n                paren_stack_map.put(paren_stack.last, paren_stack_map.get(paren_stack.last).:(y))\n\
    \            } else {\n                paren_stack.push(y)\n            }\n  \
    \      })\n        val max_level = paren_stack_map.values.map(_.size).max\n  \
    \      val max_level_map = paren_stack_map.map(x => (x._1, x._2.size)).max\n \
    \       val max_level_map_keys = max_level_map._1.toList\n        val max_level_map_values\
    \ = max_level_map._2.toList\n        val max_level_map_keys_sorted = max_level_map_keys.sort\n\
    \        val max_level_map_values_sorted = max_level_map_values.sort\n       \
    \ val max_level_map_keys_sorted.zipWithIndex.filter(_._1 == max_level_map_keys_sorted.head).map(_._2).foreach(x\
    \ => max_level_map_keys_sorted.remove(x._1))\n        val max_level_map_values_sorted.zipWithIndex.filter(_._1\
    \ == max_level_map_values_sorted.head).map(_._2).foreach(x => max_level_map_values_sorted.remove(x._1))\n\
    \        val max_level_map_keys_sorted.zipWithIndex.filter(_._1 == max_level_map_keys_sorted.head).map(_._2).foreach(x\
    \ => max_level_map_keys_sorted.remove(x._1))\n        val max_level_map_values_sorted.zipWithIndex.filter(_._1\
    \ == max_level_map_values_sorted.head).map(_._2).foreach(x => max_level_map_values_sorted.remove(x._1))\n\
    \        val max_level_map_keys_sorted.zipWithIndex.filter(_._1 == max_level_map_keys_sorted.head).map(_._2).foreach(x\
    \ => max_level_map_keys_sorted.remove(x._1))\n        val max_level_map_values_sorted.zipWithIndex.filter(_._1\
    \ == max_level_map_values_sorted.head).map(_._2).foreach(x => max_level_map_values_sorted.remove(x._1))\n\
    \        val max_level_map_keys_sorted.zipWithIndex.filter(_._1 == max_level_map_keys_sorted.head).map(_._2).foreach(x\
    \ => max_level_map_keys_sorted.remove(x._1))\n        val max_level_map_values_sorted.zip",
  "        val paren_chars = paren_string.chars\n        val paren_chars_count = paren_chars.length\n\
    \        val paren_chars_array = paren_chars.toArray\n        val paren_chars_array_count\
    \ = paren_chars_array.length\n        val paren_chars_array_count_with_parens\
    \ = paren_chars_array_count + 1\n        val paren_chars_array_count_with_parens_plus_one\
    \ = paren_chars_array_count_with_parens + 1\n        val paren_chars_array_count_with_parens_plus_two\
    \ = paren_chars_array_count_with_parens + 2\n        val paren_chars_array_count_with_parens_plus_three\
    \ = paren_chars_array_count_with_parens + 3\n        val paren_chars_array_count_with_parens_plus_four\
    \ = paren_chars_array_count_with_parens + 4\n        val paren_chars_array_count_with_parens_plus_five\
    \ = paren_chars_array_count_with_parens + 5\n        val paren_chars_array_count_with_parens_plus_six\
    \ = paren_chars_array_count_with_parens + 6\n        val paren_chars_array_count_with_parens_plus_seven\
    \ = paren_chars_array_count_with_parens + 7\n        val paren_chars_array_count_with_parens_plus_eight\
    \ = paren_chars_array_count_with_parens + 8\n        val paren_chars_array_count_with_parens_plus_nine\
    \ = paren_chars_array_count_with_parens + 9\n        val paren_chars_array_count_with_parens_plus_ten\
    \ = paren_chars_array_count_with_parens + 10\n        val paren_chars_array_count_with_parens_plus_eleven\
    \ = paren_chars_array_count_with_parens + 11\n        val paren_chars_array_count_with_parens_plus_twelve\
    \ = paren_chars_array_count_with_parens + 12\n        val paren_chars_array_count_with_parens_plus_thirteen\
    \ = paren_chars_array_count_with_parens + 13\n        val paren_chars_array_count_with_parens_plus_fourteen\
    \ = paren_chars_array_count_with_parens + 14\n        val paren_chars_array_count_with_parens_plus_fifteen\
    \ = paren_chars_array_count_with_parens + 15\n        val paren_chars_array_count_with_parens_plus_sixteen\
    \ = paren_chars_array_count_with_parens + 16\n        val paren_chars_array_count_with_parens_plus_seventeen\
    \ = paren_chars_array_count_with_parens + 17\n        val ", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val max_level = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        val paren_array_index = 0\n        for(i <- 0 until paren_array_size)\
    \ {\n            val paren_array_element = paren_array(i)\n            val paren_array_element_size\
    \ = paren_array_element.length\n            val paren_array_element_index = 0\n\
    \            for(j <- 0 until paren_array_element_size) {\n                val\
    \ paren_array_element_element = paren_array_element(j)\n                val paren_array_element_element_size\
    \ = paren_array_element_element.length\n                val paren_array_element_element_index\
    \ = 0\n                for(k <- 0 until paren_array_element_element_size) {\n\
    \                    val paren_array_element_element_element = paren_array_element_element(k)\n\
    \                    val paren_array_element_element_element_size = paren_array_element_element_element.length\n\
    \                    val paren_array_element_element_element_index = 0\n     \
    \               for(l <- 0 until paren_array_element_element_element_size) {\n\
    \                        val paren_array_element_element_element_element = paren_array_element_element_element_element(l)\n\
    \                        val paren_array_element_element_element_element_element_size\
    \ = paren_array_element_element_element_element_element.length\n             \
    \           val paren_array_element_element_element_element_element_index = 0\n\
    \                        for(m <- 0 until paren_array_element_element_element_element_element_size)\
    \ {\n                            val paren_array_element_element_element_element_element_element\
    \ = paren_array_element_element_element_element_element_element(m)\n         \
    \                   val paren_array_element_element_element_element_element_element_size\
    \ = paren_array_element_element_element_element_element_element_element.length\n\
    \                            val paren_array_element_element_element_element_element_element_element_index\
    \ = 0\n                            for(n <- 0 until paren_array_element_element_element_element_element_element_element_size)\
    \ {\n                                val paren_array_element_element_element_element_element_element_element_element\
    \ = paren_array_element_element_element_element_element_element_element_element(\n\
    \                                    n)\n                                val paren_array_element_element_element_element_element_element_element_element_size\
    \ = paren_array_element_element_element_element_element_element_element_element_element_element.length\n\
    \                                val paren_array_element_element_element_element_element_element_element_element_element_index\
    \ = 0\n                                for(p <- 0 until paren_array_element_element_element_element_element_element_element_element_element_size)\
    \ {\n                                    val paren_array_element_element_element_element_element_element_element_element_element_element\
    \ = paren_array_element_element_element_element_element_element_element_element_element_element(\n\
    \                                        p)\n                                \
    \    val paren_array_element_element_element_element_element_element_element_element_element_element_size\
    \ = paren_array_element_element_element_element_element_", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val max_level = 0\n        val max_level_groups\
    \ = mutable.ListBuffer[String]()\n        for (paren_group <- paren_groups) {\n\
    \            val level = getNestingLevel(paren_group)\n            if (level >\
    \ max_level) {\n                max_level = level\n                max_level_groups\
    \ = max_level_groups ++ paren_group\n            } else if (level == max_level)\
    \ {\n                max_level_groups = max_level_groups ++ paren_group\n    \
    \        }\n        }\n        max_level_groups.toList", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val max_level = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        var i = 0\n        while (i < paren_array_size) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            }\n            i += 1\n        }\n        max_level_array", "   \
    \     val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_level_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_level = paren_stack_map.getOrElse(x, 0)\n      \
    \      paren_stack_map.put(x, paren_level + 1)\n            paren_stack.push(paren_level)\n\
    \        })\n        val max_level = paren_stack.max\n        val max_level_map\
    \ = paren_stack_map.max\n        val max_level_map_keys = max_level_map.keys\n\
    \        val max_level_map_values = max_level_map.values\n        val max_level_map_keys_sorted\
    \ = max_level_map_keys.sorted\n        val max_level_map_values_sorted = max_level_map_values.sorted\n\
    \        val max_level_map_keys_sorted_length = max_level_map_keys_sorted.length\n\
    \        val max_level_map_values_sorted_length = max_level_map_values_sorted.length\n\
    \        val max_level_map_keys_sorted_length_minus_1 = max_level_map_keys_sorted_length\
    \ - 1\n        val max_level_map_values_sorted_length_minus_1 = max_level_map_values_sorted_length\
    \ - 1\n        val max_level_map_keys_sorted_length_minus_1_plus_1 = max_level_map_keys_sorted_length_minus_1\
    \ + 1\n        val max_level_map_values_sorted_length_minus_1_plus_1 = max_level_map_values_sorted_length_minus_1_plus_1\
    \ + 1\n        val max_level_map_keys_sorted_length_minus_1_plus_1_plus_1 = max_level_map_keys_sorted_length_minus_1_plus_1\
    \ + 1\n        val max_level_map_values_sorted_length_minus_1_plus_1_plus_1 =\
    \ max_level_map_values_sorted_length_minus_1_plus_1_plus_1 + 1\n        val max_level_map_keys_sorted_length_minus_1_plus_1_plus_1_plus_1\
    \ = max_level_map_keys_sorted_length_minus_1_plus_1_plus_1 + 1\n        val max_level_map_values_sorted_length_minus_1_plus_1_plus_1_plus_1\
    \ = max_level_map_values_sorted_length_minus_1_plus_1_plus_1_plus_1 + 1\n    \
    \    val max_level_map_keys_sorted_length_minus_1_plus_1_plus_1_plus_1_plus_1\
    \ = max_level_map_keys_sorted_length_minus_1_plus_1_plus_1_plus_1_plus_1 + 1\n\
    \        val max_level_map_values_sorted_length_minus_1_plus_1_plus_1_plus_1_plus_1\
    \ = max_level_map_values_sorted_length_minus_1_plus_1_plus_1_plus_1_plus_1 + 1\n\
    \        val max_level_map_keys_sorted_length_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = max_level_map_keys_sorted_length_minus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ + 1\n", "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        var max_level_index\
    \ = 0\n        var level = 0\n        var index = 0\n        while(index < paren_array_size)\
    \ {\n            if(paren_array(index) == \"(\") {\n                level += 1\n\
    \            } else if(paren_array(index) == \")\") {\n                level -=\
    \ 1\n                if(level == 0) {\n                    max_level = max_level\
    \ + 1\n                    max_level_index = index\n                }\n      \
    \      }\n            index += 1\n        }\n        val max_level_array = paren_array.take(max_level_index\
    \ + 1)\n        val max_level_array_size = max_level_array.length\n        var\
    \ max_level_array_index = 0\n        var max_level_array_value = 0\n        while(index\
    \ < max_level_array_size) {\n            if(max_level_array(index) == \"(\") {\n\
    \                max_level_array_value += 1\n            } else if(max_level_array(index)\
    \ == \")\") {\n                max_level_array_value -= 1\n                if(max_level_array_value\
    \ == 0) {\n                    max_level_array_index = index\n               \
    \ }\n            }\n            index += 1\n        }\n        val max_level_array_value\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_index\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_size =\
    \ max_level_array.length\n        val max_level_array_index = max_level_array(max_level_array_index)\n\
    \        val max_level_array_value = max_level_array(max_level_array_index)\n\
    \        val max_level_array_size = max_level_array.length\n        val max_level_array_index\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_value\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_size =\
    \ max_level_array.length\n        val max_level_array_index = max_level_array(max_level_array_index)\n\
    \        val max_level_array_value = max_level_array(max_level_array_index)\n\
    \        val max_level_array_size = max_level_array.length\n        val max_level_array_index\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_value\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_size =\
    \ max_level_array.length\n        val max_level_array_index = max_level_array(max_level_array_index)\n\
    \        val max_level_array_value = max_level_array(max_level_array_index)\n\
    \        val max_level_array_size = max_level_array.length\n        val max_level_array_index\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_value\
    \ = max_level_array(max_level_array_index)\n        val max_level_array_size =\
    \ max_level_array.length\n        val max_level_array_index = max_level_array(max_level_array_index)\n\
    \        val max_level_array_value = max_level_array(max_level_array_index)\n\
    \        val max_", "        val paren_array = paren_string.split(\" \")\n   \
    \     val paren_array_size = paren_array.length\n        val max_level = 0\n \
    \       val max_level_size = 0\n        val paren_array_map = mutable.Map[Long,\
    \ Long]()\n        val paren_array_map_size = paren_array_map.length\n       \
    \ val paren_array_map_map = mutable.Map[Long, Long]()\n        val paren_array_map_map_size\
    \ = paren_array_map_map.length\n        val paren_array_map_map_map = mutable.Map[Long,\
    \ Long]()\n        val paren_array_map_map_map_size = paren_array_map_map_map.length\n\
    \        val paren_array_map_map_map_map_size = paren_array_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_size = paren_array_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_size = paren_array_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_size = paren_array_map_map_map_map_map_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_map_size\
    \ = paren_array_map_map_map_map_map_map_map_map_map_map_map_map_map_map.length\n\
    \        val paren_array_map_map_map_map_map_map_map_map_map_map_map_map_size\
    \ = paren_array_map_map_map_map_map_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ level_count = paren_array.length\n        val levels = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_count = mutable.ArrayBuffer.empty[Long]\n        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_index = paren_array_size - 1\n        val paren_array_last_index\
    \ = paren_array_index - 1\n        val paren_array_last_value = paren_array(paren_array_last_index)\n\
    \        val paren_array_first_value = paren_array(0)\n        val paren_array_first_index\
    \ = paren_array_index\n        val paren_array_first_value = paren_array(0)\n\
    \        val paren_array_last_paren_array_index = paren_array_index\n        val\
    \ paren_array_last_paren_array_value = paren_array(paren_array_last_index)\n \
    \       val paren_array_first_paren_array_index = paren_array_index\n        val\
    \ paren_array_first_paren_array_value = paren_array(0)\n        val paren_array_first_paren_array_paren_array_index\
    \ = paren_array_index\n        val paren_array_first_paren_array_paren_array_value\
    \ = paren_array(0)\n        val paren_array_first_paren_array_paren_array_paren_array_index\
    \ = paren_array_index\n        val paren_array_first_paren_array_paren_array_paren_array_value\
    \ = paren_array(0)\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_index\
    \ = paren_array_index\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_value\
    \ = paren_array(0)\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_paren_array_index\
    \ = paren_array_index\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_paren_array_value\
    \ = paren_array(0)\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_paren_array_paren_array_index\
    \ = paren_array_index\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_paren_array_paren_array_value\
    \ = paren_array(0)\n        val paren_array_first_paren_array_paren_array_paren_array_paren_array_paren_array_paren_array_paren_array_index\
    \ = paren_array_index\n        val paren_array_first_paren_array_paren_array_paren_array_paren_",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_index = 0\n        val max_level_string = \"\"\n      \
    \  val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_size\
    \ - 1\n        val paren_array_max_string = \"\"\n        val paren_array_max_index\
    \ = 0\n        val paren_array_max_string = \"\"\n        val paren_array_max_string_size\
    \ = 0\n        val paren_array_max_string_size_index = 0\n        val paren_array_max_string_size_string\
    \ = \"\"\n        val paren_array_max_string_size_string_index = 0\n        val\
    \ paren_array_max_string_size_string_size = 0\n        val paren_array_max_string_size_string_size_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string = \"\"\n   \
    \     val paren_array_max_string_size_string_size_string_index = 0\n        val\
    \ paren_array_max_string_size_string_size_string_size = 0\n        val paren_array_max_string_size_string_size_string_size_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string\
    \ = \"\"\n        val paren_array_max_string_size_string_size_string_size_string_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string\
    \ = \"\"\n        val paren_array_max_string_size_string_size_string_size_string_size_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_size\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_size\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_size\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_size\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_index\
    \ = 0\n        val paren_array_max_string_size_string_size_string_size_string_size_string_size\
    \ = 0\n        ", "        val paren_groups = paren_string.split(\" \")\n    \
    \    val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = parseNestedParens(paren_group)\n            if (paren_group_levels.size >\
    \ max_level) {\n                max_level = paren_group_levels.size\n        \
    \        max_levels += paren_group_levels.last\n            }\n        }\n   \
    \     max_levels", "        val paren_groups = paren_string.split(\"\\\\s+\")\n\
    \        val max_levels = paren_groups.map(paren => paren.count(\"(\") - paren.count(\"\
    )\")).max\n        val max_levels_map = paren_groups.map(paren => paren.count(\"\
    (\") - paren.count(\")\")) zip (0 until max_levels).toMap\n        val max_levels_map_keys\
    \ = max_levels_map.keys\n        val max_levels_map_values = max_levels_map.values\n\
    \        val max_levels_map_sorted = max_levels_map_keys.sortBy(-_)\n        val\
    \ max_levels_map_sorted_values = max_levels_map_values.sortBy(-_)\n        val\
    \ max_levels_map_sorted_keys = max_levels_map_sorted.map(max_levels_map_sorted_values(_))\n\
    \        val max_levels_map_sorted_keys_sorted = max_levels_map_sorted_keys.sortBy(-_)\n\
    \        val max_levels_map_sorted_keys_sorted_values = max_levels_map_sorted_keys_sorted.map(max_levels_map_sorted_values(_))\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted = max_levels_map_sorted_keys_sorted_values.sortBy(-_)\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys = max_levels_map_sorted_keys_sorted_values_sorted.map(max_levels_map_sorted_keys(_))\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted = max_levels_map_sorted_keys_sorted_values_sorted_keys.sortBy(-_)\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values\
    \ = max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted.map(max_levels_map_sorted_values(_))\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted\
    \ = max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values.sortBy(-_)\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys\
    \ = max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted.map(max_levels_map_sorted_keys(_))\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted\
    \ = max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys.sortBy(-_)\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted_values\
    \ = max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted.map(max_levels_map_sorted_values(_))\n\
    \        val max_levels_map_sorted_keys_sorted_values_sorted_keys_sorted_values_sorted_keys_sorted_values_sor",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size_size_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size_size_size_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size_size_size_size_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size_size_size_size_size_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size_size_size_size_size_size_size_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = mutable.Stack[", "        val paren_stack = mutable.Stack[Long]()\n      \
    \  val paren_stack_top = paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n\
    \        val paren_stack_max_size = paren_stack.size\n        val paren_stack_max_depth\
    \ = paren_stack.size\n        val paren_stack_max_depth_increased = paren_stack.size\n\
    \        val paren_stack_max_depth_decreased = paren_stack.size\n        val paren_stack_max_depth_changed\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged = paren_stack.size\n\
    \        val paren_stack_max_depth_unchanged_after_change = paren_stack.size\n\
    \        val paren_stack_max_depth_unchanged_after_unchange = paren_stack.size\n\
    \        val paren_stack_max_depth_unchanged_after_unchange_increased = paren_stack.size\n\
    \        val paren_stack_max_depth_unchanged_after_unchange_decreased = paren_stack.size\n\
    \        val paren_stack_max_depth_unchanged_after_unchange_increased_after_change\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_decreased_after_change\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_increased_after_unchange\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_decreased_after_unchange\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_increased_after_unchange_increased\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_decreased_after_unchange_decreased\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_increased_after_unchange_increased_after_change\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_decreased_after_unchange_decreased_after_change\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_increased_after_unchange_increased_after_unchange\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_decreased_after_unchange_decreased_after_unchange\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_unchange_increased_after_unchange_increased_after_unchange_increased\
    \ = paren_stack.size\n        val paren_stack_max_depth_unchanged_after_", " \
    \       val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.size\n        val max_level = 0\n        val max_level_paren_array\
    \ = new Array[String](paren_array_size)\n        val max_level_paren_array_size\
    \ = paren_array_size\n        val max_level_paren_array_index = 0\n        val\
    \ max_level_paren_array_index2 = 0\n        val max_level_paren_array_index3 =\
    \ 0\n        val max_level_paren_array_index4 = 0\n        val max_level_paren_array_index5\
    \ = 0\n        val max_level_paren_array_index6 = 0\n        val max_level_paren_array_index7\
    \ = 0\n        val max_level_paren_array_index8 = 0\n        val max_level_paren_array_index9\
    \ = 0\n        val max_level_paren_array_index10 = 0\n        val max_level_paren_array_index11\
    \ = 0\n        val max_level_paren_array_index12 = 0\n        val max_level_paren_array_index13\
    \ = 0\n        val max_level_paren_array_index14 = 0\n        val max_level_paren_array_index15\
    \ = 0\n        val max_level_paren_array_index16 = 0\n        val max_level_paren_array_index17\
    \ = 0\n        val max_level_paren_array_index18 = 0\n        val max_level_paren_array_index19\
    \ = 0\n        val max_level_paren_array_index20 = 0\n        val max_level_paren_array_index21\
    \ = 0\n        val max_level_paren_array_index22 = 0\n        val max_level_paren_array_index23\
    \ = 0\n        val max_level_paren_array_index24 = 0\n        val max_level_paren_array_index25\
    \ = 0\n        val max_level_paren_array_index26 = 0\n        val max_level_paren_array_index27\
    \ = 0\n        val max_level_paren_array_index28 = 0\n        val max_level_paren_array_index29\
    \ = 0\n        val max_level_paren_array_index30 = 0\n        val max_level_paren_array_index31\
    \ = 0\n        val max_level_paren_array_index32 = 0\n        val max_level_paren_array_index33\
    \ = 0\n        val max_level_paren_array_index34 = 0\n        val max_level_paren_array_index35\
    \ = 0\n        val max_level_paren_array_index36 = 0\n        val max_level_paren_array_index37\
    \ = 0\n        val max_level_paren_array_index38 = 0\n        val max_level_paren_array_index39\
    \ = 0\n        val max_level_paren_array_index40 = 0\n        val max_level_paren_array_index41\
    \ = 0\n        val max_", "        val paren_stack = mutable.Stack[Long]()\n \
    \       val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_max_depth_max_size = mutable.Stack[Long]()\n \
    \       val paren_stack_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_list = List[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").length\n            if (paren_group_levels >\
    \ max_level) {\n                max_level = paren_group_levels\n             \
    \   max_level_list = paren_group_levels\n            } else if (paren_group_levels\
    \ == max_level) {\n                max_level_list = max_level_list :+ paren_group_levels\n\
    \            }\n        }\n        max_level_list", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val max_level = 0\n        val max_level_index\
    \ = 0\n        val max_level_paren_groups = mutable.ListBuffer[String]()\n   \
    \     for (i <- 0 until paren_groups.length) {\n            val paren_group =\
    \ paren_groups(i)\n            val paren_group_list = paren_group.split(\"\\\\\
    (\")\n            val paren_group_list_size = paren_group_list.length\n      \
    \      if (paren_group_list_size > max_level) {\n                max_level = paren_group_list_size\n\
    \                max_level_index = i\n                max_level_paren_groups =\
    \ paren_group_list\n            }\n        }\n        val max_level_paren_groups_size\
    \ = max_level_paren_groups.length\n        if (max_level_paren_groups_size > 0)\
    \ {\n            val max_level_paren_groups_index = max_level_index\n        \
    \    val max_level_paren_groups_string = max_level_paren_groups(max_level_paren_groups_index)\n\
    \            val max_level_paren_groups_size = max_level_paren_groups_string.length\n\
    \            if (max_level_paren_groups_size > 0) {\n                val max_level_paren_groups_string_list\
    \ = max_level_paren_groups_string.split(\"\\\\)\")\n                val max_level_paren_groups_string_size\
    \ = max_level_paren_groups_string_list.length\n                if (max_level_paren_groups_string_size\
    \ > max_level) {\n                    max_level = max_level_paren_groups_string_size\n\
    \                    max_level_index = max_level_paren_groups_index\n        \
    \            max_level_paren_groups = max_level_paren_groups_string_list\n   \
    \             }\n            }\n        }\n        val max_level_paren_groups_size\
    \ = max_level_paren_groups.length\n        if (max_level_paren_groups_size > 0)\
    \ {\n            val max_level_paren_groups_index = max_level_index\n        \
    \    val max_level_paren_groups_string = max_level_paren_groups(max_level_paren_groups_index)\n\
    \            val max_level_paren_groups_size = max_level_paren_groups_string.length\n\
    \            if (max_level_paren_groups_size > 0) {\n                val max_level_paren_groups_string_list\
    \ = max_level_paren_groups_string.split(\"\\\\)\")\n                val max_level_paren_groups_string_size\
    \ = max_level_paren_groups_string_list.length\n                if (max_level_paren_groups_string_size\
    \ > max_level) {\n                    max_level = max_level_paren_groups_string_size\n\
    \                    max_level_index = max_level_paren_groups_index\n        \
    \            max_level_paren_groups = max_level_paren_groups_string_list\n   \
    \             }\n            }\n        }\n        val max_level_paren_groups_size\
    \ = max_level_paren_groups.length\n        if (max_level_paren_groups_size > 0)\
    \ {\n            val max_level_paren_groups_index = max_level_index\n        \
    \    val max_level_", "        val paren_stack = mutable.Stack[Long]()\n     \
    \   val paren_stack_top = paren_stack.push(0)\n        val paren_stack_bottom\
    \ = paren_stack.push(Long.MaxValue)\n        val paren_stack_len = paren_stack.size\n\
    \        val paren_stack_max_len = paren_stack_len - 2\n        val paren_stack_max_len_top\
    \ = paren_stack_max_len - 2\n        val paren_stack_max_len_bottom = paren_stack_max_len\
    \ - 3\n        val paren_stack_max_len_len = paren_stack_max_len - 2\n       \
    \ val paren_stack_max_len_len_top = paren_stack_max_len - 3\n        val paren_stack_max_len_len_bottom\
    \ = paren_stack_max_len - 4\n        val paren_stack_max_len_len_len = paren_stack_max_len\
    \ - 3\n        val paren_stack_max_len_len_len_top = paren_stack_max_len - 4\n\
    \        val paren_stack_max_len_len_len_bottom = paren_stack_max_len - 5\n  \
    \      val paren_stack_max_len_len_len_len = paren_stack_max_len - 4\n       \
    \ val paren_stack_max_len_len_len_len_top = paren_stack_max_len - 5\n        val\
    \ paren_stack_max_len_len_len_len_bottom = paren_stack_max_len - 6\n        val\
    \ paren_stack_max_len_len_len_len_len = paren_stack_max_len - 5\n        val paren_stack_max_len_len_len_len_len_top\
    \ = paren_stack_max_len - 6\n        val paren_stack_max_len_len_len_len_len_bottom\
    \ = paren_stack_max_len - 7\n        val paren_stack_max_len_len_len_len_len_len\
    \ = paren_stack_max_len - 6\n        val paren_stack_max_len_len_len_len_len_len_top\
    \ = paren_stack_max_len - 7\n        val paren_stack_max_len_len_len_len_len_len_bottom\
    \ = paren_stack_max_len - 8\n        val paren_stack_max_len_len_len_len_len_len_len\
    \ = paren_stack_max_len - 7\n        val paren_stack_max_len_len_len_len_len_len_len_top\
    \ = paren_stack_max_len - 8\n        val paren_stack_max_len_len_len_len_len_len_len_bottom\
    \ = paren_stack_max_len - 9\n        val paren_stack_max_len_len_len_len_len_len_len_len\
    \ = paren_stack_max_len - 8\n        val paren_stack_max_len_len_len_len_len_len_len_top\
    \ = paren_stack_max_len - 9\n        val paren_stack_max_len_len_len_len_len_len_len_bottom\
    \ = paren_stack_max_len - 10\n        val paren_stack_max_len_len_len_len_len_len_len_len\
    \ = paren_stack_max_len", "        val paren_groups = paren_string.split(\" \"\
    )\n        val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = parseNestedParens(paren_group)\n            if (paren_group_levels.size >\
    \ max_level) {\n                max_level = paren_group_levels.size\n        \
    \        max_levels += paren_group_levels.last\n            }\n        }\n   \
    \     max_levels", "        val paren_stack = mutable.Stack[Long]()\n        val\
    \ paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size =\
    \ mutable.Stack[Int]()\n        val paren_stack_max_size_max = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size_max_max = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_size_max_max_max = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.", "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_size: mutable.Stack[Long] = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_size_size_size: mutable.Stack[Long] =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size:\
    \ mutable.Stack[Long] = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_size_size_size_size_size_size_size_size_size_size",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Int]()\n        val paren_stack_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_max_depth = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_max_depth_max = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Int]()\n", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_index = 0\n \
    \       val paren_array_max_level = 0\n        val paren_array_max_level_index\
    \ = 0\n        val paren_array_max_level_paren_array_index = 0\n        val paren_array_max_level_paren_array_size\
    \ = 0\n        val paren_array_max_level_paren_array_max_level = 0\n        val\
    \ paren_array_max_level_paren_array_max_level_index = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_size\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_size\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_size\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_index\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_size\
    \ = 0\n        val paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level_paren_array_max_level\
    \ = 0\n        val paren_array_max_level_paren_array_max_", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_max_size = paren_array_size - 1\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_paren_groups = mutable.ListBuffer[String]()\n        for\
    \ (paren_group <- paren_groups) {\n            val paren_group_level = getNestingLevel(paren_group)\n\
    \            if (paren_group_level > max_level) {\n                max_level =\
    \ paren_group_level\n                max_level_paren_groups = paren_group\n  \
    \          } else if (paren_group_level == max_level) {\n                max_level_paren_groups\
    \ += paren_group\n            }\n        }\n        max_level_paren_groups.toList",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n\
    \        val paren_levels = mutable.Map[Long, Long]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_levels(0) = 0\n        paren_string.split(\"\
    \\\\s+\").foreach { s =>\n            val level = paren_levels(paren_queue.dequeue())\n\
    \            val paren_level = paren_levels(paren_stack.peek())\n            val\
    \ paren_level_diff = paren_level - level\n            paren_levels(paren_queue.dequeue())\
    \ = level\n            paren_queue.enqueue(paren_queue.dequeue() + 1)\n      \
    \      paren_stack.push(paren_stack.peek() + 1)\n            if (paren_level_diff\
    \ > 0) paren_queue.enqueue(paren_queue.dequeue() + 1)\n        }\n        paren_queue.dequeue().toList",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        val paren_levels = mutable.ArrayBuffer.empty[Long]\n        val\
    \ paren_level_size = mutable.ArrayBuffer.empty[Long]\n        val paren_level_start\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_level_end = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_size = mutable.ArrayBuffer.empty[Long]\n      \
    \  val paren_level_end_size = mutable.ArrayBuffer.empty[Long]\n        val paren_level_start_index\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_level_end_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_size = mutable.ArrayBuffer.empty[Long]\n  \
    \      val paren_level_start_index_index = mutable.ArrayBuffer.empty[Long]\n \
    \       val paren_level_end_index_index = mutable.ArrayBuffer.empty[Long]\n  \
    \      val paren_level_start_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_index_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index_index_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_index_index_index = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_end_index_index_index_index_index_size = mutable.ArrayBuffer.empty[Long]\n\
    \        val paren_level_start_index_index_index_index_index_index = mutable.ArrayBuffer.",
  "        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.size\n        val max_level = 0\n        val max_level_size =\
    \ 0\n        val level_size = 0\n        val paren_array_iter = paren_array.iterator\n\
    \        val paren_array_next = paren_array_iter.next()\n        val paren_array_next_size\
    \ = paren_array_next.length\n        val paren_array_next_iter = paren_array_next.iterator\n\
    \        val paren_array_next_next_size = paren_array_next_iter.next()\n     \
    \   val paren_array_next_next_iter = paren_array_next_iter.next()\n        val\
    \ paren_array_next_next_next_size = paren_array_next_next_iter.next()\n      \
    \  val paren_array_next_next_next_iter = paren_array_next_next_iter.next()\n \
    \       val paren_array_next_next_next_next_size = paren_array_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_iter = paren_array_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_size = paren_array_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_iter = paren_array_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_size = paren_array_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_iter = paren_array_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_size = paren_array_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_iter = paren_array_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_next_size = paren_array_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_next_iter = paren_array_next_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_next_next_size = paren_array_next_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_next_next_iter = paren_array_next_next_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_next_next_size = paren_array_next_next_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren_array_next_next_next_next_next_next_next_next_next_next_iter\
    \ = paren_array_next_next_next_next_next_next_next_next_next_next_iter.next()\n\
    \        val paren", "        val paren_stack = mutable.Stack[String]()\n    \
    \    val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n    \
    \    val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n  \
    \      val paren_stack_map_values_updated = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_values_updated = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_values_updated = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_values_updated = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n  \
    \      val paren_stack_map_values_updated = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_values_updated = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_values_updated = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_values_updated = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_updated =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_updated = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_updated = mutable.Map[String, Long]()\n  \
    \      val paren_stack_map_values_updated = mutable.Map[String, Long]()\n    \
    \    val paren_stack_map_values_updated = mutable.Map[String, Long]()\n      \
    \  val paren_stack_map_values_updated = mutable.Map[String, Long]()\n        val\
    \ paren_stack_map_values_updated = mutable.Map[String, Long]()\n        val paren_stack_map_values_update",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size.toLong\n\
    \        val paren_array_max_depth = paren_array_max_size.pow(2)\n        val\
    \ paren_array_max_depth_plus_one = paren_array_max_depth.toLong + 1\n        val\
    \ paren_array_max_depth_plus_two = paren_array_max_depth_plus_one.toLong + 2\n\
    \        val paren_array_max_depth_plus_three = paren_array_max_depth_plus_two.toLong\
    \ + 3\n        val paren_array_max_depth_plus_four = paren_array_max_depth_plus_three.toLong\
    \ + 4\n        val paren_array_max_depth_plus_five = paren_array_max_depth_plus_four.toLong\
    \ + 5\n        val paren_array_max_depth_plus_six = paren_array_max_depth_plus_five.toLong\
    \ + 6\n        val paren_array_max_depth_plus_seven = paren_array_max_depth_plus_six.toLong\
    \ + 7\n        val paren_array_max_depth_plus_eight = paren_array_max_depth_plus_seven.toLong\
    \ + 8\n        val paren_array_max_depth_plus_nine = paren_array_max_depth_plus_eight.toLong\
    \ + 9\n        val paren_array_max_depth_plus_ten = paren_array_max_depth_plus_nine.toLong\
    \ + 10\n        val paren_array_max_depth_plus_eleven = paren_array_max_depth_plus_ten.toLong\
    \ + 11\n        val paren_array_max_depth_plus_twelve = paren_array_max_depth_plus_eleven.toLong\
    \ + 12\n        val paren_array_max_depth_plus_thirteen = paren_array_max_depth_plus_twelve.toLong\
    \ + 13\n        val paren_array_max_depth_plus_fourteen = paren_array_max_depth_plus_thirteen.toLong\
    \ + 14\n        val paren_array_max_depth_plus_fifteen = paren_array_max_depth_plus_fourteen.toLong\
    \ + 15\n        val paren_array_max_depth_plus_sixteen = paren_array_max_depth_plus_fifteen.toLong\
    \ + 16\n        val paren_array_max_depth_plus_seventeen = paren_array_max_depth_plus_sixteen.toLong\
    \ + 17\n        val paren_array_max_depth_plus_eighteen = paren_array_max_depth_plus_seventeen.toLong\
    \ + 18\n        val paren_array_max_depth_plus_nineteen = paren_array_max_depth_plus_eighteen.toLong\
    \ + 19\n        val paren_array_max_depth_plus_twenty = paren_", "        val\
    \ paren_groups = paren_string.split(\" \")\n        val max_level = 0\n      \
    \  val max_level_groups = List[String]()\n        for(paren_group <- paren_groups)\
    \ {\n            val paren_group_str = paren_group.replaceAll(\"\\\\(\", \"\"\
    ).replaceAll(\"\\\\)\", \"\")\n            val paren_group_ints = paren_group_str.split(\"\
    \\\\)\")\n            val paren_group_ints_size = paren_group_ints.length\n  \
    \          val paren_group_ints_sum = paren_group_ints.sum\n            val paren_group_ints_product\
    \ = paren_group_ints_sum * paren_group_ints_size\n            if(paren_group_ints_product\
    \ > max_level_groups.length) {\n                max_level = paren_group_ints_size\n\
    \                max_level_groups = paren_group_ints\n            }\n        }\n\
    \        max_level_groups", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach(s => {\n            if (s.startsWith(\"(\")) {\n           \
    \     paren_stack.push(paren_stack_map.getOrElse(paren_stack.last, 0L) + 1)\n\
    \                paren_stack_map.put(paren_stack.last, paren_stack.last)\n   \
    \         }\n            if (s.endsWith(\")\")) {\n                val paren_level\
    \ = paren_stack_map.getOrElse(paren_stack.last, 0L)\n                paren_stack_map.put(paren_stack.last,\
    \ paren_level)\n                paren_stack.pop()\n            }\n        })\n\
    \        paren_stack.map(x => paren_stack_map.getOrElse(x, 0L)).toList", "   \
    \     val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_limit = mutable.Stack[Long]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Long]()\n        val paren_stack_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_index = paren_array_max_size - 1\n        val\
    \ paren_array_max_value = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_char_index = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value(paren_array_max_value_char_index)\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char.length\n\
    \        val paren_array_max_value_char_length = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char_char_index = paren_array_max_value_char_length\
    \ - 1\n        val paren_array_max_value_char_char = paren_array_max_value_char(paren_array_max_value_char_char_index)\n\
    \        val paren_array_max_value_char_char_length = paren_array_max_value_char_char.length\n\
    \        val paren_array_max_value_char_char_length = paren_array_max_value_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_index = paren_array_max_value_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char = paren_array_max_value_char_char(paren_array_max_value_char_char_char_index)\n\
    \        val paren_array_max_value_char_char_char_length = paren_array_max_value_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_length = paren_array_max_value_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_index = paren_array_max_value_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char = paren_array_max_value_char_char_char(paren_array_max_value_char_char_char_char_index)\n\
    \        val paren_array_max_value_char_char_char_char_length = paren_array_max_value_char_char_char_char.length\n\
    \        val paren_array_max_value_char_char_char_char_length = paren_array_max_value_char_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_char_index = paren_array_max_value_char_char_char_char_length\
    \ - 1\n        val paren_array_max_value_char_char_char_char_char = paren_array_max_value_char_char_char(paren_array_max_value_char_char_char_char_char_index)\n\
    \        val paren_array_max_value_char_char_char_char_char_length = paren", " \
    \       val paren_groups = paren_string.split(\"\\\\s+\")\n        val max_level\
    \ = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n        for\
    \ (paren_group <- paren_groups) {\n            val level_of_nesting = paren_group.count('(')\
    \ - paren_group.count(')')\n            if (level_of_nesting > max_level) {\n\
    \                max_level = level_of_nesting\n                max_level_groups\
    \ = paren_group\n            }\n        }\n        max_level_groups.toList", " \
    \       val paren_groups = paren_string.split(\" \")\n        val max_level =\
    \ 0\n        val max_level_groups = mutable.ListBuffer[String]()\n        for\
    \ (paren_group <- paren_groups) {\n            val paren_group_level = getNestingLevel(paren_group)\n\
    \            if (paren_group_level > max_level) {\n                max_level =\
    \ paren_group_level\n                max_level_groups = paren_group\n        \
    \    }\n        }\n        max_level_groups.toList", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val max_level = 0\n        var level = 0\n        var paren_level = 0\n\
    \        var paren_level_array = new Array[Long](paren_array_size)\n        val\
    \ paren_level_array_size = paren_level_array.length\n        var paren_level_array_index\
    \ = 0\n        var paren_level_array_value = 0\n        var paren_level_array_value_array\
    \ = new Array[Long](paren_level_array_size)\n        var paren_level_array_value_array_index\
    \ = 0\n        var paren_level_array_value_array_value = 0\n        var paren_level_array_value_array_value_array\
    \ = new Array[Long](paren_level_array_value_array_size)\n        var paren_level_array_value_array_value_array_index\
    \ = 0\n        var paren_level_array_value_array_value_array_value = 0\n     \
    \   var paren_level_array_value_array_value_array_value_array = new Array[Long](paren_level_array_value_array_value_array_size)\n\
    \        var paren_level_array_value_array_value_array_value_array_index = 0\n\
    \        var paren_level_array_value_array_value_array_value_array_value = 0\n\
    \        var paren_level_array_value_array_value_array_value_array_value_array\
    \ = new Array[Long](paren_level_array_value_array_value_array_value_array_size)\n\
    \        var paren_level_array_value_array_value_array_value_array_value_array_index\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value_array\
    \ = new Array[Long](paren_level_array_value_array_value_array_value_array_value_array_size)\n\
    \        var paren_level_array_value_array_value_array_value_array_value_array_value_array_index\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array\
    \ = new Array[Long](paren_level_array_value_array_value_array_value_array_value_array_value_array_size)\n\
    \        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array_index\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array_value\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array_value_array\
    \ = new Array[Long](paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array_size)\n\
    \        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array_value_array_index\
    \ = 0\n        var paren_level_array_value_array_value_array_value_array_value_array_value_array_value_array_value_array_",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_groups = mutable.ListBuffer[String]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_level = getNestingLevel(paren_group)\n\
    \            if (paren_group_level > max_level) {\n                max_level =\
    \ paren_group_level\n                max_level_groups = max_level_groups :+ paren_group\n\
    \            } else if (paren_group_level == max_level) {\n                max_level_groups\
    \ = max_level_groups :+ paren_group\n            }\n        }\n        max_level_groups.map(_.toLong).toList",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_paren = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_paren_size = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth_paren\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth_paren_depth_paren_depth_paren_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_paren_depth_paren_depth",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_paren_array = new Array[String](paren_array.length)\n \
    \       val paren_array_with_level = new Array[String](paren_array.length)\n \
    \       val paren_array_with_level_and_index = new Array[String](paren_array.length)\n\
    \        val paren_array_with_level_and_index_and_paren_array = new Array[String](paren_array.length)\n\
    \        val paren_array_with_level_and_index_and_paren_array_with_level = new\
    \ Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level\
    \ = new Array[String](paren_array.length)\n        val paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_array_with_level_and_index_and_paren_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Int]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Int]()\n   \
    \     val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n     \
    \   val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n    \
    \    val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_list\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index2 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index3 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index4 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index5 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index6 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index7 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index8 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index9 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index10 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index11 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index12 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index13 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index14 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index15 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index16 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index17 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index18 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index19 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index20 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index21 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_", "        val paren_array = paren_string.split(\" \")\n \
    \       val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_array_list_size = paren_array_list.size\n\
    \        val paren_array_list_index = paren_array_list_size - 1\n        val paren_array_list_index_size\
    \ = paren_array_list_index.length\n        val paren_array_list_index_value =\
    \ paren_array_list_index.toLong\n        val paren_array_list_index_value_plus_one\
    \ = paren_array_list_index_value + 1\n        val paren_array_list_index_value_minus_one\
    \ = paren_array_list_index_value - paren_array_list_index_value_plus_one\n   \
    \     val paren_array_list_index_value_minus_two = paren_array_list_index_value\
    \ - paren_array_list_index_value_minus_one\n        val paren_array_list_index_value_minus_three\
    \ = paren_array_list_index_value - paren_array_list_index_value_minus_two\n  \
    \      val paren_array_list_index_value_minus_four = paren_array_list_index_value\
    \ - paren_array_list_index_value_minus_three\n        val paren_array_list_index_value_minus_five\
    \ = paren_array_list_index_value - paren_array_list_index_value_minus_four\n \
    \       val paren_array_list_index_value_minus_six = paren_array_list_index_value\
    \ - paren_array_list_index_value_minus_five\n        val paren_array_list_index_value_minus_seven\
    \ = paren_array_list_index_value - paren_array_list_index_value_minus_six\n  \
    \      val paren_array_list_index_value_minus_eight = paren_array_list_index_value\
    \ - paren_array_list_index_value_minus_seven\n        val paren_array_list_index_value_minus_nine\
    \ = paren_array_list_index_value - paren_array_list_index_value_minus_eight\n\
    \        val paren_array_list_index_value_minus_ten = paren_array_list_index_value\
    \ - paren_array_list_index_value_minus_nine\n        val paren_array_list_index_value_minus_eleven\
    \ = paren_array_list_index_value - paren_array_list_index_value_minus_ten\n  \
    \      val paren_array_list_index_value_minus_twelve = paren_array_list_index_value\
    \ - paren_array_list_index_value_minus_eleven\n        val paren_array_list_index_value_minus_thirteen\
    \ = paren_array_list_index_value - paren_array_list_index_value_minus_twelve\n\
    \        val paren_array_list_index_value_minus_fourteen = paren_array_list_index_value\
    \ - paren_", "        val paren_groups = paren_string.split(\" \")\n        val\
    \ paren_groups_with_max_depth = mutable.ArrayBuffer.empty[Long]\n        val paren_groups_with_max_depth_with_paren_groups\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (paren_group <- paren_groups)\
    \ {\n            val paren_group_with_max_depth = paren_group.countOpenParens()\n\
    \            val paren_group_with_max_depth_with_paren_groups = paren_group_with_max_depth\
    \ + paren_group.countCloseParens()\n            if (paren_group_with_max_depth\
    \ > paren_groups_with_max_depth.max)\n                paren_groups_with_max_depth.clear()\n\
    \            if (paren_group_with_max_depth_with_paren_groups > paren_groups_with_max_depth_with_paren_groups.max)\n\
    \                paren_groups_with_max_depth_with_paren_groups.clear()\n     \
    \       paren_groups_with_max_depth += paren_group_with_max_depth\n          \
    \  paren_groups_with_max_depth_with_paren_groups += paren_group_with_max_depth_with_paren_groups\n\
    \        }\n        paren_groups_with_max_depth.toList", "        val paren_groups\
    \ = paren_string.split(\"\\\\s+\")\n        val max_levels = paren_groups.map(x\
    \ => x.count('(') - x.count(')')).max\n        val max_levels_map = mutable.Map[Long,\
    \ Long]()\n        paren_groups.foreach(x => {\n            val level = x.count('(')\
    \ - x.count(')')\n            val max_level = max_levels_map.getOrElse(level,\
    \ level)\n            max_levels_map += (level -> max_level)\n        })\n   \
    \     max_levels_map.toList.sortBy(_._1).reverse.map(x => x._2)", "        val\
    \ paren_stack = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Int]()\n\
    \        val paren_stack_depth = mutable.Stack[Int]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_2 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size_3 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_size_4 = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_5\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_6 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size_7 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_size_8 = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_9\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_10 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size_11 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_size_12 = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_13\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_14 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size_15 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_size_16 = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_17\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_18 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size_19 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_size_20 = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_21\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_depth_size_22 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_depth_size_23 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_depth_size_24 = mutable.Stack[Int]()\n        val ", "     \
    \   val paren_stack = mutable.Stack[String]()\n        val paren_level = mutable.Stack[Int]()\n\
    \        val paren_level_map = mutable.Map[String, Int]()\n        paren_string.split(\"\
    \\\\s+\").foreach { s =>\n            val level = paren_level_map(s)\n       \
    \     if (level == null) {\n                paren_stack.push(s)\n            \
    \    paren_level.push(0)\n                paren_level_map(s) = 0\n           \
    \ } else {\n                paren_level.push(level)\n            }\n        }\n\
    \        val paren_level_sorted = paren_level.sortBy(_._1)\n        val paren_level_sorted_map\
    \ = paren_level_sorted.map(x => (x._1, x._2)).toMap\n        val paren_level_sorted_list\
    \ = paren_level_sorted.toList\n        val paren_level_sorted_list_map = paren_level_sorted_list.map(x\
    \ => (x._1, x._2)).toMap\n        val paren_level_sorted_list_list = paren_level_sorted_list.toList\n\
    \        val paren_level_sorted_list_list_map = paren_level_sorted_list_list.map(x\
    \ => (x._1, x._2)).toMap\n        val paren_level_sorted_list_list_list = paren_level_sorted_list_list.toList\n\
    \        val paren_level_sorted_list_list_list_map = paren_level_sorted_list_list_list.map(x\
    \ => (x._1, x._2)).toMap\n        val paren_level_sorted_list_list_list_list =\
    \ paren_level_sorted_list_list_list.toList\n        val paren_level_sorted_list_list_list_list_map\
    \ = paren_level_sorted_list_list_list_list.map(x => (x._1, x._2)).toMap\n    \
    \    val paren_level_sorted_list_list_list_list_list = paren_level_sorted_list_list_list_list.toList\n\
    \        val paren_level_sorted_list_list_list_list_list_map = paren_level_sorted_list_list_list_list_list.map(x\
    \ => (x._1, x._2)).toMap\n        val paren_level_sorted_list_list_list_list_list_list\
    \ = paren_level_sorted_list_list_list_list_list.toList\n        val paren_level_sorted_list_list_list_list_list_list_map\
    \ = paren_level_sorted_list_list_list_list_list_list.map(x => (x._1, x._2)).toMap\n\
    \        val paren_level_sorted_list_list_list_list_list_list_list = paren_level_sorted_list_list_list_list_list_list.toList\n\
    \        val paren_level_sorted_list_list_list_list_list_list_list_map = paren_level_sorted_list_list_list_list_list_list_list.map(x\
    \ => (x._1, x._2)).toMap\n        val paren_level_sorted_list_list_list_list_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_index = paren_array_max_size - 1\n        val\
    \ paren_array_max_value = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_max_index\
    \ = paren_array_max_value_length - 1\n        val paren_array_max_value_max_value\
    \ = paren_array_max_value(paren_array_max_value_max_index)\n        val paren_array_max_value_max_value_length\
    \ = paren_array_max_value_max_value.length\n        val paren_array_max_value_max_value_max_index\
    \ = paren_array_max_value_max_value_length - 1\n        val paren_array_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value(paren_array_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_length = paren_array_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_value_max_value_max_index = paren_array_max_value_max_value_max_value_length\
    \ - 1\n        val paren_array_max_value_max_value_max_value_max_value = paren_array_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_length = paren_array_max_value_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_index = paren_array_max_value_max_value_max_value_max_value_length\
    \ - 1\n        val paren_array_max_value_max_value_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_length\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value.length\n   \
    \     val paren_array_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value_length - 1\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_max_value_length\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value_max_value.length\n\
    \        val paren", "        val paren_array = paren_string.split(\" \")\n  \
    \      val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_depth = paren_array_max_size.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.to", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val max_level = 0\n        var max_level_index = 0\n        var level\
    \ = 0\n        var paren_level = 0\n        var paren_level_index = 0\n      \
    \  var paren_level_array = new Array[Long](paren_array_size)\n        paren_array.foreach(x\
    \ => {\n            if (x == \"(\") {\n                paren_level_index += 1\n\
    \                paren_level_array(paren_level_index) = paren_level\n        \
    \        paren_level += 1\n            } else if (x == \")\") {\n            \
    \    paren_level_index -= 1\n                paren_level = paren_level_array(paren_level_index)\n\
    \            }\n            if (paren_level > max_level) {\n                max_level\
    \ = paren_level\n                max_level_index = paren_level_index\n       \
    \     }\n        })\n        val max_level_array = paren_level_array(max_level_index)\n\
    \        val max_level_array_size = max_level_array.length\n        var max_level_array_index\
    \ = 0\n        var max_level_array_value = 0\n        var max_level_array_value_count\
    \ = 0\n        paren_array.foreach(x => {\n            if (x == \"(\") {\n   \
    \             paren_level_index += 1\n                paren_level_array(paren_level_index)\
    \ = paren_level\n                paren_level += 1\n            } else if (x ==\
    \ \")\") {\n                paren_level_index -= 1\n                paren_level\
    \ = paren_level_array(paren_level_index)\n            }\n            if (paren_level\
    \ == max_level_array(max_level_array_index)) {\n                max_level_array_value\
    \ += 1\n                if (paren_level == max_level_array(max_level_array_index))\
    \ {\n                    max_level_array_value_count += 1\n                }\n\
    \            }\n            if (paren_level > max_level) {\n                max_level\
    \ = paren_level\n                max_level_index = paren_level_index\n       \
    \     }\n        })\n        val max_level_array_value_array = max_level_array(max_level_array_index)\n\
    \        val max_level_array_value_array_size = max_level_array_value_array.length\n\
    \        var max_level_array_value_array_index = 0\n        var max_level_array_value_array_value\
    \ = 0\n        var max_level_array_value_array_value_count = 0\n        paren_array.foreach(x\
    \ => {\n            if (x == \"(\") {\n                paren_level_index += 1\n\
    \                paren_level_array(paren_level_index) = paren_level\n        \
    \        paren_level += 1\n            } else if (x == \")\") {\n            \
    \    paren_level_index -= 1\n                paren_level = paren_level_array(paren_level_index)\n\
    \            }\n            if (paren_level == max_level_array(max_level_array_index))\
    \ {\n                max_level_array_value_array_value += 1\n                if\
    \ (paren_level == max_level_array(max_level_array_index)) {\n                \
    \    max_level_", "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n\
    \        val paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + 1\n        val paren_chars_count_with_paren_plus_one =\
    \ paren_chars_count_with_paren + 1\n        val paren_chars_count_with_paren_plus_two\
    \ = paren_chars_count_with_paren_plus_one + 1\n        val paren_chars_count_with_paren_plus_three\
    \ = paren_chars_count_with_paren_plus_two + 1\n        val paren_chars_count_with_paren_plus_four\
    \ = paren_chars_count_with_paren_plus_three + 1\n        val paren_chars_count_with_paren_plus_five\
    \ = paren_chars_count_with_paren_plus_four + 1\n        val paren_chars_count_with_paren_plus_six\
    \ = paren_chars_count_with_paren_plus_five + 1\n        val paren_chars_count_with_paren_plus_seven\
    \ = paren_chars_count_with_paren_plus_six + 1\n        val paren_chars_count_with_paren_plus_eight\
    \ = paren_chars_count_with_paren_plus_seven + 1\n        val paren_chars_count_with_paren_plus_nine\
    \ = paren_chars_count_with_paren_plus_eight + 1\n        val paren_chars_count_with_paren_plus_ten\
    \ = paren_chars_count_with_paren_plus_nine + 1\n        val paren_chars_count_with_paren_plus_eleven\
    \ = paren_chars_count_with_paren_plus_ten + 1\n        val paren_chars_count_with_paren_plus_twelve\
    \ = paren_chars_count_with_paren_plus_eleven + 1\n        val paren_chars_count_with_paren_plus_thirteen\
    \ = paren_chars_count_with_paren_plus_twelve + 1\n        val paren_chars_count_with_paren_plus_fourteen\
    \ = paren_chars_count_with_paren_plus_thirteen + 1\n        val paren_chars_count_with_paren_plus_fifteen\
    \ = paren_chars_count_with_paren_plus_fourteen + 1\n        val paren_chars_count_with_paren_plus_sixteen\
    \ = paren_chars_count_with_paren_plus_fifteen + 1\n        val paren_chars_count_with_paren_plus_seventeen\
    \ = paren_chars_count_with_paren_plus_sixteen + 1\n        val paren_chars_count_with_",
  "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n     \
    \   val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else 0).max\n\
    \        val paren_chars_count_min = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).min\n        val paren_chars_count_range = paren_chars_count_max - paren_chars_count_min\n\
    \        val paren_chars_count_range_max = paren_chars_count_range * 2\n     \
    \   val paren_chars_count_range_min = paren_chars_count_range * -2\n        val\
    \ paren_chars_count_range_min = paren_chars_count_range * -2\n        val paren_chars_count_range_max\
    \ = paren_chars_count_range * 2\n        val paren_chars_count_range_min = paren_chars_count_range\
    \ * -2\n        val paren_chars_count_range_max = paren_chars_count_range * 2\n\
    \        val paren_chars_count_range_min = paren_chars_count_range * -2\n    \
    \    val paren_chars_count_range_max = paren_chars_count_range * 2\n        val\
    \ paren_chars_count_range_min = paren_chars_count_range * -2\n        val paren_chars_count_range_max\
    \ = paren_chars_count_range * 2\n        val paren_chars_count_range_min = paren_chars_count_range\
    \ * -2\n        val paren_chars_count_range_max = paren_chars_count_range * 2\n\
    \        val paren_chars_count_range_min = paren_chars_count_range * -2\n    \
    \    val paren_chars_count_range_max = paren_chars_count_range * 2\n        val\
    \ paren_chars_count_range_min = paren_chars_count_range * -2\n        val paren_chars_count_range_max\
    \ = paren_chars_count_range * 2\n        val paren_chars_count_range_min = paren_chars_count_range\
    \ * -2\n        val paren_chars_count_range_max = paren_chars_count_range * 2\n\
    \        val paren_chars_count_range_min = paren_chars_count_range * -2\n    \
    \    val paren_chars_count_range_max = paren_chars_count_range * 2\n        val\
    \ paren_chars_count_range_min = paren_chars_count_range * -2\n        val paren_chars_count_range_max\
    \ = paren_chars_count_range * 2\n        val paren_chars_", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_max_size = paren_array_size - 1\n        val paren_array_max_index\
    \ = paren_array_size - 1\n        val paren_array_max_value = paren_array_max_index.toLong\n\
    \        val paren_array_max_value_2 = paren_array_max_index.toLong * 2\n    \
    \    val paren_array_max_value_3 = paren_array_max_index.toLong * 3\n        val\
    \ paren_array_max_value_4 = paren_array_max_index.toLong * 4\n        val paren_array_max_value_5\
    \ = paren_array_max_index.toLong * 5\n        val paren_array_max_value_6 = paren_array_max_index.toLong\
    \ * 6\n        val paren_array_max_value_7 = paren_array_max_index.toLong * 7\n\
    \        val paren_array_max_value_8 = paren_array_max_index.toLong * 8\n    \
    \    val paren_array_max_value_9 = paren_array_max_index.toLong * 9\n        val\
    \ paren_array_max_value_10 = paren_array_max_index.toLong * 10\n        val paren_array_max_value_11\
    \ = paren_array_max_index.toLong * 11\n        val paren_array_max_value_12 =\
    \ paren_array_max_index.toLong * 12\n        val paren_array_max_value_13 = paren_array_max_index.toLong\
    \ * 13\n        val paren_array_max_value_14 = paren_array_max_index.toLong *\
    \ 14\n        val paren_array_max_value_15 = paren_array_max_index.toLong * 15\n\
    \        val paren_array_max_value_16 = paren_array_max_index.toLong * 16\n  \
    \      val paren_array_max_value_17 = paren_array_max_index.toLong * 17\n    \
    \    val paren_array_max_value_18 = paren_array_max_index.toLong * 18\n      \
    \  val paren_array_max_value_19 = paren_array_max_index.toLong * 19\n        val\
    \ paren_array_max_value_20 = paren_array_max_index.toLong * 20\n        val paren_array_max_value_21\
    \ = paren_array_max_index.toLong * 21\n        val paren_array_max_value_22 =\
    \ paren_array_max_index.toLong * 22\n        val paren_array_max_value_23 = paren_array_max_index.toLong\
    \ * 23\n        val paren_array_max_value_24 = paren_array_max_index.toLong *\
    \ 24\n        val paren_array_max_value_25 = paren_array_max_index.toLong * 25\n\
    \        val paren_array_max_", "        val paren_chars = paren_string.toCharArray\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = mutable.HashMap[Char, Long]()\n        var paren_char_index = 0\n        var\
    \ paren_char_index_in_group = 0\n        var paren_char_index_in_group_with_paren\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_one = 0\n       \
    \ var paren_char_index_in_group_with_paren_plus_two = 0\n        var paren_char_index_in_group_with_paren_plus_three\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_four = 0\n      \
    \  var paren_char_index_in_group_with_paren_plus_five = 0\n        var paren_char_index_in_group_with_paren_plus_six\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_seven = 0\n     \
    \   var paren_char_index_in_group_with_paren_plus_eight = 0\n        var paren_char_index_in_group_with_paren_plus_nine\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_zero = 0\n      \
    \  var paren_char_index_in_group_with_paren_plus_one_plus_one = 0\n        var\
    \ paren_char_index_in_group_with_paren_plus_two_plus_two = 0\n        var paren_char_index_in_group_with_paren_plus_three_plus_three\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_four_plus_four =\
    \ 0\n        var paren_char_index_in_group_with_paren_plus_five_plus_five = 0\n\
    \        var paren_char_index_in_group_with_paren_plus_six_plus_six = 0\n    \
    \    var paren_char_index_in_group_with_paren_plus_seven_plus_seven = 0\n    \
    \    var paren_char_index_in_group_with_paren_plus_eight_plus_eight = 0\n    \
    \    var paren_char_index_in_group_with_paren_plus_nine_plus_nine = 0\n      \
    \  var paren_char_index_in_group_with_paren_plus_zero_plus_zero = 0\n        var\
    \ paren_char_index_in_group_with_paren_plus_one_plus_one_plus_one = 0\n      \
    \  var paren_char_index_in_group_with_paren_plus_two_plus_two_plus_two = 0\n \
    \       var paren_char_index_in_group_with_paren_plus_three_plus_three_plus_three\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_four_plus_four_plus_four\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_five_plus_five_plus_five\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_six_plus_six_plus_six\
    \ = 0\n        var paren_char_index_in_group_with_paren_plus_seven_", "      \
    \  val paren_array = paren_string.split(\" \")\n        val paren_array_size =\
    \ paren_array.length\n        val max_level = 0\n        val max_level_size =\
    \ 0\n        val level_size = 0\n        val level = new mutable.ArrayBuffer(paren_array_size)\n\
    \        val paren_stack = new mutable.ArrayBuffer(paren_array_size)\n       \
    \ val paren_stack_pointer = 0\n        val paren_stack_pointer_max = 0\n     \
    \   val paren_stack_pointer_min = 0\n        val paren_stack_pointer_min_index\
    \ = 0\n        val paren_stack_pointer_max_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index = 0\n        val paren_stack_pointer_max_index\
    \ = 0\n        val paren_stack_pointer_min_index", "        val paren_array =\
    \ paren_string.split(\" \").toList\n        val paren_array_size = paren_array.size\n\
    \        val max_level = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        var i = 0\n        while (i < paren_array_size) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            }\n            i += 1\n        }\n        max_level_array.toList",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_level_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_",
  "        val paren_chars = paren_string.split(\"\"\"[\\(\\)]\"\"\")\n        val\
    \ paren_chars_count = paren_chars.length\n        val paren_chars_map = paren_chars.map(x\
    \ => x.toLong)\n        val paren_chars_count_map = paren_chars_map.toMap\n  \
    \      val paren_chars_count_map_keys = paren_chars_count_map.keys\n        val\
    \ paren_chars_count_map_values = paren_chars_count_map.values\n        val paren_chars_count_map_keys_sorted\
    \ = paren_chars_count_map_keys.sorted\n        val paren_chars_count_map_values_sorted\
    \ = paren_chars_count_map_values.sorted\n        val paren_chars_count_map_keys_sorted_count\
    \ = paren_chars_count_map_keys_sorted.length\n        val paren_chars_count_map_values_sorted_count\
    \ = paren_chars_count_map_values_sorted.length\n        val paren_chars_count_map_keys_sorted_count_map\
    \ = paren_chars_count_map_keys_sorted.zip(paren_chars_count_map_values_sorted)\n\
    \        val paren_chars_count_map_keys_sorted_count_map_keys = paren_chars_count_map_keys_sorted_count_map.map(x\
    \ => x._1)\n        val paren_chars_count_map_keys_sorted_count_map_values = paren_chars_count_map_keys_sorted_count_map.map(x\
    \ => x._2)\n        val paren_chars_count_map_keys_sorted_count_map_keys_sorted\
    \ = paren_chars_count_map_keys_sorted_count_map_keys.sorted\n        val paren_chars_count_map_keys_sorted_count_map_values_sorted\
    \ = paren_chars_count_map_keys_sorted_count_map_values.sorted\n        val paren_chars_count_map_keys_sorted_count_map_keys_sorted_count\
    \ = paren_chars_count_map_keys_sorted_count_map_keys_sorted.length\n        val\
    \ paren_chars_count_map_keys_sorted_count_map_values_sorted_count = paren_chars_count_map_keys_sorted_count_map_values_sorted.length\n\
    \        val paren_chars_count_map_keys_sorted_count_map_keys_sorted_count_map\
    \ = paren_chars_count_map_keys_sorted_count_map_keys_sorted.zip(paren_chars_count_map_keys_sorted_count_map_values_sorted)\n\
    \        val paren_chars_count_map_keys_sorted_count_map_keys_sorted_count_map_keys\
    \ = paren_chars_count_map_keys_sorted_count_map_keys_sorted_count_map.map(x =>\
    \ x._1)\n        val paren_chars_count_map_keys_sorted_count_map_keys_sorted_count_map_values\
    \ = paren_chars_count_map_keys_sorted_count_map_keys_sorted_count_map.map(x =>\
    \ x._2)\n        val paren", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_array = new Array[Long](paren_array_size)\n     \
    \   var i = 0\n        while (i < paren_array_size) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            }\n            i += 1\n        }\n        max_level_array", "   \
    \     val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren", "        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val max_level = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").length\n            if (paren_group_levels >\
    \ max_level) {\n                max_level = paren_group_levels\n             \
    \   max_level_groups = paren_group\n            }\n        }\n        max_level_groups.toList",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set = mutable.Set[Long]()\n\
    \        val paren_stack_map_set = mutable.Set[Long]()\n        val paren", " \
    \       val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        val paren_array_copy = paren_array.clone()\n        val paren_array_copy_size\
    \ = paren_array_copy.length\n        val paren_array_copy_level = paren_array_copy.length\n\
    \        val paren_array_copy_max_level = paren_array_copy.length\n        val\
    \ paren_array_copy_max_level_size = 0\n        val paren_array_copy_max_level_level\
    \ = 0\n        val paren_array_copy_max_level_level_size : Int = 0\n        val\
    \ paren_array_copy_max_level_level_level : Int = 0\n        val paren_array_copy_max_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level : Int =\
    \ 0\n        val paren_array_copy_max_level_level_level_level_size : Int = 0\n\
    \        val paren_array_copy_max_level_level_level_level_level : Int = 0\n  \
    \      val paren_array_copy_max_level_level_level_level_level_size : Int = 0\n\
    \        val paren_array_copy_max_level_level_level_level_level_level : Int =\
    \ 0\n        val paren_array_copy_max_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_level_size\
    \ : Int = 0\n        val paren_array_copy_max_level_level_level_level_level_level_level_level_level_level\
    \ : Int = 0\n        val paren_array_copy_max_level_level_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len = paren_stack_len.push(paren_string.length)\n   \
    \     val paren_stack_len = paren_stack_len.push(paren_string.length)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_string.length)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_string.length)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_string.length)\n        val paren_stack_len = paren_stack_len.push(paren_string.length)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_string.length)\n   \
    \     val paren_stack_len = paren_stack_len.push(paren_string.length)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_string.length)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_string.length)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_string.length)\n        val paren_stack_len = paren_stack_len.push(paren_string.length)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_string.length)\n   \
    \     val paren_stack_len = paren_stack_len.push(paren_string.length)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_string.length)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_string.length)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_string.length)\n        val paren_stack_len = paren_stack_len.push(paren_string.length)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_string.length)\n   \
    \     val paren_stack_len = paren_stack_len.push(paren_string.length)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_string.length)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_string.length)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_string.length)\n        val paren_stack_len = paren_stack_len.push(paren_string.length)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_string.length)\n   \
    \     val paren_stack_len = paren_stack_len.push(paren_string.length)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_string.length)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_string.length)\n        val paren_stack_len\
    \ = paren_", "        val paren_array = paren_string.split(\" \")\n        val\
    \ max_level = 0\n        val max_level_index = 0\n        val levels = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until paren_array.length) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_index = i\n    \
    \        }\n            if (paren_level == max_level) {\n                levels\
    \ += paren_level\n            }\n        }\n        levels.toList", "        val\
    \ paren_chars = paren_string.split(\" \").map(_.toChar)\n        val paren_chars_count\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_range\
    \ = paren_chars_count_max - paren_chars_count_min + 1\n        val paren_chars_count_range_max\
    \ = paren_chars_count_range * 2\n        val paren_chars_count_range_min = paren_chars_count_range\
    \ * 3\n        val paren_chars_count_range_min = if (paren_chars_count_min ==\
    \ 0) 0 else paren_chars_count_min\n        val paren_chars_count_range_max = if\
    \ (paren_chars_count_max == 0) 0 else paren_chars_count_max\n        val paren_chars_count_range_min\
    \ = if (paren_chars_count_min == 0) 0 else paren_chars_count_min\n        val\
    \ paren_chars_count_range_max = if (paren_chars_count_max == 0) 0 else paren_chars_count_max\n\
    \        val paren_chars_count_range_min = if (paren_chars_count_min == 0) 0 else\
    \ paren_chars_count_min\n        val paren_chars_count_range_max = if (paren_chars_count_max\
    \ == 0) 0 else paren_chars_count_max\n        val paren_chars_count_range_min\
    \ = if (paren_chars_count_min == 0) 0 else paren_chars_count_min\n        val\
    \ paren_chars_count_range_max = if (paren_chars_count_max == 0) 0 else paren_chars_count_max\n\
    \        val paren_chars_count_range_min = if (paren_chars_count_min == 0) 0 else\
    \ paren_chars_count_min\n        val paren_chars_count_range_max = if (paren_chars_count_max\
    \ == 0) 0 else paren_chars_count_max\n        val paren_chars_count_range_min\
    \ = if (paren_chars_count_min == 0) 0 else paren_chars_count_min\n        val\
    \ paren_chars_count_range_max = if (paren_chars_count_max == 0) 0 else paren_chars_count_max\n\
    \        val paren_chars_count_range_min = if (paren_chars_count_min == 0) 0 else\
    \ paren_chars_count_min\n        val paren_chars_count_range_max = if (paren_chars_count_max\
    \ == 0) 0 else paren_chars_count_max\n        ", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n\
    \        for (paren_group <- paren_groups) {\n            if (paren_group.length()\
    \ > max_level) {\n                max_level = paren_group.length()\n         \
    \       max_level_groups = mutable.ListBuffer[String]()\n            }\n     \
    \       if (paren_group.length() == max_level) {\n                max_level_groups\
    \ += paren_group\n            }\n        }\n        max_level_groups.toList",
  "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n     \
    \   val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else 0).max\n\
    \        val paren_chars_count_min = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).min\n        val paren_chars_count_range = paren_chars_count_max - paren_chars_count_min\n\
    \        val paren_chars_count_range_max = paren_chars_count_range * 2\n     \
    \   val paren_chars_count_range_min = paren_chars_count_range * -2\n        val\
    \ paren_chars_count_range_range = paren_chars_count_range_max - paren_chars_count_range_min\n\
    \        val paren_chars_count_range_range_max = paren_chars_count_range_range\
    \ * 2\n        val paren_chars_count_range_range_min = paren_chars_count_range_range\
    \ * -2\n        val paren_chars_count_range_range_range = paren_chars_count_range_range_max\
    \ - paren_chars_count_range_range_min\n        val paren_chars_count_range_range_range_max\
    \ = paren_chars_count_range_range_range * 2\n        val paren_chars_count_range_range_range_min\
    \ = paren_chars_count_range_range_range * -2\n        val paren_chars_count_range_range_range_range\
    \ = paren_chars_count_range_range_range_max - paren_chars_count_range_range_range_min\n\
    \        val paren_chars_count_range_range_range_range_max = paren_chars_count_range_range_range_range\
    \ * 2\n        val paren_chars_count_range_range_range_range_min = paren_chars_count_range_range_range_range\
    \ * -2\n        val paren_chars_count_range_range_range_range_range = paren_chars_count_range_range_range_range_max\
    \ - paren_chars_count_range_range_range_range_min\n        val paren_chars_count_range_range_range_range_range_max\
    \ = paren_chars_count_range_range_range_range_range * 2\n        val paren_chars_count_range_range_range_range_range_min\
    \ = paren_chars_count_range_range_range_range_range * -2\n        val paren_chars_count_range_range_range_range_range_max\
    \ = paren_chars_count_range_range_range_range_range_range * 2\n        val paren_chars_count_range_range_range_range_range_range_min\
    \ = paren_chars_count_range_range_range_range_range_range_range * -2\n       \
    \ val paren_chars_count_range_range_range_range_range_", "        val paren_array\
    \ = paren_string.split(\" \")\n        val max_level = 0\n        val max_level_list\
    \ = List[Long]()\n        for (paren_string <- paren_array) {\n            val\
    \ paren_array = paren_string.split(\" \")\n            val level = 0\n       \
    \     val level_list = List[Long]()\n            for (paren_string <- paren_array)\
    \ {\n                val paren_array = paren_string.split(\" \")\n           \
    \     val level = 0\n                val level_list = List[Long]()\n         \
    \       for (paren_string <- paren_array) {\n                    val paren_array\
    \ = paren_string.split(\" \")\n                    val level = 0\n           \
    \         val level_list = List[Long]()\n                    for (paren_string\
    \ <- paren_array) {\n                        val paren_array = paren_string.split(\"\
    \ \")\n                        val level = 0\n                        val level_list\
    \ = List[Long]()\n                        for (paren_string <- paren_array) {\n\
    \                            val paren_array = paren_string.split(\" \")\n   \
    \                         val level = 0\n                            val level_list\
    \ = List[Long]()\n                            for (paren_string <- paren_array)\
    \ {\n                                val paren_array = paren_string.split(\" \"\
    )\n                                val level = 0\n                           \
    \     val level_list = List[Long]()\n                                for (paren_string\
    \ <- paren_array) {\n                                    val paren_array = paren_string.split(\"\
    \ \")\n                                    val level = 0\n                   \
    \                 val level_list = List[Long]()\n                            \
    \        for (paren_string <- paren_array) {\n                               \
    \         val paren_array = paren_string.split(\" \")\n                      \
    \                  val level = 0\n                                        val\
    \ level_list = List[Long]()\n                                        for (paren_string\
    \ <- paren_array) {\n                                            val paren_array\
    \ = paren_string.split(\" \")\n                                            val\
    \ level = 0\n                                            val level_list = List[Long]()\n\
    \                                            for (paren_string <- paren_array)\
    \ {\n                                                val paren_array = paren_string.split(\"\
    \ \")\n                                                val level = 0\n       \
    \                                         val level_list = List[Long]()\n    \
    \                                            for (paren_string <- paren_array)\
    \ {\n                                                    val paren_array = paren_string.split(\"\
    \ \")\n                                                    val level = 0\n   \
    \                                                 val level_list = List[Long]()\n\
    \                                                    for (paren_string <- paren_array)\
    \ {\n                                                        val paren_array =\
    \ paren_string.split(\" \")\n                                                \
    \        val level = 0\n                                                     \
    \   val level_list = List[Long]()\n                                          \
    \              for (paren_string <- paren_array) {\n                         \
    \                                   val paren_array = paren_string.split(\" \"\
    )\n                                                            val level = 0\n\
    \                                                            val level_list =\
    \ List[Long]()\n                                                            for\
    \ (paren_string <- paren_array) {\n                                          \
    \                      val paren_array = paren_string.split(\" \")\n         \
    \                                                       val level = 0\n      \
    \                                                          val level_list = List[Long]()\n\
    \                                                                for (paren_string\
    \ <- paren_array) {\n", "        val paren_array = paren_string.split(\" \")\n\
    \        val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        for (i <- 0 until paren_array.length) {\n            val level_array\
    \ = paren_array(i).split(\"\\\\(\")\n            val level = level_array.length\n\
    \            if (level > max_level) {\n                max_level = level\n   \
    \             max_level_array = level_array\n            }\n        }\n      \
    \  max_level_array.toList", "        val paren_array = paren_string.split(\" \"\
    )\n        val paren_array_size = paren_array.length\n        val paren_array_max\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max\
    \ - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length + 1\n  \
    \      val paren_array_max_value_length = paren_array_max_value_length + 1\n \
    \       val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren", "        val paren_stack = mutable.Stack[String]()\n    \
    \    val paren_stack_map = mutable.Map[String, mutable.Stack[String]]()\n    \
    \    val paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_count_max = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_count_max_key = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_count_max_value = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_count_max_key_count = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_count_max_key_count_max = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_count_max_key_count_max_value =\
    \ mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_value\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_value\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_key_count\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_key_count_max\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_key_count_max_value\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_key_count_max_key_count\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_key_count_max_key_count_max\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_count_max_key_count_max_key_count_max_key_count_max_key_count_max_key_count_max_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_array\
    \ = new Array[Long](paren_array_size)\n        var level = 0\n        var paren_level\
    \ = 0\n        var paren_level_array = new Array[Long](paren_array_size)\n   \
    \     var paren_level_array_index = 0\n        var paren_level_array_size = 0\n\
    \        var paren_level_array_index = 0\n        var paren_level_array_size =\
    \ 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_array = new Array[Long](paren_array.length)\n        val\
    \ paren_array_copy = paren_array.clone()\n        paren_array_copy.foreach(x =>\
    \ {\n            val paren_array_index = paren_array_copy.indexOf(x)\n       \
    \     val paren_array_index_next = paren_array_index + 1 // next index\n     \
    \       val paren_array_index_prev = paren_array_index - 1 // previous index\n\
    \            val paren_array_index_next_prev = paren_array_index + 2 // next and\
    \ previous index\n            val paren_array_index_prev_next = paren_array_index\
    \ - 2 // previous and next index\n            val paren_array_index_next_next_prev\
    \ = paren_array_index + 3 // next and next and previous index\n            val\
    \ paren_array_index_prev_next_next_prev = paren_array_index - 3 // previous and\
    \ next and next and previous index\n            val paren_array_index_prev_next_next_next_prev\
    \ = paren_array_index - 4 // previous, next and next and next and previous index\n\
    \            val paren_array_index_prev_next_next_next_next_prev = paren_array_index\
    \ - 5 // previous, next and next and next and next and previous index\n      \
    \      val paren_array_index_prev_next_next_next_next_next_prev = paren_array_index\
    \ - 6 // previous, next and next and next and next and next and previous index\n\
    \            val paren_array_index_prev_next_next_next_next_next_next_prev = paren_array_index\
    \ - 7 // previous, next and next and next and next and next and next and previous\
    \ index\n            val paren_array_index_prev_next_next_next_next_next_next_next_prev\
    \ = paren_array_index - 8 // previous, next and next and next and next and next\
    \ and next and next and previous index\n            val paren_array_index_prev_next_next_next_next_next_next_next_next_prev\
    \ = paren_array_index - 9 // previous, next and next and next and next and next\
    \ and next and next and previous index\n            val paren_array_index_prev_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_array_index - 10 // previous, next and next and next and next and next\
    \ and next and next and previous index\n            val paren_array_index_prev_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_array_index - 11 // previous, next and next and next and next and next\
    \ and next and next and previous index\n            val paren_array_index_prev_next_next_next_next_next_next_next_next_next_next_prev\
    \ = paren_array_index - ", "        val paren_array = paren_string.split(\" \"\
    )\n        val paren_array_size = paren_array.length\n        val max_level =\
    \ 0\n        val max_level_array = new Array[Long](paren_array_size)\n       \
    \ var i = 0\n        while (i < paren_array_size) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            }\n            i += 1\n        }\n        max_level_array", "   \
    \     val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        val paren_array_with_max_level = new Array[String](paren_array_size)\n\
    \        val paren_array_with_max_level_size = new Array[Long](paren_array_size)\n\
    \        for (i <- 0 until paren_array_size) {\n            val paren_array_element\
    \ = paren_array(i)\n            val paren_array_element_size = paren_array_element.length\n\
    \            val paren_array_element_with_max_level = new Array[String](paren_array_element_size)\n\
    \            val paren_array_element_with_max_level_size = new Array[Long](paren_array_element_size)\n\
    \            val paren_array_element_with_max_level_size(0) = 0\n            val\
    \ paren_array_element_with_max_level_size(1) = 0\n            val paren_array_element_with_max_level_size(2)\
    \ = 0\n            val paren_array_element_with_max_level_size(3) = 0\n      \
    \      val paren_array_element_with_max_level_size(4) = 0\n            val paren_array_element_with_max_level_size(5)\
    \ = 0\n            val paren_array_element_with_max_level_size(6) = 0\n      \
    \      val paren_array_element_with_max_level_size(7) = 0\n            val paren_array_element_with_max_level_size(8)\
    \ = 0\n            val paren_array_element_with_max_level_size(9) = 0\n      \
    \      val paren_array_element_with_max_level_size(10) = 0\n            val paren_array_element_with_max_level_size(11)\
    \ = 0\n            val paren_array_element_with_max_level_size(12) = 0\n     \
    \       val paren_array_element_with_max_level_size(13) = 0\n            val paren_array_element_with_max_level_size(14)\
    \ = 0\n            val paren_array_element_with_max_level_size(15) = 0\n     \
    \       val paren_array_element_with_max_level_size(16) = 0\n            val paren_array_element_with_max_level_size(17)\
    \ = 0\n            val paren_array_element_with_max_level_size(18) = 0\n     \
    \       val paren_array_element_with_max_level_size(19) = 0\n            val paren_array_element_with_max_level_size(20)\
    \ = 0\n            val paren_array_element_with_max_level_size(21) = 0\n     \
    \       val paren_array_element_with_max_level_size(22) = 0\n            val paren_array_element_with_max_level_size(23)\
    \ = 0\n            val paren_array_element_with_max_level_size(24) = 0\n     \
    \       val paren_array_element_with_max_level_size(25) = 0\n            val paren_array_element_",
  "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n        val\
    \ max_levels = paren_groups.foldLeft(0) { (max_levels, group) =>\n           \
    \ val max_level = max_levels\n            val curr_level = group\n           \
    \ val new_level = if (curr_level == 0) 1 else curr_level - 1\n            if (new_level\
    \ > max_level) max_level else new_level\n        }\n        val max_levels_str\
    \ = max_levels.toString\n        val max_levels_long = max_levels.toLong\n   \
    \     val max_levels_longStr = max_levels_long.toString\n        val max_levels_longStrLen\
    \ = max_levels_longStr.length\n        val max_levels_longStrLen2 = max_levels_longStrLen\
    \ / 2\n        val max_levels_longStrLen3 = max_levels_longStrLen / 3\n      \
    \  val max_levels_longStrLen4 = max_levels_longStrLen / 4\n        val max_levels_longStrLen5\
    \ = max_levels_longStrLen / 5\n        val max_levels_longStrLen6 = max_levels_longStrLen\
    \ / 6\n        val max_levels_longStrLen7 = max_levels_longStrLen / 7\n      \
    \  val max_levels_longStrLen8 = max_levels_longStrLen / 8\n        val max_levels_longStrLen9\
    \ = max_levels_longStrLen / 9\n        val max_levels_longStrLen10 = max_levels_longStrLen\
    \ / 10\n        val max_levels_longStrLen11 = max_levels_longStrLen / 11\n   \
    \     val max_levels_longStrLen12 = max_levels_longStrLen / 12\n        val max_levels_longStrLen13\
    \ = max_levels_longStrLen / 13\n        val max_levels_longStrLen14 = max_levels_longStrLen\
    \ / 14\n        val max_levels_longStrLen15 = max_levels_longStrLen / 15\n   \
    \     val max_levels_longStrLen16 = max_levels_longStrLen / 16\n        val max_levels_longStrLen17\
    \ = max_levels_longStrLen / 17\n        val max_levels_longStrLen18 = max_levels_longStrLen\
    \ / 18\n        val max_levels_longStrLen19 = max_levels_longStrLen / 19\n   \
    \     val max_levels_longStrLen20 = max_levels_longStrLen / 20\n        val max_levels_longStrLen21\
    \ = max_levels_longStrLen / 21\n        val max_levels_longStrLen22 = ", "   \
    \     val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max = mutable.Stack[Long]()\n \
    \       val paren_stack_max_depth_sizes_count_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_sizes_count_max_max_max_max_max_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max = mutable.Stack[Long]()\n   \
    \     val paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n  \
    \      val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val ", "        val paren_chars = paren_string.chars\n\
    \        val paren_chars_size = paren_chars.length\n        val paren_chars_map\
    \ = paren_chars.groupBy(_ == '(').mapValues(_.length)\n        val paren_chars_map_sorted\
    \ = paren_chars_map.toSeq.sortBy(_._2).reverse\n        val paren_chars_map_sorted_keys\
    \ = paren_chars_map_sorted.map(x => x._1)\n        val paren_chars_map_sorted_values\
    \ = paren_chars_map_sorted.map(x => x._2)\n        val paren_chars_map_sorted_keys_size\
    \ = paren_chars_map_sorted_keys.size\n        val paren_chars_map_sorted_values_size\
    \ = paren_chars_map_sorted_values.size\n        val paren_chars_map_sorted_keys_size_2\
    \ = paren_chars_map_sorted_keys_size + 1\n        val paren_chars_map_sorted_values_size_2\
    \ = paren_chars_map_sorted_values_size + 1\n        val paren_chars_map_sorted_keys_size_3\
    \ = paren_chars_map_sorted_keys_size_2 + 1\n        val paren_chars_map_sorted_values_size_3\
    \ = paren_chars_map_sorted_values_size_2 + 1\n        val paren_chars_map_sorted_keys_size_4\
    \ = paren_chars_map_sorted_keys_size_3 + 1\n        val paren_chars_map_sorted_values_size_4\
    \ = paren_chars_map_sorted_values_size_3 + 1\n        val paren_chars_map_sorted_keys_size_5\
    \ = paren_chars_map_sorted_keys_size_4 + 1\n        val paren_chars_map_sorted_values_size_5\
    \ = paren_chars_map_sorted_values_size_4 + 1\n        val paren_chars_map_sorted_keys_size_6\
    \ = paren_chars_map_sorted_keys_size_5 + 1\n        val paren_chars_map_sorted_values_size_6\
    \ = paren_chars_map_sorted_values_size_5 + 1\n        val paren_chars_map_sorted_keys_size_7\
    \ = paren_chars_map_sorted_keys_size_6 + 1\n        val paren_chars_map_sorted_values_size_7\
    \ = paren_chars_map_sorted_values_size_6 + 1\n        val paren_chars_map_sorted_keys_size_8\
    \ = paren_chars_map_sorted_keys_size_7 + 1\n        val paren_chars_map_sorted_values_size_8\
    \ = paren_chars_map_sorted_values_size_7 + 1\n        val paren_chars_map_sorted_keys_size_9\
    \ = paren_chars_map_sorted_keys_size_8 + 1\n        val paren_chars_map_sorted_values_size_9\
    \ = paren_chars_map_sorted_values_size_8 + 1\n        val paren_chars_map_sorted_",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_groups = mutable.ListBuffer[String]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_level = (paren_group.length\
    \ -1) / 2 // count the number of pairs of parentheses in the group\n         \
    \   if (paren_group_level > max_level) {\n                max_level = paren_group_level\n\
    \                max_level_groups = paren_group\n            }\n        }\n  \
    \      max_level_groups.toList", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        paren_string\
    \ split \"\\\\(|\\\\)\" foreach {\n            str =>\n                val paren_level\
    \ = paren_stack.size + 1\n                val paren_level_map = paren_stack_map\
    \ + (paren_level -> 0)\n                paren_stack.push(paren_level)\n      \
    \          paren_stack_map += paren_level_map + (str -> paren_level)\n       \
    \ }\n        val max_level = paren_stack.last\n        val max_level_map = paren_stack_map\
    \ max paren_stack_map map {\n            case (str, paren_level) => (str, paren_level)\n\
    \        }\n        val max_level_str = max_level_map map {\n            case\
    \ (str, paren_level) => str\n        }\n        val max_level_str = max_level_str\
    \ mkString \" \"\n        val max_level_str = max_level_str.length\n        val\
    \ max_level_str = max_level_str + max_level_str\n        val max_level_str = max_level_str\
    \ + max_level_str\n        val max_level_str = max_level_str + max_level_str\n\
    \        val max_level_str = max_level_str + max_level_str\n        val max_level_str\
    \ = max_level_str + max_level_str\n        val max_level_str = max_level_str +\
    \ max_level_str\n        val max_level_str = max_level_str + max_level_str\n \
    \       val max_level_str = max_level_str + max_level_str\n        val max_level_str\
    \ = max_level_str + max_level_str\n        val max_level_str = max_level_str +\
    \ max_level_str\n        val max_level_str = max_level_str + max_level_str\n \
    \       val max_level_str = max_level_str + max_level_str\n        val max_level_str\
    \ = max_level_str + max_level_str\n        val max_level_str = max_level_str +\
    \ max_level_str\n        val max_level_str = max_level_str + max_level_str\n \
    \       val max_level_str = max_level_str + max_level_str\n        val max_level_str\
    \ = max_level_str + max_level_str\n        val max_level_str = max_level_str +\
    \ max_level_str\n        val max_level_str = max_level_str + max_level_str\n \
    \       val max_level_str = max_level_str + max_level_str\n        val max_level_str\
    \ = max_level_str + max_level_str\n        val max_level_str = max_level_str +\
    \ max_level_str\n        val max_level_str = max_level_str + max_level_str\n \
    \       val max_level_str = max_level_str + max_level_str\n        val max_level_str\
    \ = max_level_str + max_level_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_length = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_index = 0\n        val max_level_paren_array = new\
    \ Array[String](paren_array_length)\n        val max_level_paren_array_index =\
    \ 0\n        for (i <- 0 until paren_array_length) {\n            if (paren_array(i).length()\
    \ > max_level) {\n                max_level = paren_array(i).length()\n      \
    \          max_level_index = i\n            }\n            if (paren_array(i).length()\
    \ == max_level) {\n                max_level_paren_array(max_level_paren_array_index)\
    \ = paren_array(i)\n                max_level_paren_array_index += 1\n       \
    \     }\n        }\n        val max_level_paren_array_length = max_level_paren_array_index\n\
    \        val max_level_paren_array_string = new Array[String](max_level_paren_array_length)\n\
    \        for (i <- 0 until max_level_paren_array_length) {\n            max_level_paren_array_string(i)\
    \ = max_level_paren_array(max_level_paren_array_index - i)\n        }\n      \
    \  val max_level_paren_array_string_index = 0\n        val max_level_paren_array_string_value\
    \ = 0\n        for (i <- 0 until max_level_paren_array_length) {\n           \
    \ if (max_level_paren_array_string_index < max_level_paren_array_string_value)\
    \ {\n                max_level_paren_array_string_value = max_level_paren_array_string_index\n\
    \            }\n            max_level_paren_array_string_index += 1\n        }\n\
    \        val max_level_paren_array_string_length = max_level_paren_array_string_value\n\
    \        val max_level_paren_array_string_value_index = 0\n        val max_level_paren_array_string_value_value\
    \ = 0\n        for (i <- 0 until max_level_paren_array_string_length) {\n    \
    \        if (max_level_paren_array_string_value_index < max_level_paren_array_string_value_value)\
    \ {\n                max_level_paren_array_string_value_value = max_level_paren_array_string_value_index\n\
    \            }\n            max_level_paren_array_string_value_index += 1\n  \
    \      }\n        val max_level_paren_array_string_value_length = max_level_paren_array_string_value_value\n\
    \        val max_level_paren_array_string_value_value_index = 0\n        val max_level_paren_array_string_value_value_value\
    \ = 0\n        for (i <- 0 until max_level_paren_array_string_value_length) {\n\
    \            if (max_level_paren_array_string_value_value_index < max_level_paren_array_string_value_value_value)\
    \ {\n                max_level_paren_array_string_value_value_value = max_level_paren_array_string_value_value_index\n\
    \            }\n            max_level_paren_array_string_value_value_index +=\
    \ 1\n        }\n", "        val paren_groups = paren_string.split(\" \")\n   \
    \     val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = parseNestedParens(paren_group)\n            if (paren_group_levels.size >\
    \ max_level) {\n                max_level = paren_group_levels.size\n        \
    \        max_levels ++= paren_group_levels.toList\n            }\n        }\n\
    \        max_level.toList", "        val paren_groups = paren_string.split(\"\\\
    \\s+\").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0)((max_levels,\
    \ paren_group) => if (paren_group > max_levels) paren_group else max_levels)\n\
    \        val max_levels_plus_one = max_levels + 1\n        val max_levels_plus_two\
    \ = max_levels_plus_one * 2\n        val max_levels_plus_three = max_levels_plus_two\
    \ * 3\n        val max_levels_plus_four = max_levels_plus_three * 4\n        val\
    \ max_levels_plus_five = max_levels_plus_four * 5\n        val max_levels_plus_six\
    \ = max_levels_plus_five * 6\n        val max_levels_plus_seven = max_levels_plus_six\
    \ * 7\n        val max_levels_plus_eight = max_levels_plus_seven * 8\n       \
    \ val max_levels_plus_nine = max_levels_plus_eight * 9\n        val max_levels_plus_ten\
    \ = max_levels_plus_nine * 10\n        val max_levels_plus_eleven = max_levels_plus_ten\
    \ * 11\n        val max_levels_plus_twelve = max_levels_plus_eleven * 12\n   \
    \     val max_levels_plus_thirteen = max_levels_plus_twelve * 13\n        val\
    \ max_levels_plus_fourteen = max_levels_plus_thirteen * 14\n        val max_levels_plus_fifteen\
    \ = max_levels_plus_fourteen * 15\n        val max_levels_plus_sixteen = max_levels_plus_fifteen\
    \ * 16\n        val max_levels_plus_seventeen = max_levels_plus_sixteen * 17\n\
    \        val max_levels_plus_eighteen = max_levels_plus_seventeen * 18\n     \
    \   val max_levels_plus_nineteen = max_levels_plus_eighteen * 19\n        val\
    \ max_levels_plus_twenty = max_levels_plus_nineteen * 20\n        val max_levels_plus_twenty_one\
    \ = max_levels_plus_twenty * 21\n        val max_levels_plus_twenty_two = max_levels_plus_twenty_one\
    \ * 22\n        val max_levels_plus_twenty_three = max_levels_plus_twenty_two\
    \ * 23\n        val max_levels_plus_twenty_four = max_levels_plus_twenty_three\
    \ * 24\n        val max_levels_plus_twenty_five = max_levels_plus_twent", "  \
    \      val paren_groups = paren_string.split(\"\\\\s+\")\n        val max_levels\
    \ = paren_groups.map(_.length).max\n        val levels = mutable.ArrayBuffer.empty[Long]\n\
    \        var level = 0\n        for (i <- 0 until paren_groups.length) {\n   \
    \         if (paren_groups(i).length == max_levels) {\n                levels\
    \ += level\n                level = 0\n            } else {\n                level\
    \ += 1\n            }\n        }\n        levels.toList", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_string = mutable.Stack[String]()\n\
    \        val paren_stack_level = mutable.Stack[Int]()\n        val paren_stack_level_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_count = mutable.Stack[Int]()\n\
    \        val paren_stack_level_count_string = mutable.Stack[Int]()\n        val\
    \ paren_stack_level_count_int = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n     \
    \   val paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val\
    \ paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n     \
    \   val paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val\
    \ paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n     \
    \   val paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val\
    \ paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n     \
    \   val paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val\
    \ paren_stack_level_count_int_string = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n\
    \        val paren_stack_level_count_int_string = mutable.Stack[Int]()\n     \
    \   val paren_stack_level_count_int_string = mutable.Stack[Int", "        val\
    \ paren_array = paren_string.split(\" \")\n        val max_level = 0\n       \
    \ val max_level_index = 0\n        val max_level_paren_array = new Array[String](0)\n\
    \        for(i <- 0 until paren_array.length){\n            val paren_str = paren_array(i)\n\
    \            val paren_str_array = paren_str.split(\"\\\\(\")\n            val\
    \ paren_str_array_length = paren_str_array.length\n            val paren_str_array_max_level\
    \ = paren_str_array_length\n            for(j <- 0 until paren_str_array_length){\n\
    \                val paren_str_array_element = paren_str_array(j)\n          \
    \      val paren_str_array_element_array = paren_str_array_element.split(\"\\\\\
    )\")\n                val paren_str_array_element_array_length = paren_str_array_element_array.length\n\
    \                val paren_str_array_element_array_max_level = paren_str_array_element_array_length\n\
    \                if(paren_str_array_element_array_max_level > max_level){\n  \
    \                  max_level = paren_str_array_element_array_max_level\n     \
    \               max_level_index = j\n                    max_level_paren_array\
    \ = paren_str_array_element\n                }\n            }\n        }\n   \
    \     val max_level_paren_array_length = max_level_paren_array.length\n      \
    \  val max_level_paren_array_element = max_level_paren_array(max_level_index)\n\
    \        val max_level_paren_array_element_array = max_level_paren_array_element.split(\"\
    \\\\)\")\n        val max_level_paren_array_element_array_length = max_level_paren_array_element_array.length\n\
    \        val max_level_paren_array_element_array_max_level = max_level_paren_array_element_array_length\n\
    \        val max_level_paren_array_element_array_max_level_paren_array_element\
    \ = max_level_paren_array_element_array_max_level\n        val max_level_paren_array_element_array_max_level_paren_array_element_array\
    \ = max_level_paren_array_element_array_max_level_paren_array_element.split(\"\
    \\\\)\")\n        val max_level_paren_array_element_array_max_level_paren_array_element_array_length\
    \ = max_level_paren_array_element_array_max_level_paren_array_element_array_length\n\
    \        val max_level_paren_array_element_array_max_level_paren_array_element_array_max_level\
    \ = max_level_paren_array_element_array_max_level_paren_array_element_array_length\n\
    \        val max_level_paren_array_element_array_max_level_paren_array_element_array_max_level_paren_array_element_array_element\
    \ = max_level_paren_array_element_array_max_level_paren_array_element_array_max_level\n\
    \        val max_level_paren_array_element_array_max_level_paren_array_element_array_max_level_paren_array_element_array_element_array\
    \ = max_level_", "        val paren_groups = paren_string.split(\"\\\\s+\")\n\
    \        val max_level = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").length - 1\n            if (paren_group_levels\
    \ > max_level) {\n                max_level = paren_group_levels\n           \
    \     max_level_groups = paren_group\n            }\n        }\n        max_level_groups.toList",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        val max_level_array = new Array[Long](paren_array_size)\n     \
    \   val paren_array_level = new Array[Long](paren_array_size)\n        val paren_array_level_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array = new\
    \ Array[Long](paren_array_size)\n        val paren_array_level_array_size = new\
    \ Array[Long](paren_array_size)\n        val paren_array_level_array_index = new\
    \ Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_array_size)\n        val paren_array_level_array_index_size\
    \ = new Array[Long](paren_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_array = new Array[Long](paren_array_size)\n     \
    \   var i = 0\n        while (i < paren_array_size) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            }\n            i += 1\n        }\n        max_level_array", "   \
    \     val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val paren_chars_count\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum + paren_chars.map(c => if\
    \ (c == '(') 1 else 0).sum\n        val paren_chars_count_without_paren = paren_chars.map(c\
    \ => if (c == '(') 0 else 1).sum\n        val paren_chars_count_with_paren_without_paren\
    \ = paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum\n        val paren_chars_count_with_paren_without_paren_without_paren\
    \ = paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum + paren_chars.map(c => if (c == '(') 0 else 1).sum\n\
    \        val paren_chars_count_with_paren_without_paren_without_paren_without_paren\
    \ = paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum + paren_chars.map(c => if (c == '(') 0 else 1).sum\
    \ + paren_chars.map(c => if (c == '(') 0 else 1).sum\n        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum + paren_chars.map(c => if (c == '(') 0 else 1).sum\
    \ + paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum\n        val paren_chars_count_with_paren_without_paren_without_paren_without_paren_without_paren_without_paren\
    \ = paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum + paren_chars.map(c => if (c == '(') 0 else 1).sum\
    \ + paren_chars.map(c => if (c == '(') 0 else 1).sum + paren_chars.map(c => if\
    \ (c == '(') 0 else 1).sum + paren_chars.", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_copy\
    \ = paren_array.clone()\n        val paren_array_copy_size = paren_array_copy.length\n\
    \        val max_level = 0\n        val max_level_paren_array = new Array[Long](paren_array_size)\n\
    \        val max_level_paren_array_size = new Array[Long](paren_array_size)\n\
    \        val max_level_paren_array_copy = new Array[Long](paren_array_copy_size)\n\
    \        val max_level_paren_array_copy_size : Array[Long] = new Array[Long](paren_array_copy_size)\n\
    \        val max_level_paren_array_copy_index = 0\n        val max_level_paren_array_copy_index2\
    \ = 0\n        val max_level_paren_array_copy_index3 = 0\n        val max_level_paren_array_copy_index4\
    \ = 0\n        val max_level_paren_array_copy_index5 = 0\n        val max_level_paren_array_copy_index6\
    \ = 0\n        val max_level_paren_array_copy_index7 = 0\n        val max_level_paren_array_copy_index8\
    \ = 0\n        val max_level_paren_array_copy_index9 = 0\n        val max_level_paren_array_copy_index10\
    \ = 0\n        val max_level_paren_array_copy_index11 = 0\n        val max_level_paren_array_copy_index12\
    \ = 0\n        val max_level_paren_array_copy_index13 = 0\n        val max_level_paren_array_copy_index14\
    \ = 0\n        val max_level_paren_array_copy_index15 = 0\n        val max_level_paren_array_copy_index16\
    \ = 0\n        val max_level_paren_array_copy_index17 = 0\n        val max_level_paren_array_copy_index18\
    \ = 0\n        val max_level_paren_array_copy_index19 = 0\n        val max_level_paren_array_copy_index20\
    \ = 0\n        val max_level_paren_array_copy_index21 = 0\n        val max_level_paren_array_copy_index22\
    \ = 0\n        val max_level_paren_array_copy_index23 = 0\n        val max_level_paren_array_copy_index24\
    \ = 0\n        val max_level_paren_array_copy_index25 = 0\n        val max_level_paren_array_copy_index26\
    \ = 0\n        val max_level_paren_array_copy_index27 = 0\n        val max_level_paren_array_copy_index28\
    \ = 0\n        val max_level_paren_array_copy_index29 = 0\n        val max_level_paren_array_copy_index30\
    \ = 0\n        val max_level_paren_array_copy_index31 = 0\n        val max_level_paren_array_copy_index32\
    \ = 0", "        val paren_groups = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_index = 0\n        for (i <- 0 until paren_groups.length)\
    \ {\n            val paren_group = paren_groups(i)\n            val paren_group_length\
    \ = paren_group.length\n            val paren_group_chars = paren_group.chars\n\
    \            val paren_group_chars_length = paren_group_chars.length\n       \
    \     val paren_group_chars_count = paren_group_chars.length\n            val\
    \ paren_group_chars_count_minus_1 = paren_group_chars_count - 1\n            val\
    \ paren_group_chars_count_minus_2 = paren_group_chars_count_minus_1 - 1\n    \
    \        val paren_group_chars_count_minus_3 = paren_group_chars_count_minus_2\
    \ - 1\n            val paren_group_chars_count_minus_4 = paren_group_chars_count_minus_3\
    \ - 1\n            val paren_group_chars_count_minus_5 = paren_group_chars_count_minus_4\
    \ - 1\n            val paren_group_chars_count_minus_6 = paren_group_chars_count_minus_5\
    \ - 1\n            val paren_group_chars_count_minus_7 = paren_group_chars_count_minus_6\
    \ - 1\n            val paren_group_chars_count_minus_8 = paren_group_chars_count_minus_7\
    \ - 1\n            val paren_group_chars_count_minus_9 = paren_group_chars_count_minus_8\
    \ - 1\n            val paren_group_chars_count_minus_10 = paren_group_chars_count_minus_9\
    \ - 1\n            val paren_group_chars_count_minus_11 = paren_group_chars_count_minus_10\
    \ - 1\n            val paren_group_chars_count_minus_12 = paren_group_chars_count_minus_11\
    \ - 1\n            val paren_group_chars_count_minus_13 = paren_group_chars_count_minus_12\
    \ - 1\n            val paren_group_chars_count_minus_14 = paren_group_chars_count_minus_13\
    \ - 1\n            val paren_group_chars_count_minus_15 = paren_group_chars_count_minus_14\
    \ - 1\n            val paren_group_chars_count_minus_16 = paren_group_chars_count_minus_15\
    \ - 1\n            val paren_group_chars_count_minus_17 = paren_group_chars_count_minus_16\
    \ - 1\n            val paren_group_chars_count_minus_18 = paren_group_chars_count_minus_17\
    \ - 1\n            val paren_group_chars_count_minus_19 = paren_group_chars_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n  \
    \      val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n    \
    \    val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len =\
    \ paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n  \
    \      val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n    \
    \    val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len =\
    \ paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n\
    \        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n  \
    \      val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n    \
    \    val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n      \
    \  val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n        val\
    \ paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len\
    \ = paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len =\
    \ paren_stack_len.push(paren_stack_len.size)\n        val paren_stack_len = paren_stack_len.push(paren_stack_len.size)\n\
    \        val paren_stack_len = paren_stack", "        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val max_level = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n\
    \        for (paren_group <- paren_groups) {\n            val level = 0\n    \
    \        val level_groups = mutable.ListBuffer[String]()\n            val paren_group_split\
    \ = paren_group.split(\"\\\\(\")\n            val paren_group_split_size = paren_group_split.length\n\
    \            val paren_group_split_index = paren_group_split_size - 1\n      \
    \      val paren_group_split_last_index = paren_group_split_index - 1\n      \
    \      val paren_group_split_last_element = paren_group_split(paren_group_split_last_index).length\n\
    \            val paren_group_split_last_element_index = paren_group_split_last_element\
    \ - 1\n            val paren_group_split_last_element_element = paren_group_split(paren_group_split_last_element_index).length\n\
    \            val paren_group_split_last_element_element_index = paren_group_split_last_element_element\
    \ - 1\n            val paren_group_split_last_element_element_element = paren_group_split(paren_group_split_last_element_element_index).length\n\
    \            val paren_group_split_last_element_element_element_index = paren_group_split_last_element_element_element\
    \ - 1\n            val paren_group_split_last_element_element_element_element\
    \ = paren_group_split(paren_group_split_last_element_element_element_index).length\n\
    \            val paren_group_split_last_element_element_element_element_index\
    \ = paren_group_split_last_element_element_element_element - 1\n            val\
    \ paren_group_split_last_element_element_element_element_element = paren_group_split(paren_group_split_last_element_element_element_element_index).length\n\
    \            val paren_group_split_last_element_element_element_element_element_index\
    \ = paren_group_split_last_element_element_element_element_element - 1\n     \
    \       val paren_group_split_last_element_element_element_element_element_element\
    \ = paren_group_split(paren_group_split_last_element_element_element_element_element_index).length\n\
    \            val paren_group_split_last_element_element_element_element_element_element_index\
    \ = paren_group_split_last_element_element_element_element_element_element_element\
    \ - 1\n            val paren_group_split_last_element_element_element_element_element_element_element\
    \ = paren_group_split(paren_group_split_last_element_element_element_element_element_element_index).length\n\
    \            val paren_group_split_last_element_element_element_element_element_element_element_index\
    \ = paren_group_split_last_element_element_element_element_element_element_element_element\
    \ - 1\n            val paren_group_split_last_element_element_element_element_element_element_element_element\
    \ = paren_group_split(paren_group_split_last_element_element_element_element_element_element_element_index).length\n\
    \            val paren_group_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_paren_array = new Array[String](paren_array_size)\n\
    \        for (i <- 0 until paren_array_size) {\n            val paren_array_element\
    \ = paren_array(i)\n            val paren_array_element_size = paren_array_element.length\n\
    \            if (paren_array_element_size == 0) {\n                max_level =\
    \ 0\n                max_level_paren_array(i) = paren_array_element\n        \
    \    } else if (paren_array_element_size > 0) {\n                val paren_array_element_chars\
    \ = paren_array_element.chars\n                val paren_array_element_chars_size\
    \ = paren_array_element_chars.length\n                if (paren_array_element_chars_size\
    \ > max_level) {\n                    max_level = paren_array_element_chars_size\n\
    \                    max_level_paren_array(i) = paren_array_element\n        \
    \        }\n            }\n        }\n        max_level_paren_array.toList.map(_.length).max",
  "        val paren_groups = paren_string.split(\"\\\\s+\").map(_.toLong)\n     \
    \   val max_levels = paren_groups.foldLeft(0)(_ + _)\n        val levels = paren_groups.map(x\
    \ => if (x == 0) 0 else x).foldLeft(0)(_ + _)\n        val max_level = levels.max\n\
    \        val max_level_groups = paren_groups.map(x => if (x == max_level) x else\
    \ 0).max\n        val max_level_group_size = max_level_groups.size\n        val\
    \ max_level_group_size_with_parens = max_level_group_size_with_parens(max_level_group_size)\n\
    \        val max_level_group_size_with_parens_plus_one = max_level_group_size_with_parens(max_level_group_size\
    \ + 1)\n        val max_level_group_size_with_parens_plus_two = max_level_group_size_with_parens(max_level_group_size\
    \ + 2)\n        val max_level_group_size_with_parens_plus_three = max_level_group_size_with_parens(max_level_group_size\
    \ + 3)\n        val max_level_group_size_with_parens_plus_four = max_level_group_size_with_parens(max_level_group_size\
    \ + 4)\n        val max_level_group_size_with_parens_plus_five = max_level_group_size_with_parens(max_level_group_size\
    \ + 5)\n        val max_level_group_size_with_parens_plus_six = max_level_group_size_with_parens(max_level_group_size\
    \ + 6)\n        val max_level_group_size_with_parens_plus_seven = max_level_group_size_with_parens(max_level_group_size\
    \ + 7)\n        val max_level_group_size_with_parens_plus_eight = max_level_group_size_with_parens(max_level_group_size\
    \ + 8)\n        val max_level_group_size_with_parens_plus_nine = max_level_group_size_with_parens(max_level_group_size\
    \ + 9)\n        val max_level_group_size_with_parens_plus_ten = max_level_group_size_with_parens(max_level_group_size\
    \ + 10)\n        val max_level_group_size_with_parens_plus_eleven = max_level_group_size_with_parens(max_level_group_size\
    \ + 11)\n        val max_level_group_size_with_parens_plus_twelve = max_level_group_size_with_parens(max_level_group_size\
    \ + 12)\n        val max_level_group_size_with_parens_plus_thirteen = max_level_group_size_with_parens(max_level_group_size\
    \ + 13)\n        val max_level_group_size_with_parens_plus_fourteen = max_level_group_size_with_parens(max_level_group_size\
    \ + 14)\n        val max_level_group_size_with_parens_plus_fifteen = max_level_group_size_with_parens(max_level_group_size\
    \ + 15)\n        val max_level_", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0) { (max,\
    \ group) => max max group.length }\n        val max_levels_map = paren_groups.map(x\
    \ => (x, max_levels)).toMap\n        val max_levels_map_sorted = max_levels_map.toSeq.sortBy(_._2).reverse\n\
    \        val max_levels_map_sorted_keys = max_levels_map_sorted.map(x => x._1)\n\
    \        val max_levels_map_sorted_values = max_levels_map_sorted.map(x => x._2)\n\
    \        val max_levels_map_sorted_keys_map = max_levels_map_sorted.map(x => (x._1,\
    \ x._2)).toMap\n        val max_levels_map_sorted_keys_map_sorted = max_levels_map_sorted_keys_map.toSeq.sortBy(_._1).reverse\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys = max_levels_map_sorted_keys_map_sorted.map(x\
    \ => x._1)\n        val max_levels_map_sorted_keys_map_sorted_values = max_levels_map_sorted_keys_map_sorted.map(x\
    \ => x._2)\n        val max_levels_map_sorted_keys_map_sorted_keys_map = max_levels_map_sorted_keys_map_sorted.map(x\
    \ => (x._1, x._2)).toMap\n        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map.toSeq.sortBy(_._1).reverse\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys = max_levels_map_sorted_keys_map_sorted_keys_map_sorted.map(x\
    \ => x._1)\n        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_values\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted.map(x => x._2)\n   \
    \     val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map = max_levels_map_sorted_keys_map_sorted_keys_map_sorted.map(x\
    \ => (x._1, x._2)).toMap\n        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map.toSeq.sortBy(_._1).reverse\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted_keys\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted.map(x\
    \ => x._1)\n        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted_values\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_map = mutable.Map[Long, Long]()\n\
    \        paren_string.split(\"\\\\s+\").foreach(x => {\n            val paren_level\
    \ = paren_stack_map.getOrElse(x, 0)\n            paren_stack_map.put(x, paren_level\
    \ + 1)\n            paren_stack.push(paren_level)\n        })\n        val max_level\
    \ = paren_stack.max\n        val max_level_map = paren_stack_map.max\n       \
    \ val max_level_map_key = max_level_map.key\n        val max_level_map_value =\
    \ max_level_map.value\n        val max_level_map_value_map = max_level_map_value.map(x\
    \ => paren_stack_map.getOrElse(x, 0)).max\n        val max_level_map_value_map_key\
    \ = max_level_map_value_map.key\n        val max_level_map_value_map_value = max_level_map_value_map.value\n\
    \        val max_level_map_value_map_value_map = max_level_map_value_map_value.map(x\
    \ => paren_stack_map.getOrElse(x, 0)).max\n        val max_level_map_value_map_value_map_key\
    \ = max_level_map_value_map_value_map.key\n        val max_level_map_value_map_value_map_value\
    \ = max_level_map_value_map_value_map.value\n        val max_level_map_value_map_value_map_value_map\
    \ = max_level_map_value_map_value_map_value.map(x => paren_stack_map.getOrElse(x,\
    \ 0)).max\n        val max_level_map_value_map_value_map_value_map_key = max_level_map_value_map_value_map_value_map.key\n\
    \        val max_level_map_value_map_value_map_value_map_value = max_level_map_value_map_value_map_value_map.value\n\
    \        val max_level_map_value_map_value_map_value_map_value_map = max_level_map_value_map_value_map_value_map_value.map(x\
    \ => paren_stack_map.getOrElse(x, 0)).max\n        val max_level_map_value_map_value_map_value_map_value_map_key\
    \ = max_level_map_value_map_value_map_value_map_value_map.key\n        val max_level_map_value_map_value_map_value_map_value_map_value\
    \ = max_level_map_value_map_value_map_value_map_value_map.value\n        val max_level_map_value_map_value_map_value_map_value_map_value_map\
    \ = max_level_map_value_map_value_map_value_map_value_map_value.map(x => paren_stack_map.getOrElse(x,\
    \ 0)).max\n        val max_level_map_value_map_value_map_value_map_value_map_value_map_key\
    \ = max_level_map_value_map_value_map_value_map_value_map_value_map.key\n    \
    \    val max_level_map_value_map_value_map_value_map_value_map_value_map_value\
    \ = max_level_map_value_map_", "        val paren_chars = paren_string.split(\"\
    \"\"[\\(\\)]\"\"\").toList\n        val paren_chars_size = paren_chars.size\n\
    \        val paren_chars_map = paren_chars.zipWithIndex.toMap\n        val paren_chars_map_size\
    \ = paren_chars_map.size\n        val paren_chars_map_keys = paren_chars_map.keys\n\
    \        val paren_chars_map_values = paren_chars_map.values\n        val paren_chars_map_keys_size\
    \ = paren_chars_map_keys.size\n        val paren_chars_map_values_size = paren_chars_map_values.size\n\
    \        val paren_chars_map_values_max_size = paren_chars_map_values_size - 1\n\
    \        val paren_chars_map_values_max_index = paren_chars_map_values_max_size\
    \ + 1\n        val paren_chars_map_values_max_key = paren_chars_map_values_max_index\
    \ + 1\n        val paren_chars_map_values_max_value = paren_chars_map_values_max_key\
    \ + 1\n        val paren_chars_map_values_max_key_size = paren_chars_map_values_max_key\
    \ - paren_chars_map_values_max_index\n        val paren_chars_map_values_max_value_size\
    \ = paren_chars_map_values_max_value - paren_chars_map_values_max_key\n      \
    \  val paren_chars_map_values_max_key_size = paren_chars_map_values_max_key -\
    \ paren_chars_map_values_max_value\n        val paren_chars_map_values_max_value_size\
    \ = paren_chars_map_values_max_value - paren_chars_map_values_max_key\n      \
    \  val paren_chars_map_values_max_key_size = paren_chars_map_values_max_key -\
    \ paren_chars_map_values_max_value\n        val paren_chars_map_values_max_value_size\
    \ = paren_chars_map_values_max_value - paren_chars_map_values_max_key\n      \
    \  val paren_chars_map_values_max_key_size = paren_chars_map_values_max_key -\
    \ paren_chars_map_values_max_value\n        val paren_chars_map_values_max_value_size\
    \ = paren_chars_map_values_max_value - paren_chars_map_values_max_key\n      \
    \  val paren_chars_map_values_max_key_size = paren_chars_map_values_max_key -\
    \ paren_chars_map_values_max_value\n        val paren_chars_map_values_max_value_size\
    \ = paren_chars_map_values_max_value - paren_chars_map_values_max_key\n      \
    \  val paren_chars_map_values_max_key_size = paren_chars_map_values_max_key -\
    \ paren_", "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        var level = 0\n        var level_size = 0\n        var paren_level\
    \ = 0\n        var paren_level_size = 0\n        var paren_level_array = new Array[Long](paren_array_size)\n\
    \        var paren_level_array_size = 0\n        var paren_level_array_index =\
    \ 0\n        var paren_level_array_index2 = 0\n        var paren_level_array_index3\
    \ = 0\n        var paren_level_array_index4 = 0\n        var paren_level_array_index5\
    \ = 0\n        var paren_level_array_index6 = 0\n        var paren_level_array_index7\
    \ = 0\n        var paren_level_array_index8 = 0\n        var paren_level_array_index9\
    \ = 0\n        var paren_level_array_index10 = 0\n        var paren_level_array_index11\
    \ = 0\n        var paren_level_array_index12 = 0\n        var paren_level_array_index13\
    \ = 0\n        var paren_level_array_index14 = 0\n        var paren_level_array_index15\
    \ = 0\n        var paren_level_array_index16 = 0\n        var paren_level_array_index17\
    \ = 0\n        var paren_level_array_index18 = 0\n        var paren_level_array_index19\
    \ = 0\n        var paren_level_array_index20 = 0\n        var paren_level_array_index21\
    \ = 0\n        var paren_level_array_index22 = 0\n        var paren_level_array_index23\
    \ = 0\n        var paren_level_array_index24 = 0\n        var paren_level_array_index25\
    \ = 0\n        var paren_level_array_index26 = 0\n        var paren_level_array_index27\
    \ = 0\n        var paren_level_array_index28 = 0\n        var paren_level_array_index29\
    \ = 0\n        var paren_level_array_index30 = 0\n        var paren_level_array_index31\
    \ = 0\n        var paren_level_array_index32 = 0\n        var paren_level_array_index33\
    \ = 0\n        var paren_level_array_index34 = 0\n        var paren_level_array_index35\
    \ = 0\n        var paren_level_array_index36 = 0\n        var paren_level_array_index37\
    \ = 0\n        var paren_level_array_index38 = 0\n        var paren_level_array_index39\
    \ = 0\n        var paren_level_array_index40 = 0\n        var paren_level_array_index41\
    \ = 0\n        var paren_level_array_index42 = 0\n        var paren_level_array_index43\
    \ = 0\n        var paren_level_array_index44 = 0\n        var paren_level_array_index45\
    \ = 0\n        var paren_level_array_index46 = 0\n        var paren_level_array_index47\
    \ = 0\n        var paren_level_array_index48 = 0\n        var paren", "      \
    \  val paren_stack = mutable.Stack[String]()\n        val paren_stack_top = mutable.Stack[String]()\n\
    \        val paren_stack_bottom = mutable.Stack[String]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_bottom_count = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max = mutable.Stack[Int]()\n        val paren_stack_bottom_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_min = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_min = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_bottom_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_max = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_bottom_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_max = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_bottom_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_max = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_bottom_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_max = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_bottom_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_max = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_min = mutable.Stack[Int]()\n        val paren_stack_bottom_count_min\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_bottom_count_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        val paren_level = new Array[Long](paren_array.length)\n        val paren_level_array\
    \ = new Array[Long](paren_array.length)\n        for (i <- 0 until paren_array.length)\
    \ {\n            val paren_level = paren_array(i).length\n            if (paren_level\
    \ > max_level) {\n                max_level = paren_level\n                max_level_array(i)\
    \ = max_level\n            }\n            if (paren_level == max_level) {\n  \
    \              paren_level_array(i) = paren_level\n            }\n        }\n\
    \        val max_level_array_sorted = max_level_array.sortWith(_ < _)\n      \
    \  val paren_level_array_sorted = paren_level_array.sortWith(_ < _)\n        val\
    \ max_level_array_reversed = max_level_array_sorted.reverse\n        val paren_level_array_reversed\
    \ = paren_level_array_sorted.reverse\n        val max_level_array_length = max_level_array_sorted.length\n\
    \        val paren_level_array_length = paren_level_array_sorted.length\n    \
    \    val max_level_array_reversed_length = max_level_array_reversed.length\n \
    \       val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_level_array_reversed.length\n\
    \        val max_level_array_reversed_length = max_level_array_reversed.length\n\
    \        val paren_level_array_reversed_length = paren_", "        val paren_groups\
    \ = paren_string.split(\"\\\\s+\")\n        val max_level = 0\n        val max_level_index\
    \ = 0\n        val max_level_paren_groups = mutable.ListBuffer[String]()\n   \
    \     for (i <- 0 until paren_groups.length) {\n            val paren_group =\
    \ paren_groups(i)\n            val paren_group_list = paren_group.split(\"\\\\\
    (\")\n            val paren_group_list2 = paren_group_list.filter(x => !x.isEmpty)\n\
    \            val paren_group_list3 = paren_group_list2.filter(x => !x.isEmpty)\n\
    \            val paren_group_list4 = paren_group_list3.filter(x => !x.isEmpty)\n\
    \            val paren_group_list5 = paren_group_list4.filter(x => !x.isEmpty)\n\
    \            val paren_group_list6 = paren_group_list5.filter(x => !x.isEmpty)\n\
    \            val paren_group_list7 = paren_group_list6.filter(x => !x.isEmpty)\n\
    \            val paren_group_list8 = paren_group_list7.filter(x => !x.isEmpty)\n\
    \            val paren_group_list9 = paren_group_list8.filter(x => !x.isEmpty)\n\
    \            val paren_group_list10 = paren_group_list9.filter(x => !x.isEmpty)\n\
    \            val paren_group_list11 = paren_group_list10.filter(x => !x.isEmpty)\n\
    \            val paren_group_list12 = paren_group_list11.filter(x => !x.isEmpty)\n\
    \            val paren_group_list13 = paren_group_list12.filter(x => !x.isEmpty)\n\
    \            val paren_group_list14 = paren_group_list13.filter(x => !x.isEmpty)\n\
    \            val paren_group_list15 = paren_group_list14.filter(x => !x.isEmpty)\n\
    \            val paren_group_list16 = paren_group_list15.filter(x => !x.isEmpty)\n\
    \            val paren_group_list17 = paren_group_list16.filter(x => !x.isEmpty)\n\
    \            val paren_group_list18 = paren_group_list17.filter(x => !x.isEmpty)\n\
    \            val paren_group_list19 = paren_group_list18.filter(x => !x.isEmpty)\n\
    \            val paren_group_list20 = paren_group_list19.filter(x => !x.isEmpty)\n\
    \            val paren_group_list21 = paren_group_list20.filter(x => !x.isEmpty)\n\
    \            val paren_group_list22 = paren_group_list21.filter(x => !x.isEmpty)\n\
    \            val paren_group_list", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_list\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = paren_stack_map_list_size.update(0)\n\
    \        val paren_stack_map_list_size = ", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0)(_ + 1).max\n\
    \        val max_levels_map = paren_groups.map(x => x -> max_levels).toMap\n \
    \       val max_levels_map_keys = max_levels_map.keys\n        val max_levels_map_values\
    \ = max_levels_map.values\n        val max_levels_map_sorted = max_levels_map_keys.sorted\n\
    \        val max_levels_map_sorted_values = max_levels_map_values.sorted\n   \
    \     val max_levels_map_sorted_keys = max_levels_map_sorted.map(x => max_levels_map_sorted_values.indexOf(x))\n\
    \        val max_levels_map_sorted_keys_values = max_levels_map_sorted_keys.map(x\
    \ => max_levels_map_sorted_values.indexOf(x))\n        val max_levels_map_sorted_keys_values_sorted\
    \ = max_levels_map_sorted_keys_values.sorted\n        val max_levels_map_sorted_keys_values_sorted_keys\
    \ = max_levels_map_sorted_keys_values_sorted.map(x => max_levels_map_sorted_keys_values.indexOf(x))\n\
    \        val max_levels_map_sorted_keys_values_sorted_keys_values = max_levels_map_sorted_keys_values_sorted_keys.map(x\
    \ => max_levels_map_sorted_keys_values.indexOf(x))\n        val max_levels_map_sorted_keys_values_sorted_keys_values_sorted\
    \ = max_levels_map_sorted_keys_values_sorted_keys_values.sorted\n        val max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys\
    \ = max_levels_map_sorted_keys_values_sorted_keys_values_sorted.map(x => max_levels_map_sorted_keys_values_sorted_keys_values.indexOf(x))\n\
    \        val max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values\
    \ = max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys.map(x =>\
    \ max_levels_map_sorted_keys_values_sorted_keys_values.indexOf(x))\n        val\
    \ max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values_sorted\
    \ = max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values.sorted\n\
    \        val max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values_sorted_keys\
    \ = max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values_sorted.map(x\
    \ => max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values.indexOf(x))\n\
    \        val max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values_sorted_keys_values\
    \ = max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values_sorted_keys.map(x\
    \ => max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_values.indexOf(x))\n\
    \        val max_levels_map_sorted_keys_values_sorted_keys_values_sorted_keys_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max = mutable.Stack[Long]()\n        val paren_stack_level_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index2 = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index3 = mutable.Stack[Long]()\n        val paren_stack_level_max_index4\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index5 = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index6 = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index7 = mutable.Stack[Long]()\n        val paren_stack_level_max_index8\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index9 = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index11 = mutable.Stack[Long]()\n        val paren_stack_level_max_index12\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index13 = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index14 = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index15 = mutable.Stack[Long]()\n        val paren_stack_level_max_index16\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index17 = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index18 = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index19 = mutable.Stack[Long]()\n        val paren_stack_level_max_index20\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index21 = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index22 = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index23 = mutable.Stack[Long]()\n        val paren_stack_level_max_index24\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index25 = mutable.Stack[Long]()\n\
    \        val ", "        val paren_array = paren_string.split(\" \")\n       \
    \ val max_level = 0\n        val max_level_index = 0\n        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_array = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until paren_array.length) {\n            if (paren_array(i)\
    \ == \"(\") {\n                paren_stack.push(i)\n            } else if (paren_array(i)\
    \ == \")\") {\n                val paren_level = paren_stack.size\n          \
    \      if (paren_level > max_level) {\n                    max_level = paren_level\n\
    \                    max_level_index = i\n                }\n                paren_stack.pop()\n\
    \            } else if (paren_array(i) == \")(\") {\n                val paren_level\
    \ = paren_stack.size\n                if (paren_level > max_level) {\n       \
    \             max_level = paren_level\n                    max_level_index = i\n\
    \                }\n                paren_stack.pop()\n                paren_stack.push(i)\n\
    \            }\n        }\n        val max_level_array = paren_stack_array.drop(max_level_index).reverse\n\
    \        val max_level_array_size = max_level_array.size\n        if (max_level_array_size\
    \ == 0) {\n            throw new RuntimeException(\"No matching parenthesis found\"\
    )\n        }\n        val max_level_array_index = max_level_array.last\n     \
    \   val max_level_array_value = max_level_array(max_level_array_index)\n     \
    \   val max_level_array_size = max_level_array_value + 1\n        val paren_stack_array_size\
    \ = paren_stack.size\n        val paren_stack_array_value = paren_stack.last\n\
    \        val paren_stack_array_index = paren_stack.last\n        val paren_stack_array_value\
    \ = paren_stack_array(paren_stack_array_index)\n        val paren_stack_array_size\
    \ = paren_stack_array_value + 1\n        val paren_stack_array_value = paren_stack_array(paren_stack_array_index)\n\
    \        val paren_stack_array_size = paren_stack_array_value + 1\n        val\
    \ paren_stack_array_value = paren_stack_array(paren_stack_array_index)\n     \
    \   val paren_stack_array_size = paren_stack_array_value + 1\n        val paren_stack_array_value\
    \ = paren_stack_array(paren_stack_array_index)\n        val paren_stack_array_size\
    \ = paren_stack_array_value + 1\n        val paren_stack_array_value = paren_stack_array(paren_stack_array_index)\n\
    \        val paren_stack_array_size = paren_stack_array_value + 1\n        val\
    \ paren_stack_array_value = paren_stack_array(paren_stack_array_index)\n     \
    \   val paren_stack_array_size = paren_stack_array_value + 1\n        val paren_stack_array_value\
    \ = paren_stack_array(paren_stack_array_index)", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.last\n        val paren_stack_bottom\
    \ = paren_stack.last\n        val paren_stack_len = paren_stack.size\n       \
    \ val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len\
    \ + 1\n        val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_stack_len + 1\n        val paren_stack_len\
    \ = paren_stack_len + 1\n        val paren_stack_len = paren_stack_len + 1\n \
    \       val paren_stack_len = paren_", "        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_with_paren = paren_chars_count + 1\n        val\
    \ paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren + 1\n \
    \       val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren_plus_one\
    \ + 1\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren_plus_two\
    \ + 1\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren_plus_three\
    \ + 1\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren_plus_four\
    \ + 1\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren_plus_five\
    \ + 1\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren_plus_six\
    \ + 1\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren_plus_seven\
    \ + 1\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren_plus_eight\
    \ + 1\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren_plus_nine\
    \ + 1\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren_plus_ten\
    \ + 1\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren_plus_eleven\
    \ + 1\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren_plus_twelve\
    \ + 1\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren_plus_thirteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren_plus_fourteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren_plus_fifteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren_plus_sixteen\
    \ + 1\n        val paren_chars_count_with_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_counts = paren_groups.map(x => (x, 1))\n\
    \        val paren_groups_with_counts_sorted = paren_groups_with_counts.sortBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count = paren_groups_with_counts_sorted.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count.takeWhile(_._2 > 1).reverse\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level.takeWhile(_._2\
    \ > 1).reverse\n        val paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level_with_max_level.",
  "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n     \
    \   val paren_chars_count_list = paren_chars.map(c => if (c == '(') 1 else 0).toList\n\
    \        val paren_chars_count_list_sorted = paren_chars_count_list.sortBy(_)\n\
    \        val paren_chars_count_list_sorted_reversed = paren_chars_count_list_sorted.reverse\n\
    \        val paren_chars_count_list_sorted_reversed_count = paren_chars_count_list_sorted_reversed.length\n\
    \        val paren_chars_count_list_sorted_reversed_count_min = paren_chars_count_list_sorted_reversed_count\
    \ - 1\n        val paren_chars_count_list_sorted_reversed_count_max = paren_chars_count_list_sorted_reversed_count\
    \ + 1\n        val paren_chars_count_list_sorted_reversed_count_max_index = paren_chars_count_list_sorted_reversed_count_max.indexWhere(_\
    \ == paren_chars_count_list_sorted_reversed_count_max)\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_one\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 1\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_two\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 2\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_three\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 3\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_four\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 4\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_five\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 5\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_six\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 6\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_seven\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 7\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_eight\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 8\n        val paren_chars_count_list_sorted_reversed_count_max_index_plus_nine\
    \ = paren_chars_count_list_sorted_reversed_count_max_index + 9\n        val paren_chars_count_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size_array = paren_array_max_size.map(x => Array(x))\n\
    \        val paren_array_max_size_array_size = paren_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size = paren_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array = paren_array_max_size_array_max_size.map(x\
    \ => Array(x))\n        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array =\
    \ paren_array_max_size_array_max_size_array_max_size.map(x => Array(x))\n    \
    \    val paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size - 1\n  \
    \      val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_paren_array\
    \ = new Array[String](paren_array_size)\n        val max_level_paren_array_size\
    \ = paren_array_size\n        val paren_array_index = 0\n        val paren_array_index_size\
    \ = paren_array_size\n        val paren_array_index_index = 0\n        val paren_array_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index = 0\n        val\
    \ paren_array_index_index_index_size = paren_array_size\n        val paren_array_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index = 0\n        val paren_array_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index = 0\n     \
    \   val paren_array_index_index_index_index_index_index_index_size = paren_array_size\n\
    \        val paren_array_index_index_index_index_index_index_index_index = 0\n\
    \        val paren_array_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = paren_array_size\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = ", "        val paren_array = paren_string.split(\" \")\n        val max_level\
    \ = 0\n        val max_level_index = 0\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_index = 0\n        val paren_array_size = paren_array.length\n\
    \        while (paren_array_index < paren_array_size) {\n            val paren_array_element\
    \ = paren_array(paren_array_index)\n            if (paren_array_element == \"\
    (\") {\n                val paren_array_element_size = paren_array(paren_array_index\
    \ + 1)\n                while (paren_array_index < paren_array_element_size) {\n\
    \                    val paren_array_element = paren_array(paren_array_index)\n\
    \                    if (paren_array_element == \"(\") {\n                   \
    \     val paren_array_element_size = paren_array(paren_array_index + 1)\n    \
    \                    while (paren_array_index < paren_array_element_size) {\n\
    \                            val paren_array_element = paren_array(paren_array_index)\n\
    \                            if (paren_array_element == \"(\") {\n           \
    \                     val paren_array_element_size = paren_array(paren_array_index\
    \ + 1)\n                                while (paren_array_index < paren_array_element_size)\
    \ {\n                                    val paren_array_element = paren_array(paren_array_index)\n\
    \                                    if (paren_array_element == \"(\") {\n   \
    \                                     val paren_array_element_size = paren_array(paren_array_index\
    \ + 1)\n                                        while (paren_array_index < paren_array_element_size)\
    \ {\n                                            val paren_array_element = paren_array(paren_array_index)\n\
    \                                            if (paren_array_element == \"(\"\
    ) {\n                                                val paren_array_element_size\
    \ = paren_array(paren_array_index + 1)\n                                     \
    \           while (paren_array_index < paren_array_element_size) {\n         \
    \                                           val paren_array_element = paren_array(paren_array_index)\n\
    \                                                    if (paren_array_element ==\
    \ \"(\") {\n                                                        val paren_array_element_size\
    \ = paren_array(paren_array_index + 1)\n                                     \
    \                   while (paren_array_index < paren_array_element_size) {\n \
    \                                                           val paren_array_element\
    \ = paren_array(paren_array_index)\n                                         \
    \                   if (paren_array_element == \"(\") {\n                    \
    \                                            val paren_array_element_size = paren_array(paren_array_index\
    \ + 1)\n                                                                while\
    \ (paren_array_index < paren_array_element_size) {\n                         \
    \                                           val paren_array_element = paren_array(paren_array_index)\n\
    \                                                                    if (paren_array_element\
    \ == \"(\") {\n                                                              \
    \          val paren_array_element_size = paren_array(paren_array_index + 1)\n\
    \                                                                        while\
    \ (paren_array_index < paren_array_element_size) {\n                         \
    \                                                   val paren_array_element =\
    \ paren_array(paren_array_index)\n                                           \
    \                                 if (paren_array_element == \"(\") {\n      \
    \                                                                          val\
    \ paren_array_", "        val paren_chars = paren_string.chars\n        val paren_chars_size\
    \ = paren_chars.size\n        val paren_chars_array = paren_chars.toArray\n  \
    \      val paren_chars_array_size = paren_chars_array.length\n        val paren_chars_array_max_size\
    \ = paren_chars_array_size - 1\n        val paren_chars_array_max_index = paren_chars_array_size\
    \ - 1\n        val paren_chars_array_max_value = paren_chars_array_max_index -\
    \ 1\n        val paren_chars_array_max_value_2 = paren_chars_array_max_index -\
    \ 2\n        val paren_chars_array_max_value_3 = paren_chars_array_max_index -\
    \ 3\n        val paren_chars_array_max_value_4 = paren_chars_array_max_index -\
    \ 4\n        val paren_chars_array_max_value_5 = paren_chars_array_max_index -\
    \ 5\n        val paren_chars_array_max_value_6 = paren_chars_array_max_index -\
    \ 6\n        val paren_chars_array_max_value_7 = paren_chars_array_max_index -\
    \ 7\n        val paren_chars_array_max_value_8 = paren_chars_array_max_index -\
    \ 8\n        val paren_chars_array_max_value_9 = paren_chars_array_max_index -\
    \ 9\n        val paren_chars_array_max_value_10 = paren_chars_array_max_index\
    \ - 10\n        val paren_chars_array_max_value_11 = paren_chars_array_max_index\
    \ - 11\n        val paren_chars_array_max_value_12 = paren_chars_array_max_index\
    \ - 12\n        val paren_chars_array_max_value_13 = paren_chars_array_max_index\
    \ - 13\n        val paren_chars_array_max_value_14 = paren_chars_array_max_index\
    \ - 14\n        val paren_chars_array_max_value_15 = paren_chars_array_max_index\
    \ - 15\n        val paren_chars_array_max_value_16 = paren_chars_array_max_index\
    \ - 16\n        val paren_chars_array_max_value_17 = paren_chars_array_max_index\
    \ - 17\n        val paren_chars_array_max_value_18 = paren_chars_array_max_index\
    \ - 18\n        val paren_chars_array_max_value_19 = paren_chars_array_max_index\
    \ - 19\n        val paren_chars_array_max_value_20 = paren_chars_array_max_index\
    \ - 20\n        val paren_chars_array_max_value_21 = paren_chars_array_max_index\
    \ - ", "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        val max_level_array = new Array[Long](paren_array_size)\n     \
    \   val paren_array_index = 0\n        val paren_array_index_size = 0\n      \
    \  val paren_array_index_size2 = 0\n        val paren_array_index_size3 = 0\n\
    \        val paren_array_index_size4 = 0\n        val paren_array_index_size5\
    \ = 0\n        val paren_array_index_size6 = 0\n        val paren_array_index_size7\
    \ = 0\n        val paren_array_index_size8 = 0\n        val paren_array_index_size9\
    \ = 0\n        val paren_array_index_size10 = 0\n        val paren_array_index_size11\
    \ = 0\n        val paren_array_index_size12 = 0\n        val paren_array_index_size13\
    \ = 0\n        val paren_array_index_size14 = 0\n        val paren_array_index_size15\
    \ = 0\n        val paren_array_index_size16 = 0\n        val paren_array_index_size17\
    \ = 0\n        val paren_array_index_size18 = 0\n        val paren_array_index_size19\
    \ = 0\n        val paren_array_index_size20 = 0\n        val paren_array_index_size21\
    \ = 0\n        val paren_array_index_size22 = 0\n        val paren_array_index_size23\
    \ = 0\n        val paren_array_index_size24 = 0\n        val paren_array_index_size25\
    \ = 0\n        val paren_array_index_size26 = 0\n        val paren_array_index_size27\
    \ = 0\n        val paren_array_index_size28 = 0\n        val paren_array_index_size29\
    \ = 0\n        val paren_array_index_size30 = 0\n        val paren_array_index_size31\
    \ = 0\n        val paren_array_index_size32 = 0\n        val paren_array_index_size33\
    \ = 0\n        val paren_array_index_size34 = 0\n        val paren_array_index_size35\
    \ = 0\n        val paren_array_index_size36 = 0\n        val paren_array_index_size37\
    \ = 0\n        val paren_array_index_size38 = 0\n        val paren_array_index_size39\
    \ = 0\n        val paren_array_index_size40 = 0\n        val paren_array_index_size41\
    \ = 0\n        val paren_array_index_size42 = 0\n        val paren_array_index_size43\
    \ = 0\n        val paren_array_index_size44 = 0\n        val paren_array_index_size45\
    \ = 0\n        val paren_array_index_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_size = 0\n        val max_level_array = new Array[Long](paren_array_size)\n\
    \        val max_level_array_size = new Array[Long](paren_array_size)\n      \
    \  val paren_array_index = 0\n        val paren_array_index_size = 0\n       \
    \ val paren_array_index_index = 0\n        val paren_array_index_index_size =\
    \ 0\n        val paren_array_index_index_index = 0\n        val paren_array_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index = 0\n        val paren_array_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index = 0\n        val\
    \ paren_array_index_index_index_index_index_size = 0\n        val paren_array_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_size = 0\n\
    \        val paren_array_index_index_index_index_index_index_index = 0\n     \
    \   val paren_array_index_index_index_index_index_index_index_size = 0\n     \
    \   val paren_array_index_index_index_index_index_index_index_index = 0\n    \
    \    val paren_array_index_index_index_index_index_index_index_index_size = 0\n\
    \        val paren_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_", " \
    \       val paren_groups = paren_string.split(\" \").map(_.toLong)\n        val\
    \ max_levels = paren_groups.map(_.toInt).max\n        val max_levels_map = mutable.Map[Long,\
    \ Int]()\n        paren_groups.foreach(level => {\n            val max_level =\
    \ max_levels_map.getOrElseUpdate(level, 0)\n            max_levels_map(level)\
    \ = max_level + 1\n        })\n        val max_levels_list_sorted = max_levels_map.toList.sortBy(_._1).reverse\n\
    \        val max_levels_list_sorted = max_levels_list_sorted.take(max_levels)\n\
    \        val max_levels_list_sorted.map(_.toLong)", "        val paren_array =\
    \ paren_string.split(\" \").toList\n        val paren_array_size = paren_array.size\n\
    \        val paren_array_max_size = paren_array_size - 1\n        val paren_array_max_index\
    \ = paren_array_max_size - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length + 1\n  \
    \      val paren_array_max_value_length = paren_array_max_value_length + 1\n \
    \       val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1\n\
    \        val paren_array_max_value_length = paren_array_max_value_length + 1",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_levels = mutable.ArrayBuffer.empty[Long]\n        for (paren_group\
    \ <- paren_groups) {\n            val levels = paren_group.split(\"\\\\(\").map(_.length).max\n\
    \            if (levels > max_level) {\n                max_level = levels\n \
    \               max_levels += levels\n            }\n        }\n        max_levels.toList",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size.toLong\n\
    \        val paren_array_max_depth = paren_array_max_size.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toLong\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toLong\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_list = List[Long]()\n\
    \        for(paren_string <- paren_array) {\n            val paren_array = paren_string.split(\"\
    \ \")\n            val level = 0\n            val level_list = List[Long]()\n\
    \            for(paren_string <- paren_array) {\n                val paren_array\
    \ = paren_string.split(\" \")\n                val level = 0\n               \
    \ val level_list = List[Long]()\n                for(paren_string <- paren_array)\
    \ {\n                    val paren_array = paren_string.split(\" \")\n       \
    \             val level = 0\n                    val level_list = List[Long]()\n\
    \                    for(paren_string <- paren_array) {\n                    \
    \    val paren_array = paren_string.split(\" \")\n                        val\
    \ level = 0\n                        val level_list = List[Long]()\n         \
    \               for(paren_string <- paren_array) {\n                         \
    \   val paren_array = paren_string.split(\" \")\n                            val\
    \ level = 0\n                            val level_list = List[Long]()\n     \
    \                       for(paren_string <- paren_array) {\n                 \
    \               val paren_array = paren_string.split(\" \")\n                \
    \                val level = 0\n                                val level_list\
    \ = List[Long]()\n                                for(paren_string <- paren_array)\
    \ {\n                                    val paren_array = paren_string.split(\"\
    \ \")\n                                    val level = 0\n                   \
    \                 val level_list = List[Long]()\n                            \
    \        for(paren_string <- paren_array) {\n                                \
    \        val paren_array = paren_string.split(\" \")\n                       \
    \                 val level = 0\n                                        val level_list\
    \ = List[Long]()\n                                        for(paren_string <-\
    \ paren_array) {\n                                            val paren_array\
    \ = paren_string.split(\" \")\n                                            val\
    \ level = 0\n                                            val level_list = List[Long]()\n\
    \                                            for(paren_string <- paren_array)\
    \ {\n                                                val paren_array = paren_string.split(\"\
    \ \")\n                                                val level = 0\n       \
    \                                         val level_list = List[Long]()\n    \
    \                                            for(paren_string <- paren_array)\
    \ {\n                                                    val paren_array = paren_string.split(\"\
    \ \")\n                                                    val level = 0\n   \
    \                                                 val level_list = List[Long]()\n\
    \                                                    for(paren_string <- paren_array)\
    \ {\n                                                        val paren_array =\
    \ paren_string.split(\" \")\n                                                \
    \        val level = 0\n                                                     \
    \   val level_list = List[Long]()\n                                          \
    \              for(paren_string <- paren_array) {\n                          \
    \                                  val paren_array = paren_string.split(\" \"\
    )\n                                                            val level = 0\n\
    \                                                            val level_list =\
    \ List[Long]()\n                                                            for(paren_string\
    \ <- paren_array) {\n                                                        \
    \        val paren_array = paren_string.split(\" \")\n                       \
    \                                         val level = 0\n                    \
    \                                            val level_list = List[Long]()\n \
    \                                                               for(paren_string\
    \ <- paren_array) {\n", "        val paren_stack = mutable.Stack[Long]()\n   \
    \     val paren_stack_top = paren_stack.size\n        val paren_stack_bottom =\
    \ paren_stack.size\n        val paren_stack_max_size = paren_stack.size\n    \
    \    val paren_stack_max_depth = paren_stack.size\n        val paren_stack_max_depth_increment\
    \ = paren_stack.size\n        val paren_stack_max_depth_decrement = paren_stack.size\n\
    \        val paren_stack_max_depth_increment_decrement = paren_stack.size\n  \
    \      val paren_stack_max_depth_decrement_decrement = paren_stack.size\n    \
    \    val paren_stack_max_depth_increment_decrement_decrement = paren_stack.size\n\
    \        val paren_stack_max_depth_decrement_decrement_decrement = paren_stack.size\n\
    \        val paren_stack_max_depth_increment_decrement_decrement_decrement = paren_stack.size\n\
    \        val paren_stack_max_depth_decrement_decrement_decrement_decrement = paren_stack.size\n\
    \        val paren_stack_max_depth_increment_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_increment_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_increment_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_decrement_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement\
    \ = paren_stack.size\n        val paren_stack_max_depth_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_groups = mutable.ListBuffer[String]()\n        for (paren_group\
    \ <- paren_groups) {\n            if (paren_group.length() > max_level) {\n  \
    \              max_level = paren_group.length()\n                max_level_groups\
    \ = ListBuffer(paren_group)\n            } else {\n                max_level_groups\
    \ += paren_group\n            }\n        }\n        val max_level_group_size =\
    \ max_level_groups.map(_.length).max\n        val max_level_group_size_length\
    \ = max_level_group_size.toString().length\n        val max_level_group_size_digit\
    \ = max_level_group_size_length - 1\n        val max_level_group_digit = max_level_group_size_digit\
    \ - 1\n        val max_level_group_digit_length = max_level_group_digit + 1\n\
    \        val max_level_group_digit_digit_length = max_level_group_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_length = max_level_group_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_length = max_level_group_digit_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_digit_length = max_level_group_digit_digit_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_length - 1\n        val max_level_group_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_length - 1\n        val\
    \ max_level_group_digit_digit_digit_digit_digit_digit_length = max_level_group_digit_digit_digit_digit_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_digit_length - 1\n   \
    \     val max_level_group_digit_digit_digit_digit_digit_digit_digit_length = max_level_group_digit_digit_digit_digit_digit_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_length - 1\n\
    \        val max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_length - 1\n\
    \        val max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_length - 1\n\
    \        val max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ = max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ - 1\n        val max_level_group_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_length\
    \ = max_", "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        var max_level_index\
    \ = 0\n        var level = 0\n        var paren_level = 0\n        var paren_level_index\
    \ = 0\n        var paren_level_array = new Array[Long](paren_array_size)\n   \
    \     var paren_level_array_index = 0\n        var paren_level_array_size = 0\n\
    \        var paren_level_array_index = 0\n        var paren_level_array_size =\
    \ 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0\n        var paren_level_array_index = 0\n        var paren_level_array_size\
    \ = 0", "        val paren_groups = paren_string.split(\"\\\\s+\")\n        val\
    \ max_level = 0\n        val max_level_index = 0\n        val max_level_paren_groups\
    \ = mutable.ListBuffer[String]()\n        for (i <- 0 until paren_groups.length)\
    \ {\n            val paren_group = paren_groups(i)\n            val paren_group_level\
    \ = (paren_group.length - 1) / 2\n            if (paren_group_level > max_level)\
    \ {\n                max_level = paren_group_level\n                max_level_index\
    \ = i\n                max_level_paren_groups = paren_group\n            } else\
    \ if (paren_group_level == max_level) {\n                max_level_paren_groups\
    \ += paren_group\n            }\n        }\n        val max_level_paren_groups_string\
    \ = max_level_paren_groups.mkString(\" \")\n        val max_level_paren_groups_index\
    \ = max_level_paren_groups.indexOf(max_level_paren_groups_string)\n        val\
    \ max_level_paren_groups_length = max_level_paren_groups_string.length\n     \
    \   val max_level_paren_groups_index = max_level_paren_groups_index / max_level_paren_groups_length\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length / 2\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length + 1\n\
    \        val max_level_paren_groups_length = max_level_paren_groups_length", " \
    \       val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_nesting\
    \ = new mutable.HashMap[String, Int]()\n        paren_groups.foreach(x => {\n\
    \            val paren_group_with_max_nesting = x.split(\"(\").length\n      \
    \      paren_groups_with_max_nesting.put(x.replace(\"(\", \"\").replace(\")\"\
    , \"\"), paren_group_with_max_nesting)\n        })\n        val max_nesting_level\
    \ = paren_groups_with_max_nesting.maxBy(x => x._2)._1\n        val max_nesting_level_groups\
    \ = paren_groups_with_max_nesting.filter(_._2 == max_nesting_level)\n        val\
    \ max_nesting_level_groups_with_max_nesting = new mutable.HashMap[String, Int]()\n\
    \        max_nesting_level_groups.foreach(x => {\n            val max_nesting_level_group_with_max_nesting\
    \ = x.split(\"(\").length\n            max_nesting_level_groups_with_max_nesting.put(x.replace(\"\
    (\", \"\").replace(\")\", \"\"), max_nesting_level_group_with_max_nesting)\n \
    \       })\n        val max_nesting_level_groups_with_max_nesting_with_max_nesting_level\
    \ = max_nesting_level_groups_with_max_nesting.maxBy(x => x._1)._1\n        val\
    \ max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups = max_nesting_level_groups_with_max_nesting.filter(_._1\
    \ == max_nesting_level_groups_with_max_nesting_with_max_nesting_level)\n     \
    \   val max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups_with_max_nesting_level\
    \ = max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups.maxBy(x\
    \ => x._1)._1\n        val max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level\
    \ = max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups_with_max_nesting_level_groups.maxBy(x\
    \ => x._1)._1\n        val max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level\
    \ = max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level_groups.maxBy(x\
    \ => x._1)._1\n        val max_nesting_level_groups_with_max_nesting_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level_groups_with_max_nesting_level\
    \ = max_nesting_level_groups_with_max_nesting_with_max_", "        val paren_array\
    \ = paren_string.split(\" \")\n        val max_level = 0\n        val max_level_array\
    \ = new Array[Long](paren_array.length)\n        val paren_levels = new mutable.HashMap[String,\
    \ Long]()\n        val paren_levels_array = new mutable.ArrayBuffer(paren_array.length)\n\
    \        val paren_levels_array_size = paren_levels_array.length\n        val\
    \ paren_levels_array_index = paren_levels_array_size - 1\n        val paren_levels_array_max_index\
    \ = paren_levels_array_size - 2\n        val paren_levels_array_max_value = paren_levels_array_max_index\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_max_value = paren_levels_array_max_index - 1\n\
    \        val paren_levels_array_min_value = paren_levels_array_max_index - 1\n\
    \        val paren_", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n\
    \        val max_levels = paren_groups.foldLeft(0)(_ + _)\n        val max_levels_map\
    \ = paren_groups.map(x => (x, max_levels)).toMap\n        val max_levels_map_sorted\
    \ = max_levels_map.toSeq.sortBy(_._1).reverse\n        val max_levels_map_sorted_keys\
    \ = max_levels_map_sorted.map(_._1)\n        val max_levels_map_sorted_values\
    \ = max_levels_map_sorted.map(_._2)\n        val max_levels_map_sorted_keys_map\
    \ = max_levels_map_sorted.toMap\n        val max_levels_map_sorted_keys_map_sorted\
    \ = max_levels_map_sorted_keys_map.toSeq.sortBy(_._1).reverse\n        val max_levels_map_sorted_keys_map_sorted_keys\
    \ = max_levels_map_sorted_keys_map_sorted.map(_._1)\n        val max_levels_map_sorted_keys_map_sorted_values\
    \ = max_levels_map_sorted_keys_map_sorted.map(_._2)\n        val max_levels_map_sorted_keys_map_sorted_keys_map\
    \ = max_levels_map_sorted_keys_map_sorted.toMap\n        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted\
    \ = max_levels_map_sorted_keys_map_sorted_keys.toSeq.sortBy(_._1).reverse\n  \
    \      val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys = max_levels_map_sorted_keys_map_sorted_keys_sorted.map(_._1)\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_values = max_levels_map_sorted_keys_map_sorted_keys_sorted.map(_._2)\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map =\
    \ max_levels_map_sorted_keys_map_sorted_keys_map_sorted.toMap\n        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys.toSeq.sortBy(_._1).reverse\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted_keys\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_sorted.map(_._1)\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted_values\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_sorted.map(_._2)\n\
    \        val max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted_keys_map\
    \ = max_levels_map_sorted_keys_map_sorted_keys_map_sorted_keys_map_sorted.toMap\n\
    \        val max_levels_map_sorted_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        val max_level_array = new Array[Long](paren_array_size)\n     \
    \   val paren_array_index = 0\n        val paren_array_index_array = new Array[Int](paren_array_size)\n\
    \        val paren_array_index_array_size = new Array[Int](paren_array_size)\n\
    \        val paren_array_index_array_index = 0\n        val paren_array_index_array_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index\
    \ = 0\n        val paren_array_index_array_index_index_size = new Array[Int](paren_array_size)\n\
    \        val paren_array_index_array_index_index_index = 0\n        val paren_array_index_array_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_size = new\
    \ Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index\
    \ = 0\n        val paren_array_index_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = new Array[Int](paren_array_size)\n        val ", "        val paren_chars\
    \ = paren_string.split(\" \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_with_paren = paren_chars_count\
    \ + 1\n        val paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren\
    \ + 1\n        val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren_plus_one\
    \ + 1\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren_plus_two\
    \ + 1\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren_plus_three\
    \ + 1\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren_plus_four\
    \ + 1\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren_plus_five\
    \ + 1\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren_plus_six\
    \ + 1\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren_plus_seven\
    \ + 1\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren_plus_eight\
    \ + 1\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren_plus_nine\
    \ + 1\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren_plus_ten\
    \ + 1\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren_plus_eleven\
    \ + 1\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren_plus_twelve\
    \ + 1\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren_plus_thirteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren_plus_fourteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren_plus_fifteen\
    \ + 1\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren_plus_sixteen\
    \ + 1\n        val ", "        val paren_array = paren_string.split(\" \")\n \
    \       val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_depth = paren_array_max_size\
    \ match {\n            case 0 => 0\n            case 1 => 1\n            case\
    \ _ => {\n                val paren_array_max_depth = paren_array_max_size match\
    \ {\n                    case 0 => 0\n                    case 1 => 1\n      \
    \              case _ => {\n                        val paren_array_max_depth\
    \ = paren_array_max_size match {\n                            case 0 => 0\n  \
    \                          case 1 => 1\n                            case _ =>\
    \ {\n                                val paren_array_max_depth = paren_array_max_size\
    \ match {\n                                    case 0 => 0\n                 \
    \                   case 1 => 1\n                                    case _ =>\
    \ {\n                                        val paren_array_max_depth = paren_array_max_size\
    \ match {\n                                            case 0 => 0\n         \
    \                                   case 1 => 1\n                            \
    \                case _ => {\n                                               \
    \ val paren_array_max_depth = paren_array_max_size match {\n                 \
    \                                   case 0 => 0\n                            \
    \                        case 1 => 1\n                                       \
    \             case _ => {\n                                                  \
    \      val paren_array_max_depth = paren_array_max_size match {\n            \
    \                                                case 0 => 0\n               \
    \                                             case 1 => 1\n                  \
    \                                          case _ => {\n                     \
    \                                           val paren_array_max_depth = paren_array_max_size\
    \ match {\n                                                                  \
    \  case 0 => 0\n                                                             \
    \       case 1 => 1\n                                                        \
    \            case _ => {\n                                                   \
    \                     val paren_array_max_depth = paren_array_max_size match {\n\
    \                                                                            case\
    \ 0 => 0\n                                                                   \
    \         case 1 => 1\n                                                      \
    \                      case _ => {\n                                         \
    \                                       val paren_array_max_depth = paren_array_max_size\
    \ match {\n                                                                  \
    \                  case 0 => 0\n                                             \
    \                                       case 1 => 1\n                        \
    \                                                            case _ => {\n   \
    \                                                                            \
    \         val paren_array_max_depth = paren_array_max_size match {\n         \
    \                                                                            \
    \       case 0 => 0\n                                                        \
    \                                    case 1 => 1\n                           \
    \                                                                 case _ => {\n\
    \                                                                            \
    \                    val paren_array_max_depth = paren_array_max_size match {\n\
    \                                                                            \
    \                        case 0 => 0\n                                       \
    \                                                             case 1 => 1\n  \
    \                                                                            \
    \                      case _ => {\n                                         \
    \                                                               val paren_array_max_depth\
    \ = paren_array_max_size match {\n                                           \
    \                                                                 case 0 => 0\n\
    \                                                                            \
    \                                case 1 => 1\n                               \
    \                                                                            \
    \ case _ => {\n                                                              \
    \                                                  val paren_array_max_depth =\
    \ paren_array_max_size match {\n                                             \
    \                                                                       case 0\
    \ => 0\n                                                                     \
    \                                               case 1 => 1\n                \
    \                                                                            \
    \                        case _ => {\n                                       \
    \                         ", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    (\", \"( \").replace(\")\", \" ) \"))\n        val paren_groups_with_parens_length\
    \ = paren_groups_with_parens.map(x => x.length)\n        val max_paren_groups_with_parens_length\
    \ = paren_groups_with_parens_length.max\n        val max_paren_groups_with_parens\
    \ = paren_groups_with_parens.filter(x => x.length == max_paren_groups_with_parens_length)\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens.map(x\
    \ => x.length)\n        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.max\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toInt\n\
    \        val max_paren_groups_with_parens_length = max_paren_groups_with_parens_length.toLong\n\
    \        val max_paren", "        val paren_stack = mutable.Stack[Long]()\n  \
    \      val paren_stack_map = mutable.Map[Long, Long]()\n        val paren_stack_map_set\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_add = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove = mutable.Set[Long]()\n        val paren_stack_map_set_remove2\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove3 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove4 = mutable.Set[Long]()\n        val paren_stack_map_set_remove5\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove6 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove7 = mutable.Set[Long]()\n        val paren_stack_map_set_remove8\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove9 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove10 = mutable.Set[Long]()\n        val paren_stack_map_set_remove11\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove12 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove13 = mutable.Set[Long]()\n        val paren_stack_map_set_remove14\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove15 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove16 = mutable.Set[Long]()\n        val paren_stack_map_set_remove17\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove18 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove19 = mutable.Set[Long]()\n        val paren_stack_map_set_remove20\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove21 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove22 = mutable.Set[Long]()\n        val paren_stack_map_set_remove23\
    \ = mutable.Set[Long]()\n        val paren_stack_map_set_remove24 = mutable.Set[Long]()\n\
    \        val paren_stack_map_set_remove25 = mutable.Set[Long]()\n        val paren_stack_map_set_remove26\
    \ = mutable.Set", "        val paren_stack = mutable.Stack[Long]()\n        val\
    \ paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ max_level_paren_array = new Array[String]()\n        for (i <- 0 until paren_array.length)\
    \ {\n            val paren_str = paren_array(i)\n            val paren_array_str\
    \ = paren_str.split(\"\\\\(\")\n            val paren_array_str_len = paren_array_str.length\n\
    \            if (paren_array_str_len > max_level) {\n                max_level\
    \ = paren_array_str_len\n                max_level_index = i\n               \
    \ max_level_paren_array = paren_array_str\n            }\n        }\n        val\
    \ max_level_paren_array_len = max_level_paren_array.length\n        val max_level_paren_array_str\
    \ = max_level_paren_array(max_level_paren_array_len - 1)\n        val max_level_paren_array_str_len\
    \ = max_level_paren_array_str.length\n        val max_level_paren_array_str_array\
    \ = max_level_paren_array_str.split(\"\\\\)\")\n        val max_level_paren_array_str_array_len\
    \ = max_level_paren_array_str_array.length\n        val max_level_paren_array_str_array_array_len\
    \ = max_level_paren_array_str_array_array.length\n        val max_level_paren_array_str_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array.length\n        val max_level_paren_array_str_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array.length\n        val max_level_paren_array_str_array_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array_array.length\n        val\
    \ max_level_paren_array_str_array_array_array_array_array_array_len = max_level_paren_array_str_array_array_array_array_array_array.length\n\
    \        val max_level_paren_array_str_array_array_array_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array_array_array_array.length\n\
    \        val max_level_paren_array_str_array_array_array_array_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array_array_array_array_array.length\n\
    \        val max_level_paren_array_str_array_array_array_array_array_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array_array_array_array_array_array.length\n\
    \        val max_level_paren_array_str_array_array_array_array_array_array_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array_array_array_array_array_array_array.length\n\
    \        val max_level_paren_array_str_array_array_array_array_array_array_array_array_array_array_array_array_len\
    \ = max_level_paren_array_str_array_array_array_array_array_array_array_array_array_array_array_",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_index = 0\n        val max_level_paren_array = new Array[String](paren_array.length)\n\
    \        for (i <- 0 until paren_array.length) {\n            val paren_str =\
    \ paren_array(i)\n            val paren_array_str = paren_str.split(\"\\\\(\"\
    )\n            val paren_array_str_length = paren_array_str.length\n         \
    \   val paren_array_str_length_max = paren_array_str_length.toInt\n          \
    \  val paren_array_str_length_min = paren_array_str_length.toInt\n           \
    \ val paren_array_str_length_mid = paren_array_str_length.toInt/2\n          \
    \  val paren_array_str_length_mid2 = paren_array_str_length.toInt/2\n        \
    \    val paren_array_str_length_mid3 = paren_array_str_length.toInt/3\n      \
    \      val paren_array_str_length_mid4 = paren_array_str_length.toInt/4\n    \
    \        val paren_array_str_length_mid5 = paren_array_str_length.toInt/5\n  \
    \          val paren_array_str_length_mid6 = paren_array_str_length.toInt/6\n\
    \            val paren_array_str_length_mid7 = paren_array_str_length.toInt/7\n\
    \            val paren_array_str_length_mid8 = paren_array_str_length.toInt/8\n\
    \            val paren_array_str_length_mid9 = paren_array_str_length.toInt/9\n\
    \            val paren_array_str_length_mid10 = paren_array_str_length.toInt/10\n\
    \            val paren_array_str_length_mid11 = paren_array_str_length.toInt/11\n\
    \            val paren_array_str_length_mid12 = paren_array_str_length.toInt/12\n\
    \            val paren_array_str_length_mid13 = paren_array_str_length.toInt/13\n\
    \            val paren_array_str_length_mid14 = paren_array_str_length.toInt/14\n\
    \            val paren_array_str_length_mid15 = paren_array_str_length.toInt/15\n\
    \            val paren_array_str_length_mid16 = paren_array_str_length.toInt/16\n\
    \            val paren_array_str_length_mid17 = paren_array_str_length.toInt/17\n\
    \            val paren_array_str_length_mid18 = paren_array_str_length.toInt/18\n\
    \            val paren_array_str_length_mid19 = paren_array_str_length.toInt/19\n\
    \            val paren_array_str_length_mid20 = paren_array_str_length.toInt/20\n\
    \            val paren_array_str_length_mid", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_index = mutable.Stack[Long]()\n        val paren_stack_max_size_index\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index2 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index2 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_index3 = mutable.Stack[Long]()\n        val paren_stack_max_size_index3\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index4 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index4 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_index5 = mutable.Stack[Long]()\n        val paren_stack_max_size_index5\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index6 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index6 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_index7 = mutable.Stack[Long]()\n        val paren_stack_max_size_index7\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index8 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index8 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_index9 = mutable.Stack[Long]()\n        val paren_stack_max_size_index9\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index10 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_index11 = mutable.Stack[Long]()\n        val paren_stack_max_size_index11\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index12 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index12 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_index13 = mutable.Stack[Long]()\n        val paren_stack_max_size_index13\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_index14 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size_index14", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val max_level\
    \ = 0\n        var max_level_index = 0\n        var level = 0\n        var level_index\
    \ = 0\n        var paren_level = 0\n        var paren_level_index = 0\n      \
    \  var paren_level_counter = 0\n        var paren_level_counter_index = 0\n  \
    \      var paren_level_counter_max = 0\n        var paren_level_counter_max_index\
    \ = 0\n        var paren_level_counter_max_counter = 0\n        var paren_level_counter_max_counter_index\
    \ = 0\n        var paren_level_counter_max_counter_counter = 0\n        var paren_level_counter_max_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter = 0\n\
    \        var paren_level_counter_max_counter_counter_counter_counter_counter =\
    \ 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var paren_level_counter_max_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_",
  "        val paren_chars = paren_string.toCharArray\n        val paren_chars_size\
    \ = paren_chars.length\n        val paren_chars_map = mutable.HashMap[Char, Int]()\n\
    \        val paren_chars_stack = mutable.Stack[Char]()\n        val paren_chars_stack_max\
    \ = mutable.Stack[Int]()\n        val paren_chars_stack_max_size = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_index = mutable.Stack[Int]()\n        val paren_chars_stack_max_indexSize\
    \ = mutable.Stack[Int]()\n        val paren_chars_stack_max_indexSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSize = mutable.Stack[Int]()\n\
    \        val paren_chars_stack_max_indexSizeSizeSizeSizeSizeSizeSize = ", "  \
    \      val paren_stack = mutable.Stack[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Long]()\n        paren_string.split(\"\\\\s+\").foreach(x => {\n           \
    \ val paren_level = paren_stack.size\n            paren_stack.push(paren_level)\n\
    \            val paren_levels = paren_levels + (paren_level -> paren_level)\n\
    \            val paren_levels_key = paren_levels(paren_level)\n            val\
    \ paren_levels_value = paren_levels_key + 1\n            paren_levels_key -> paren_levels_value\n\
    \        })\n        val max_level = paren_stack.last\n        val max_level_paren_levels\
    \ = paren_levels(max_level)\n        val max_level_paren_levels_key = max_level_paren_levels(max_level)\n\
    \        val max_level_paren_levels_value = max_level_paren_levels_key + 1\n \
    \       val max_level_paren_levels_key_str = max_level_paren_levels_key.toString\n\
    \        val max_level_paren_levels_value_str = max_level_paren_levels_value.toString\n\
    \        val max_level_paren_levels_value_str = max_level_paren_levels_value_str\
    \ + max_level_paren_levels_value_str\n        val max_level_paren_levels_value_str\
    \ = max_level_paren_levels_value_str + max_level_paren_levels_value_str\n    \
    \    val max_level_paren_levels_value_str = max_level_paren_levels_value_str +\
    \ max_level_paren_levels_value_str\n        val max_level_paren_levels_value_str\
    \ = max_level_paren_levels_value_str + max_level_paren_levels_value_str\n    \
    \    val max_level_paren_levels_value_str = max_level_paren_levels_value_str +\
    \ max_level_paren_levels_value_str\n        val max_level_paren_levels_value_str\
    \ = max_level_paren_levels_value_str + max_level_paren_levels_value_str\n    \
    \    val max_level_paren_levels_value_str = max_level_paren_levels_value_str +\
    \ max_level_paren_levels_value_str\n        val max_level_paren_levels_value_str\
    \ = max_level_paren_levels_value_str + max_level_paren_levels_value_str\n    \
    \    val max_level_paren_levels_value_str = max_level_paren_levels_value_str +\
    \ max_level_paren_levels_value_str\n        val max_level_paren_levels_value_str\
    \ = max_level_paren_levels_value_str + max_level_paren_levels_value_str\n    \
    \    val max_level_paren_levels_value_str = max_", "        val paren_stack =\
    \ mutable.Stack[String]()\n        val paren_levels = mutable.Map[String, Int]()\n\
    \        paren_stack.push(paren_string)\n        paren_levels(paren_string) =\
    \ 0\n        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_level = paren_levels(paren_string)\n            paren_levels(paren_string)\
    \ = paren_level + 1\n            val paren_groups = paren_string.split(\"\\\\\
    (\")\n            for(paren_group <- paren_groups) {\n                val paren_group_level\
    \ = paren_levels(paren_group)\n                paren_stack.push(paren_group)\n\
    \                paren_levels(paren_group) = paren_group_level\n            }\n\
    \        }\n        val max_level = paren_levels.values.max\n        val max_level_groups\
    \ = paren_levels.keys.max\n        val max_level_group_length = max_level_groups.length\n\
    \        val max_level_group_count = max_level_groups.count(_ == \" \")\n    \
    \    val max_level_group_count_with_spaces = max_level_group_count + 1\n     \
    \   val max_level_group_count_with_spaces_length = max_level_group_count_with_spaces\
    \ + 1\n        val max_level_group_count_with_spaces_length_with_spaces = max_level_group_count_with_spaces_length\
    \ + max_level_group_length_with_spaces\n        val max_level_group_count_with_spaces_length_with_spaces_length\
    \ = max_level_group_count_with_spaces_length_with_spaces + max_level_group_count_with_spaces_length_with_spaces\n\
    \        val max_level_group_count_with_spaces_length_with_spaces_length_with_spaces\
    \ = max_level_group_count_with_spaces_length_with_spaces_length + max_level_group_count_with_spaces_length_with_spaces_length_with_spaces\n\
    \        val max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length\
    \ = max_level_group_count_with_spaces_length_with_spaces_length_with_spaces +\
    \ max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces\n\
    \        val max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces\
    \ = max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length\
    \ + max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces\n\
    \        val max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces\
    \ = max_level_group_count_with_spaces_length_with_spaces_length_with_spaces_length_with_spaces\
    \ + max_level_group_count_with_", "        val paren_chars = paren_string.chars\n\
    \        val paren_chars_count = paren_chars.length\n        val paren_chars_map\
    \ = paren_chars.groupBy(_ == '(')\n        val paren_chars_map_count = paren_chars_map.length\n\
    \        val paren_chars_map_count_map = paren_chars_map.map(x => x._1 -> x._2.length)\n\
    \        val paren_chars_map_count_map_max = paren_chars_map_count_map.maxBy(_._2)\n\
    \        val paren_chars_map_count_map_max_key = paren_chars_map_count_map_max._1\n\
    \        val paren_chars_map_count_map_max_value = paren_chars_map_count_map_max._2\n\
    \        val paren_chars_map_count_map_max_key_value = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max_key = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max_value = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max_key_value = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max_key_value_max = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max_key_value_max_key = paren_chars_map_count_map_max._2.toLong\n\
    \        val paren_chars_map_count_map_max_key_value_max_key_value_max_value =\
    \ paren_chars_map_count_map_max._2.toLong\n        val paren_chars_map_count_map_max_key_value_max_key_value_max_key_value\
    \ = paren_chars_map_count_map_max._2.toLong\n        val paren_chars_map_count_map_max_key_value_max_key_value_max_key_value_max\
    \ = paren_chars_map_count_map_max._2.toLong\n        val paren_chars_map_count_map_max_key_value_max_key_value_max_key_value_max_key\
    \ = paren_chars_map_count_map_max._2.toLong\n        val paren_chars_map_count_map_max_key_value_max_key_value_max_key_value_max_value\
    \ = paren_chars_map_count_map_max._2.toLong\n        val paren_chars_map_count_map_max_key_value_max_",
  "        val paren_array = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_list: List[Long] = Nil\n        for(paren_string <- paren_array)\
    \ {\n            val paren_array = paren_string.split(\"(\")\n            val\
    \ paren_array_size = paren_array.length\n            val paren_array_size_1 =\
    \ paren_array_size - 1\n            val paren_array_size_2 = paren_array_size\
    \ - 2\n            val paren_array_size_3 = paren_array_size - 3\n           \
    \ val paren_array_size_4 = paren_array_size - 4\n            val paren_array_size_5\
    \ = paren_array_size - 5\n            val paren_array_size_6 = paren_array_size\
    \ - 6\n            val paren_array_size_7 = paren_array_size - 7\n           \
    \ val paren_array_size_8 = paren_array_size - 8\n            val paren_array_size_9\
    \ = paren_array_size - 9\n            val paren_array_size_10 = paren_array_size\
    \ - 10\n            val paren_array_size_11 = paren_array_size - 11\n        \
    \    val paren_array_size_12 = paren_array_size - 12\n            val paren_array_size_13\
    \ = paren_array_size - 13\n            val paren_array_size_14 = paren_array_size\
    \ - 14\n            val paren_array_size_15 = paren_array_size - 15\n        \
    \    val paren_array_size_16 = paren_array_size - 16\n            val paren_array_size_17\
    \ = paren_array_size - 17\n            val paren_array_size_18 = paren_array_size\
    \ - 18\n            val paren_array_size_19 = paren_array_size - 19\n        \
    \    val paren_array_size_20 = paren_array_size - 20\n            val paren_array_size_21\
    \ = paren_array_size - 21\n            val paren_array_size_22 = paren_array_size\
    \ - 22\n            val paren_array_size_23 = paren_array_size - 23\n        \
    \    val paren_array_size_24 = paren_array_size - 24\n            val paren_array_size_25\
    \ = paren_array_size - 25\n            val paren_array_size_26 = paren_array_size\
    \ - 26\n            val paren_array_size_27 = paren_array_size - 27\n        \
    \    val paren_array_size_28 = paren_array_size - 28\n            val paren_array_size_29\
    \ = paren_array_size - 29\n            val paren_array_size_30 = paren_array_size\
    \ - 30\n            val paren_array_size_31 = paren_array_size - 31\n        \
    \    val paren_array_size_32 = paren_array_size - 32\n            val paren_array_size_33\
    \ = paren_array_size - 33\n            val ", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        var paren_array_index = 0\n     \
    \   var paren_array_level = 0\n        var paren_array_index2 = 0\n        var\
    \ paren_array_level2 = 0\n        var paren_array_index3 = 0\n        var paren_array_level3\
    \ = 0\n        var paren_array_index4 = 0\n        var paren_array_level4 = 0\n\
    \        var paren_array_index5 = 0\n        var paren_array_level5 = 0\n    \
    \    var paren_array_index6 = 0\n        var paren_array_level6 = 0\n        var\
    \ paren_array_index7 = 0\n        var paren_array_level7 = 0\n        var paren_array_index8\
    \ = 0\n        var paren_array_level8 = 0\n        var paren_array_index9 = 0\n\
    \        var paren_array_level9 = 0\n        var paren_array_index10 = 0\n   \
    \     var paren_array_level10 = 0\n        var paren_array_index11 = 0\n     \
    \   var paren_array_level11 = 0\n        var paren_array_index12 = 0\n       \
    \ var paren_array_level12 = 0\n        var paren_array_index13 = 0\n        var\
    \ paren_array_level13 = 0\n        var paren_array_index14 = 0\n        var paren_array_level14\
    \ = 0\n        var paren_array_index15 = 0\n        var paren_array_level15 =\
    \ 0\n        var paren_array_index16 = 0\n        var paren_array_level16 = 0\n\
    \        var paren_array_index17 = 0\n        var paren_array_level17 = 0\n  \
    \      var paren_array_index18 = 0\n        var paren_array_level18 = 0\n    \
    \    var paren_array_index19 = 0\n        var paren_array_level19 = 0\n      \
    \  var paren_array_index20 = 0\n        var paren_array_level20 = 0\n        var\
    \ paren_array_index21 = 0\n        var paren_array_level21 = 0\n        var paren_array_index22\
    \ = 0\n        var paren_array_level22 = 0\n        var paren_array_index23 =\
    \ 0\n        var paren_array_level23 = 0\n        var paren_array_index24 = 0\n\
    \        var paren_array_level24 = 0\n        var paren_array_index25 = 0\n  \
    \      var paren_array_level25 = 0\n        var paren_array_index26 = 0\n    \
    \    var paren_array_level26 = 0\n        var paren_array_index27 = 0\n      \
    \  var paren_array_level27 = 0\n        var paren_array_index28 = 0\n        var\
    \ paren_array_level28 = 0\n        var paren_array_index29 = 0\n        var paren_array_level29\
    \ = 0\n        var paren_array_index30 = 0\n        var paren_array_level30",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(", "        val paren_groups\
    \ = paren_string.split(\" \").map(_.toLong)\n        val max_level = paren_groups.foldLeft(0)((max,\
    \ group) => max if (group > max) group else max)\n        val max_level_groups\
    \ = paren_groups.map(_.toLong).take(max_level)\n        val max_level_groups_with_parentheses\
    \ = max_level_groups.map(x => if (x == 0) \"()\" else s\"($x)\")\n        val\
    \ max_level_groups_with_parentheses_string = max_level_groups_with_parentheses.mkString(\"\
    \ \")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.substring(0,\
    \ max_level_groups_with_parentheses_string.length - 1)\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\)\", \"\\\\\
    )\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll(\"\
    \\\\)\\\\(\", \"\\\\(\")\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\(\", \"\\\\\
    (\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll(\"\
    \\\\)\\\\)\", \"\\\\)\")\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\(\", \"\\\\\
    (\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll(\"\
    \\\\)\\\\(\", \"\\\\(\")\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\)\", \"\\\\\
    )\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll(\"\
    \\\\)\\\\(\", \"\\\\(\")\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\(\", \"\\\\\
    (\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll(\"\
    \\\\)\\\\)\", \"\\\\)\")\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\(\", \"\\\\\
    (\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll(\"\
    \\\\)\\\\(\", \"\\\\(\")\n        val max_level_groups_with_parentheses_string\
    \ = max_level_groups_with_parentheses_string.replaceAll(\"\\\\)\\\\)\", \"\\\\\
    )\")\n        val max_level_groups_with_parentheses_string = max_level_groups_with_parentheses_string.replaceAll",
  "        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.size\n        val max_level = 0\n        val max_level_paren_array\
    \ = new Array[String](paren_array_size)\n        for (i <- 0 until paren_array_size)\
    \ {\n            val paren_array_element = paren_array(i)\n            val paren_array_element_size\
    \ = paren_array_element.size\n            if (paren_array_element_size == 0) {\n\
    \                max_level = 0\n                max_level_paren_array(i) = paren_array_element\n\
    \            } else if (paren_array_element_size == 1) {\n                max_level\
    \ = max_level + 1\n                max_level_paren_array(i) = paren_array_element\n\
    \            } else if (paren_array_element_size > 1) {\n                val paren_array_element_size\
    \ = paren_array_element.size\n                val paren_array_element_size_2 =\
    \ paren_array_element_size * 2\n                val paren_array_element_size_3\
    \ = paren_array_element_size_2 * 2\n                val paren_array_element_size_4\
    \ = paren_array_element_size_3 * 2\n                val paren_array_element_size_5\
    \ = paren_array_element_size_4 * 2\n                val paren_array_element_size_6\
    \ = paren_array_element_size_5 * 2\n                val paren_array_element_size_7\
    \ = paren_array_element_size_6 * 2\n                val paren_array_element_size_8\
    \ = paren_array_element_size_7 * 2\n                val paren_array_element_size_9\
    \ = paren_array_element_size_8 * 2\n                val paren_array_element_size_10\
    \ = paren_array_element_size_9 * 2\n                val paren_array_element_size_11\
    \ = paren_array_element_size_10 * 2\n                val paren_array_element_size_12\
    \ = paren_array_element_size_11 * 2\n                val paren_array_element_size_13\
    \ = paren_array_element_size_12 * 2\n                val paren_array_element_size_14\
    \ = paren_array_element_size_13 * 2\n                val paren_array_element_size_15\
    \ = paren_array_element_size_14 * 2\n                val paren_array_element_size_16\
    \ = paren_array_element_size_15 * 2\n                val paren_array_element_size_17\
    \ = paren_array_element_size_16 * 2\n                val paren_array_element_size_18\
    \ = paren_array_element_size_17 * 2\n                val paren_array_element_size_19\
    \ = paren_array_element_size_18 * 2\n                val paren_array_element_size_20\
    \ = paren_array_element_size_19 * 2\n                val paren_array_element_size_21\
    \ = paren_array_element_size_20 * 2\n                val paren_array_element_size_22\
    \ = paren_array_element_size_21 * 2\n                val ", "        val paren_array\
    \ = paren_string.split(\" \")\n        val max_level = 0\n        val max_level_array\
    \ = new Array[Long](paren_array.length)\n        for (i <- 0 until paren_array.length)\
    \ {\n            val paren_str = paren_array(i)\n            val paren_array =\
    \ paren_str.split(\"\\\\(\")\n            val paren_array_size = paren_array.length\n\
    \            val paren_array_max_level = paren_array_size - 1\n            if\
    \ (paren_array_max_level > max_level) {\n                max_level = paren_array_max_level\n\
    \                max_level_array = paren_array.toArray\n            }\n      \
    \  }\n        max_level_array.toList", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer(paren_array_size)\n        var paren_array_index = 0\n\
    \        while(paren_array_index < paren_array_size) {\n            val paren_array_element\
    \ = paren_array(paren_array_index)\n            if(paren_array_element == \"(\"\
    ) {\n                paren_array_index += 1\n                paren_array_list.add(paren_array_index)\n\
    \            } else if(paren_array_element == \")\") {\n                val paren_array_element_index\
    \ = paren_array_list.last\n                val paren_array_element_size = paren_array_list.size\
    \ - 1\n                val paren_array_element_last_index = paren_array_list.last\n\
    \                val paren_array_element_last_size = paren_array_list.last\n \
    \               val paren_array_element_last_element = paren_array(paren_array_element_last_index)\n\
    \                if(paren_array_element_last_element == \"(\") {\n           \
    \         paren_array_list.last = (paren_array_element_last_index + 1)\n     \
    \           } else if(paren_array_element_last_element == \")\") {\n         \
    \           paren_array_list.last = (paren_array_element_last_index - 1)\n   \
    \             }\n                paren_array_list.last = (paren_array_element_index\
    \ + 1)\n                paren_array_list.last = (paren_array_element_size - 1)\n\
    \                paren_array_list.last = (paren_array_element_last_index - 1)\n\
    \                paren_array_list.last = (paren_array_element_last_size + 1)\n\
    \                paren_array_list.last = (paren_array_element_index - 1)\n   \
    \             paren_array_list.last = (paren_array_element_size + 1)\n       \
    \         paren_array_list.last = (paren_array_element_last_index + 1)\n     \
    \           paren_array_list.last = (paren_array_element_last_size - 1)\n    \
    \            paren_array_list.last = (paren_array_element_last_size + 1)\n   \
    \             paren_array_list.last = (paren_array_element_last_index - 1)\n \
    \               paren_array_list.last = (paren_array_element_size - 1)\n     \
    \           paren_array_list.last = (paren_array_element_last_index + 1)\n   \
    \             paren_array_list.last = (paren_array_element_last_size - 1)\n  \
    \              paren_array_list.last = (paren_array_element_last_size + 1)\n \
    \               paren_array_list.last = (paren_array_element_last_index - 1)\n\
    \                paren_array_list.last = (paren_array_element_size + 1)\n    \
    \            paren_array_list.last = (paren_array_element_last_index + 1)\n  \
    \              paren_array_list.last = (paren_array_element_last_size - 1)\n \
    \               paren_array_list.last = (paren_array_element_last_size + ", " \
    \       val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        paren_string.split(\"\\\\s+\").foreach {\
    \ s =>\n            val paren_level = paren_stack.size\n            val paren_level_map\
    \ = paren_stack_map.getOrElseUpdate(paren_level, paren_level)\n            val\
    \ paren_level_map_key = paren_level_map.getOrElse(paren_level, paren_level)\n\
    \            val paren_level_map_value = paren_level_map.getOrElse(paren_level,\
    \ paren_level)\n            val paren_level_map_value_plus_1 = paren_level_map_value\
    \ + 1\n            paren_stack.push(paren_level_map_value_plus_1)\n          \
    \  paren_stack_map.put(paren_level_map_key, paren_level_map_value_plus_1)\n  \
    \          val paren_level_map_value_minus_1 = paren_level_map_value - 1 // To\
    \ avoid duplicate paren_level_map_value\n            val paren_level_map_value_minus_1_plus_1\
    \ = paren_level_map_value_minus_1 + 1\n            paren_stack_map.put(paren_level_map_value_minus_1,\
    \ paren_level_map_value_minus_1_plus_1)\n            val paren_level_map_value_minus_2\
    \ = paren_level_map_value - 2\n            val paren_level_map_value_minus_2_plus_1\
    \ = paren_level_map_value_minus_2 + 1\n            paren_stack_map.put(paren_level_map_value_minus_2,\
    \ paren_level_map_value_minus_2_plus_1)\n            val paren_level_map_value_minus_3\
    \ = paren_level_map_value - 3\n            val paren_level_map_value_minus_3_plus_1\
    \ = paren_level_map_value_minus_3 + 1\n            paren_stack_map.put(paren_level_map_value_minus_3,\
    \ paren_level_map_value_minus_3_plus_1)\n            val paren_level_map_value_minus_4\
    \ = paren_level_map_value - 4\n            val paren_level_map_value_minus_4_plus_1\
    \ = paren_level_map_value_minus_4 + 1\n            paren_stack_map.put(paren_level_map_value_minus_4,\
    \ paren_level_map_value_minus_4_plus_1)\n            val paren_level_map_value_minus_5\
    \ = paren_level_map_value - 5\n            val paren_level_map_value_minus_5_plus_1\
    \ = paren_level_map_value_minus_5 + 1\n            paren_stack_map.put(paren_level_map_value_minus_5,\
    \ paren_level_map_value_minus_5_plus_1)\n            val paren_level_map_value_minus_6\
    \ = paren_level_map_value - 6\n", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_list: List[Long] = Nil\n\
    \        for (i <- 0 until paren_array.length) {\n            if (paren_array(i).equals(\"\
    (\")) {\n                val level = paren_array(i).length\n                if\
    \ (level > max_level) {\n                    max_level = level\n             \
    \       max_level_list = Nil\n                }\n                else {\n    \
    \                max_level_list = max_level_list :+ level\n                }\n\
    \            }\n        }\n        max_level_list", "        val paren_array =\
    \ paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val max_level = 0\n        val max_level_size = 0\n        val max_level_array\
    \ = new Array[Long](paren_array_size)\n        val paren_array_index = 0\n   \
    \     val paren_array_index_size = 0\n        val paren_array_index_index = 0\n\
    \        val paren_array_index_index_size = 0\n        val paren_array_index_index_index\
    \ = 0\n        val paren_array_index_index_index_size = 0\n        val paren_array_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_size = 0\n        val paren_array_index_index_index_index_index\
    \ = 0\n        val paren_array_index_index_index_index_index_size = 0\n      \
    \  val paren_array_index_index_index_index_index_index = 0\n        val paren_array_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index = 0\n\
    \        val paren_array_index_index_index_index_index_index_size = 0\n      \
    \  val paren_array_index_index_index_index_index_index_index_size = 0\n      \
    \  val paren_array_index_index_index_index_index_index_index_index_size = 0\n\
    \        val paren_array_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_index_size\
    \ = 0\n        val paren_array_index_index_index_index_index_index_index_index_index_index_index_",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_index = 0\n        val levels = mutable.ListBuffer[Long]()\n\
    \        val paren_levels = mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ paren_groups.length) {\n            val paren_group = paren_groups(i)\n    \
    \        val paren_group_levels = paren_group.split(\"\\\\(\").length\n      \
    \      if (paren_group_levels > max_level) {\n                max_level = paren_group_levels\n\
    \                max_level_index = i\n            }\n            levels += paren_group_levels\n\
    \            paren_levels += paren_group_levels\n        }\n        val max_level_paren_groups\
    \ = paren_groups(max_level_index)\n        val max_level_paren_group_levels =\
    \ max_level_paren_groups.split(\"\\\\(\").length\n        val max_level_paren_group_levels_index\
    \ = max_level_paren_groups.indexOf(\"(\")\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_index + 1\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_length + max_level_paren_group_levels\n     \
    \   val max_level_paren_group_levels_length = max_level_paren_group_levels_length\
    \ + max_level_paren_group_levels\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_length + max_level_paren_group_levels\n     \
    \   val max_level_paren_group_levels_length = max_level_paren_group_levels_length\
    \ + max_level_paren_group_levels\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_length + max_level_paren_group_levels\n     \
    \   val max_level_paren_group_levels_length = max_level_paren_group_levels_length\
    \ + max_level_paren_group_levels\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_length + max_level_paren_group_levels\n     \
    \   val max_level_paren_group_levels_length = max_level_paren_group_levels_length\
    \ + max_level_paren_group_levels\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_length + max_level_paren_group_levels\n     \
    \   val max_level_paren_group_levels_length = max_level_paren_group_levels_length\
    \ + max_level_paren_group_levels\n        val max_level_paren_group_levels_length\
    \ = max_level_paren_group_levels_length + max_level_paren_group_levels\n     \
    \   val max_level_paren", "        val paren_array = paren_string.split(\" \"\
    )\n        val paren_array_size = paren_array.length\n        val max_level =\
    \ 0\n        val max_level_paren_array = new Array[String](paren_array_size)\n\
    \        val max_level_paren_array_size = paren_array_size\n        val max_level_paren_array_index\
    \ = 0\n        val max_level_paren_array_index2 = 0\n        val max_level_paren_array_index3\
    \ = 0\n        val max_level_paren_array_index4 = 0\n        val max_level_paren_array_index5\
    \ = 0\n        val max_level_paren_array_index6 = 0\n        val max_level_paren_array_index7\
    \ = 0\n        val max_level_paren_array_index8 = 0\n        val max_level_paren_array_index9\
    \ = 0\n        val max_level_paren_array_index10 = 0\n        val max_level_paren_array_index11\
    \ = 0\n        val max_level_paren_array_index12 = 0\n        val max_level_paren_array_index13\
    \ = 0\n        val max_level_paren_array_index14 = 0\n        val max_level_paren_array_index15\
    \ = 0\n        val max_level_paren_array_index16 = 0\n        val max_level_paren_array_index17\
    \ = 0\n        val max_level_paren_array_index18 = 0\n        val max_level_paren_array_index19\
    \ = 0\n        val max_level_paren_array_index20 = 0\n        val max_level_paren_array_index21\
    \ = 0\n        val max_level_paren_array_index22 = 0\n        val max_level_paren_array_index23\
    \ = 0\n        val max_level_paren_array_index24 = 0\n        val max_level_paren_array_index25\
    \ = 0\n        val max_level_paren_array_index26 = 0\n        val max_level_paren_array_index27\
    \ = 0\n        val max_level_paren_array_index28 = 0\n        val max_level_paren_array_index29\
    \ = 0\n        val max_level_paren_array_index30 = 0\n        val max_level_paren_array_index31\
    \ = 0\n        val max_level_paren_array_index32 = 0\n        val max_level_paren_array_index33\
    \ = 0\n        val max_level_paren_array_index34 = 0\n        val max_level_paren_array_index35\
    \ = 0\n        val max_level_paren_array_index36 = 0\n        val max_level_paren_array_index37\
    \ = 0\n        val max_level_paren_array_index38 = 0\n        val max_level_paren_array_index39\
    \ = 0\n        val max_level_paren_array_index40 = 0\n        val max_level_paren_array_index41\
    \ = 0\n        val max_level_paren", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_index = 0\n        val\
    \ max_level_paren_groups = List[String]()\n        for (i <- 0 until paren_groups.length)\
    \ {\n            val paren_group = paren_groups(i)\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").length - 1\n            if (paren_group_levels\
    \ > max_level) {\n                max_level = paren_group_levels\n           \
    \     max_level_index = i\n                max_level_paren_groups = paren_group.split(\"\
    \\\\(\")\n            }\n        }\n        val max_level_paren_groups_size =\
    \ max_level_paren_groups.length\n        val max_level_paren_groups_index = max_level_paren_groups.indexOf(\"\
    )\")\n        val max_level_paren_groups_size = max_level_paren_groups_index +\
    \ 1\n        val max_level_paren_groups_size = max_level_paren_groups_size - 1\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren_groups_size\n\
    \        val max_level_paren_groups_size = max_level_paren_groups_size * max_level_paren",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Int]()\n        val paren_levels_count = mutable.Map[Long, Int]()\n        val\
    \ paren_levels_count_max = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index2 = mutable.Map[Long,\
    \ Int]()\n        val paren_levels_count_max_index3 = mutable.Map[Long, Int]()\n\
    \        val paren_levels_count_max_index4 = mutable.Map[Long, Int]()\n      \
    \  val paren_levels_count_max_index5 = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index6\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index7 = mutable.Map[Long,\
    \ Int]()\n        val paren_levels_count_max_index8 = mutable.Map[Long, Int]()\n\
    \        val paren_levels_count_max_index9 = mutable.Map[Long, Int]()\n      \
    \  val paren_levels_count_max_index10 = mutable.Map[Long, Int]()\n        val\
    \ paren_levels_count_max_index11 = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index12\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index13 = mutable.Map[Long,\
    \ Int]()\n        val paren_levels_count_max_index14 = mutable.Map[Long, Int]()\n\
    \        val paren_levels_count_max_index15 = mutable.Map[Long, Int]()\n     \
    \   val paren_levels_count_max_index16 = mutable.Map[Long, Int]()\n        val\
    \ paren_levels_count_max_index17 = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index18\
    \ = mutable.Map[Long, Int]()\n        val paren_levels_count_max_index19 = mutable.Map[Long,\
    \ Int]()\n        val paren_levels_count_max_index20 = mutable.Map[Long, Int]()\n\
    \        val paren_levels_count_max_index21 = mutable.Map[Long, Int]()\n     \
    \   val paren_levels_count_max_index22 = mutable.Map[Long, Int]()\n        val\
    \ paren_levels_count_max_index23 = mutable.Map[Long, Int]()\n        val paren",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_index = paren_array_max_size - 1\n        val\
    \ paren_array_max_value = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        ", "        val paren_array = paren_string.split(\" \")\n     \
    \   val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        for (i <- 0 until paren_array.length) {\n            val paren_level\
    \ = paren_array(i).length\n            if (paren_level > max_level) {\n      \
    \          max_level = paren_level\n                max_level_array(i) = paren_level\n\
    \            } else if (paren_level == max_level) {\n                max_level_array(i)\
    \ = max_level_array(i) + 1\n            }\n        }\n        max_level_array",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_top =\
    \ paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n      \
    \  val paren_stack_top = paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_bottom\
    \ = paren_stack.size\n        val paren_stack_top = paren_stack.size\n       \
    \ val paren_stack_bottom = paren_stack.size\n        val paren_stack_top = paren_stack.size\n\
    \        val paren_stack_bottom = paren_stack.size\n        val paren_stack_top\
    \ = paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n    \
    \    val paren_stack_top = paren_stack.size\n        val paren_stack_bottom =\
    \ paren_stack.size\n        val paren_stack_top = paren_stack.size\n        val\
    \ paren_stack_bottom = paren_stack.size\n        val paren_stack_top = paren_stack.size\n\
    \        val paren_stack_bottom = paren_stack.size\n        val paren_stack_top\
    \ = paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n    \
    \    val paren_stack_top = paren_stack.size\n        val paren_stack_bottom =\
    \ paren_stack.size\n        val paren_stack_top = paren_stack.size\n        val\
    \ paren_stack_bottom = paren_stack.size\n        val paren_stack_top = paren_stack.size\n\
    \        val paren_stack_bottom = paren_stack.size\n        val paren_stack_top\
    \ = paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n    \
    \    val paren_stack_top = paren_stack.size\n        val paren_stack_bottom =\
    \ paren_stack.size\n        val paren_stack_top = paren_stack.size\n        val\
    \ paren_stack_bottom = paren_stack.size\n        val paren_stack_top = paren_stack.size\n\
    \        val paren_stack_bottom = paren_stack.size\n        val paren_stack_top\
    \ = paren_stack.size\n        val paren_stack_bottom = paren_stack.size\n    \
    \    val paren_stack_top = paren_stack.size\n        val paren_stack_bottom =\
    \ paren_stack.size\n        val paren_stack_top = paren_stack.size\n        val\
    \ paren_stack_bottom = paren_stack.size\n        val paren_stack_top = paren_stack.size\n\
    \        val paren_stack_bottom = paren_stack.size\n        val paren_stack_top\
    \ = paren_stack.size\n        val paren_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_bottom\
    \ = paren_stack.size\n        val paren_stack_max_size = paren_stack.size\n  \
    \      val paren_stack_max_size_top = paren_stack_max_size\n        val paren_stack_max_size_bottom\
    \ = paren_stack_max_size\n        val paren_stack_max_size_max_size = paren_stack_max_size\n\
    \        val paren_stack_max_size_max_size_top = paren_stack_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_bottom = paren_stack_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size = paren_stack_max_size_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size_top = paren_stack_max_size_max_size_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size_bottom = paren_stack_max_size_max_size_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size_max_size = paren_stack_max_size_max_size_max_size_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_top = paren_stack_max_size_max_size_max_size_max_size_max_size_top\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_bottom = paren_stack_max_size_max_size_max_size_max_size_max_size_bottom\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_max_size = paren_stack_max_size_max_size_max_size_max_size_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_max_size_top = paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_top\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_max_size_bottom =\
    \ paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_bottom\n \
    \       val paren_stack_max_size_max_size_max_size_max_size_max_size_max_size\
    \ = paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_max_size\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_top\
    \ = paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_max_size_top\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_bottom\
    \ = paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_max_size_bottom\n\
    \        val paren_stack_max_size_max_size_max_size_max_size_max_size_max_size_max_",
  "        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n        val paren_array_max_size\
    \ = paren_array_max_size + 1\n        val paren_array_max_size = paren_array_max_size\
    \ + 1\n        val paren_array_max_size = paren_array_max_size + 1\n        val\
    \ paren_array_max_size = paren_array_max_size + 1\n", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n \
    \       val paren_levels = mutable.Map[Long, Int]()\n        paren_queue.enqueue(0)\n\
    \        paren_stack.push(0)\n        paren_levels(0) = 0\n        paren_string.split(\"\
    \\\\s+\").foreach(s => {\n            val paren_level = paren_levels(paren_queue.dequeue())\n\
    \            paren_levels(paren_level + 1) = paren_level\n            paren_queue.enqueue(paren_level\
    \ + 1)\n            paren_stack.push(paren_level + 1)\n        })\n        paren_queue.dequeueAll.foreach(paren_queue.enqueue)\n\
    \        paren_queue.dequeueAll.foreach(paren_stack.enqueue)\n        paren_queue.dequeueAll.foreach(paren_levels(_))\n\
    \        paren_stack.dequeueAll.foreach(paren_levels(_))\n        paren_levels",
  "        val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_list: List[Long] = Nil\n        for (paren_group <- paren_groups)\
    \ {\n            val level_count = paren_group.count('(') - paren_group.count(')')\n\
    \            if (level_count > max_level) {\n                max_level = level_count\n\
    \                max_level_list = List(paren_group.count('(') - paren_group.count(')'))\n\
    \            } else if (level_count == max_level) {\n                max_level_list\
    \ = max_level_list :+ paren_group.count('(') - paren_group.count(')')\n      \
    \      }\n        }\n        max_level_list", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_array = new Array[Long](paren_array.length)\n\
    \        val level = 0\n        val level_array = new Array[Long](paren_array.length)\n\
    \        val paren_array_copy = paren_array.clone()\n        val paren_array_copy_sorted\
    \ = paren_array_copy.sortWith(_ < _)\n        paren_array_copy_sorted.foreach(x\
    \ => {\n            if (x == \"(\") {\n                level += 1\n          \
    \      level_array(level) = level\n            } else if (x == \")\") {\n    \
    \            level -= 1\n                level_array(level) = level\n        \
    \    }\n            if (level > max_level) {\n                max_level = level\n\
    \                max_level_array(level) = level\n            }\n        })\n \
    \       val max_level_array_sorted = max_level_array.sortWith(_ < _)\n       \
    \ val max_level_array_sorted_index = max_level_array_sorted.indexWhere(_ == max_level)\n\
    \        val max_level_array_sorted_value = max_level_array_sorted(max_level_array_sorted_index)\n\
    \        val max_level_array_sorted_index_value = max_level_array_sorted_index(max_level_array_sorted_index_value)\n\
    \        val max_level_array_sorted_index_value_copy = max_level_array_sorted_index_value.clone()\n\
    \        val max_level_array_sorted_index_value_copy_sorted = max_level_array_sorted_index_value_copy.sortWith(_\
    \ < _)\n        val max_level_array_sorted_index_value_copy_sorted_index = max_level_array_sorted_index_value_copy_sorted.indexWhere(_\
    \ == max_level_array_sorted_index_value_copy)\n        val max_level_array_sorted_index_value_copy_sorted_value\
    \ = max_level_array_sorted_index_value_copy_sorted(max_level_array_sorted_index_value_copy_sorted_index)\n\
    \        val max_level_array_sorted_index_value_copy_sorted_index_value = max_level_array_sorted_index_value_copy_sorted_index(max_level_array_sorted_index_value_copy_sorted_index_value)\n\
    \        val max_level_array_sorted_index_value_copy_sorted_index_value_copy =\
    \ max_level_array_sorted_index_value_copy_sorted_index_value.clone()\n       \
    \ val max_level_array_sorted_index_value_copy_sorted_index_value_copy_sorted =\
    \ max_level_array_sorted_index_value_copy_sorted_index_value_copy.sortWith(_ <\
    \ _)\n        val max_level_array_sorted_index_value_copy_sorted_index_value_copy_sorted_index\
    \ = max_level_array_sorted_index_value_copy_sorted_index_value_copy_sorted.indexWhere(_\
    \ == max_level_array_sorted_index_value_copy_sorted_index_value_copy)\n      \
    \  val max_level_array_sorted_index_value_copy_sorted_index_value_copy_sorted_value\
    \ = max_level_array_sorted_index_value_copy_sorted_index_value_copy_sorted_index(max_level_array_sorted_index_value_copy_sorted_index_value_copy_sorted_index)\n\
    \        val max_level_array_sorted_index_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.size\n        val paren_stack_bottom\
    \ = paren_stack.size\n        val paren_stack_max_size = paren_stack.size\n  \
    \      val paren_stack_max_depth = paren_stack.size\n        val paren_stack_max_depth_increase\
    \ = 0\n        val paren_stack_max_depth_decrease = 0\n        val paren_stack_max_depth_increase_counter\
    \ = 0\n        val paren_stack_max_depth_decrease_counter = 0\n        val paren_stack_max_depth_increase_counter_reset\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset = 0\n        val\
    \ paren_stack_max_depth_increase_counter_reset_counter = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter_reset_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset_counter_reset_counter_reset_counter\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_decrease_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset\
    \ = 0\n        val paren_stack_max_depth_increase_counter_reset_counter_reset_counter_reset_counter_reset_counter_reset_counter\
    \ = 0\n", "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size.toInt\n\
    \        val paren_array_max_depth = paren_array_max_size.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toInt\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toInt\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_max_depth_max_size = mutable.Stack[Long]()\n \
    \       val paren_stack_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n", "        val paren_array = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_string <- paren_array) {\n            val paren_array = paren_string.split(\"\
    \\\\(\")\n            val level = 0\n            val levels = mutable.ListBuffer[Long]()\n\
    \            for (paren_string <- paren_array) {\n                val paren_array\
    \ = paren_string.split(\"\\\\)\")\n                val paren_array_size = paren_array.length\n\
    \                if (paren_array_size > level) {\n                    level =\
    \ paren_array_size\n                }\n                levels += level\n     \
    \       }\n            if (level > max_level) {\n                max_level = level\n\
    \                max_levels = levels\n            }\n        }\n        max_levels",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size_size = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size_size_max_size2 = mutable.Stack[Int]()\n    \
    \    val paren_stack_max_size_size_max_size3 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_size_size_max_size4 = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size5\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size6 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size_size_max_size7 = mutable.Stack[Int]()\n    \
    \    val paren_stack_max_size_size_max_size8 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_size_size_max_size9 = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size10\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size11 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size_size_max_size12 = mutable.Stack[Int]()\n   \
    \     val paren_stack_max_size_size_max_size13 = mutable.Stack[Int]()\n      \
    \  val paren_stack_max_size_size_max_size14 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_size_size_max_size15 = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size16\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size17 = mutable.Stack[Int]()\n\
    \        val paren_stack_max_size_size_max_size18 = mutable.Stack[Int]()\n   \
    \     val paren_stack_max_size_size_max_size19 = mutable.Stack[Int]()\n      \
    \  val paren_stack_max_size_size_max_size20 = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_size_size_max_size21 = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_size22\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_size_size_max_", "     \
    \   val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val max_level = 0\n        val max_level_size\
    \ = 0\n        val level_size = 0\n        val level = 0\n        val paren_array_iter\
    \ = paren_array.iterator\n        val paren_array_next = paren_array_iter.next\n\
    \        while (paren_array_next != null) {\n            val paren_array_size\
    \ = paren_array_next.length\n            val paren_array_next = paren_array_iter.next\n\
    \            val paren_array_next_next = paren_array_next.next\n            while\
    \ (paren_array_next_next != null) {\n                val paren_array_next_next_next\
    \ = paren_array_next_next.next\n                while (paren_array_next_next_next\
    \ != null) {\n                    val paren_array_next_next_next_next = paren_array_next_next_next.next\n\
    \                    while (paren_array_next_next_next_next != null) {\n     \
    \                   val paren_array_next_next_next_next_next = paren_array_next_next_next_next.next\n\
    \                        while (paren_array_next_next_next_next_next != null)\
    \ {\n                            val paren_array_next_next_next_next_next_next\
    \ = paren_array_next_next_next_next_next.next\n                            while\
    \ (paren_array_next_next_next_next_next_next != null) {\n                    \
    \            val paren_array_next_next_next_next_next_next_next = paren_array_next_next_next_next_next_next.next\n\
    \                                while (paren_array_next_next_next_next_next_next_next\
    \ != null) {\n                                    val paren_array_next_next_next_next_next_next_next_next\
    \ = paren_array_next_next_next_next_next_next_next.next\n                    \
    \                while (paren_array_next_next_next_next_next_next_next_next !=\
    \ null) {\n                                        val paren_array_next_next_next_next_next_next_next_next\
    \ = paren_array_next_next_next_next_next_next_next_next.next\n               \
    \                         while (paren_array_next_next_next_next_next_next_next_next_next\
    \ != null) {\n                                            val paren_array_next_next_next_next_next_next_next_next_next\
    \ = paren_array_next_next_next_next_next_next_next_next_next.next\n          \
    \                                  while (paren_array_next_next_next_next_next_next_next_next_next_next\
    \ != null) {\n                                                val paren_array_next_next_next_next_next_next_next_next_next_next\
    \ = paren_array_next_next_next_next_next_next_next_next_next_next.next\n     \
    \                                           while (paren_array_next_next_next_next_next_next_next_next_next_next\
    \ != null) {\n                                                    val paren_array_next_next_next_next_next_next_next_next_next_next\
    \ = paren_array_next_next_next_next_next_next_next_next_next_next.next\n     \
    \                                               while (paren_array_next_next_next_next_next_next_next_next_next_next_next\
    \ != null) {\n                                                        val paren_array_next_next_next_next_next_next_next_next_next_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size.toLong\n        val\
    \ paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.toLong\n        val paren_array_max_size\
    \ = paren_array_max_size.toLong\n        val paren_array_max_size = paren_array_max_size.toLong\n\
    \        val paren_array_max_size = paren_array_max_size.to"]
stop_tokens:
- "\n    }\n"
