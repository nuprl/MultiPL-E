language: scala
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw02kso20.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnkpmr29u.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty) {\n            (None, None)\n        } else if (positive.isEmpty\
    \ || negative.isEmpty) {\n            (None, None)\n        } else {\n       \
    \     val positiveMin = positive.min\n            val negativeMax = negative.max\n\
    \            (Some(positiveMin), Some(negativeMax))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1i5it2ne.scala:23)\n\tat Problem.main(tmp1i5it2ne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty || positive.isEmpty)\
    \ Some(None)\n        else (Some(negative.max), Some(positive.min))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6_0hd7jx.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6_0hd7jx.scala:13:59 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty ||\
    \ positive.isEmpty) Some(None)\n\e[31m\e[31m   |\e[0m                        \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    Some[None.type]\n\e[31m   |\e[0m             \
    \                     Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty || positive.isEmpty)\
    \ Some(None)\n        else (negative.maxOption, positive.minOption)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5ylkxnc.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5ylkxnc.scala:13:59 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty ||\
    \ positive.isEmpty) Some(None)\n\e[31m\e[31m   |\e[0m                        \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    Some[None.type]\n\e[31m   |\e[0m             \
    \                     Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp342hjo1y.scala:22)\n\tat Problem.main(tmp342hjo1y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqi2k2qq.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphq9rd2jo.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val positiveMin\
    \ = positive.min\n        val positiveMax = positive.max\n        val negativeMin\
    \ = negative.min\n        val negativeMax = negative.max\n        val positiveMinOrNone\
    \ = positiveMin match {\n            case Some(x) => Some(x)\n            case\
    \ None => None\n        }\n        val positiveMaxOrNone = positiveMax match {\n\
    \            case Some(x) => Some(x)\n            case None => None\n        }\n\
    \        val negativeMinOrNone = negativeMin match {\n            case Some(x)\
    \ => Some(x)\n            case None => None\n        }\n        val negativeMaxOrNone\
    \ = negativeMax match {\n            case Some(x) => Some(x)\n            case\
    \ None => None\n        }\n        val positiveOrNone = positiveMinOrNone match\
    \ {\n            case Some(x) => Some(x)\n            case None => None\n    \
    \    }\n        val positiveOrNone = positiveMaxOrNone match {\n            case\
    \ Some(x) => Some(x)\n            case None => None\n        }\n        val negativeOrNone\
    \ = negativeMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMaxOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val positiveOrNone = positiveMinOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMaxOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val negativeOrNone\
    \ = negativeMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMaxOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val positiveOrNone = positiveMinOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMaxOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val negativeOrNone\
    \ = negativeMinOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMaxOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val positiveOrNone = positiveMinOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp589dk0n4.scala:99:0 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp589dk0n4.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mpositiveOrNone\e[0m = positiveMaxOrNone \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0mpositiveOrNone is already defined as\
    \ \e[33mvalue\e[0m \e[35mpositiveOrNone\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m37 |\e[0m            \e[33mcase\e[0m Some(x) => Some(x)\n\e[31m38 |\e[0m\
    \            \e[33mcase\e[0m None => None\n\e[31m39 |\e[0m        }\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp589dk0n4.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mnegativeOrNone\e[0m = negativeMaxOrNone\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mnegativeOrNone\
    \ is already defined as \e[33mvalue\e[0m \e[35mnegativeOrNone\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m45 |\e[0m            \e[33mcase\e[0m Some(x)\
    \ => Some(x)\n\e[31m46 |\e[0m            \e[33mcase\e[0m None => None\n\e[31m47\
    \ |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp589dk0n4.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mpositiveOrNone\e[0m = positiveMinOrNone \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0mpositiveOrNone is already defined as\
    \ \e[33mvalue\e[0m \e[35mpositiveOrNone\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m49 |\e[0m            \e[33mcase\e[0m Some(x) => Some(x)\n\e[31m50 |\e[0m\
    \            \e[33mcase\e[0m None => None\n\e[31m51 |\e[0m        }\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp589dk0n4.scala:52:12 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mpositiveOrNone\e[0m = positiveMaxOr"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsori7_.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsori7_.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphq9rd2jo.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi825206p.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ None\n        else if (posInts.isEmpty) None\n        else (negInts.max, posInts.min)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:12:29\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    None.type\n\e[31m   |\e[0m    \
    \                         Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:13:34 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (posInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:14:14\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m (negInts.max,\
    \ posInts.min)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m              Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m (negInts.max,\
    \ posInts.min)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi825206p.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty)\n            (None, None)\n        else if (positive.isEmpty)\n\
    \            (Some(negative.min), None)\n        else if (negative.isEmpty)\n\
    \            (None, Some(positive.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3cuzeafu.scala:22)\n\tat Problem.main(tmp3cuzeafu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (Some(negatives.min), None)\n        } else {\n            (Some(negatives.min),\
    \ Some(positives.max))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcciw74o7.scala:21)\n\tat Problem.main(tmpcciw74o7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg8a252e.scala:22)\n\tat Problem.main(tmpjg8a252e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsori7_.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsori7_.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg8a252e.scala:22)\n\tat Problem.main(tmpjg8a252e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (Some(negatives.min), None)\n        } else {\n            (Some(negatives.min),\
    \ Some(positives.max))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcciw74o7.scala:21)\n\tat Problem.main(tmpcciw74o7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgy0rg28.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgy0rg28.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x < 0)\n        val negative = lst.filter(x => x >= 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty) None\n        else if (positive.isEmpty) Some(negative.minOption)\n\
    \        else if (negative.isEmpty) Some(positive.maxOption)\n        else (positive.maxOption,\
    \ negative.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpulbl3ed7.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (positive.isEmpty\
    \ && negative.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpulbl3ed7.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positive.isEmpty) Some(negative.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpulbl3ed7.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (negative.isEmpty) Some(positive.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        (Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.largestSmallestIntegers(tmp7wl3jl_z.scala:14)\n\tat Problem$.main(tmp7wl3jl_z.scala:19)\n\
    \tat Problem.main(tmp7wl3jl_z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ydolmoi.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some(maxNegative, minPositive)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpop8jtx8l.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (Some(negatives.min), None)\n        } else {\n            (Some(negatives.min),\
    \ Some(positives.max))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndr_1hu.scala:21)\n\tat Problem.main(tmpbndr_1hu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some((maxNegative, minPositive))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x8wgdey.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some((maxNegative, minPositive))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphq9rd2jo.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ Some(None) else None\n        if (posInts.isEmpty) Some(None) else None\n  \
    \      val maxInt = negInts.max\n        val minInt = posInts.min\n        (Some(maxInt),\
    \ Some(minInt))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.largestSmallestIntegers(tmpu2wd13gg.scala:14)\n\tat Problem$.main(tmpu2wd13gg.scala:19)\n\
    \tat Problem.main(tmpu2wd13gg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphq9rd2jo.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ydolmoi.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(x\
    \ => x < 0)\n        val posInts = lst.filter(x => x >= 0)\n        val maxInt\
    \ = negInts.max\n        val minInt = posInts.min\n        (maxInt, minInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoh9xoul.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxInt, minInt)\n\e\
    [31m\e[31m   |\e[0m         ^^^^^^\e[0m\n\e[31m   |\e[0m         Found:    (maxInt\
    \ : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoh9xoul.scala:14:17 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (maxInt, minInt)\n\e[31m\e[31m   |\e[0m     \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    (minInt :\
    \ Long)\n\e[31m   |\e[0m                 Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ \n            (None, None)\n        else if (positives.isEmpty)\n          \
    \  (None, None)\n        else\n            (Some(negatives.max), Some(positives.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqtze5fl.scala:20)\n\tat Problem.main(tmpdqtze5fl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (Some(negatives.min), None)\n        } else {\n            (Some(negatives.min),\
    \ Some(positives.max))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzl6640y9.scala:21)\n\tat Problem.main(tmpzl6640y9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsf_h402c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnam611yt.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnam611yt.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpulw4_vwa.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        if (maxNegative.isEmpty\
    \ && minPositive.isEmpty) None\n        else if (maxNegative.isEmpty) Some(minPositive)\n\
    \        else if (minPositive.isEmpty) Some(maxNegative)\n        else (Some(maxNegative),\
    \ Some(minPositive))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp743u_ntx.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (maxNegative.isEmpty && minPositive.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value isEmpty is not a member of Long\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp743u_ntx.scala:14:56 --------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mif\e[0m (maxNegative.isEmpty && minPositive.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                                \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  None.type\n\e[31m   |\e[0m                                  Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp743u_ntx.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (maxNegative.isEmpty) Some(minPositive)\n\e[31m\e[31m   |\e[0m   \
    \              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ isEmpty is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp743u_ntx.scala:15:42 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (maxNegative.isEmpty) Some(minPositive)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Some[Long]\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp743u_ntx.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (minPositive.isEmpty) Some(maxNegative)\n\e[31m\e[31m   |\e[0m   \
    \              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ isEmpty is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp743u_ntx.scala:16:42 --------------------\e[0m\e[0m\n\e[31m16 |\e[0"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqi2k2qq.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqi2k2qq.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxmbjq0_6.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty || positive.isEmpty)\
    \ Some(None)\n        else (Option(negative.max), Option(positive.min))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhw242c8.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjhw242c8.scala:13:59 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty ||\
    \ positive.isEmpty) Some(None)\n\e[31m\e[31m   |\e[0m                        \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    Some[None.type]\n\e[31m   |\e[0m             \
    \                     Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphq9rd2jo.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5je1vro.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxmbjq0_6.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ >= 0)\n        if (negInts.isEmpty)\
    \ None\n        else if (posInts.isEmpty) None\n        else {\n            val\
    \ negMax = negInts.max\n            val posMin = posInts.min\n            (Some(negMax),\
    \ Some(posMin))\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8t7nhd_q.scala:12:29\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    None.type\n\e[31m   |\e[0m    \
    \                         Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8t7nhd_q.scala:13:34 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (posInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapxf960w.scala:22)\n\tat Problem.main(tmpapxf960w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsf_h402c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapxf960w.scala:22)\n\tat Problem.main(tmpapxf960w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje5ddshp.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpje5ddshp.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje5ddshp.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp42i3zeq5.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpioazzenw.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        (maxNegative, minPositive)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja41hv3c.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja41hv3c.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        val maxNegativeOption\
    \ = maxNegative.map(x => Some(x))\n        val minPositiveOption = minPositive.map(x\
    \ => Some(x))\n        val maxNegativeAndMinPositive = maxNegativeOption.flatMap(x\
    \ => minPositiveOption.map(_ => x))\n        val maxNegativeAndMinPositiveOption\
    \ = maxNegativeAndMinPositive.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNone\
    \ = maxNegativeAndMinPositiveOption.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNone.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneOption.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNoneAndNone.map(x => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneOption.map(x => Some(x))\n        val\
    \ maxNegativeAndMinPositiveAndNoneAndNoneAndNoneOption = maxNegativeAndMinPositiveAndNoneAndNoneAndNone.map(x\
    \ => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneOption.map(x => Some(x))\n \
    \       val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneOption = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNone.map(x\
    \ => Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneOption.map(x => Some(x))\n\
    \        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNone.map(x => Some(x))\n\
    \        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneAndNone\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneOption.map(x =>\
    \ Some(x))\n        val maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneAndNoneOption\
    \ = maxNegativeAndMinPositiveAndNoneAndNoneAndNoneAndNoneAndNoneAndNone.map(x\
    \ => Some(x))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx1wk360m.scala:14:44 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxNegativeOption\e[0m =\
    \ maxNegative.map(\e[36mx\e[0m => Some(x))\n\e[31m\e[31m   |\e[0m            \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             value map is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpx1wk360m.scala:15:44 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mminPositiveOption\e[0m = minPositive.map(\e\
    [36mx\e[0m => Some(x))\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value map is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1wk360m.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else {\n           \
    \ val max = negatives.max\n            val min = positives.min\n            (Some(max),\
    \ Some(min))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsny5d98k.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsny5d98k.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty || positive.isEmpty)\
    \ Some(None)\n        else (negative.maxOption, positive.minOption)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp1huugr_.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpp1huugr_.scala:13:59 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty ||\
    \ positive.isEmpty) Some(None)\n\e[31m\e[31m   |\e[0m                        \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    Some[None.type]\n\e[31m   |\e[0m             \
    \                     Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        val maxNegative = negatives.max\n\
    \        val minPositive = positives.min\n        val maxSmallestNegative = maxNegative.min\n\
    \        val minSmallestPositive = minPositive.max\n        (maxSmallestNegative,\
    \ minSmallestPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ato40dw.scala:16:9\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        (maxSmallestNegative,\
    \ minSmallestPositive)\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Found:    (maxSmallestNegative : Long => Long)\n\e[31m\
    \   |\e[0m         Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8ato40dw.scala:16:30 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        (maxSmallestNegative, minSmallestPositive)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Found:    (minSmallestPositive : Long => Long)\n\
    \e[31m   |\e[0m                          Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpulw4_vwa.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp42i3zeq5.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x > 0)\n        val negative = lst.filter(x => x < 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pnlyoki.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pnlyoki.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp42i3zeq5.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.max))\n        else\n            (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfe9ow2a.scala:22)\n\tat Problem.main(tmpsfe9ow2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val largest = negatives.max\n        val smallest = positives.min\n \
    \       (Some(largest), Some(smallest))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.largestSmallestIntegers(tmptq6i5096.scala:14)\n\tat Problem$.main(tmptq6i5096.scala:19)\n\
    \tat Problem.main(tmptq6i5096.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpioazzenw.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some((maxNegative, minPositive))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5x8wgdey.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some((maxNegative, minPositive))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x < 0)\n        val negative = lst.filter(x => x >= 0)\n        val positiveMinusNegative\
    \ = positive diff negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff List(1L)\n        val positiveMinusNegativeMinusOneMinusOne = positiveMinusNegativeMinusOne\
    \ diff List(1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOne diff List(1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff List(1L, 1L, 1L,\
    \ 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff List(1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinus\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2174rj9l.scala:16:68 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mpositiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\e\
    [0m = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff List(\e[31m1L\e\
    [0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mpositiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2174rj9l.scala:17:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mpositiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\e[0m = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(\e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e\
    [0m, \e[31m1L\e[0m, \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mpositiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2174rj9l.scala:18:92\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mpositiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff List(\e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e\
    [0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m, \e[31m1L\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) {\n            None\n        } else if (negative.isEmpty)\
    \ {\n            Some(positive.min)\n        } else {\n            Some(negative.max)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ew2273j.scala:13:12\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            None\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    None.type\n\
    \e[31m   |\e[0m            Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ew2273j.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            Some(positive.min)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Some[Long]\n\
    \e[31m   |\e[0m            Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ew2273j.scala:17:16 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Some(negative.max)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Some[Long]\n\
    \e[31m   |\e[0m            Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp42i3zeq5.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min.toLong)\n\
    \        else if (positive.isEmpty) Some(negative.min.toLong)\n        else (negative.min.toLong,\
    \ positive.min.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wz0qgbg.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4wz0qgbg.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min.toLong)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Some[Long]\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wz0qgbg.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.min.toLong)\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  Found:    Some[Long]\n\e[31m   |\e[0m     \
    \                             Required: (Option[Long], Option[Long])\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wz0qgbg.scala:15:27 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min.toLong, positive.min.toLong)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \             Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wz0qgbg.scala:15:48\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e"
  stdout: ''
  timestamp: 1660028797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        val maxSmallest\
    \ = maxNegative min minPositive\n        val minLargest = maxPositive max maxNegative\n\
    \        (maxSmallest, minLargest)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4tm_op1.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminLargest\e[0m = maxPositive\
    \ max maxNegative\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: maxPositive\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx4tm_op1.scala:16:9 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        (maxSmallest, minLargest)\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:    (maxSmallest :\
    \ Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty || positive.isEmpty)\
    \ Some(None)\n        else (negative.maxOption, positive.minOption)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5ylkxnc.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5ylkxnc.scala:13:59 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty ||\
    \ positive.isEmpty) Some(None)\n\e[31m\e[31m   |\e[0m                        \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Found:    Some[None.type]\n\e[31m   |\e[0m             \
    \                     Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val minNegative\
    \ = negatives.min\n        val maxPositive = positives.max\n        (minNegative,\
    \ maxPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbwk8rb_7.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (minNegative, maxPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (minNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbwk8rb_7.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (minNegative, maxPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (maxPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp173vww6r.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp173vww6r.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp173vww6r.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        (Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.largestSmallestIntegers(tmpge1qg8j7.scala:14)\n\tat Problem$.main(tmpge1qg8j7.scala:19)\n\
    \tat Problem.main(tmpge1qg8j7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ {\n            (None, None)\n        } else if (posInts.isEmpty) {\n       \
    \     (Some(negInts.min), None)\n        } else {\n            (Some(negInts.min),\
    \ Some(posInts.max))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltm6ybu6.scala:21)\n\tat Problem.main(tmpltm6ybu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        val a = negative.max\n\
    \        val b = positive.min\n        if (a.isEmpty && b.isEmpty) None else (a,\
    \ b)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp57vtzgz7.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (a.isEmpty && b.isEmpty) None \e\
    [33melse\e[0m (a, b)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value isEmpty is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp57vtzgz7.scala:14:36 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (a.isEmpty && b.isEmpty) None \e[33melse\e\
    [0m (a, b)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    None.type\n\e[31m \
    \  |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57vtzgz7.scala:14:47\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (a.isEmpty\
    \ && b.isEmpty) None \e[33melse\e[0m (a, b)\n\e[31m\e[31m   |\e[0m           \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                              Found:    (a : Long)\n\e[31m   |\e[0m         \
    \                                      Required: Option[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57vtzgz7.scala:14:50 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (a.isEmpty && b.isEmpty) None \e\
    [33melse\e[0m (a, b)\n\e[31m\e[31m   |\e[0m                                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \             Found:    (b : Long)\n\e[31m   |\e[0m                          \
    \                        Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpueycz77n.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpueycz77n.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpueycz77n.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x < 0)\n        val negative = lst.filter(x => x >= 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty) None\n        else if (positive.isEmpty) Some(negative.min)\n\
    \        else if (negative.isEmpty) Some(positive.max)\n        else (positive.max,\
    \ negative.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_an7w3jv.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (positive.isEmpty\
    \ && negative.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_an7w3jv.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positive.isEmpty) Some(negative.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_an7w3jv.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (negative.isEmpty) Some(positive.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_an7w3jv.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (positive.max, negative.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_an7w3jv.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (positive.max,\
    \ negative."
  stdout: ''
  timestamp: 1660028799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg8a252e.scala:22)\n\tat Problem.main(tmpjg8a252e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuuqps7nj.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ {\n            (None, None)\n        } else if (positives.isEmpty) {\n     \
    \       (Some(negatives.min), None)\n        } else {\n            (Some(negatives.min),\
    \ Some(positives.max))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbndr_1hu.scala:21)\n\tat Problem.main(tmpbndr_1hu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        val maxNegative = negative.max\n\
    \        val minPositive = positive.min\n        (maxNegative, minPositive)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja41hv3c.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpja41hv3c.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuuqps7nj.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else {\n           \
    \ val maxNegative = negatives.max\n            val minPositive = positives.min\n\
    \            (Some(maxNegative), Some(minPositive))\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcj8i0vl5.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcj8i0vl5.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), Some(positive.max))\n        else if (positive.isEmpty)\n\
    \            (Some(negative.min), Some(negative.max))\n        else\n        \
    \    (Some(negative.min), Some(negative.max))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xrg95i3.scala:22)\n\tat Problem.main(tmp1xrg95i3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpioazzenw.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdb5jvue.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwdb5jvue.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdb5jvue.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ydolmoi.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ None\n        else if (posInts.isEmpty) None\n        else (negInts.max, posInts.min)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:12:29\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    None.type\n\e[31m   |\e[0m    \
    \                         Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:13:34 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (posInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:14:14\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m (negInts.max,\
    \ posInts.min)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m              Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvlk5vn96.scala:14:27\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m (negInts.max,\
    \ posInts.min)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m\
    \                           Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp42i3zeq5.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp42i3zeq5.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuuqps7nj.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuuqps7nj.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpop1fwrn3.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpop1fwrn3.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        val maxNegative = negatives.max\n\
    \        val minPositive = positives.min\n        (maxNegative, minPositive)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8_wh_tz.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8_wh_tz.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapxf960w.scala:22)\n\tat Problem.main(tmpapxf960w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5je1vro.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg8a252e.scala:22)\n\tat Problem.main(tmpjg8a252e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje5ddshp.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpje5ddshp.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje5ddshp.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ {\n            (None, None)\n        } else if (posInts.isEmpty) {\n       \
    \     (Some(negInts.min), None)\n        } else {\n            (Some(negInts.min),\
    \ Some(posInts.max))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltm6ybu6.scala:21)\n\tat Problem.main(tmpltm6ybu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnkpmr29u.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsori7_.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsori7_.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnkpmr29u.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.max))\n        else\n            (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwza3wi0.scala:22)\n\tat Problem.main(tmpiwza3wi0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        val a = negative.max\n\
    \        val b = positive.min\n        (a.toOption, b.toOption)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4pj10soy.scala:14:11 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (a.toOption, b.toOption)\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value toOption is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4pj10soy.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (a.toOption, b.toOption)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  value toOption is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Option(negative.max), Option(positive.min))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxmbjq0_6.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Option(negative.max), Option(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpioazzenw.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some(maxNegative, minPositive)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpop8jtx8l.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val maxNegative = negatives.max\n        val minPositive = positives.min\n\
    \        Some((maxNegative, minPositive))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz4s5tv2.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some((maxNegative, minPositive))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkm3niajl.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm3niajl.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqi2k2qq.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsf_h402c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapxf960w.scala:22)\n\tat Problem.main(tmpapxf960w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        val maxNegative\
    \ = negatives.max\n        val minPositive = positives.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8cp9k1n.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val positiveMinusNegative\
    \ = positive diff negative\n        val positiveMinusNegativeMinusOne = positiveMinusNegative\
    \ diff (negative diff 1)\n        val positiveMinusNegativeMinusOneMinusOne =\
    \ positiveMinusNegativeMinusOne diff (negativeMinusNegative diff 1)\n        val\
    \ positiveMinusNegativeMinusOneMinusOneMinusOne = positiveMinusNegativeMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOne diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne diff (negativeMinusNegativeMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOne diff (negativeMinusNegativeMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOne diff (negativeMinusNegativeMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ diff 1)\n        val positiveMinusNegativeMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = positiveMinusNegativeMinusOneMinusOneMinusOne\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeh0fyyl0.scala:13:86\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mpositiveMinusNegativeMinusOne\e\
    [0m = positiveMinusNegative diff (negative diff \e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                                   \
    \ Required: scala.collection.Seq[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpeh0fyyl0.scala:14:88 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mpositiveMinusNegativeMinusOneMinusOne\e\
    [0m = positiveMinusNegativeMinusOne diff (negativeMinusNegative diff \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                                      ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                        Not found: negativeMinusNegative\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeh0fyyl0.scala:15:104\
    \ -----------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpositiveMinusNegativeMinusOneMinusOneMinusOne\e[0m = positiveMinusNegativeMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOne diff \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: negativeMinusNegativeMinusOne\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeh0fyyl0.scala:16:120\
    \ -----------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mpositiveMinusNegativeMinusOneMinusOneMinusOneMinusOne\e[0m = positiveMinusNegativeMinusOneMinusOneMinusOne\
    \ diff (negativeMinusNegativeMinusOneMinus"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5je1vro.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(_\
    \ < 0)\n        val posInts = lst.filter(_ > 0)\n        if (negInts.isEmpty)\
    \ None\n        else if (posInts.isEmpty) None\n        else {\n            val\
    \ negMax = negInts.max\n            val posMin = posInts.min\n            (Some(negMax),\
    \ Some(posMin))\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjwyd5anx.scala:12:29\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             Found:    None.type\n\e[31m   |\e[0m    \
    \                         Required: (Option[Long], Option[Long])\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjwyd5anx.scala:13:34 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (posInts.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdb5jvue.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwdb5jvue.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdb5jvue.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsf_h402c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp22pcebfm.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22pcebfm.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg8a252e.scala:22)\n\tat Problem.main(tmpjg8a252e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnkpmr29u.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(x\
    \ => x < 0)\n        val posInts = lst.filter(x => x >= 0)\n        val maxInts\
    \ = negInts.maxBy(x => x)\n        val minInts = posInts.minBy(x => x)\n     \
    \   (maxInts, minInts)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpit0tk3ln.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxInts, minInts)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:   \
    \ (maxInts : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpit0tk3ln.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (maxInts, minInts)\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (minInts\
    \ : Long)\n\e[31m   |\e[0m                  Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdb5jvue.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwdb5jvue.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdb5jvue.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpam7f91fi.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x < 0)\n        val negative = lst.filter(x => x >= 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty) None\n        else if (positive.isEmpty) Some(negative.min)\n\
    \        else if (negative.isEmpty) Some(positive.max)\n        else (Some(positive.max),\
    \ Some(negative.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxifirl2s.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (positive.isEmpty\
    \ && negative.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxifirl2s.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positive.isEmpty) Some(negative.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxifirl2s.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (negative.isEmpty) Some(positive.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val largest = negatives.max\n        val smallest = positives.min\n \
    \       Some(largest, smallest)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphm6cjsix.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(largest, smallest)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long],\
    \ Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsf_h402c.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp173vww6r.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp173vww6r.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp173vww6r.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.minOption)\n\
    \        else if (positive.isEmpty) Some(negative.maxOption)\n        else (negative.maxOption,\
    \ positive.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje5ddshp.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpje5ddshp.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje5ddshp.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ydolmoi.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(_\
    \ < 0)\n        val positives = lst.filter(_ > 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val max = negatives.max\n        val min = positives.min\n        Some(Some(max),\
    \ Some(min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw02kso20.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Some(max), Some(min))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0m(\e[1m\e[31mSome\e[0m[Long],\
    \ \e[1m\e[31mSome\e[0m[Long])\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required:\
    \ (\e[1m\e[32mOption\e[0m[Long], \e[1m\e[32mOption\e[0m[Long])\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpa5je1vro.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5je1vro.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjg8a252e.scala:22)\n\tat Problem.main(tmpjg8a252e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        val a = negative.max\n\
    \        val b = positive.min\n        (a.toOption, b.toOption)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_t1uiaxw.scala:14:11 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (a.toOption, b.toOption)\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value toOption is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_t1uiaxw.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (a.toOption, b.toOption)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  value toOption is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val maxNegative\
    \ = negative.max\n        val minPositive = positive.min\n        (maxNegative,\
    \ minPositive)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuayb8p92.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (maxNegative : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuayb8p92.scala:14:22\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxNegative, minPositive)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Found:    (minPositive : Long)\n\e[31m   |\e[0m        \
    \              Required: Option[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) {\n            (None, None)\n        } else if (negative.isEmpty)\
    \ {\n            (Some(positive.min), None)\n        } else if (positive.isEmpty)\
    \ {\n            (None, Some(negative.min))\n        } else {\n            (Some(negative.min),\
    \ Some(positive.max))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None), Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3517wx8o.scala:23)\n\tat Problem.main(tmp3517wx8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(x\
    \ => x < 0)\n        val posInts = lst.filter(x => x >= 0)\n        if (negInts.isEmpty)\
    \ {\n            return (None, None)\n        }\n        if (posInts.isEmpty)\
    \ {\n            return (Some(negInts.min), None)\n        }\n        return (Some(negInts.min),\
    \ Some(posInts.max))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6upaak05.scala:21)\n\tat Problem.main(tmp6upaak05.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        if (positive.isEmpty\
    \ && negative.isEmpty) None\n        else if (positive.isEmpty) Some(negative.minOption)\n\
    \        else if (negative.isEmpty) Some(positive.maxOption)\n        else (positive.maxOption,\
    \ negative.minOption)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpj2ylnd.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (positive.isEmpty\
    \ && negative.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbpj2ylnd.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positive.isEmpty) Some(negative.minOption)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mSome\e\
    [0m[Option[Long]\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                           \
    \       Required: \e[1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e\
    [1m\e[32m]\e[0m\e[1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpj2ylnd.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (negative.isEmpty) Some(positive.maxOption)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                Found:    \e[1m\e[31mSome\e[0m[Option[Long]\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                  Required: \e\
    [1m\e[32m(\e[0m\e[1m\e[32mOption\e[0m[\e[1m\e[32mLong\e[0m\e[1m\e[32m]\e[0m\e\
    [1m\e[32m,\e[0m\e[1m\e[32m \e[0mOption[Long]\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.max))\n        else\n            (Some(negative.max),\
    \ Some(positive.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwza3wi0.scala:22)\n\tat Problem.main(tmpiwza3wi0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpioazzenw.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpioazzenw.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7da4swwy.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7da4swwy.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqi2k2qq.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val a = negatives.max\n        val b = positives.min\n        Some(Tuple2(a,\
    \ b))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpomjj3jf8.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Tuple2(a, b))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.max,\
    \ positive.min)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpnkpmr29u.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max, positive.min)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnkpmr29u.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.max,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(x\
    \ => x >= 0)\n        val negative = lst.filter(x => x < 0)\n        val a = negative.max\n\
    \        val b = positive.min\n        (a.toOption, b.toOption)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzyhlf3f.scala:14:11 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (a.toOption, b.toOption)\n\e[31m\e[31m   |\e\
    [0m         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value toOption is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzyhlf3f.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (a.toOption, b.toOption)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  value toOption is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val positive = lst.filter(_\
    \ > 0)\n        val negative = lst.filter(_ < 0)\n        val positiveMin = positive.min\n\
    \        val positiveMax = positive.max\n        val negativeMin = negative.min\n\
    \        val negativeMax = negative.max\n        val positiveMinOrNone = positiveMin\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val positiveMaxOrNone = positiveMax match {\n            case\
    \ Some(x) => Some(x)\n            case None => None\n        }\n        val negativeMinOrNone\
    \ = negativeMin match {\n            case Some(x) => Some(x)\n            case\
    \ None => None\n        }\n        val negativeMaxOrNone = negativeMax match {\n\
    \            case Some(x) => Some(x)\n            case None => None\n        }\n\
    \        val positiveOrNone = positiveMinOrNone match {\n            case Some(x)\
    \ => Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMaxOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMinOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMaxOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMinOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMaxOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMinOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMaxOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMinOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n        val positiveOrNone\
    \ = positiveMaxOrNone match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }\n        val negativeOrNone = negativeMinOrNone\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }\n        val negativeOrNone = negativeMaxOrNone match {\n         \
    \   case Some(x) => Some(x)\n            case None => None\n        }\n      \
    \  val positiveOrNone = positiveMinOrNone match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphq8e0hfh.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mpositiveOrNone\e[0m = positiveMaxOrNone\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mpositiveOrNone\
    \ is already defined as \e[33mvalue\e[0m \e[35mpositiveOrNone\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m37 |\e[0m            \e[33mcase\e[0m Some(x)\
    \ => Some(x)\n\e[31m38 |\e[0m            \e[33mcase\e[0m None => None\n\e[31m39\
    \ |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphq8e0hfh.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnegativeOrNone\e[0m = negativeMaxOrNone \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0mnegativeOrNone is already defined as\
    \ \e[33mvalue\e[0m \e[35mnegativeOrNone\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m45 |\e[0m            \e[33mcase\e[0m Some(x) => Some(x)\n\e[31m46 |\e[0m\
    \            \e[33mcase\e[0m None => None\n\e[31m47 |\e[0m        }\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphq8e0hfh.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mpositiveOrNone\e[0m = positiveMinOrNone\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mpositiveOrNone\
    \ is already defined as \e[33mvalue\e[0m \e[35mpositiveOrNone\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m49 |\e[0m            \e[33mcase\e[0m Some(x)\
    \ => Some(x)\n\e[31m50 |\e[0m            \e[33mcase\e[0m None => None\n\e[31m51\
    \ |\e[0m        }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphq8e0hfh.scala:52:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m\
    \ \e[36mpositiveOrNone\e[0m = positiveMaxOrNone \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0mpositiveOrNone is already defined as\
    \ \e[33mvalue\e[0m \e[35mpositiveOrNone\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ tha"
  stdout: ''
  timestamp: 1660028809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Option(negatives.max),\
    \ Option(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqfulzgx.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqfulzgx.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negInts = lst.filter(x\
    \ => x < 0)\n        val posInts = lst.filter(x => x >= 0)\n        val maxInt\
    \ = negInts.max\n        val minInt = posInts.min\n        (maxInt, minInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoh9xoul.scala:14:9\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        (maxInt, minInt)\n\e\
    [31m\e[31m   |\e[0m         ^^^^^^\e[0m\n\e[31m   |\e[0m         Found:    (maxInt\
    \ : Long)\n\e[31m   |\e[0m         Required: Option[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoh9xoul.scala:14:17 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        (maxInt, minInt)\n\e[31m\e[31m   |\e[0m     \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    (minInt :\
    \ Long)\n\e[31m   |\e[0m                 Required: Option[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(_\
    \ < 0)\n        val positive = lst.filter(_ > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min)\n\
    \        else if (positive.isEmpty) Some(negative.max)\n        else (negative.min,\
    \ positive.max)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo5eafub4.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Found:    Some[Long]\n\e[31m\
    \   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.max)\n\e[31m\e[31m   |\e[0m             \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Some[Long]\n\e[31m   |\e[0m                   \
    \               Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min, positive.max)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \      Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo5eafub4.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min,\
    \ positive."
  stdout: ''
  timestamp: 1660028771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x >= 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None else (Some(negative.max), Some(positive.min))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpulw4_vwa.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None \e[33melse\e[0m (Some(negative.max), Some(positive.min))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    None.type\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ Some(None) else None\n        if (positives.isEmpty) Some(None) else None\n\
    \        val a = negatives.max\n        val b = positives.min\n        Some(Tuple2(a,\
    \ b))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpomjj3jf8.scala:16:12\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Some(Tuple2(a, b))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Some[(Long, Long)]\n\e[31m   |\e[0m        Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty)\n            (None, None)\n        else if (negative.isEmpty)\n\
    \            (Some(positive.min), None)\n        else if (positive.isEmpty)\n\
    \            (None, Some(negative.min))\n        else\n            (Some(negative.min),\
    \ Some(positive.max))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw1e8e5_b.scala:22)\n\tat Problem.main(tmpw1e8e5_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negative = lst.filter(x\
    \ => x < 0)\n        val positive = lst.filter(x => x > 0)\n        if (negative.isEmpty\
    \ && positive.isEmpty) None\n        else if (negative.isEmpty) Some(positive.min.toLong)\n\
    \        else if (positive.isEmpty) Some(negative.min.toLong)\n        else (negative.min.toLong,\
    \ positive.min.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefge9mhx.scala:12:50\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negative.isEmpty\
    \ && positive.isEmpty) None\n\e[31m\e[31m   |\e[0m                           \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                           \
    \       Found:    None.type\n\e[31m   |\e[0m                                 \
    \ Required: (Option[Long], Option[Long])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpefge9mhx.scala:13:39 --------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (negative.isEmpty) Some(positive.min.toLong)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    Some[Long]\n\e\
    [31m   |\e[0m                                  Required: (Option[Long], Option[Long])\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefge9mhx.scala:14:39\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (positive.isEmpty) Some(negative.min.toLong)\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  Found:    Some[Long]\n\e[31m   |\e[0m     \
    \                             Required: (Option[Long], Option[Long])\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefge9mhx.scala:15:27 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (negative.min.toLong, positive.min.toLong)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \             Found:    Long\n\e[31m   |\e[0m              Required: Option[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpefge9mhx.scala:15:48\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e"
  stdout: ''
  timestamp: 1660028809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    //\
    \ the largest of negative integers, and 'b' is the smallest\n    // of positive\
    \ integers in a list.\n    // If there is no negative or positive integers, return\
    \ them as None.\n    // Examples:\n    def largestSmallestIntegers(lst : List[Long])\
    \ : Tuple2[Option[Long], Option[Long]] = {\n        val negatives = lst.filter(x\
    \ => x < 0)\n        val positives = lst.filter(x => x >= 0)\n        if (negatives.isEmpty)\
    \ None\n        else if (positives.isEmpty) None\n        else (Some(negatives.max),\
    \ Some(positives.min))\n    }\n    def main(args: Array[String]) = {\n    assert(largestSmallestIntegers((List[Long](2l.toLong,\
    \ 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 0l.toLong))).equals((Some(None),\
    \ Some(1l))));\n    assert(largestSmallestIntegers((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -2l.toLong))).equals((-2l, 1l)));\n\
    \    assert(largestSmallestIntegers((List[Long](4l.toLong, 5l.toLong, 3l.toLong,\
    \ 6l.toLong, 2l.toLong, 7l.toLong, -7l.toLong))).equals((-7l, 2l)));\n    assert(largestSmallestIntegers((List[Long](7l.toLong,\
    \ 3l.toLong, 8l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 5l.toLong, -9l.toLong))).equals((-9l,\
    \ 2l)));\n    assert(largestSmallestIntegers((List[Long]())).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](0l.toLong))).equals((Some(None),\
    \ Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong, -3l.toLong,\
    \ -5l.toLong, -6l.toLong))).equals((Some(-1l), Some(None))));\n    assert(largestSmallestIntegers((List[Long](-1l.toLong,\
    \ -3l.toLong, -5l.toLong, -6l.toLong, 0l.toLong))).equals((Some(-1l), Some(None))));\n\
    \    assert(largestSmallestIntegers((List[Long](-6l.toLong, -4l.toLong, -4l.toLong,\
    \ -3l.toLong, 1l.toLong))).equals((-3l, 1l)));\n    assert(largestSmallestIntegers((List[Long](-6l.toLong,\
    \ -4l.toLong, -4l.toLong, -3l.toLong, -100l.toLong, 1l.toLong))).equals((-3l,\
    \ 1l)));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgy0rg28.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (negatives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                               ^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    None.type\n\e[31m   |\e[0m\
    \                               Required: (Option[Long], Option[Long])\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjgy0rg28.scala:13:36 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (positives.isEmpty)\
    \ None\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Found:    None.type\n\e[31m   |\e\
    [0m                                  Required: (Option[Long], Option[Long])\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028771
