name: HumanEval_44_change_base
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Change numerical base of input number x to base.\n    // return string representation\
  \ after the conversion.\n    // base numbers are less than 10.\n    def changeBase(x\
  \ : Long, base : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
  \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n\
  \    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
  \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
  )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
  \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
  \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
  \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
  \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
completions: ["        val digits = x.toString.reverse\n        val digitCount = digits.length\n\
    \        val baseDigitCount = base.toString.reverse.length\n        val digitBase\
    \ = digits.length / baseDigitCount\n        val digitBaseDigits = digitBase.toString.reverse\n\
    \        val digitBaseDigitCount = digitBaseDigits.length\n        val digitBaseDigitBase\
    \ = digitBaseDigits.length / digitBaseDigitCount\n        val digitBaseDigitBaseDigits\
    \ = digitBaseDigitBase.toString.reverse\n        val digitBaseDigitBaseDigitCount\
    \ = digitBaseDigitBaseDigits.length\n        val digitBaseDigitBaseDigitBase =\
    \ digitBaseDigitBaseDigits.length / digitBaseDigitBaseDigitCount\n        val\
    \ digitBaseDigitBaseDigitBaseDigits = digitBaseDigitBaseDigitBase.toString.reverse\n\
    \        val digitBaseDigitBaseDigitBaseDigitCount = digitBaseDigitBaseDigitBaseDigits.length\n\
    \        val digitBaseDigitBaseDigitBaseDigitBase = digitBaseDigitBaseDigitBaseDigits.length\
    \ / digitBaseDigitBaseDigitBaseDigitCount\n        val digitBaseDigitBaseDigitBaseDigitBaseDigits\
    \ = digitBaseDigitBaseDigitBaseDigitBase.toString.reverse\n        val digitBaseDigitBaseDigitBaseDigitBaseDigitCount\
    \ = digitBaseDigitBaseDigitBaseDigitBaseDigitBase.toString.reverse.length\n  \
    \      val digitBaseDigitBaseDigitBaseDigitBaseDigitBase = digitBaseDigitBaseDigitBaseDigitBaseDigitBase.toString.reverse.length\
    \ / digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitCount\n        val digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigits\
    \ = digitBaseDigitBaseDigitBaseDigitBaseDigitBase.toString.reverse.length / digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitCount\n\
    \        val digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigits = digitBaseDigitBaseDigitBaseDigitBaseDigitBase.toString.reverse.length\
    \ / digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitCount\n\
    \        val digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigits = digitBaseDigitBaseDigitBaseDigitBaseDigitBase.toString.reverse.length\
    \ / digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitCount\n\
    \        val digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBases\
    \ = digitBaseDigitBaseDigitBaseDigitBaseDigitBase.toString.reverse.length / digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitCount\n\
    \        val digitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBaseDigitBases\
    \ = digitBaseDigitBaseDigitBaseDigit", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val newDigits = digits.map(x => x.reverse).map(x => x.reverse).mkString(\"\
    \")\n        val newBase = digits.map(x => x.reverse).map(x => x.reverse).mkString(\"\
    \")\n        val newX = x.toString.reverse.grouped(base).map(x => x.reverse).mkString(\"\
    \")\n        val newBaseString = newBase.reverse.grouped(base).map(x => x.reverse).mkString(\"\
    \")\n        val newBaseString2 = newBaseString.reverse.grouped(base).map(x =>\
    \ x.reverse).mkString(\"\")\n        val newBaseString3 = newBaseString2.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString4 = newBaseString3.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString5 = newBaseString4.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString6 = newBaseString5.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString7 = newBaseString6.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString8 = newBaseString7.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString9 = newBaseString8.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString10 = newBaseString9.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString11 = newBaseString10.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString12 = newBaseString11.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString13 = newBaseString12.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString14 = newBaseString13.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString15 = newBaseString14.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n        val newBaseString16 = newBaseString15.reverse.grouped(base).map(x\
    \ => x.reverse).mkString(\"\")\n", "        var result = \"\"\n        var remainder\
    \ = x % base\n        while(x > 0) {\n            result += x.toString.charAt(0)\n\
    \            x /= base\n        }\n        if(remainder > 0) {\n            result\
    \ += remainder.toString.charAt(0)\n        }\n        return result", "      \
    \  val digits = x.toString.reverse.grouped(base).toList\n        val result =\
    \ digits.reverse.mkString(\"\")\n        val baseString = if (base < 10) \"0\"\
    \ + base.toString\n        else base.toString\n        val result = baseString\
    \ + result\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBase = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = digits.reverse.grouped(newBase.toInt).map(_.toString.reverse).mkString\n\
    \        newDigits", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + if (digits.size\
    \ == base.toInt) \"\" else \".\"", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ base.pow(digits.size)\n        val resultString = result.pow(baseString.toInt)\n\
    \        resultString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newBase = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = digits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigit = newDigit.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val newDigits = newDigits.reverse.grouped(base.toInt).map(_.toString.reverse",
  "        val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val baseIndex = bases.indexOf(\"\
    10\")\n        val baseDigit = bases(baseIndex)\n        val baseDigits = baseDigit.length\n\
    \        val baseDigitCount = baseDigits.length\n        val baseDigitCount =\
    \ baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n      \
    \  val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount\
    \ - 1\n        val baseDigitCount = baseDigitCount - 1\n        val baseDigitCount\
    \ = baseDigitCount - 1\n        val baseDigitCount = baseDigitCount - 1\n    \
    \    ", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = digits(0)\n        digits.tail.foreach(x => result = result\
    \ + x.toString.reverse)\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        digits.tail.foreach(x => result += (base\
    \ * x))\n        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (x <\
    \ base) \"\" else \"\" + base)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0) + (digits(1) / base).toString.reverse\n      \
    \  result + (digits(2) % base).toString.reverse", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + if (digits.size\
    \ == base) \"\" else \".\"", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse.mkString(\"\
    \"))", '        val bases = List("10", "11", "12", "13", "14", "15", "16", "17",
    "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
    "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43",
    "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56",
    "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69",
    "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82",
    "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95",
    "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107",
    "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119",
    "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131",
    "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143",
    "144", "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155",
    "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167",
    "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179",
    "180", "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191",
    "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203",
    "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215",
    "216", "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227",
    "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239",
    "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251",
    "252", "253", "254", "255", "256", "257", "258", "259", "260", "261", "26', " \
    \       var result : String = \"\"\n        var remainder : Long = 0\n       \
    \ var quotient : Long = 0\n        while(quotient != 0) {\n            remainder\
    \ = x % base\n            x = x / base\n            quotient = x % base\n    \
    \        result += remainder.toString\n        }\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n        val\
    \ result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")( (acc, digit) => acc + digit.toString)\n\
    \        result + digits.reverse.foldLeft(\"\")( (acc, digit) => acc + digit.toString)",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(base)\n        }\n        result", "        val bases\
    \ = List(10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000)\n\
    \        val baseIndex = bases.indexOf(base)\n        val remainder = x % base\n\
    \        val newBase = bases(baseIndex + 1)\n        val newX = remainder + newBase\n\
    \        val newBaseString = newBase.toString\n        val newXString = newX.toString\n\
    \        val newBaseStringLength = newBaseString.length\n        val newXStringLength\
    \ = newXString.length\n        val newBaseStringLength = newBaseStringLength +\
    \ newXStringLength\n        val newBaseStringLength = newBaseStringLength + newXStringLength\n\
    \        val newBaseStringLength = newBaseStringLength + newXStringLength\n  \
    \      val newBaseStringLength = newBaseStringLength + newXStringLength\n    \
    \    val newBaseStringLength = newBaseStringLength + newXStringLength\n      \
    \  val newBaseStringLength = newBaseStringLength + newXStringLength\n        val\
    \ newBaseStringLength = newBaseStringLength + newXStringLength\n        val newBaseStringLength\
    \ = newBaseStringLength + newXStringLength\n        val newBaseStringLength =\
    \ newBaseStringLength + newXStringLength\n        val newBaseStringLength = newBaseStringLength\
    \ + newXStringLength\n        val newBaseStringLength = newBaseStringLength +\
    \ newXStringLength\n        val newBaseStringLength = newBaseStringLength + newXStringLength\n\
    \        val newBaseStringLength = newBaseStringLength + newXStringLength\n  \
    \      val newBaseStringLength = newBaseStringLength + newXStringLength\n    \
    \    val newBaseStringLength = newBaseStringLength + newXStringLength\n      \
    \  val newBaseStringLength = newBaseStringLength + newXStringLength\n        val\
    \ newBaseStringLength = newBaseStringLength + newXStringLength\n        val newBaseStringLength\
    \ = newBaseStringLength + newXStringLength\n        val newBaseStringLength =\
    \ newBaseStringLength + newXStringLength\n        val newBaseStringLength = newBaseStringLength\
    \ + newXStringLength\n        val newBaseStringLength = newBaseStringLength +\
    \ newXStringLength\n        val newBaseStringLength = newBaseStringLength + newXStringLength\n\
    \        val newBaseStringLength = newBaseStringLength + newXStringLength\n  \
    \      val newBaseStringLength = newBaseStringLength + newXStringLength\n    \
    \    val newBaseStringLength = newBaseStringLength + newXStringLength\n      \
    \  val newBaseStringLength = newBaseStringLength + ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" + base.toString\n        else base.toString\n        val result\
    \ = if (result == \"0\") \"0\"\n        else result\n        result + baseString",
  "        val digits = x.toString.reverse\n        val digitArray = digits.toCharArray\n\
    \        val digitArrayLength = digitArray.length\n        val digitArrayCopy\
    \ = digitArray.clone()\n        val digitArrayCopyLength = digitArrayCopy.length\n\
    \        val digitArrayCopyReverse = digitArrayCopy.reverse\n        val digitArrayCopyReverseLength\
    \ = digitArrayCopyReverse.length\n        val digitArrayCopyReverseReverse = digitArrayCopyReverse.reverse\n\
    \        val digitArrayCopyReverseReverseLength = digitArrayCopyReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverse = digitArrayCopyReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseLength = digitArrayCopyReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = ", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        val baseString = if (base <\
    \ 10) \"0\" + base.toString else base.toString\n        result + baseString",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = \"\"\n        for(i <- 0 until digits.size) {\n            result += digits(i).mkString(\"\
    \")\n        }\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.map(_.toString).reverse.mkString(\"\")\n        result\
    \ + \" \"", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        val resultString = if\
    \ (result.length < base.length) result + baseString else result\n        resultString",
  "        val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty) \"\"\
    \ else base.toString.reverse.grouped(base.toString.length).mkString(\"\"))", " \
    \       val digits = x.toString.reverse.grouped(base.toInt)\n        val result\
    \ = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.length)\n        \
    \    result += digits(i).mkString(\"\")\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val newDigits = digits.map(x\
    \ => x.toString.reverse.grouped(base).toList)\n        val newString = newDigits.map(x\
    \ => x.mkString(\"\")).reverse.mkString(\"\")\n        newString", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = \"\"\n\
    \        for (i <- 0 until digits.size) {\n            val digit = digits(i)\n\
    \            result += digits(i).drop(base).mkString(\"\")\n        }\n      \
    \  result", "        var result = \"\"\n        var remainder = x % base\n   \
    \     while(x > 0) {\n            result += (x % base).toChar\n            x /=\
    \ base\n        }\n        if(remainder > 0) {\n            result += remainder.toChar\n\
    \        }\n        result", "        var result = \"\"\n        var remainder\
    \ = x % base\n        while(x > 0) {\n            x /= base\n            result\
    \ += (x % base).toString\n        }\n        if(remainder != 0) {\n          \
    \  result += remainder.toString\n        }\n        return result", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = \"\"\n\
    \        for (i <- 0 until digits.size) {\n            result += digits(i).mkString(\"\
    \")\n        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = digits(0)\n        digits.tail.foreach(x => result += (x.toString.reverse.grouped(base.toInt).reverse.mkString(\"\
    \")))\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = \"\"\n        for( i <- 0 until digits.length ) {\n    \
    \        result += digits(i).mkString(\"\")\n        }\n        result", "   \
    \     val digits = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n     \
    \   val result = digits.foldLeft(\"\") { (result, digit) => result + digit.map(_.toString).reverse.mkString(\"\
    \") }\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val newDigits = digits.map(x => x.reverse).mkString(\"\")\n        newDigits",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result + baseString",
  "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n        val\
    \ result = \"\"\n        for(i <- 0 until digits.length)\n            result +=\
    \ digits(i).mkString(\"\") + \" \"\n        return result", "        val bases\
    \ = List(10, 8, 6, 4, 2, 1)\n        var result = \"\"\n        var remainder\
    \ = x % base\n        while(bases.contains(remainder)) {\n            result +=\
    \ (bases.indexOf(remainder) + 1) + \" \"\n            remainder = remainder /\
    \ base\n        }\n        result += (remainder + 1) + \" \"\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n        val\
    \ result = digits.foldLeft(\"\")(_ + _)\n        result + digits.last", "    \
    \    val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.size) {\n        \
    \    result += digits(i).reverse.mkString(\"\")\n        }\n        result", " \
    \       val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.size) {\n        \
    \    val digit = digits(i)\n            val baseIndex = digits.indexOf(0)\n  \
    \          val digitIndex = digits.indexOf(digit)\n            val baseChar =\
    \ bases(baseIndex)\n            val digitChar = digits(digitIndex)\n         \
    \   result += baseChar + digitChar\n        }\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.mkString(\"\
    \")\n        val digit = digits.head\n        val newDigit = digit - base\n  \
    \      val newDigitString = newDigit.toString\n        val newDigitString = newDigitString.padTo(digits.length,\
    \ \"0\")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length).mkString(\"\")\n        val\
    \ newDigitString = newDigitString.reverse\n        val newDigitString = newDigitString.reverse.grouped(digits.length).mkString(\"\
    \")\n        val newDigitString = newDigitString.reverse\n        val newDigitString\
    \ = newDigitString.reverse.grouped(digits.length", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val rest = digits.tail\n        val restLength\
    \ = rest.length\n        val restBase = base - restLength\n        val restDigits\
    \ = rest.grouped(restBase).toList\n        restDigits.reverse.foldLeft(result){\
    \ (res, digit) => res + digit }", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = \"\"\n        for (i <- 0 until digits.length)\n       \
    \     result += digits(i).mkString(\"\")\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base) \"\
    \" else \"-\")", "        val bases = List(\"1\", \"10\", \"100\", \"1000\", \"\
    10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"\
    , \"10000000000\", \"100000000000\", \"1000000000000\", \"10000000000000\", \"\
    100000000000000\", \"1000000000000000\", \"10000000000000000\", \"100000000000000000\"\
    , \"1000000000000000000\")\n        val baseIndex = bases.indexOf(base.toString)\n\
    \        val baseDigit = bases.take(baseIndex).drop(baseIndex).mkString(\"\")\n\
    \        val digits = x.toString().split(\"\")\n        val digitIndex = digits.indexOf(x)\n\
    \        val digit = digits.take(digitIndex).drop(digitIndex).mkString(\"\")\n\
    \        val newDigit = baseDigit + digit\n        val newBase = bases.take(baseIndex\
    \ + 1).drop(baseIndex + 1).mkString(\"\")\n        val newBaseDigit = bases.take(baseIndex\
    \ + 1).drop(baseIndex + 1).mkString(\"\")\n        val newBaseDigits = newBaseDigit\
    \ + digit\n        val newBaseDigitIndex = newBaseDigits.indexOf(newBaseDigit)\n\
    \        val newBaseDigit = bases.take(newBaseDigitIndex).drop(newBaseDigitIndex).mkString(\"\
    \")\n        val newBaseDigits = newBaseDigit + digit\n        val newBaseDigitIndex\
    \ = newBaseDigits.indexOf(newBaseDigit)\n        val newBaseDigit = bases.take(newBaseDigitIndex).drop(newBaseDigitIndex).mkString(\"\
    \")\n        val newBaseDigits = newBaseDigit + digit\n        val newBaseDigitIndex\
    \ = newBaseDigits.indexOf(newBaseDigit)\n        val newBaseDigit = bases.take(newBaseDigitIndex).drop(newBaseDigitIndex).mkString(\"\
    \")\n        val newBaseDigits = newBaseDigit + digit\n        val newBaseDigitIndex\
    \ = newBaseDigits.indexOf(newBaseDigit)\n        val newBaseDigit = bases.take(newBaseDigitIndex).drop(newBaseDigitIndex).mkString(\"\
    \")\n        val newBaseDigits = newBaseDigit + digit\n        val newBaseDigitIndex\
    \ = newBaseDigits.indexOf(newBaseDigit)\n        val newBaseDigit = bases.take(newBaseDigitIndex).drop(newBaseDigitIndex).mkString(\"\
    \")\n        val newBaseDigits = newBaseDigit + digit\n        val newBaseDigitIndex\
    \ = newBaseDigits.indexOf(newBaseDigit)\n        val newBaseDigit = bases.take(newBaseDigitIndex).drop(newBaseDigitIndex).mkString(\"\
    \")\n        val newBase", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.size) {\n        \
    \    val digit = digits(i)\n            val digitString = digit.toString\n   \
    \         val digitBase = digitString.reverse.grouped(base).toList\n         \
    \   val digitBaseString = digitBase.reverse.mkString(\"\")\n            result\
    \ += digitBaseString\n        }\n        result", "        val bases = List(\"\
    1\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\"\
    , \"100000000\")\n        val baseIndex = bases.indexOf(base)\n        val digits\
    \ = x.toString.reverse.grouped(baseIndex.toInt).map(_.toInt)\n        val result\
    \ = digits.reverse.mkString(\"\")\n        val baseString = bases(baseIndex)\n\
    \        result + baseString", "        val bases = List(\"0\", \"1\", \"2\",\
    \ \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.size) {\n        \
    \    val digit = digits(i)\n            val baseIndex = digits.indexOf(i)\n  \
    \          val newBase = bases(baseIndex + base)\n            result += digit\
    \ + newBase\n        }\n        return result.reverse", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        val baseString = if (base < 10) \"0\"\
    \ + base.toString else base.toString\n        result + baseString", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = \"\"\n\
    \        for (i <- 0 until digits.size) {\n            result += digits(i).mkString(\"\
    \")\n        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head + digits.tail.mkString(\"\
    \")\n        result", "        val digits = x.toString.reverse\n        val digitArray\
    \ = digits.toCharArray\n        val newDigitArray = new Array[Char](digitArray.length)\n\
    \        val baseDigitArray = digitArray.filter(_ >= base)\n        val newBaseDigitArray\
    \ = new Array[Char](baseDigitArray.length)\n        var i = 0\n        while (i\
    \ < baseDigitArray.length) {\n            newBaseDigitArray(i) = baseDigitArray(i)\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < digitArray.length)\
    \ {\n            newDigitArray(j) = digitArray(j)\n            j += 1\n      \
    \  }\n        new String(newDigitArray.reverse)", "        val bases = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = x.toString.reverse.grouped(base).map(_.mkString).reverse\n        val\
    \ digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n\
    \        val digit = digits(0)\n        val digits = digit.grouped(base).map(_.mkString).reverse\n",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newBase = digits.takeWhile(_ != 0).reverse.mkString(\"\")\n     \
    \   val newDigits = digits.dropWhile(_ != 0).reverse.mkString(\"\")\n        val\
    \ newNumber = newBase + newDigits\n        newNumber", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \")(_ + _)\n        result + (if (digits.isEmpty) \"\" else \".\")", "       \
    \ val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n      \
    \  val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toChar)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.mkString(\"\
    \")\n        val baseString = if (base < 10) \"0\" + base.toString\n        else\
    \ base.toString\n        result + baseString", "        val bases = List(10, 2,\
    \ 8, 4, 16, 8, 4, 2, 10)\n        val result = \"\"\n        var remainder = x\
    \ % base\n        while(bases.contains(remainder)) {\n            result += (x\
    \ % base).toChar\n            x /= base\n            remainder = x % base\n  \
    \      }\n        result += (x % base).toChar\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val newBase = digits.reverse.foldLeft(base)\
    \ { (acc, digit) =>\n            digit * acc\n        }\n        digits.reverse.foldLeft(\"\
    \") { (acc, digit) =>\n            acc + (digit / newBase)\n        }", "    \
    \    val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty) \"\"\
    \ else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val bases = List(\"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\")\n  \
    \      val baseIndex = bases.indexOf(base)\n        val baseDigits = x % base\n\
    \        val baseDigit = baseDigits.toInt\n        val newBase = bases(baseIndex\
    \ + 1)\n        val newBaseDigits = newBase % base\n        val newBaseDigit =\
    \ baseDigits.toInt\n        val newBaseDigits = newBaseDigit + newBaseDigits\n\
    \        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits = newBaseDigit\
    \ + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits\
    \ = newBaseDigit + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n\
    \        val newBaseDigits = newBaseDigit + newBaseDigits\n        val newBaseDigit\
    \ = baseDigits.toInt\n        val newBaseDigits = newBaseDigit + newBaseDigits\n\
    \        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits = newBaseDigit\
    \ + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits\
    \ = newBaseDigit + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n\
    \        val newBaseDigits = newBaseDigit + newBaseDigits\n        val newBaseDigit\
    \ = baseDigits.toInt\n        val newBaseDigits = newBaseDigit + newBaseDigits\n\
    \        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits = newBaseDigit\
    \ + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits\
    \ = newBaseDigit + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n\
    \        val newBaseDigits = newBaseDigit + newBaseDigits\n        val newBaseDigit\
    \ = baseDigits.toInt\n        val newBaseDigits = newBaseDigit + newBaseDigits\n\
    \        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits = newBaseDigit\
    \ + newBaseDigits\n        val newBaseDigit = baseDigits.toInt\n        val newBaseDigits\
    \ = ", "        val digits = x.toString.reverse\n        val digits_length = digits.length\n\
    \        val digits_base10 = digits.reverse.grouped(base).toList.reverse\n   \
    \     val digits_base10_length = digits_base10.length\n        val digits_base10_length\
    \ = digits_base10_length / base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base10_length.toInt\n\
    \        val digits_base10_length = digits_base10_length + 1\n        val digits_base10_length\
    \ = digits_base10_length * base\n        val digits_base10_length = digits_base",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(base)\n        }\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits(0)\n        digits.tail.foreach(x => result = result + digits(base-x))\n\
    \        result", "        val digits = x.toString.reverse\n        val digitCount\
    \ = digits.length\n        val digitBase = digits.length.toString.toInt\n    \
    \    val digitBasePower = digitBase.toString.toInt\n        val digitBasePower2\
    \ = digitBasePower.toString.toInt\n        val digitBasePower3 = digitBasePower2.toString.toInt\n\
    \        val digitBasePower4 = digitBasePower3.toString.toInt\n        val digitBasePower5\
    \ = digitBasePower4.toString.toInt\n        val digitBasePower6 = digitBasePower5.toString.toInt\n\
    \        val digitBasePower7 = digitBasePower6.toString.toInt\n        val digitBasePower8\
    \ = digitBasePower7.toString.toInt\n        val digitBasePower9 = digitBasePower8.toString.toInt\n\
    \        val digitBasePower10 = digitBasePower9.toString.toInt\n        val digitBasePower11\
    \ = digitBasePower10.toString.toInt\n        val digitBasePower12 = digitBasePower11.toString.toInt\n\
    \        val digitBasePower13 = digitBasePower12.toString.toInt\n        val digitBasePower14\
    \ = digitBasePower13.toString.toInt\n        val digitBasePower15 = digitBasePower14.toString.toInt\n\
    \        val digitBasePower16 = digitBasePower15.toString.toInt\n        val digitBasePower17\
    \ = digitBasePower16.toString.toInt\n        val digitBasePower18 = digitBasePower17.toString.toInt\n\
    \        val digitBasePower19 = digitBasePower18.toString.toInt\n        val digitBasePower20\
    \ = digitBasePower19.toString.toInt\n        val digitBasePower21 = digitBasePower20.toString.toInt\n\
    \        val digitBasePower22 = digitBasePower21.toString.toInt\n        val digitBasePower23\
    \ = digitBasePower22.toString.toInt\n        val digitBasePower24 = digitBasePower23.toString.toInt\n\
    \        val digitBasePower25 = digitBasePower24.toString.toInt\n        val digitBasePower26\
    \ = digitBasePower25.toString.toInt\n        val digitBasePower27 = digitBasePower26.toString.toInt\n\
    \        val digitBasePower28 = digitBasePower27.toString.toInt\n        val digitBasePower29\
    \ = digitBasePower28.toString.toInt\n        val digitBasePower30 = digitBasePower29.toString.toInt\n\
    \        val digitBasePower31 = digitBasePower30.toString.toInt\n        val ",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newDigits = digits.map(d => if (d.length < base) d else d.padTo(base,\
    \ \"0\"))\n        val newString = newDigits.mkString(\"\")\n        newString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.length) result +=\
    \ digits(i).reverse.mkString(\"\")\n        result", "        val digits = x.toString.reverse\n\
    \        val digits_length = digits.length\n        val digits_length_min = digits_length\
    \ / 2\n        val digits_length_max = digits_length - digits_length_min\n   \
    \     val digits_length_max_minus_1 = digits_length_max - digits_length_min\n\
    \        val digits_length_max_minus_2 = digits_length_max_minus_1 - 1\n     \
    \   val digits_length_max_minus_3 = digits_length_max_minus_2 - 1\n        val\
    \ digits_length_max_minus_4 = digits_length_max_minus_3 - 1\n        val digits_length_max_minus_5\
    \ = digits_length_max_minus_4 - 1\n        val digits_length_max_minus_6 = digits_length_max_minus_5\
    \ - 1\n        val digits_length_max_minus_7 = digits_length_max_minus_6 - 1\n\
    \        val digits_length_max_minus_8 = digits_length_max_minus_7 - 1\n     \
    \   val digits_length_max_minus_9 = digits_length_max_minus_8 - 1\n        val\
    \ digits_length_max_minus_10 = digits_length_max_minus_9 - 1\n        val digits_length_max_minus_11\
    \ = digits_length_max_minus_10 - 1\n        val digits_length_max_minus_12 = digits_length_max_minus_11\
    \ - 1\n        val digits_length_max_minus_13 = digits_length_max_minus_12 - 1\n\
    \        val digits_length_max_minus_14 = digits_length_max_minus_13 - 1\n   \
    \     val digits_length_max_minus_15 = digits_length_max_minus_14 - 1\n      \
    \  val digits_length_max_minus_16 = digits_length_max_minus_15 - 1\n        val\
    \ digits_length_max_minus_17 = digits_length_max_minus_16 - 1\n        val digits_length_max_minus_18\
    \ = digits_length_max_minus_17 - 1\n        val digits_length_max_minus_19 = digits_length_max_minus_18\
    \ - 1\n        val digits_length_max_minus_20 = digits_length_max_minus_19 - 1\n\
    \        val digits_length_max_minus_21 = digits_length_max_minus_20 - 1\n   \
    \     val digits_length_max_minus_22 = digits_length_max_minus_21 - 1\n      \
    \  val digits_length_max_minus_23 = digits_length_max_minus_22 - 1\n        val\
    \ digits_length_max_minus_24 = digits_length_max_minus_23 - 1\n        val digits_length_max_minus_25\
    \ = digits_length_max_minus_24 - 1\n        val digits_length_", "        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.foldLeft(\"\
    \")(_ + _)\n        result + digits.reverse.takeWhile(_ < base).reverse.mkString(\"\
    \")", "        val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\")\n        val baseIndex = bases.indexOf(\"base\"\
    )\n        val baseInt = bases.indexOf(base)\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = bases.indexOf(base) + baseInt\n        val baseInt = bases.indexOf(base)\
    \ + baseInt\n        val baseInt = bases.indexOf(base) + baseInt\n        val\
    \ baseInt = ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = \"\"\n        for(i <- 0 until digits.length) result +=\
    \ digits(i).mkString(\"\")\n        result", "        val bases = List(\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        val result = result.mkString(\"\")\n        val bases = List(\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = result.grouped(base.toInt).map(_.mkString).reverse\n        val result\
    \ = bases.zip(digits).map { case (base, digit) => digit + base }\n        val\
    \ result = result.mkString(\"\")\n        result", "        val bases = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digits = x.toString.reverse.grouped(base).map(_.mkString).reverse\n        val\
    \ result = bases.zip(digits).map(x => x._1 + x._2).mkString(\"\")\n        result\
    \ + digits", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(base)\n        }\n        result", "        val digits\
    \ = x.toString.reverse\n        val digitLength = digits.length\n        val digitBase\
    \ = digits.reverse.map(_.toInt)\n        val digitBaseLength = digitBase.length\n\
    \        val digitBaseBase = digitBase.reverse.map(_.toInt)\n        val digitBaseBaseLength\
    \ = digitBaseBase.length\n        val digitBaseBaseBase = digitBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseLength = digitBaseBaseBase.length\n        val digitBaseBaseBaseBase\
    \ = digitBaseBaseBase.reverse.map(_.toInt)\n        val digitBaseBaseBaseBaseLength\
    \ = digitBaseBaseBaseBase.length\n        val digitBaseBaseBaseBaseBase = digitBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseLength = digitBaseBaseBaseBase.length\n    \
    \    val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val digitBaseBaseBaseBaseBaseBase = digitBaseBaseBaseBaseBaseBase.reverse.map(_.toInt)\n\
    \        val digitBaseBaseBaseBaseBaseLength = digitBaseBaseBaseBaseBaseBase.length\n\
    \        val ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.size) {\n        \
    \    result += digits(i).mkString(\"\")\n        }\n        result", "       \
    \ val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        for(i <- 0 until digits.length)\
    \ result.append(digits(i).mkString(\"\"))\n        result.reverse", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits match {\n            case Nil => \"\"\n           \
    \ case head :: tail => head.mkString(base) + changeBase(tail, base)\n        }\n\
    \        result", "        val digits = x.toString.reverse\n        val digitArray\
    \ = digits.toCharArray\n        val newDigitArray = digitArray.map(x => if (x\
    \ != '0') x else base)\n        val newDigits = newDigitArray.reverse\n      \
    \  val newString = newDigits.mkString\n        newString", "        val digits\
    \ = x.toString.reverse\n        val digitArray = digits.toCharArray\n        val\
    \ digitArrayLength = digitArray.length\n        val digitArrayCopy = digitArray.clone()\n\
    \        val digitArrayCopyLength = digitArrayCopy.length\n        val digitArrayCopyReverse\
    \ = digitArrayCopy.reverse\n        val digitArrayCopyReverseLength = digitArrayCopyReverse.length\n\
    \        val digitArrayCopyReverseReverse = digitArrayCopyReverse.reverse\n  \
    \      val digitArrayCopyReverseReverseLength = digitArrayCopyReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverse = digitArrayCopyReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseLength = digitArrayCopyReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverseReverseReverseReverse.length\n\
    \        val digitArrayCopyReverseReverseReverseReverse = digitArrayCopyReverseReverseReverseReverse.reverse\n\
    \        val digitArrayCopyReverseReverseReverseReverseLength = digitArrayCopyReverse",
  "        var result : String = \"\"\n        var remainder : Long = 0\n        var\
    \ quotient : Long = 0\n        while (quotient != 0) {\n            remainder\
    \ = x % base\n            quotient = x / base\n            result += remainder.toString\n\
    \        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits == Nil) \"\" else digits.mkString(\"\")\n   \
    \     result + \" \"", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for (i <- 0 until digits.size) {\n       \
    \     val digit = digits(i)\n            result += digits(i).drop(base).mkString(\"\
    \")\n        }\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = digits.foldLeft(\"\")(_ + _)\n        result", "       \
    \ val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"\
    J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"\
    U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val digits = List(\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digitBase\
    \ = bases.zip(digits)\n        val digitBaseReverse = digitBase.map(x => x._1\
    \ -> x._2)\n        val digitBaseReverseMap = digitBaseReverse.toMap\n       \
    \ val digitBaseReverseMapReverse = digitBaseReverseMap.reverse\n        val digitBaseReverseMapReverse2\
    \ = digitBaseReverseMapReverse.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse3\
    \ = digitBaseReverseMapReverse2.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse4\
    \ = digitBaseReverseMapReverse3.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse5\
    \ = digitBaseReverseMapReverse4.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse6\
    \ = digitBaseReverseMapReverse5.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse7\
    \ = digitBaseReverseMapReverse6.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse8\
    \ = digitBaseReverseMapReverse7.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse9\
    \ = digitBaseReverseMapReverse8.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse10\
    \ = digitBaseReverseMapReverse9.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse11\
    \ = digitBaseReverseMapReverse10.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse12\
    \ = digitBaseReverseMapReverse11.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse13\
    \ = digitBaseReverseMapReverse12.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse14\
    \ = digitBaseReverseMapReverse13.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse15\
    \ = digitBaseReverseMapReverse14.map(x => x._1 -> x._2)\n        val digitBaseReverseMapReverse16\
    \ = ", "        val digits = x.toString.reverse.grouped(base).toList\n       \
    \ val digit = digits.head\n        val digits = digits.tail\n        val digitString\
    \ = digits.mkString(\"\")\n        val baseString = digitString.reverse.grouped(base).mkString(\"\
    \")\n        val result = baseString + digitString\n        result", "       \
    \ var result = \"\"\n        var remainder = x % base\n        var quotient =\
    \ x / base\n        while (quotient > 0) {\n            result += quotient.toString\n\
    \            quotient = quotient / base\n        }\n        while (quotient >\
    \ 0) {\n            result += remainder.toString\n            remainder = remainder\
    \ % base\n            quotient = quotient / base\n        }\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"\" else base.toChar)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        var result : String = \"\"\n        var remainder\
    \ : Long = x % base\n        while (x > 0) {\n            x /= base\n        \
    \    result += (x % base).toString + remainder.toString\n            remainder\
    \ = x % base\n        }\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val digit = digits.reverse.head\n        val result = digit.toString\n\
    \        digits.reverse.tail.foreach(x => result = result + x.toString)\n    \
    \    result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\"))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits(0)\n        digits.drop(1).foreach(x => result =\
    \ result + x)\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val bases = List(\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\")\n        val digits = x.toString.reverse.grouped(base).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        val result = result.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - 1)\n        val result = result.substring(0, result.length -\
    \ base)\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        val baseString\
    \ = if (base < 10) \"0\" + base.toString\n        else \"\"\n        result +\
    \ baseString", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")( (acc, digit) => acc + digit\
    \ )\n        result + digits.reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case head :: tail => head.mkString(base) + changeBase(tail, base)\n      \
    \  }\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ base.pow(digits.size)\n        result + baseString.toString", "        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val result = digits.reverse.mkString(\"\
    \")\n        result + (if (digits.isEmpty) \"\" else (if (digits.head < base)\
    \ \"\" else \" \"))", "        val bases = List(10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000, 100000000, 1000000000)\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits(0)\n        val remainder = digits(1)\n        val\
    \ newBase = bases.find(_ == base).getOrElse(10)\n        val newDigits = remainder.grouped(newBase).toList\n\
    \        val newResult = newDigits(0)\n        val newRemainder = newDigits(1)\n\
    \        val newBaseString = newBase.toString\n        val newRemainderString\
    \ = newRemainder.toString\n        val newResultString = newResult.toString\n\
    \        val newRemainderString = newRemainderString.reverse\n        val newResultString\
    \ = newResultString.reverse\n        val newResultString = newResultString + newRemainderString\n\
    \        newResultString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newDigits = digits.map(x => x.toChar).mkString(\"\")\n        val\
    \ newBase = digits.map(x => x.toString.toInt).sum\n        val newX = x.toString.toInt\
    \ * newBase\n        val newString = newX.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        newString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(base)", "        val digits = x.toString.reverse\n  \
    \      val digitArray = digits.toCharArray\n        val digitArrayLength = digitArray.length\n\
    \        val baseArray = base.toCharArray\n        val baseArrayLength = baseArray.length\n\
    \        var resultString = \"\"\n        var i = 0\n        var j = 0\n     \
    \   while (i < digitArrayLength && j < baseArrayLength) {\n            if (digitArray(i)\
    \ == baseArray(j)) {\n                resultString += digitArray(i)\n        \
    \        i += 1\n                j += 1\n            } else {\n              \
    \  i += 1\n            }\n        }\n        return resultString", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (digits.tail.mkString(base.toChar))", "        val bases = List(\"10\", \"\
    11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\",\
    \ \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\"\
    , \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\")\n  \
    \      val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = \"\"\n        for(i <- 0 until digits.size) {\n            val digit = digits(i)\n\
    \            val baseIndex = digits.indexOf(i)\n            val digitString =\
    \ digit.toString\n            val baseString = bases(baseIndex)\n            val\
    \ newDigitString = digitString.substring(digitString.length - baseString.length)\
    \ + baseString\n            result += newDigitString\n        }\n        result",
  "        val digits = x.toString.reverse\n        val digitArray = digits.toCharArray\n\
    \        val newDigitArray = digitArray.map(x => if (x == '1') '0' else x)\n \
    \       val newDigitArrayLength = newDigitArray.length\n        val newDigitArrayWithZeros\
    \ = Array.fill(newDigitArrayLength)(0)\n        val newDigitArrayWithOnes = Array.fill(newDigitArrayLength)(1)\n\
    \        val newDigitArrayWithBase = Array.fill(newDigitArrayLength)(base)\n \
    \       val newDigitArrayWithBaseLength = newDigitArrayWithBase.length\n     \
    \   val newDigitArrayWithBaseWithZeros = Array.fill(newDigitArrayWithBaseLength)(0)\n\
    \        val newDigitArrayWithBaseWithOnes = Array.fill(newDigitArrayWithBaseLength)(1)\n\
    \        val newDigitArrayWithBaseWithBase = Array.fill(newDigitArrayWithBaseLength)(base)\n\
    \        val newDigitArrayWithBaseWithBaseLength = newDigitArrayWithBaseWithBase.length\n\
    \        val newDigitArrayWithBaseWithBaseWithZeros = Array.fill(newDigitArrayWithBaseWithBaseLength)(0)\n\
    \        val newDigitArrayWithBaseWithBaseWithOnes = Array.fill(newDigitArrayWithBaseWithBaseLength)(1)\n\
    \        val newDigitArrayWithBaseWithBaseWithBase = Array.fill(newDigitArrayWithBaseWithBaseLength)(base)\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseLength = newDigitArrayWithBaseWithBaseWithBase.length\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithZeros = Array.fill(newDigitArrayWithBaseWithBaseWithBaseLength)(0)\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithOnes = Array.fill(newDigitArrayWithBaseWithBaseWithBaseLength)(1)\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithBase = Array.fill(newDigitArrayWithBaseWithBaseWithBaseLength)(base)\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithBaseLength = newDigitArrayWithBaseWithBaseWithBaseWithBase.length\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithBaseWithZeros = Array.fill(newDigitArrayWithBaseWithBaseWithBaseWithBaseLength)(0)\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithOnes = Array.fill(newDigitArrayWithBaseWithBaseWithBaseWithBaseLength)(1)\n\
    \        val newDigitArrayWithBaseWithBaseWithBaseWithBase = Array.fill(newDigitArrayWithBaseWithBaseWithBaseWithBaseLength)(base)\n\
    \        val newDigitArrayWith", "        val bases = List(\"1\", \"10\", \"100\"\
    , \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"\
    1000000000\", \"10000000000\", \"100000000000\", \"1000000000000\", \"10000000000000\"\
    , \"100000000000000\", \"1000000000000000\", \"10000000000000000\", \"100000000000000000\"\
    , \"1000000000000000000\")\n        val baseIndex = bases.indexOf(base)\n    \
    \    val baseDigits = bases.take(baseIndex + 1).drop(baseIndex)\n        val digits\
    \ = x.toString.reverse.grouped(baseDigits.length).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(baseDigits)\n        result + if (x < base)\
    \ \"\" else changeBase(x - base, base)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\")", "        val baseNum = x.toString.toInt\n \
    \       val baseNumStr = baseNum.toString\n        val baseNumStrLen = baseNumStr.length\n\
    \        val baseNumStrLenMinusOne = baseNumStrLen - 1\n        val baseNumStrLenMinusOneMinusOne\
    \ = baseNumStrLenMinusOne - 1\n        val baseNumStrLenMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOne - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOne - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOneMinusOne - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n\
    \        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val baseNumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"0\" else \"\"\n        result + baseString", "        var result :\
    \ String = \"\"\n        var remainder : Long = 0\n        var digit = x % base\n\
    \        while (digit > 0) {\n            remainder = digit % base\n         \
    \   digit = digit / base\n            result = remainder + result\n        }\n\
    \        return result", "        var result : String = \"\"\n        var remainder\
    \ : Long = 0\n        var quotient : Long = 0\n        var remainder2 : Long =\
    \ 0\n        var quotient2 : Long = 0\n        var remainder3 : Long = 0\n   \
    \     var quotient3 : Long = 0\n        var remainder4 : Long = 0\n        var\
    \ quotient4 : Long = 0\n        var remainder5 : Long = 0\n        var quotient5\
    \ : Long = 0\n        var remainder6 : Long = 0\n        var quotient6 : Long\
    \ = 0\n        var remainder7 : Long = 0\n        var quotient7 : Long = 0\n \
    \       var remainder8 : Long = 0\n        var quotient8 : Long = 0\n        var\
    \ remainder9 : Long = 0\n        var quotient9 : Long = 0\n        var remainder10\
    \ : Long = 0\n        var quotient10 : Long = 0\n        var remainder11 : Long\
    \ = 0\n        var quotient11 : Long = 0\n        var remainder12 : Long = 0\n\
    \        var quotient12 : Long = 0\n        var remainder13 : Long = 0\n     \
    \   var quotient13 : Long = 0\n        var remainder14 : Long = 0\n        var\
    \ quotient14 : Long = 0\n        var remainder15 : Long = 0\n        var quotient15\
    \ : Long = 0\n        var remainder16 : Long = 0\n        var quotient16 : Long\
    \ = 0\n        var remainder17 : Long = 0\n        var quotient17 : Long = 0\n\
    \        var remainder18 : Long = 0\n        var quotient18 : Long = 0\n     \
    \   var remainder19 : Long = 0\n        var quotient19 : Long = 0\n        var\
    \ remainder20 : Long = 0\n        var quotient20 : Long = 0\n        var remainder21\
    \ : Long = 0\n        var quotient21 : Long = 0\n        var remainder22 : Long\
    \ = 0\n        var quotient22 : Long = 0\n        var remainder23 : Long = 0\n\
    \        var quotient23 : Long = 0\n        var remainder24 : Long = 0\n     \
    \   var quotient24 : Long = 0\n        var remainder25 : Long = 0\n        var\
    \ quotient25 : Long = 0\n        var remainder26 : Long = 0\n        var quotient26\
    \ : Long = 0\n        var remainder27 : Long = 0\n        var quotient27 : Long\
    \ = 0\n        var remainder28 : Long = 0\n        var quotient28 : Long = 0\n\
    \        var remainder29 : Long = 0\n        var quotient29 : Long = 0\n     \
    \   var remainder30 : Long = 0\n        var quotient30 : Long = 0\n        var\
    \ remainder31 : Long = 0\n        var quotient31 : Long = 0\n        var remainder32\
    \ : Long = 0\n        var quotient32 : Long = 0\n        var ", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n        val newDigits\
    \ = digits.map(x => x.toString.reverse.grouped(base.toInt).map(_.toInt).mkString(\"\
    \"))\n        val newBase = digits.map(x => x.toString.reverse.grouped(base.toInt).map(_.toInt).mkString(\"\
    \"))\n        val newString = newDigits.mkString(\"\")\n        val newBaseString\
    \ = newBase.mkString(\"\")\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.length)\n        \
    \    result += digits(i).mkString(\"\")\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n        val digitStrings\
    \ = digits.map(_.mkString(\"\"))\n        val result = digitStrings.reverse.mkString(\"\
    \")\n        val digitStringsReverse = digitStrings.reverse\n        val digitStringsReverseReverse\
    \ = digitStringsReverse.map(_.toString.reverse)\n        val digitStringsReverseReverse\
    \ = digitStringsReverseReverse.map(_.mkString(\"\"))\n        val digitStringsReverseReverseReverse\
    \ = digitStringsReverseReverse.map(_.toString.reverse)\n        val digitStringsReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverse.map(_.mkString(\"\"))\n        val digitStringsReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverseReverse.map(_.toString.reverse)\n       \
    \ val digitStringsReverseReverseReverseReverse = digitStringsReverseReverseReverseReverse.map(_.mkString(\"\
    \"))\n        val digitStringsReverseReverseReverseReverseReverse = digitStringsReverseReverseReverseReverseReverse.map(_.toString.reverse)\n\
    \        val digitStringsReverseReverseReverseReverseReverseReverse = digitStringsReverseReverseReverseReverseReverseReverse.map(_.mkString(\"\
    \"))\n        val digitStringsReverseReverseReverseReverseReverseReverse = digitStringsReverseReverseReverseReverseReverseReverse.map(_.toString.reverse)\n\
    \        val digitStringsReverseReverseReverseReverseReverseReverse = digitStringsReverseReverseReverseReverseReverseReverseReverse.map(_.mkString(\"\
    \"))\n        val digitStringsReverseReverseReverseReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverseReverseReverseReverseReverseReverse.map(_.toString.reverse)\n\
    \        val digitStringsReverseReverseReverseReverseReverseReverseReverse = digitStringsReverseReverseReverseReverseReverseReverseReverseReverse.map(_.mkString(\"\
    \"))\n        val digitStringsReverseReverseReverseReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverseReverseReverseReverseReverseReverse.map(_.toString.reverse)\n\
    \        val digitStringsReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(_.mkString(\"\
    \"))\n        val digitStringsReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(_.toString.reverse)\n\
    \        val digitStringsReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = digitStringsReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(_.mkString(\"\
    \"))\n        val digitStringsReverseReverseReverse", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = digits.map(_.mkString(\"\")).reverse.mkString(\"\")\n  \
    \      result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.map(x => x.reverse).mkString(\"\")\n        result\
    \ + (if (digits.isEmpty) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        val baseString =\
    \ if (base < 10) \"0\" + base.toString\n        else base.toString\n        val\
    \ result = baseString + result\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val bases = List(\"1\", \"10\", \"100\"\
    , \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\")\n\
    \        val baseIndex = bases.indexOf(base.toString)\n        val baseNum = x\
    \ / (base * baseIndex)\n        val baseStr = bases(baseIndex)\n        val result\
    \ = baseNum.toString + baseStr\n        return result", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ newBase = digits.takeWhile(_ != 0).reverse.mkString(\"\")\n        val newDigits\
    \ = digits.dropWhile(_ != 0).reverse.mkString(\"\")\n        val newNumber = newBase\
    \ + newDigits\n        newNumber.reverse", "        val digits = x.toString.reverse\n\
    \        val digits_length = digits.length\n        val digits_base = new Array[Long](digits_length)\n\
    \        val digits_base_index = new Array[Int](digits_length)\n        val digits_base_index_index\
    \ = new Array[Int](digits_length)\n        val digits_base_index_index2 = new\
    \ Array[Int](digits_length)\n        val digits_base_index_index3 = new Array[Int](digits_length)\n\
    \        val digits_base_index_index4 = new Array[Int](digits_length)\n      \
    \  val digits_base_index_index5 = new Array[Int](digits_length)\n        val digits_base_index_index6\
    \ = new Array[Int](digits_length)\n        val digits_base_index_index7 = new\
    \ Array[Int](digits_length)\n        val digits_base_index_index8 = new Array[Int](digits_length)\n\
    \        val digits_base_index_index9 = new Array[Int](digits_length)\n      \
    \  val digits_base_index_index10 = new Array[Int](digits_length)\n        val\
    \ digits_base_index_index11 = new Array[Int](digits_length)\n        val digits_base_index_index12\
    \ = new Array[Int](digits_length)\n        val digits_base_index_index13 = new\
    \ Array[Int](digits_length)\n        val digits_base_index_index14 = new Array[Int](digits_length)\n\
    \        val digits_base_index_index15 = new Array[Int](digits_length)\n     \
    \   val digits_base_index_index16 = new Array[Int](digits_length)\n        val\
    \ digits_base_index_index17 = new Array[Int](digits_length)\n        val digits_base_index_index18\
    \ = new Array[Int](digits_length)\n        val digits_base_index_index19 = new\
    \ Array[Int](digits_length)\n        val digits_base_index_index20 = new Array[Int](digits_length)\n\
    \        val digits_base_index_index21 = new Array[Int](digits_length)\n     \
    \   val digits_base_index_index22 = new Array[Int](digits_length)\n        val\
    \ digits_base_index_index23 = new Array[Int](digits_length)\n        val digits_base_index_index24\
    \ = new Array[Int](digits_length)\n        val digits_base_index_index25 = new\
    \ Array[Int](digits_length)\n        val digits_base_index_index26 = new Array[Int](digits_length)\n\
    \        val digits_base_index_index27 = new Array[Int](digits_length)\n     \
    \   val digits_base_index_index", "        val digits = x.toString.reverse\n \
    \       val digitArray = digits.toCharArray\n        val digitCount = digitArray.length\n\
    \        val digitBase = digitCount / base\n        val digitBaseArray = digitBase.toCharArray\n\
    \        val digitBaseCount = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val digitBaseArrayLength = digitBaseArray.length\n        val digitBaseArrayLength\
    \ = digitBaseArray.length\n        val digitBaseArrayLength = digitBaseArray.length\n\
    \        val ", "        val bases = List(\"1\", \"10\", \"100\", \"1000\", \"\
    10000\", \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\"\
    , \"10000000000\", \"100000000000\")\n        val baseIndex = bases.indexOf(\"\
    10\")\n        val baseNum = bases(baseIndex)\n        val baseNumInt = baseNum.toInt\n\
    \        val baseNumIntInt = baseNumInt * base\n        val baseNumIntIntInt =\
    \ baseNumIntInt * base\n        val baseNumIntIntIntInt = baseNumIntIntInt * base\n\
    \        val baseNumIntIntIntIntInt = baseNumIntIntIntInt * base\n        val\
    \ baseNumIntIntIntIntIntInt = baseNumIntIntIntIntInt * base\n        val baseNumIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntInt * base\n        val baseNumIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntInt * base\n        val baseNumIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntIntIntInt * base\n        val baseNumIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntIntIntIntIntInt * base\n        val baseNumIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntInt * base\n        val baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt * base\n        val\
    \ baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ * base\n        val baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt * base\n\
    \        val baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt * base\n\
    \        val baseNumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = baseNumIntIntIntInt", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \".\")", "        val digits = x.toString.reverse\n\
    \        val newDigits = digits.reverse.grouped(base).map(_.mkString).reverse\n\
    \        val newBase = digits.reverse.grouped(base).map(_.length).max\n      \
    \  val newString = newDigits.reverse.mkString(\"\")\n        val newBaseString\
    \ = newBase.toString\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newBase = digits.takeWhile(_ != 0).sum\n        val newDigits = digits.drop(newBase)\n\
    \        val newString = newDigits.reverse.mkString(\"\")\n        val newBaseString\
    \ = newBase.toString\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val newBaseStringLength = newBaseString.length\n        val newBaseStringLength\
    \ = newBaseString.length\n        val newBaseStringLength = newBaseString.length\n\
    \        val new", "        var result : String = \"\"\n        var remainder\
    \ : Long = 0\n        var digit = 0\n        while(x > 0) {\n            remainder\
    \ = x % base\n            digit = remainder / base\n            result += digit.toString\n\
    \            x = x / base\n        }\n        result", "        val bases = List(\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\")\n       \
    \ val digits = x.toString.reverse.grouped(base).map(_.mkString).reverse\n    \
    \    val result = bases.zip(digits).map { case (base, digit) => digit + base }\n\
    \        result.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.length){\n       \
    \     result += digits(i).mkString(\"\")\n        }\n        result", "      \
    \  val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits(0).toString + digits(1).toString.reverse\n\
    \        val result = if (digits.", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).reverse\n\
    \        val result = digits.foldLeft(\"\") { (result, digit) => result + digit.toString}\n\
    \        result + digits.last.toString", "        var result = \"\"\n        var\
    \ remainder = x % base\n        while(x > 0) {\n            x /= base\n      \
    \      result += (x % base) + remainder\n            remainder = x % base\n  \
    \      }\n        result", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toString.reverse)", "        var result : String = \"\"\n   \
    \     var remainder : Long = x % base\n        while(x > 0) {\n            x /=\
    \ base\n            result += (x % base).toString + remainder.toString\n     \
    \       remainder = x % base\n        }\n        result", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).reverse\n        val result = digits.foldLeft(\"\
    \")( (acc, digit) => acc + digit.toString)\n        result + (if (digits.size\
    \ == base) \"\" else \"..\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"-\")", "        var result = \"\"\n        val digits\
    \ = x.toString.reverse.grouped(base).toList\n        val baseDigits = digits.reverse\n\
    \        val baseDigitCount = baseDigits.length\n        val digitCount = digits.length\n\
    \        var i = 0\n        while (i < digitCount) {\n            val digit =\
    \ digits(i)\n            val baseDigit = baseDigits(i)\n            if (digit\
    \ < baseDigit) {\n                result += digit - baseDigit + baseDigitCount\n\
    \            } else {\n                result += digit - baseDigit + baseDigitCount\
    \ - 1\n            }\n            i += 1\n        }\n        return result", " \
    \       var result = \"\"\n        var remainder = x % base\n        var quotient\
    \ = x / base\n        while (quotient != 0) {\n            result += quotient.toString\n\
    \            quotient = quotient / base\n        }\n        result += remainder.toString\n\
    \        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"-\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (x < base) \"\
    \" else \"\" + base)", "        val bases = List(\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"\
    Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = for (i\
    \ <- 0 until digits.size) yield {\n            val digit = digits(i)\n       \
    \     val baseIndex = digits.indexOf(0)\n            val baseDigit = digits(baseIndex)\n\
    \            val digitToReturn = bases(baseIndex) * digit.asInstanceOf[Long] +\
    \ baseDigit\n            digitToReturn.toString\n        }\n        val result\
    \ = result.mkString(\"\")\n        val baseString = bases(base)\n        val resultString\
    \ = result + baseString\n        resultString", "        val bases = List(\"1\"\
    , \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\", \"10000000\"\
    , \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\", \"1000000000000\"\
    , \"10000000000000\", \"100000000000000\", \"1000000000000000\", \"10000000000000000\"\
    , \"100000000000000000\", \"1000000000000000000\")\n        val baseIndex = bases.indexOf(base.toString)\n\
    \        val baseDigit = bases.take(baseIndex).drop(baseIndex).map(_.toInt)\n\
    \        val digits = x.toString.dropRight(baseDigit(0)).drop(baseDigit(1))\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + digits(baseDigit(0) +\
    \ _))\n        result + bases(baseIndex)", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         result + digit.drop(base).reverse\n        }\n        return result.reverse",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val result = digits.foldLeft(\"\")(_ + _)\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + digits.reverse.takeWhile(_\
    \ < base).reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.foldLeft(\"\")(_ + _)\n        result + (digits.reverse.takeWhile(_\
    \ != 0).reverse.mkString(\"\"))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(base)\n        }\n        result", "        val bases\
    \ = List(\"1\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\
    , \"10000000\", \"100000000\", \"1000000000\", \"10000000000\", \"100000000000\"\
    , \"1000000000000\", \"10000000000000\", \"100000000000000\", \"1000000000000000\"\
    , \"10000000000000000\", \"100000000000000000\", \"1000000000000000000\")\n  \
    \      val baseIndex = bases.indexOf(base)\n        val baseNum = bases.take(baseIndex).drop(baseIndex).mkString\n\
    \        val baseNumIndex = bases.indexOf(baseNum)\n        val baseNumNum = bases.take(baseNumIndex).drop(baseNumIndex).mkString\n\
    \        val baseNumNumIndex = bases.indexOf(baseNumNum)\n        val baseNumNumNum\
    \ = bases.take(baseNumNumIndex).drop(baseNumNumIndex).mkString\n        val baseNumNumNumIndex\
    \ = bases.indexOf(baseNumNumNum)\n        val baseNumNumNumNum = bases.take(baseNumNumNumIndex).drop(baseNumNumNumIndex).mkString\n\
    \        val baseNumNumNumNumIndex = bases.indexOf(baseNumNumNumNum)\n       \
    \ val baseNumNumNumNumNum = bases.take(baseNumNumNumNumIndex).drop(baseNumNumNumNumIndex).mkString\n\
    \        val baseNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNumNumNumNumNum)\n\
    \        val baseNumNumNumNumNumNumNumNumNumNumIndex = bases.indexOf(baseNumNumNumNumNumNumNumNumNumNumNumNum)\n\
    \        val baseNum", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val newBase = digits.reverse.foldLeft(base) { (acc, digit) => acc * base\
    \ + digit.toLong }\n        digits.reverse.foldLeft(newBase.toString.reverse)\
    \ { (acc, digit) => acc * base + digit.toLong }", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else base.toChar)", "        val bases = List(\"10\", \"11\",\
    \ \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    )\n        val baseIndex = bases.indexOf[base]\n        val result = x.toString.reverse.takeWhile(c\
    \ => c != '0').take(baseIndex).reverse.mkString\n        result + (if (baseIndex\
    \ == bases.length) \"\" else bases(baseIndex))", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.map(_.reverse).mkString(\"\")\n        result + (if\
    \ (result.length < base) \"\" else \"\" + base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result.length\
    \ < base.toInt) \".\" else \"\")", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + \"\"", " \
    \       val digits = x.toString.reverse.grouped(base).toList\n        val result\
    \ = digits.reverse.mkString(\"\")\n        result + (if (digits.isEmpty) \"\"\
    \ else base.toString.reverse.mkString(\"\"))", "        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.map(x => x.reverse).mkString(\"\")\n        val baseString\
    \ = if (base < 10) \"0\" + base.toString\n        else base.toString\n       \
    \ result + baseString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \".\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        digits.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString)\n\
    \        digits.reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (result == \"\
    0\") \"\" else base.toChar)", "        var result = \"\"\n        var remainder\
    \ = x % base\n        while (x > 0) {\n            result += Integer.toString((x\
    \ % base))\n            x /= base\n        }\n        if (remainder > 0) {\n \
    \           result += Integer.toString(remainder)\n        }\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(base.toChar)\n        }\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (digits.size ==\
    \ base) \"\" else base.toChar)", "        val bases = List(\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digitBase = digits.zip(bases)\n        val digitBaseReverse = digitBase.reverse\n\
    \        val digitBaseReversed = digitBaseReverse.map(x => x._1 + \"*\" + x._2)\n\
    \        val digitBaseReversedString = digitBaseReversed.mkString(\"*\")\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digitBaseReversedStringLength = digitBaseReversedString.length\n   \
    \     val digit"]
stop_tokens:
- "\n    }\n"
