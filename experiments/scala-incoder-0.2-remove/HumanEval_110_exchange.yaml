name: HumanEval_110_exchange
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this problem, you will implement a function that takes two lists of numbers,\n\
  \    // and determines whether it is possible to perform an exchange of elements\n\
  \    // between them to make lst1 a list of only even numbers.\n    // There is\
  \ no limit on the number of exchanged elements between lst1 and lst2.\n    // If\
  \ it is possible to exchange elements between the lst1 and lst2 to make\n    //\
  \ all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return\
  \ \"NO\".\n    // For example:\n    // It is assumed that the input lists will be\
  \ non-empty.\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"\
  NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)),\
  \ (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n\
  \    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong,\
  \ 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"\
  NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong,\
  \ 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong,\
  \ 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n \
  \   }\n\n}\n"
completions: ["        // Your code here\n        val lst3 = lst1.filter(_ % 2 ==\
    \ 0).zip(lst2.filter(_ % 2 == 0)).filter(_._1 == _._1).map(_._2).toList\n    \
    \    if (lst3.isEmpty) \"\"\n        else lst3.head == lst3.last ? \"YES\" : \"\
    NO\"", "        val lst3 = lst1.toSet diff lst2.toSet\n        if (lst3.isEmpty)\
    \ \"\" else \"NO\"", "        // Your code here\n        val lst3 = lst1.toSet\n\
    \        val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n    \
    \    val lst6 = lst5.filter(x => x % 2 == 0)\n        if(lst6.size == lst1.size){\n\
    \            return \"YES\"\n        }else{\n            return \"NO\"\n     \
    \   }", "        val even = lst1 filter (x => x % 2 == 0)\n        val odd = lst2\
    \ filter (x => x % 2 != 0)\n        if (even.size == odd.size) {\n           \
    \ val evenList = even.sortWith(_ < _)\n            val oddList = odd.sortWith(_\
    \ < _)\n            val evenSet = evenList.mkSet\n            val oddSet = oddList.mkSet\n\
    \            if (evenSet.size == oddSet.size && evenSet.intersect(oddSet).size\
    \ == evenSet.size) {\n                return \"YES\"\n            }\n        }\n\
    \        return \"NO\"", '        // Your code here', "        // Your code goes\
    \ here\n        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n        if (evenAndOdd.isEmpty)\
    \ {\n            return \"NO\"\n        } else {\n            return \"YES\"\n\
    \        }", '        // Your code here', '        // Your code here', "     \
    \   // Your code here\n        val even = lst1.filter(x => x % 2 == 0)\n     \
    \   val odd = lst2.filter(x => x % 2 != 0)\n        val evenOdd = even.zip(odd)\n\
    \        val evenOddMap = evenOdd.toMap\n        val evenOddMapKeys = evenOddMap.keys\n\
    \        val evenOddMapValues = evenOddMap.values.toList\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val evenOddMapValuesLength = evenOddMapValues.length\n\
    \        val evenOddMapValuesLength = evenOddMapValues.length\n        val evenOddMapValuesLength\
    \ = evenOddMapValues.length\n        val ", '        // Your code here', '        //
    Your code here', '        // Your code here', "        // Your code here\n   \
    \     val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenOdd = even.zip(odd)\n        val evenOdd2 =\
    \ evenOdd.filter(x => x._1 == x._2)\n        val evenOdd3 = evenOdd2.filter(x\
    \ => x._1 == x._2)\n        val evenOdd4 = evenOdd3.filter(x => x._1 == x._2)\n\
    \        val evenOdd5 = evenOdd4.filter(x => x._1 == x._2)\n        val evenOdd6\
    \ = evenOdd5.filter(x => x._1 == x._2)\n        val evenOdd7 = evenOdd6.filter(x\
    \ => x._1 == x._2)\n        val evenOdd8 = evenOdd7.filter(x => x._1 == x._2)\n\
    \        val evenOdd9 = evenOdd8.filter(x => x._1 == x._2)\n        val evenOdd10\
    \ = evenOdd9.filter(x => x._1 == x._2)\n        val evenOdd11 = evenOdd10.filter(x\
    \ => x._1 == x._2)\n        val evenOdd12 = evenOdd11.filter(x => x._1 == x._2)\n\
    \        val evenOdd13 = evenOdd12.filter(x => x._1 == x._2)\n        val evenOdd14\
    \ = evenOdd13.filter(x => x._1 == x._2)\n        val evenOdd15 = evenOdd14.filter(x\
    \ => x._1 == x._2)\n        val evenOdd16 = evenOdd15.filter(x => x._1 == x._2)\n\
    \        val evenOdd17 = evenOdd16.filter(x => x._1 == x._2)\n        val evenOdd18\
    \ = evenOdd17.filter(x => x._1 == x._2)\n        val evenOdd19 = evenOdd18.filter(x\
    \ => x._1 == x._2)\n        val evenOdd20 = evenOdd19.filter(x => x._1 == x._2)\n\
    \        val evenOdd21 = evenOdd20.filter(x => x._1 == x._2)\n        val evenOdd22\
    \ = evenOdd21.filter(x => x._1 == x._2)\n        val evenOdd23 = evenOdd22.filter(x\
    \ => x._1 == x._2)\n        val evenOdd24 = evenOdd23.filter(x => x.", '        //
    Your code here', '        // Your code goes here', '        // Your code here',
  '        // Your code here', '        // Your code here', "        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndOddAndEven = evenAndOdd.intersect(even)\n\
    \        if(evenAndOddAndEven.isEmpty) \"YES\" else \"NO\"", "        val even\
    \ = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 ==\
    \ 1)\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty)\
    \ \"NO\" else \"YES\"", '        // Your code here', "        // Your code here\n\
    \        val lst3 = lst1.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst4\
    \ = lst2.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst5 = lst3.zip(lst4).filter(_._1\
    \ == _._2).map(_._1)\n        val lst6 = lst5.filter(_ % 2 == 0).sortWith(_ <\
    \ _)\n        val lst7 = lst6.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ lst8 = lst7.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst9 = lst8.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst10 = lst9.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst11 = lst10.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst12 = lst11.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst13 = lst12.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst14 = lst13.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst15 = lst14.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst16 = lst15.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst17 = lst16.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst18 = lst17.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst19 = lst18.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst20 = lst19.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst21 = lst20.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst22 = lst21.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst23 = lst22.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst24 = lst23.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst25 = lst24.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val lst26 = lst25.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val lst27 = lst26.filter(_ % 2 == 0).sortWith(_ < _)\n       \
    \ val lst28 = lst27.filter(_ % 2 == 0).sortWith(_ < _)\n        val lst29 = lst28.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n", '        // Your code goes here', '        //
    Your code here', "        val even = lst1.filter(x => x % 2 == 0)\n        val\
    \ odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(evenAndEven)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = even", '        // Your code here', "        val even = lst1.filter(x => x\
    \ % 2 == 0)\n        val odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndOddLength = evenAndOdd.length\n  \
    \      if (evenAndOddLength == even.length && evenAndOddLength == odd.length)\
    \ {\n            evenAndOdd.toList.map(x => x % 2 == 0).mkString(\",\")\n    \
    \    } else {\n            \"NO\"\n        }", '        // Your code goes here',
  "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(_ % 2 == 0)\n \
    \       val lst5 = lst4.filter(_ % 2 == 0)\n        val lst6 = lst5.filter(_ %\
    \ 2 == 0)\n        val lst7 = lst6.filter(_ % 2 == 0)\n        val lst8 = lst7.filter(_\
    \ % 2 == 0)\n        val lst9 = lst8.filter(_ % 2 == 0)\n        val lst10 = lst9.filter(_\
    \ % 2 == 0)\n        val lst11 = lst10.filter(_ % 2 == 0)\n        val lst12 =\
    \ lst11.filter(_ % 2 == 0)\n        val lst13 = lst12.filter(_ % 2 == 0)\n   \
    \     val lst14 = lst13.filter(_ % 2 == 0)\n        val lst15 = lst14.filter(_\
    \ % 2 == 0)\n        val lst16 = lst15.filter(_ % 2 == 0)\n        val lst17 =\
    \ lst16.filter(_ % 2 == 0)\n        val lst18 = lst17.filter(_ % 2 == 0)\n   \
    \     val lst19 = lst18.filter(_ % 2 == 0)\n        val lst20 = lst19.filter(_\
    \ % 2 == 0)\n        val lst21 = lst20.filter(_ % 2 == 0)\n        val lst22 =\
    \ lst21.filter(_ % 2 == 0)\n        val lst23 = lst22.filter(_ % 2 == 0)\n   \
    \     val lst24 = lst23.filter(_ % 2 == 0)\n        val lst25 = lst24.filter(_\
    \ % 2 == 0)\n        val lst26 = lst25.filter(_ % 2 == 0)\n        val lst27 =\
    \ lst26.filter(_ % 2 == 0)\n        val lst28 = lst27.filter(_ % 2 == 0)\n   \
    \     val lst29 = lst28.filter(_ % 2 == 0)\n        val lst30 = lst29.filter(_\
    \ % 2 == 0)\n        val lst31 = lst30.filter(_ % 2 == 0)\n        val lst32 =\
    \ lst31.filter(_ % 2 == 0)\n        val lst33 = lst32.filter(_ % 2 == 0)\n   \
    \     val lst34 = lst33.filter(_ % 2 == 0)\n        val lst35 = lst34.filter(_\
    \ % 2 == 0)\n        val lst36 = lst35.filter(_ % 2 == 0)\n        val lst37 =\
    \ lst36.filter(_ % 2 == 0)\n        val lst38 = lst37.filter(_ % 2 == 0)\n   \
    \     val lst39 = lst38.filter(_ % 2 == 0)\n        val lst40 = lst39.filter(_\
    \ % 2 == 0)\n        val lst41 = lst40.filter(_ % 2 == 0)\n        val lst42 =\
    \ lst41.filter(_ % 2 == 0)\n        val ", '        // Your code here', "    \
    \    val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndO", "        // Your code here\n        val lst3 = lst1.toSet\n   \
    \     val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n       \
    \ val lst6 = lst5.toList\n        val lst7 = lst6.filter(_ % 2 == 0)\n       \
    \ if(lst7.size == lst6.size) {\n            return \"YES\"\n        }\n      \
    \  return \"NO\"", '        // Your code here', '        // Your code here', '        //
    Your code here', '        // Your code here', '        // Your code here', " \
    \       // Your code goes here\n        val lst3 = lst1.toSet\n        val lst4\
    \ = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n        if(lst5.isEmpty){\n\
    \            return \"NO\"\n        }\n        else{\n            return \"YES\"\
    \n        }", '        // Your code here', '        // Your code here', "    \
    \    val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOdd2\
    \ = evenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd6 = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7\
    \ = evenAndOdd6.filter(x => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n  \
    \      val evenAndOdd11 = evenAndOdd10.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd12 = evenAndOdd11.filter(x => x._1 == x._2)\n        val evenAndOdd13\
    \ = evenAndOdd12.filter(x => x._1 == x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd15 = evenAndOdd14.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd17 = evenAndOdd16.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd18 = evenAndOdd17.filter(x => x._1 == x._2)\n        val evenAndOdd19\
    \ = evenAndOdd18.filter(x => x._1 == x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd21 = evenAndOdd20.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd22 = evenAndOdd21.filter(x => x._1 == x._2)", '        //
    Your code here', "        val lst3 = lst1.filter(_ % 2 == 0)\n        val lst4\
    \ = lst2.filter(_ % 2 == 0)\n        val lst5 = lst3.filter(_ != lst4)\n     \
    \   val lst6 = lst5.filter(_ != lst3)\n        val lst7 = lst6.filter(_ != lst5)\n\
    \        val lst8 = lst7.filter(_ != lst6)\n        val lst9 = lst8.filter(_ !=\
    \ lst7)\n        val lst10 = lst9.filter(_ != lst8)\n        val lst11 = lst10.filter(_\
    \ != lst9)\n        val lst12 = lst11.filter(_ != lst10)\n        val lst13 =\
    \ lst12.filter(_ != lst11)\n        val lst14 = lst13.filter(_ != lst12)\n   \
    \     val lst15 = lst14.filter(_ != lst13)\n        val lst16 = lst15.filter(_\
    \ != lst14)\n        val lst17 = lst16.filter(_ != lst15)\n        val lst18 =\
    \ lst17.filter(_ != lst16)\n        val lst19 = lst18.filter(_ != lst17)\n   \
    \     val lst20 = lst19.filter(_ != lst18)\n        val lst21 = lst20.filter(_\
    \ != lst19)\n        val lst22 = lst21.filter(_ != lst20)\n        val lst23 =\
    \ lst22.filter(_ != lst21)\n        val lst24 = lst23.filter(_ != lst22)\n   \
    \     val lst25 = lst24.filter(_ != lst23)\n        val lst26 = lst25.filter(_\
    \ != lst24)\n        val lst27 = lst26.filter(_ != lst25)\n        val lst28 =\
    \ lst27.filter(_ != lst26)\n        val lst29 = lst28.filter(_ != lst27)\n   \
    \     val lst30 = lst29.filter(_ != lst28)\n        val lst31 = lst30.filter(_\
    \ != lst29)\n        val lst32 = lst31.filter(_ != lst30)\n        val lst33 =\
    \ lst32.filter(_ != lst31)\n        val lst34 = lst33.filter(_ != lst32)\n   \
    \     val lst35 = lst34.filter(_ != lst33)\n        val lst36 = lst35.filter(_\
    \ != lst34)\n        val lst37 = lst36.filter(_ != lst35)\n        val lst38 =\
    \ lst37.filter(_ != lst36)\n        val lst39 = lst38.filter(_ != lst37)\n   \
    \     val lst40 = lst39.filter(_ != lst38)\n        val lst41 = lst40.filter(_\
    \ != lst39)", '        // Your code here', "        val even = lst1.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd\
    \ = even.zip(odd)\n        val evenAndOddToList = evenAndOdd.map(x => x._1)\n\
    \        val evenAndOddToList2 = evenAndOdd.map(x => x._2)\n        val evenAndOddToList3\
    \ = evenAndOdd.map(x => x._1)\n        val evenAndOddToList4 = evenAndOdd.map(x\
    \ => x._2)\n        val evenAndOddToList5 = evenAndOdd.map(x => x._1)\n      \
    \  val evenAndOddToList6 = evenAndOdd.map(x => x._2)\n        val evenAndOddToList7\
    \ = evenAndOdd.map(x => x._1)\n        val evenAndOddToList8 = evenAndOdd.map(x\
    \ => x._2)\n        val evenAndOddToList9 = evenAndOdd.map(x => x._1)\n      \
    \  val evenAndOddToList10 = evenAndOdd.map(x => x._2)\n        val evenAndOddToList11\
    \ = evenAndOdd.map(x => x._1)\n        val evenAndOddToList12 = evenAndOdd.map(x\
    \ => x._2)\n        val evenAndOddToList13 = evenAndOdd.map(x => x._1)\n     \
    \   val evenAndOddToList14 = evenAndOdd.map(x => x._2)\n        val evenAndOddToList15\
    \ = evenAndOdd.map(x => x._1)\n        val evenAndOddToList16 = evenAndOdd.map(x\
    \ => x._2)\n        val evenAndOddToList17 = evenAndOdd.map(x => x._1)\n     \
    \   val evenAndOddToList18 = evenAndOdd.map(x => x._2)\n        val evenAndOddToList19\
    \ = evenAndOdd.map(x => x._1)\n        val evenAndOddToList20 = evenAndOdd.map(x\
    \ => x._2)\n        val evenAndOddToList21 = evenAndOdd.map(x => x._1)\n     \
    \   val evenAndOddToList22 = evenAndOdd.map(x => x._2)", '        // Your code
    here', '        // Your code here', "        // Your code goes here\n        val\
    \ lst3 = lst1.toList\n        val lst4 = lst2.toList\n        val lst5 = lst3.toList\n\
    \        val lst6 = lst4.toList\n        val lst7 = lst5.toList\n        val lst8\
    \ = lst6.toList\n        val lst9 = lst7.toList\n        val lst10 = lst8.toList\n\
    \        val lst11 = lst9.toList\n        val lst12 = lst10.toList\n        val\
    \ lst13 = lst11.toList\n        val lst14 = lst12.toList\n        val lst15 =\
    \ lst13.toList\n        val lst16 = lst14.toList\n        val lst17 = lst15.toList\n\
    \        val lst18 = lst16.toList\n        val lst19 = lst17.toList\n        val\
    \ lst20 = lst18.toList\n        val lst21 = lst19.toList\n        val lst22 =\
    \ lst20.toList\n        val lst23 = lst21.toList\n        val lst24 = lst22.toList\n\
    \        val lst25 = lst23.toList\n        val lst26 = lst24.toList\n        val\
    \ lst27 = lst25.toList\n        val lst28 = lst26.toList\n        val lst29 =\
    \ lst27.toList\n        val lst30 = lst28.toList\n        val lst31 = lst29.toList\n\
    \        val lst32 = lst30.toList\n        val lst33 = lst31.toList\n        val\
    \ lst34 = lst32.toList\n        val lst35 = lst33.toList\n        val lst36 =\
    \ lst34.toList\n        val lst37 = lst35.toList\n        val lst38 = lst36.toList\n\
    \        val lst39 = lst37.toList\n        val lst40 = lst38.toList\n        val\
    \ lst41 = lst39.toList\n        val lst42 = lst40.toList\n        val lst43 =\
    \ lst41.toList\n        val lst44 = lst42.toList\n        val lst45 = lst43.toList\n\
    \        val lst46 = lst44.toList\n        val lst47 = lst45.toList\n        val\
    \ lst48 = lst46.toList\n        val lst49 = lst47.toList\n        val lst50 =\
    \ lst48.toList\n        val lst51 = lst49.toList\n        val lst52 = lst50.toList\n\
    \        val lst53 = lst51.toList\n        ", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ exchanged = even.zip(odd).filter(x => x._1 == x._2)\n        if(exchanged.isEmpty)\
    \ \"\" else \"NO\"", '        // Your code goes here', "        // Your code here\n\
    \        val lst3 = lst1.toList\n        val lst4 = lst2.toList\n        val lst5\
    \ = lst3.filter(_ % 2 == 0)\n        val lst6 = lst4.filter(_ % 2 == 0)\n    \
    \    val lst7 = lst5.filter(_ % 2 == 0)\n        val lst8 = lst6.filter(_ % 2\
    \ == 0)\n        val lst9 = lst7.filter(_ % 2 == 0)\n        val lst10 = lst8.filter(_\
    \ % 2 == 0)\n        val lst11 = lst9.filter(_ % 2 == 0)\n        val lst12 =\
    \ lst10.filter(_ % 2 == 0)\n        val lst13 = lst11.filter(_ % 2 == 0)\n   \
    \     val lst14 = lst12.filter(_ % 2 == 0)\n        val lst15 = lst13.filter(_\
    \ % 2 == 0)\n        val lst16 = lst14.filter(_ % 2 == 0)\n        val lst17 =\
    \ lst15.filter(_ % 2 == 0)\n        val lst18 = lst16.filter(_ % 2 == 0)\n   \
    \     val lst19 = lst17.filter(_ % 2 == 0)\n        val lst20 = lst18.filter(_\
    \ % 2 == 0)\n        val lst21 = lst19.filter(_ % 2 == 0)\n        val lst22 =\
    \ lst20.filter(_ % 2 == 0)\n        val lst23 = lst21.filter(_ % 2 == 0)\n   \
    \     val lst24 = lst22.filter(_ % 2 == 0)\n        val lst25 = lst23.filter(_\
    \ % 2 == 0)\n        val lst26 = lst24.filter(_ % 2 == 0)\n        val lst27 =\
    \ lst25.filter(_ % 2 == 0)\n        val lst28 = lst26.filter(_ % 2 == 0)\n   \
    \     val lst29 = lst27.filter(_ % 2 == 0)\n        val lst30 = lst28.filter(_\
    \ % 2 == 0)\n        val lst31 = lst29.filter(_ % 2 == 0)\n        val lst32 =\
    \ lst30.filter(_ % 2 == 0)\n        val lst33 = lst31.filter(_ % 2 == 0)\n   \
    \     val lst34 = lst32.filter(_ % 2 == 0)\n        val lst35 = lst33.filter(_\
    \ % 2 == 0)\n        val lst36 = lst34.filter(_ % 2 == 0)\n        val lst37 =\
    \ lst35.filter(_ % 2 == 0)\n        val lst38 = lst36.filter(_ % 2 == 0)\n   \
    \     val lst39 = lst37.filter(_ % 2 == 0)\n        val lst40 = lst38.filter(_\
    \ % 2 == 0)\n        val lst41 = lst39.filter(_ % 2 == 0)\n        val lst42 =\
    \ lst40.filter(_ % 2 == 0)\n        ", '        // Your code here', '        //
    Your code here', "        // Your code here\n        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n        if(even.size ==\
    \ odd.size) {\n            val evenList = even.toList\n            val oddList\
    \ = odd.toList\n            val exchanged = evenList.zip(oddList).filter(_._1\
    \ == _._2)\n            if(exchanged.size == evenList.size) {\n              \
    \  return \"YES\"\n            } else {\n                return \"NO\"\n     \
    \       }\n        } else {\n            return \"NO\"\n        }", '        //
    Your code here', '        // Your code here', '        // Your code here', '        //
    Your code goes here', "        val even = lst1.filter(x => x % 2 == 0)\n     \
    \   val odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        if (evenAndOdd.isEmpty) \"NO\" else \"YES\"", "        // Your code here\n\
    \        val lst3 = lst1.filter(_ % 2 == 0).filter(_ != lst2.head).filter(_ !=\
    \ lst2.last)\n        val lst4 = lst2.filter(_ % 2 == 0).filter(_ != lst1.head).filter(_\
    \ != lst1.last)\n        if(lst3.isEmpty || lst4.isEmpty) return(\"NO\")\n   \
    \     if(lst3.forall(x => lst4.contains(x))) return(\"YES\")\n        return(\"\
    NO\")", '        // Your code here', "        // Your code goes here\n       \
    \ val lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(_ % 2 == 0)\n      \
    \  if (lst4.isEmpty) {\n            \"NO\"\n        } else {\n            \"YES\"\
    \n        }", '        // Your code here', '        // Your code here', '        //
    Your code here', "        // Your code here\n        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0)\n        val lst2Even = lst2.filter(x => x % 2 == 0)\n      \
    \  val lst1Odd = lst1.filter(x => x % 2 != 0)\n        val lst2Odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOdd = lst1Even.zip(lst2Even).filter(x =>\
    \ x._1 == x._2)\n        val lst2EvenOdd = lst2Even.zip(lst1Even).filter(x =>\
    \ x._1 == x._2)\n        val lst1EvenEven = lst1Even.zip(lst2Even).filter(x =>\
    \ x._1 == x._2)\n        val lst2EvenEven = lst2Even.zip(lst1Even).filter(x =>\
    \ x._1 == x._2)\n        val lst1EvenEvenOdd = lst1EvenEven.zip(lst2EvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenEvenOdd = lst2EvenEven.zip(lst1EvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenEvenEven = lst1EvenEven.zip(lst2EvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenEvenEven = lst2EvenEven.zip(lst1EvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenEvenEvenOdd = lst1EvenEvenEven.zip(lst2EvenEvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenEvenEvenOdd = lst2EvenEvenEven.zip(lst1EvenEvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenEvenEvenEven = lst1EvenEvenEven.zip(lst2EvenEvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenEvenEvenEven = lst2EvenEvenEven.zip(lst1EvenEvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenEvenEvenEvenOdd = lst1EvenEvenEvenEven.zip(lst2EvenEvenEvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenEvenEvenEvenOdd = lst2EvenEvenEvenEven.zip(lst1EvenEvenEvenEven).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenEvenEvenEvenEven = lst1Even", "      \
    \  val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x =>\
    \ x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndEven\
    \ = even.intersect(even)\n        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven",
  '        // Your code here', '        // Your code here', '        // Your code
    here', '        // Your code here', "        val lst3 = lst1.toSet.diff(lst2.toSet)\n\
    \        if (lst3.isEmpty) \"\"\n        else lst3.forall(x => x % 2 == 0).map(\"\
    YES\").orElse(\"NO\")", '        // Your code here', '        // Your code here',
  "        // Your code here\n        val even = lst1.filter(x => x % 2 == 0)\n  \
    \      val odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        if(evenAndOdd.isEmpty) \n            \"NO\"\n        else\n         \
    \   \"YES\"", '        // Your code goes here', "        // Your code here\n \
    \       val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddList\
    \ = evenAndOdd.toList\n        val evenAndOddList2 = evenAndOddList.filter(x =>\
    \ x._1 == x._2)\n        val evenAndOddList3 = evenAndOddList2.toList\n      \
    \  val evenAndOddList4 = evenAndOddList3.filter(x => x._1 == x._2)\n        val\
    \ evenAndOddList5 = evenAndOddList4.toList\n        val evenAndOddList6 = evenAndOddList5.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddList7 = evenAndOddList6.toList\n   \
    \     val evenAndOddList8 = evenAndOddList7.filter(x => x._1 == x._2)\n      \
    \  val evenAndOddList9 = evenAndOddList8.toList\n        val evenAndOddList10\
    \ = evenAndOddList9.filter(x => x._1 == x._2)\n        val evenAndOddList11 =\
    \ evenAndOddList10.toList\n        val evenAndOddList12 = evenAndOddList11.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddList13 = evenAndOddList12.toList\n \
    \       val evenAndOddList14 = evenAndOddList13.filter(x => x._1 == x._2)\n  \
    \      val evenAndOddList15 = evenAndOddList14.toList\n        val evenAndOddList16\
    \ = evenAndOddList15.filter(x => x._1 == x._2)\n        val evenAndOddList17 =\
    \ evenAndOddList16.toList\n        val evenAndOddList18 = evenAndOddList17.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddList19 = evenAndOddList18.toList\n \
    \       val evenAndOddList20 = evenAndOddList19.filter(x => x._1 == x._2)\n  \
    \      val evenAndOddList21 = evenAndOddList20.toList\n        val evenAndOddList22\
    \ = evenAndOddList21.filter(x => x._1 == x._2)\n        val evenAndOddList", '        //
    Your code goes here', '        // Your code here', '        // Your code here',
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddToList\
    \ = evenAndOdd.map(x => x._1 + x._2)\n        val evenAndOddToListToList = evenAndOddToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToList = evenAndOddToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToList = evenAndOddToListToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToListToList = evenAndOddToListToListToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToListToListToList = evenAndOddToListToListToListToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToListToListToListToList\
    \ = evenAndOddToListToListToListToListToListToList.map(x => List(x))\n       \
    \ val evenAndOddToListToListToListToListToListToListToListToListToList = evenAndOddToListToListToListToListToListToListToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToListToListToListToListToListToListToListToList\
    \ = evenAndOddToListToListToListToListToListToListToListToListToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToListToListToListToListToListToListToListToListToListToList\
    \ = evenAndOddToListToListToListToListToListToListToListToListToListToListToListToListToList.map(x\
    \ => List(x))\n        val evenAndOddToListToListToListToListToListToListToListToListToListToListToListToListToListToListToListToList\
    \ = evenAndOddToListToListToListToListToListToListToListToListToListToListToListToListToListToList.map(x\
    \ => List(x))\n        val even", '        // Your code here', '        // Your
    code here', "        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        if (evenAndOdd.isEmpty) \"NO\" else \"YES\"", '        // Your code here',
  '        // Your code here', '        // Your code here', "        // Your code\
    \ here\n        val lst3 = lst1.filter(_ % 2 == 0).filter(_ != 0).filter(_ !=\
    \ lst2.head).filter(_ != lst2.last)\n        val lst4 = lst2.filter(_ % 2 == 0).filter(_\
    \ != 0).filter(_ != lst1.head).filter(_ != lst1.last)\n        if(lst3.isEmpty)\
    \ \"\"\n        else if(lst4.isEmpty) \"\"\n        else if(lst3.forall(x => lst4.contains(x)))\
    \ \"YES\"\n        else \"\"", "        val even = lst1.filter(x => x % 2 == 0)\n\
    \        val odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.zip(odd)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOdd.filter(x => x._1 == x._2)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOdd.filter(x => x._1 == x._2)\n        val\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOd",
  '        // Your code here', "        // Your code here\n        val lst1Size =\
    \ lst1.size\n        val lst2Size = lst2.size\n        val evenList = lst1.filter(_\
    \ % 2 == 0)\n        val oddList = lst1.filter(_ % 2 != 0)\n        val evenListSize\
    \ = evenList.size\n        val oddListSize = oddList.size\n        if(evenListSize\
    \ == lst2Size && oddListSize == lst1Size){\n            val evenList = lst1.filter(_\
    \ % 2 == 0)\n            val oddList = lst1.filter(_ % 2 != 0)\n            val\
    \ evenListSize = evenList.size\n            val oddListSize = oddList.size\n \
    \           if(evenListSize == lst2Size && oddListSize == lst1Size){\n       \
    \         val evenList = lst1.filter(_ % 2 == 0)\n                val oddList\
    \ = lst1.filter(_ % 2 != 0)\n                val evenListSize = evenList.size\n\
    \                val oddListSize = oddList.size\n                if(evenListSize\
    \ == lst2Size && oddListSize == lst1Size){\n                    val evenList =\
    \ lst1.filter(_ % 2 == 0)\n                    val oddList = lst1.filter(_ % 2\
    \ != 0)\n                    val evenListSize = evenList.size\n              \
    \      val oddListSize = oddList.size\n                    if(evenListSize ==\
    \ lst2Size && oddListSize == lst1Size){\n                        val evenList\
    \ = lst1.filter(_ % 2 == 0)\n                        val oddList = lst1.filter(_\
    \ % 2 != 0)\n                        val evenListSize = evenList.size\n      \
    \                  val oddListSize = oddList.size\n                        if(evenListSize\
    \ == lst2Size && oddListSize == lst1Size){\n                            val evenList\
    \ = lst1.filter(_ % 2 == 0)\n                            val oddList = lst1.filter(_\
    \ % 2 != 0)\n                            val evenListSize = evenList.size\n  \
    \                          val oddListSize = oddList.size\n                  \
    \          if(evenListSize == lst2Size && oddListSize == lst1Size){\n        \
    \                        val evenList = lst1.filter(_ % 2 == 0)\n            \
    \                    val oddList = lst1.filter(_ % 2 != 0)\n                 \
    \               val evenListSize = evenList.size\n                           \
    \     val oddListSize = oddList.size\n                                if(evenListSize\
    \ == lst2Size && oddListSize == lst1Size){\n                                 \
    \   val evenList = lst1.filter(_ % 2 == 0)\n                                 \
    \   val oddList = lst1.filter(_ % 2 != 0)\n                                  \
    \  val evenListSize = evenList.size\n                                    val oddListSize\
    \ = oddList.size\n                                    if(evenListSize == lst2Size\
    \ && oddListSize == lst", '        // Your code here', '        // Your code here',
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ != 0)\n        val evenOdd = even.zip(odd)\n        val evenOddMap = evenOdd.toMap\n\
    \        val evenOddMapKeys = evenOddMap.keys\n        val evenOddMapValues =\
    \ evenOddMap.values\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n  \
    \      val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSetSize\
    \ = evenOddMapKeysSet.size\n        val evenOddMapValuesSetSize = evenOddMapValuesSet.size\n\
    \        val evenOddMapKeysSetIsAllEven = evenOddMapKeysSet.isEmpty || evenOddMapKeysSet.isEmpty\n\
    \        val evenOddMapValuesSetIsAllEven = evenOddMapValuesSet.isEmpty || evenOddMapValuesSet.isEmpty\n\
    \        val evenOddMapKeysSetIsAllOdd = evenOddMapKeysSet.isEmpty || evenOddMapKeysSet.isEmpty\n\
    \        val evenOddMapValuesSetIsAllOdd = evenOddMapValuesSet.isEmpty || evenOddMapValuesSet.isEmpty\n\
    \        val evenOddMapKeysSetIsAllEvenOdd = evenOddMapKeysSet.isEmpty || evenOddMapKeysSet.isEmpty\n\
    \        val evenOddMapValuesSetIsAllEvenOdd = evenOddMapValuesSet.isEmpty ||\
    \ evenOddMapValuesSet.isEmpty\n        val evenOddMapKeysSetIsAllEvenOddEvenOdd\
    \ = evenOddMapKeysSet.isEmpty || evenOddMapKeysSet.isEmpty\n        val evenOddMapValuesSetIsAllEvenOddEvenOdd\
    \ = evenOddMapValuesSet.isEmpty || evenOddMapValuesSet.isEmpty\n        val evenOddMapKeysSetIsAllEvenOddEvenOddEvenOdd\
    \ = evenOddMapKeysSet.isEmpty || evenOddMapKeysSet.isEmpty\n        val evenOddMapValuesSetIsAllEvenOddEvenOddEvenOdd\
    \ = evenOddMapValuesSet.isEmpty || evenOddMapValuesSet.isEmpty\n        val evenOddMapKeysSetIsAllEvenOddEven",
  "        // Your code here\n        val even = lst1.filter(x => x % 2 == 0).length\n\
    \        val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd)\
    \ {\n            return \"NO\"\n        } else {\n            return \"YES\"\n\
    \        }", '        // Your code here', '        // Your code here', '        //
    Your code here', '        // Your code here', "        val lst3 = lst1 ++ lst2\n\
    \        val lst4 = lst3.filter(_ % 2 == 0)\n        val lst5 = lst3.filter(_\
    \ % 2 != 0)\n        val lst6 = lst4.filter(_ % 2 == 0)\n        val lst7 = lst4.filter(_\
    \ % 2 != 0)\n        val lst8 = lst5.filter(_ % 2 == 0)\n        val lst9 = lst5.filter(_\
    \ % 2 != 0)\n        val lst10 = lst6.filter(_ % 2 == 0)\n        val lst11 =\
    \ lst6.filter(_ % 2 != 0)\n        val lst12 = lst7.filter(_ % 2 == 0)\n     \
    \   val lst13 = lst7.filter(_ % 2 != 0)\n        val lst14 = lst8.filter(_ % 2\
    \ == 0)\n        val lst15 = lst8.filter(_ % 2 != 0)\n        val lst16 = lst9.filter(_\
    \ % 2 == 0)\n        val lst17 = lst9.filter(_ % 2 != 0)\n        val lst18 =\
    \ lst10.filter(_ % 2 == 0)\n        val lst19 = lst10.filter(_ % 2 != 0)\n   \
    \     val lst20 = lst11.filter(_ % 2 == 0)\n        val lst21 = lst11.filter(_\
    \ % 2 != 0)\n        val lst22 = lst12.filter(_ % 2 == 0)\n        val lst23 =\
    \ lst12.filter(_ % 2 != 0)\n        val lst24 = lst13.filter(_ % 2 == 0)\n   \
    \     val lst25 = lst13.filter(_ % 2 != 0)\n        val lst26 = lst14.filter(_\
    \ % 2 == 0)\n        val lst27 = lst14.filter(_ % 2 != 0)\n        val lst28 =\
    \ lst15.filter(_ % 2 == 0)\n        val lst29 = lst15.filter(_ % 2 != 0)\n   \
    \     val lst30 = lst16.filter(_ % 2 == 0)\n        val lst31 = lst16.filter(_\
    \ % 2 != 0)\n        val lst32 = lst17.filter(_ % 2 == 0)\n        val lst33 =\
    \ lst17.filter(_ % 2 != 0)\n        val lst34 = lst18.filter(_ % 2 == 0)\n   \
    \     val lst35 = lst18.filter(_ % 2 != 0)\n        val lst36 = lst19.filter(_\
    \ % 2 == 0)\n        val lst37 = lst19.filter(_ % 2 != 0)\n        val lst38 =\
    \ lst20.filter(_ % 2 == 0)\n        val lst39 = lst20.filter(_ % 2 != 0)\n   \
    \     val lst40 = lst21.filter(_ % 2 == 0)\n        val lst41 = lst21.filter(_\
    \ % 2 != ", '        // Your code here', "        val even = lst1.filter(_ % 2\
    \ == 0)\n        val odd = lst2.filter(_ % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndEven = even.intersect(even)\n        if(evenAndOdd.isEmpty)\
    \ \"NO\" else \"YES\"", '        // Your code here', '        // Your code here',
  '        // Your code here', "        val lst3 = lst1 ++ lst2\n        val lst4\
    \ = lst3.filter(_ % 2 == 0)\n        val lst5 = lst4.filter(_ % 2 == 0)\n    \
    \    val lst6 = lst5.filter(_ % 2 == 0)\n        val lst7 = lst6.filter(_ % 2\
    \ == 0)\n        val lst8 = lst7.filter(_ % 2 == 0)\n        val lst9 = lst8.filter(_\
    \ % 2 == 0)\n        val lst10 = lst9.filter(_ % 2 == 0)\n        val lst11 =\
    \ lst10.filter(_ % 2 == 0)\n        val lst12 = lst11.filter(_ % 2 == 0)\n   \
    \     val lst13 = lst12.filter(_ % 2 == 0)\n        val lst14 = lst13.filter(_\
    \ % 2 == 0)\n        val lst15 = lst14.filter(_ % 2 == 0)\n        val lst16 =\
    \ lst15.filter(_ % 2 == 0)\n        val lst17 = lst16.filter(_ % 2 == 0)\n   \
    \     val lst18 = lst17.filter(_ % 2 == 0)\n        val lst19 = lst18.filter(_\
    \ % 2 == 0)\n        val lst20 = lst19.filter(_ % 2 == 0)\n        val lst21 =\
    \ lst20.filter(_ % 2 == 0)\n        val lst22 = lst21.filter(_ % 2 == 0)\n   \
    \     val lst23 = lst22.filter(_ % 2 == 0)\n        val lst24 = lst23.filter(_\
    \ % 2 == 0)\n        val lst25 = lst24.filter(_ % 2 == 0)\n        val lst26 =\
    \ lst25.filter(_ % 2 == 0)\n        val lst27 = lst26.filter(_ % 2 == 0)\n   \
    \     val lst28 = lst27.filter(_ % 2 == 0)\n        val lst29 = lst28.filter(_\
    \ % 2 == 0)\n        val lst30 = lst29.filter(_ % 2 == 0)\n        val lst31 =\
    \ lst30.filter(_ % 2 == 0)\n        val lst32 = lst31.filter(_ % 2 == 0)\n   \
    \     val lst33 = lst32.filter(_ % 2 == 0)\n        val lst34 = lst33.filter(_\
    \ % 2 == 0)\n        val lst35 = lst34.filter(_ % 2 == 0)\n        val lst36 =\
    \ lst35.filter(_ % 2 == 0)\n        val lst37 = lst36.filter(_ % 2 == 0)\n   \
    \     val lst38 = lst37.filter(_ % 2 == 0)\n        val lst39 = lst38.filter(_\
    \ % 2 == 0)\n        val lst40 = lst39.filter(_ % 2 == 0)\n        val lst41 =\
    \ lst40.filter(_ % 2 == 0)\n        val lst42 = lst41.filter(_ % 2 == 0)\n   \
    \     val ", "        // Your code here\n        val lst3 = lst1 ++ lst2\n   \
    \     val lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.toList\n\
    \        if (lst5.size == lst1.size + lst2.size) {\n            val lst6 = lst5.sortWith((x,\
    \ y) => x < y)\n            val lst7 = lst6.filter(x => x % 2 == 0)\n        \
    \    val lst8 = lst7.sortWith((x, y) => x < y)\n            val lst9 = lst8.filter(x\
    \ => x % 2 == 0)\n            val lst10 = lst9.sortWith((x, y) => x < y)\n   \
    \         val lst11 = lst10.filter(x => x % 2 == 0)\n            val lst12 = lst11.sortWith((x,\
    \ y) => x < y)\n            val lst13 = lst12.filter(x => x % 2 == 0)\n      \
    \      val lst14 = lst13.sortWith((x, y) => x < y)\n            val lst15 = lst14.filter(x\
    \ => x % 2 == 0)\n            val lst16 = lst15.sortWith((x, y) => x < y)\n  \
    \          val lst17 = lst16.filter(x => x % 2 == 0)\n            val lst18 =\
    \ lst17.sortWith((x, y) => x < y)\n            val lst19 = lst18.filter(x => x\
    \ % 2 == 0)\n            val lst20 = lst19.sortWith((x, y) => x < y)\n       \
    \     val lst21 = lst20.filter(x => x % 2 == 0)\n            val lst22 = lst21.sortWith((x,\
    \ y) => x < y)\n            val lst23 = lst22.filter(x => x % 2 == 0)\n      \
    \      val lst24 = lst23.sortWith((x, y) => x < y)\n            val lst25 = lst24.filter(x\
    \ => x % 2 == 0)\n            val lst26 = lst25.sortWith((x, y) => x < y)\n  \
    \          val lst27 = lst26.filter(x => x % 2 == 0)\n            val lst28 =\
    \ lst27.sortWith((x, y) => x < y)\n            val lst29 = lst28.filter(x => x\
    \ % 2 == 0)\n            val lst30 = lst29.sortWith((x, y) => x < y)\n       \
    \     val lst31 = lst30.filter(x => x % 2 == 0)\n            val lst32 = lst31.sortWith((x,\
    \ y) => x < y)\n            val lst33 = lst32.filter(x => x % 2 == 0)\n      \
    \      val lst34 = lst33.sortWith((x, y) => x < y)\n            val lst35 = lst34.filter(x\
    \ => x % 2 == 0)\n            val lst36 = lst35.sortWith((x, y) => x < y)\n  \
    \          val lst37 = ", '        // Your code goes here', "        val even\
    \ = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 ==\
    \ 1)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOdd2 = evenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n        val evenAndOdd6\
    \ = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7 = evenAndOdd6.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n        val evenAndOdd11\
    \ = evenAndOdd10.filter(x => x._1 == x._2)\n        val evenAndOdd12 = evenAndOdd11.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd13 = evenAndOdd12.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd15 = evenAndOdd14.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n        val evenAndOdd17\
    \ = evenAndOdd16.filter(x => x._1 == x._2)\n        val evenAndOdd18 = evenAndOdd17.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd19 = evenAndOdd18.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd21 = evenAndOdd20.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd22 = evenAndOdd21.filter(x => x._1 == x._2)", '        // Your code
    here', "        // Your code goes here\n        val lst3 = lst1 ++ lst2\n    \
    \    val lst4 = lst3.filter(_ % 2 == 0)\n        val lst5 = lst4.filter(_ % 2\
    \ == 0)\n        if(lst5.isEmpty) \n            \"NO\"\n        else\n       \
    \     \"YES\"", '        // Your code here', "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 != 0)\n        val\
    \ exchange = even.zip(odd).filter(x => x._1 == x._2)\n        if(exchange.isEmpty)\
    \ \"\" else \"NO\"", "        val even = lst1.filter(x => x % 2 == 0)\n      \
    \  val odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(evenAndEven)\n        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndOdd = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAnd", '        // Your code here', '        //
    Your code here', "        val even = lst1.filter(x => x % 2 == 0)\n        val\
    \ odd = lst2.filter(x => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n\
    \        if (evenAndOdd.isEmpty) \"YES\" else \"NO\"", "        // Your code here\n\
    \        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        if (even.size == odd.size) {\n            val evenList\
    \ = even.toList\n            val oddList = odd.toList\n            val newList\
    \ = evenList.zip(oddList).filter(_._1 == _._2).map(_._2).toList\n            if\
    \ (newList.size == evenList.size) {\n                return \"YES\"\n        \
    \    } else {\n                return \"NO\"\n            }\n        } else {\n\
    \            return \"NO\"\n        }", '        // Your code goes here', '        //
    Your code here', '        // Your code here', '        // Your code here', " \
    \       // Your code goes here\n        val lst3 = lst1.toSet\n        val lst4\
    \ = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n        val lst6 = lst5.toList\n\
    \        val lst7 = lst6.filter(x => x % 2 == 0)\n        val lst8 = lst7.map(x\
    \ => lst1.indexOf(x))\n        val lst9 = lst8.filter(x => x != -1)\n        val\
    \ lst10 = lst9.map(x => lst2.indexOf(x))\n        val lst11 = lst10.filter(x =>\
    \ x != -1)\n        val lst12 = lst11.map(x => lst1.indexOf(x))\n        val lst13\
    \ = lst12.filter(x => x != -1)\n        val lst14 = lst13.map(x => lst2.indexOf(x))\n\
    \        val lst15 = lst14.filter(x => x != -1)\n        val lst16 = lst15.map(x\
    \ => lst1.indexOf(x))\n        val lst17 = lst16.filter(x => x != -1)\n      \
    \  val lst18 = lst17.map(x => lst2.indexOf(x))\n        val lst19 = lst18.filter(x\
    \ => x != -1)\n        val lst20 = lst19.map(x => lst1.indexOf(x))\n        val\
    \ lst21 = lst20.filter(x => x != -1)\n        val lst22 = lst21.map(x => lst2.indexOf(x))\n\
    \        val lst23 = lst22.filter(x => x != -1)\n        val lst24 = lst23.map(x\
    \ => lst1.indexOf(x))\n        val lst25 = lst24.filter(x => x != -1)\n      \
    \  val lst26 = lst25.map(x => lst2.indexOf(x))\n        val lst27 = lst26.filter(x\
    \ => x != -1)\n        val lst28 = lst27.map(x => lst1.indexOf(x))\n        val\
    \ lst29 = lst28.filter(x => x != -1)\n        val lst30 = lst29.map(x => lst2.indexOf(x))\n\
    \        val lst31 = lst30.filter(x => x != -1)\n        val lst32 = lst31.map(x\
    \ => lst1.indexOf(x))\n        val lst33 = lst32.filter(x => x != -1)\n      \
    \  val lst34 = lst33.map(x => lst2.indexOf(x))\n        val lst35 = lst34.filter(x\
    \ => x != -1)\n        val lst36 = lst35.map(x => lst1.indexOf(x))\n        val\
    \ lst37 = lst36.filter(x => x != -1)\n        val lst38 = lst37.map(x => lst2.indexOf(x))\n\
    \        val lst39 = lst38.", '        // Your code here', '        // Your code
    here', '        // Your code here', '        // Your code here', '        // Your
    code here', '        // Your code here', '        // Your code here', '        //
    Your code here', "        // Your code goes here\n        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ exchange = even.zip(odd).filter(x => x._1 == x._2)\n        if (exchange.isEmpty)\
    \ \"\"\n        else exchange.map(x => x._1).mkString(\" \")", '        // Your
    code here', '        // Your code here', "        val even = lst1.filter(x =>\
    \ x % 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n\
    \        if (even > odd) {\n            return \"NO\"\n        }\n        else\
    \ {\n            return \"YES\"\n        }", "        // Your code here\n    \
    \    val lst3 = lst1.toList\n        val lst4 = lst2.toList\n        val lst5\
    \ = lst3.toList\n        val lst6 = lst4.toList\n        val lst7 = lst5.toList\n\
    \        val lst8 = lst6.toList\n        val lst9 = lst7.toList\n        val lst10\
    \ = lst8.toList\n        val lst11 = lst9.toList\n        val lst12 = lst10.toList\n\
    \        val lst13 = lst11.toList\n        val lst14 = lst12.toList\n        val\
    \ lst15 = lst13.toList\n        val lst16 = lst14.toList\n        val lst17 =\
    \ lst15.toList\n        val lst18 = lst16.toList\n        val lst19 = lst17.toList\n\
    \        val lst20 = lst18.toList\n        val lst21 = lst19.toList\n        val\
    \ lst22 = lst20.toList\n        val lst23 = lst21.toList\n        val lst24 =\
    \ lst22.toList\n        val lst25 = lst23.toList\n        val lst26 = lst24.toList\n\
    \        val lst27 = lst25.toList\n        val lst28 = lst26.toList\n        val\
    \ lst29 = lst27.toList\n        val lst30 = lst28.toList\n        val lst31 =\
    \ lst29.toList\n        val lst32 = lst30.toList\n        val lst33 = lst31.toList\n\
    \        val lst34 = lst32.toList\n        val lst35 = lst33.toList\n        val\
    \ lst36 = lst34.toList\n        val lst37 = lst35.toList\n        val lst38 =\
    \ lst36.toList\n        val lst39 = lst37.toList\n        val lst40 = lst38.toList\n\
    \        val lst41 = lst39.toList\n        val lst42 = lst40.toList\n        val\
    \ lst43 = lst41.toList\n        val lst44 = lst42.toList\n        val lst45 =\
    \ lst43.toList\n        val lst46 = lst44.toList\n        val lst47 = lst45.toList\n\
    \        val lst48 = lst46.toList\n        val lst49 = lst47.toList\n        val\
    \ lst50 = lst48.toList\n        val lst51 = lst49.toList\n        val lst52 =\
    \ lst50.toList\n        val lst53 = lst51.toList\n        val ", "        val\
    \ even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x %\
    \ 2 == 1)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddWithoutEven\
    \ = evenAndOdd.filter(_._1 != _._2)\n        val evenAndOddWithoutEvenAndOdd =\
    \ evenAndOddWithoutEven.filter(_._1 != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOdd.filter(_._1 != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOdd\
    \ = evenAndOddWithoutEvenAndOddWithoutEven.filter(_._1 != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOdd.filter(_._1 != _._2)\n      \
    \  val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOdd = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven.filter(_._1\
    \ != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOdd.filter(_._1\
    \ != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOdd\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven.filter(_._1\
    \ != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOdd.filter(_._1\
    \ != _._2)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOdd.filter(_._1\
    \ != _._2)\n        val evenAndOddWithoutEvenAndOdd", '        // Your code here',
  '        // Your code here', '        // Your code here', '        // Your code
    here', '        // Your code here', '        // Your code here', '        // Your
    code here', '        // Your code here', "        // Your code here\n        val\
    \ even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n\
    \        if(even.size == lst1.size && odd.size == lst2.size) {\n            val\
    \ evenList = even.sortWith(_ < _)\n            val oddList = odd.sortWith(_ <\
    \ _)\n            if(evenList.length == oddList.length) {\n                val\
    \ evenList = evenList.sortWith(_ < _)\n                val oddList = oddList.sortWith(_\
    \ < _)\n                val evenList = evenList.filter(_ % 2 == 0)\n         \
    \       val oddList = oddList.filter(_ % 2 == 1)\n                if(evenList.length\
    \ == oddList.length) {\n                    if(evenList.length == even.size &&\
    \ oddList.length == odd.size) {\n                        if(evenList.length ==\
    \ even.size && evenList.forall(x => x == x)) {\n                            return\
    \ \"YES\"\n                        } else {\n                            return\
    \ \"NO\"\n                        }\n                    } else {\n          \
    \              return \"NO\"\n                    }\n                } else {\n\
    \                    return \"NO\"\n                }\n            } else {\n\
    \                return \"NO\"\n            }\n        } else {\n            return\
    \ \"NO\"\n        }", "        // Your code here\n        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n        if (even.size\
    \ == lst1.size && odd.size == lst2.size) {\n            val evenList = even.map(x\
    \ => lst2.indexOf(x)).filter(x => x >= 0)\n            val oddList = odd.map(x\
    \ => lst1.indexOf(x)).filter(x => x >= 0)\n            evenList.zip(oddList).forall\
    \ { case (ev, od) => ev == od }\n        } else {\n            \"NO\"\n      \
    \  }", '        // Your code here', '        // Your code here', '        // Your
    code here', '        // Your code here', "        val even = lst1.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n    \
    \    val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n        val evenAndOddAndOdd\
    \ = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAnd",
  '        // Your code here', "        // Your code here\n        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 != 0)\n        if(even.size\
    \ == lst1.size && odd.size == lst2.size){\n            val evenList = even.toList\n\
    \            val oddList = odd.toList\n            val evenSet = evenList.map(x\
    \ => x -> true).toSet\n            val oddSet = oddList.map(x => x -> true).toSet\n\
    \            val newSet = evenSet.intersect(oddSet)\n            if(newSet.isEmpty){\n\
    \                return \"NO\"\n            }else{\n                return \"\
    YES\"\n            }\n        }else{\n            return \"NO\"\n        }", '        //
    Your code goes here', '        // Your code here', "        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0)\n        val lst2Even = lst2.filter(x => x % 2 == 0)\n      \
    \  val lst1Odd = lst1.filter(x => x % 2 != 0)\n        val lst2Odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenAndOdd = lst1Even.intersect(lst1Odd)\n \
    \       val lst2EvenAndOdd = lst2Even.intersect(lst2Odd)\n        val lst1EvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n        val lst2EvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOdd.filter(x => !lst1EvenAndOdd.contains(x))\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOdd.filter(x => !lst2EvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd = lst2EvenAndOddAndNotBothEvenAndOdd.filter(x\
    \ => !lst1EvenAndOddAndNotBothEvenAndOdd.contains(x))\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNot", '        // Your code here', '        //
    Your code here', '        // Your code here', '        // Your code here', " \
    \       val lst3 = lst1.filter(_ % 2 == 0).sortBy(_)\n        val lst4 = lst2.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst5 = lst3.zip(lst4).filter(_._1 == _._2).map(_._1).sortBy(_)\n\
    \        val lst6 = lst5.filter(_ % 2 == 0).sortBy(_)\n        val lst7 = lst6.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst8 = lst7.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst9 = lst8.filter(_ % 2 == 0).sortBy(_)\n        val lst10 = lst9.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst11 = lst10.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst12 = lst11.filter(_ % 2 == 0).sortBy(_)\n        val lst13 = lst12.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst14 = lst13.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst15 = lst14.filter(_ % 2 == 0).sortBy(_)\n        val lst16 = lst15.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst17 = lst16.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst18 = lst17.filter(_ % 2 == 0).sortBy(_)\n        val lst19 = lst18.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst20 = lst19.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst21 = lst20.filter(_ % 2 == 0).sortBy(_)\n        val lst22 = lst21.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst23 = lst22.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst24 = lst23.filter(_ % 2 == 0).sortBy(_)\n        val lst25 = lst24.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst26 = lst25.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst27 = lst26.filter(_ % 2 == 0).sortBy(_)\n        val lst28 = lst27.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst29 = lst28.filter(_ % 2 == 0).sortBy(_)\n\
    \        val lst30 = lst29.filter(_ % 2 == 0).sortBy(_)\n        val lst31 = lst30.filter(_\
    \ % 2 == 0).sortBy(_)\n        val lst32 = lst31.filter(_ % 2 == 0).sortBy(_)\n\
    \        val ", '        // Your code here', '        // Your code here', '        //
    Your code here', '        // Your code here', "        // Your code here\n   \
    \     val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ != 0)\n        if (even.size == odd.size) {\n            val evenList = even.sortWith(_\
    \ < _)\n            val oddList = odd.sortWith(_ < _)\n            if (evenList.size\
    \ == oddList.size) {\n                val evenList = evenList.sortWith(_ < _)\n\
    \                val oddList = oddList.sortWith(_ < _)\n                if (evenList.size\
    \ == even.size && oddList.size == odd.size) {\n                    val evenList\
    \ = evenList.sortWith(_ < _)\n                    val oddList = oddList.sortWith(_\
    \ < _)\n                    if (evenList.size == even.size && oddList.size ==\
    \ odd.size) {\n                        val evenList = evenList.sortWith(_ < _)\n\
    \                        val oddList = oddList.sortWith(_ < _)\n             \
    \           if (evenList.size == even.size && oddList.size == odd.size) {\n  \
    \                          val evenList = evenList.sortWith(_ < _)\n         \
    \                   val oddList = oddList.sortWith(_ < _)\n                  \
    \          if (evenList.size == even.size && oddList.size == odd.size) {\n   \
    \                             val evenList = evenList.sortWith(_ < _)\n      \
    \                          val oddList = oddList.sortWith(_ < _)\n           \
    \                     if (evenList.size == even.size && oddList.size == odd.size)\
    \ {\n                                    val evenList = evenList.sortWith(_ <\
    \ _)\n                                    val oddList = oddList.sortWith(_ < _)\n\
    \                                    if (evenList.size == even.size && oddList.size\
    \ == odd.size) {\n                                        val evenList = evenList.sortWith(_\
    \ < _)\n                                        val oddList = oddList.sortWith(_\
    \ < _)\n                                        if (evenList.size == even.size\
    \ && oddList.size == odd.size) {\n                                           \
    \ return \"YES\"\n                                        } else {\n         \
    \                                   return \"NO\"\n                          \
    \              }\n                                    } else {\n             \
    \                           return \"NO\"\n                                  \
    \  }\n                                } else {\n                             \
    \       return \"NO\"\n                                }\n                   \
    \         } else {\n                                return \"NO\"\n          \
    \                  }\n                        } else {\n                     \
    \       return \"NO\"\n                        }\n                    } else {\n\
    \                        return \"NO\"\n                    }\n              \
    \  } else {\n                    return \"NO\"\n                }\n          \
    \  } else {\n                return \"NO\"\n            }\n        } else {\n\
    \            return \"NO\"\n        }", "        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        if (lst3.size == lst1.size + lst2.size) {\n            if (lst3.forall(x\
    \ => x % 2 == 0)) {\n                return \"YES\"\n            }\n        }\n\
    \        return \"NO\"", '        // Your code here', "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndOdd.intersect(evenAndEven)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven",
  '        // Your code here', '        // Your code here', '        // Your code
    here', "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddToList\
    \ = evenAndOdd.map(x => x._1 + x._2)\n        val evenAndOddToListToSet = evenAndOddToList.map(x\
    \ => x % 2 == 0)\n        val evenAndOddToSet = evenAndOddToList.toSet\n     \
    \   val evenAndOddToSetToList = evenAndOddToSet.toList\n        val evenAndOddToSetToSet\
    \ = evenAndOddToListToSet.map(x => x % 2 == 0)\n        val evenAndOddToSetToSetToList\
    \ = evenAndOddToSetToSet.toList\n        val evenAndOddToSetToSetToSet = evenAndOddToSetToList.toSet\n\
    \        val evenAndOddToSetToSetToList = evenAndOddToSetToSet.toList\n      \
    \  val evenAndOddToSetToSetToSet = evenAndOddToSetToList.toSet\n        val evenAndOddToSetToSetToSetToList\
    \ = evenAndOddToSetToSet.toList\n        val evenAndOddToSetToSetToSetToSet =\
    \ evenAndOddToSetToSet.toSet\n        val evenAndOddToSetToSetToSetToList = evenAndOddToSetToSet.toList\n\
    \        val evenAndOddToSetToSetToSetToSet = evenAndOddToSetToSet.toSet\n   \
    \     val evenAndOddToSetToSetToSetToList = evenAndOddToSetToSet.toList\n    \
    \    val evenAndOddToSetToSetToSetToSet = evenAndOddToSetToSet.toSet\n       \
    \ val evenAndOddToSetToSetToSetToSetToList = evenAndOddToSetToSet.toList\n   \
    \     val evenAndOddToSetToSetToSetToSet = evenAndOddToSetToSet.toSet\n      \
    \  val evenAndOddToSetToSetToSetToSetToList = evenAndOddToSetToSet.toList\n  \
    \      val evenAndOddToSetToSetToSetToSetToSet = evenAndOddToSetToSet.toSet\n\
    \        val evenAnd", '        // Your code here', '        // Your code here',
  "        val lst3 = lst1.toSet - lst2.toSet\n        if(lst3.isEmpty) \n       \
    \     \"NO\"\n        else\n            \"YES\"", '        // Your code here',
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenAndOdd = even.intersect(odd)\n        if (evenAndOdd.isEmpty)\
    \ \"YES\" else \"NO\"", '        // Your code here', '        // Your code here',
  '        // Your code here', '        // Your code here', "        // Your code\
    \ here\n        val lst3 = lst1.filter(_ % 2 == 0).zip(lst2.filter(_ % 2 == 0)).filter(_._1\
    \ == _._2).map(_._1).distinct\n        if(lst3.size == lst1.size)\n          \
    \  return \"YES\"\n        else\n            return \"NO\"", "        val lst3\
    \ = lst1.zip(lst2).filter(_._1 % 2 == 0).map(_._2)\n        if (lst3.isEmpty)\
    \ \"\"\n        else lst3.foldLeft(\"\")(_ + _)", '        // Your code here',
  '        // Your code here', "        val even = lst1.filter(x => x % 2 == 0)\n\
    \        val odd = lst2.filter(x => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n\
    \        val evenOddList = evenOdd.toList\n        val evenOddList2 = evenOddList.map(x\
    \ => x._2)\n        val evenOddList3 = evenOddList2.filter(x => x % 2 == 0)\n\
    \        val evenOddList4 = evenOddList3.filter(x => x % 2 == 1)\n        val\
    \ evenOddList5 = evenOddList4.map(x => x._1)\n        val evenOddList6 = evenOddList5.filter(x\
    \ => x % 2 == 0)\n        val evenOddList7 = evenOddList6.filter(x => x % 2 ==\
    \ 1)\n        val evenOddList8 = evenOddList7.map(x => x._1)\n        val evenOddList9\
    \ = evenOddList8.filter(x => x % 2 == 0)\n        val evenOddList10 = evenOddList9.filter(x\
    \ => x % 2 == 1)\n        val evenOddList11 = evenOddList10.map(x => x._1)\n \
    \       val evenOddList12 = evenOddList11.filter(x => x % 2 == 0)\n        val\
    \ evenOddList13 = evenOddList12.filter(x => x % 2 == 1)\n        val evenOddList14\
    \ = evenOddList13.map(x => x._1)\n        val evenOddList15 = evenOddList14.filter(x\
    \ => x % 2 == 0)\n        val evenOddList16 = evenOddList15.filter(x => x % 2\
    \ == 1)\n        val evenOddList17 = evenOddList16.map(x => x._1)\n        val\
    \ evenOddList18 = evenOddList17.filter(x => x % 2 == 0)\n        val evenOddList19\
    \ = evenOddList18.filter(x => x % 2 == 1)\n        val evenOddList20 = evenOddList19.map(x\
    \ => x._1)\n        val evenOddList21 = evenOddList20.filter(x => x % 2 == 0)\n\
    \        val evenOddList22 = evenOddList21.filter(x => x % 2 == 1)\n        val\
    \ evenOddList23 = evenOddList22.map(x => x._1)\n        val evenOddList24 = evenOddList23.filter(x\
    \ => x ", "        val lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(_ %\
    \ 2 == 0)\n        val lst5 = lst4.filter(_ % 2 == 0)\n        if (lst5.isEmpty)\
    \ \"\" else \"NO\"", '        // Your code here', '        // Your code here',
  "        val evens = lst1.filter(x => x % 2 == 0)\n        val odds = lst2.filter(x\
    \ => x % 2 == 1)\n        val exchanged = evens.zip(odds).filter(_._1 == _._2)\n\
    \        if (exchanged.isEmpty) \"\"\n        else exchanged.head._1 + exchanged.last._1",
  "        val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val evenOdd = even.zip(odd)\n        val evenOdd2 =\
    \ evenOdd.filter(x => x._1 == x._2)\n        val evenOdd3 = evenOdd2.filter(x\
    \ => x._1 == x._2)\n        val evenOdd4 = evenOdd3.filter(x => x._1 == x._2)\n\
    \        val evenOdd5 = evenOdd4.filter(x => x._1 == x._2)\n        val evenOdd6\
    \ = evenOdd5.filter(x => x._1 == x._2)\n        val evenOdd7 = evenOdd6.filter(x\
    \ => x._1 == x._2)\n        val evenOdd8 = evenOdd7.filter(x => x._1 == x._2)\n\
    \        val evenOdd9 = evenOdd8.filter(x => x._1 == x._2)\n        val evenOdd10\
    \ = evenOdd9.filter(x => x._1 == x._2)\n        val evenOdd11 = evenOdd10.filter(x\
    \ => x._1 == x._2)\n        val evenOdd12 = evenOdd11.filter(x => x._1 == x._2)\n\
    \        val evenOdd13 = evenOdd12.filter(x => x._1 == x._2)\n        val evenOdd14\
    \ = evenOdd13.filter(x => x._1 == x._2)\n        val evenOdd15 = evenOdd14.filter(x\
    \ => x._1 == x._2)\n        val evenOdd16 = evenOdd15.filter(x => x._1 == x._2)\n\
    \        val evenOdd17 = evenOdd16.filter(x => x._1 == x._2)\n        val evenOdd18\
    \ = evenOdd17.filter(x => x._1 == x._2)\n        val evenOdd19 = evenOdd18.filter(x\
    \ => x._1 == x._2)\n        val evenOdd20 = evenOdd19.filter(x => x._1 == x._2)\n\
    \        val evenOdd21 = evenOdd20.filter(x => x._1 == x._2)\n        val evenOdd22\
    \ = evenOdd21.filter(x => x._1 == x._2)\n        val evenOdd23 = evenOdd22.filter(x\
    \ => x._1 == x._2)\n        val evenOdd24 = evenOdd23.filter(x => x._1 == x._2)",
  "        val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2\
    \ == 1)\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddSet = evenAndOdd.toSet\n\
    \        val lst1Set = lst1.toSet\n        if (evenAndOddSet.size == lst1Set.size)\
    \ {\n            val evenAndOddSet2 = evenAndOdd.toSet\n            val lst2Set\
    \ = lst2.toSet\n            if (evenAndOddSet2.size == lst2Set.size) {\n     \
    \           val evenAndOddSet3 = evenAndOdd2.toSet\n                if (evenAndOddSet3.size\
    \ == lst2Set.size) {\n                    val evenAndOddSet4 = evenAndOdd3.toSet\n\
    \                    if (evenAndOddSet4.size == lst2Set.size) {\n            \
    \            val evenAndOddSet5 = evenAndOdd4.toSet\n                        if\
    \ (evenAndOddSet5.size == lst2Set.size) {\n                            val evenAndOddSet6\
    \ = evenAndOdd5.toSet\n                            if (evenAndOddSet6.size ==\
    \ lst2Set.size) {\n                                val evenAndOddSet7 = evenAndOdd6.toSet\n\
    \                                if (evenAndOddSet7.size == lst2Set.size) {\n\
    \                                    val evenAndOddSet8 = evenAndOdd7.toSet\n\
    \                                    if (evenAndOddSet8.size == lst2Set.size)\
    \ {\n                                        val evenAndOddSet9 = evenAndOdd8.toSet\n\
    \                                        if (evenAndOddSet9.size == lst2Set.size)\
    \ {\n                                            return \"YES\"\n            \
    \                            } else {\n                                      \
    \      return \"NO\"\n                                        }\n            \
    \                        } else {\n                                        return\
    \ \"NO\"\n                                    }\n                            \
    \    } else {\n                                    return \"NO\"\n           \
    \                     }\n                            } else {\n              \
    \                  return \"NO\"\n                            }\n            \
    \            } else {\n                            return \"NO\"\n           \
    \             }\n                    } else {\n                        return\
    \ \"NO\"\n                    }\n                } else {\n                  \
    \  return \"NO\"\n                }\n            } else {\n                return\
    \ \"NO\"\n            }\n        } else {\n            return \"NO\"\n       \
    \ }", '        // Your code goes here', "        // Your code here\n        val\
    \ lst3 = lst1.filter(_%2==0)\n        val lst4 = lst2.filter(_%2==0)\n       \
    \ if(lst3.isEmpty==true && lst4.isEmpty==true){\n            return \"NO\"\n \
    \       }\n        else if(lst3.isEmpty==true && lst4.isEmpty==false){\n     \
    \       return \"NO\"\n        }\n        else if(lst3.isEmpty==false && lst4.isEmpty==true){\n\
    \            return \"NO\"\n        }\n        else if(lst3.isEmpty==false &&\
    \ lst4.isEmpty==false){\n            return \"YES\"\n        }\n        else{\n\
    \            return \"NO\"\n        }", '        // Your code here', '        //
    Your code here', '        // Your code here', '        // Your code here']
stop_tokens:
- "\n    }\n"
