name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    def makePalindrome(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.substring(0,string.length/2))\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  longestPalindrome + longestPalindrome.reverse", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        longestPalindrome + longestPalindrome.trim().reverse",
  "        val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        val reversedString = string.drop(longestPalindrome.length)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindromicSuffix =\
    \ findLongestPalindromicSuffix(string.tail)\n        val reversedLongestPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix)\n        val reversedLongestPalindromicSuffixWithPalindromicPrefix\
    \ = reverseString(longestPalindromicSuffix + reversedLongestPalindromicSuffix)\n\
    \        reversedLongestPalindromicSuffixWithPalindromicPrefix", "        val\
    \ longestPalindrome = string.takeWhile(c => c != string.last).reverse\n      \
    \  val prefixString = string.takeWhile(c => c != longestPalindrome).reverse\n\
    \        longestPalindrome + prefixString", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        longestPalindrome + longestPalindrome.substring(longestPalindrome.indexOf(string)).reverse",
  "        val longestPalindrome = string.takeWhile(c => c != string.reverse.charAt(0))\n\
    \        val reversedString = string.takeWhile(c => c != longestPalindrome.reverse.charAt(0))\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string, string.size)\n        val reversedString = reverseString(longestPalindrome,\
    \ string.size)\n        longestPalindrome + reversedString", "        val longestPalindrome\
    \ = findLongestPalindrome(string.substring(0,string.length-1))\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.substring(string.length\
    \ / 2).reverse\n        val reversedString = string.substring(string.length /\
    \ 2, string.length)\n        val palindrome = longestPalindrome + reversedString\n\
    \        palindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        longestPalindrome + reverse(string,longestPalindrome)", "        val\
    \ longestPalindrome = findLongestPalindrome(string.dropRight(1))\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.takeWhile(c => c\
    \ != string.last).reverse\n        val reversedString = string.takeWhile(c =>\
    \ c != longestPalindrome).reverse\n        longestPalindrome + reversedString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        val reversedString\
    \ = longestPalindrome.tail.reverse\n        longestPalindrome + reversedString",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.length)\n\
    \        val longestPalindromicPrefixString = longestPalindromicPrefix(string,\
    \ longestPalindromicSuffix)\n        longestPalindromicPrefixString + longestPalindromicSuffix",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        val reversedString = reverseString(string.head) + longestPalindrome\n\
    \        reversedString", "        val longestPalindrome = findLongestPalindrome(string.split(''))\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = longestPalindrome(string,\
    \ \"\")\n        longestPalindrome + longestPalindrome.reverse", "        val\
    \ longestPalindrome = findLongestPalindrome(string.chars)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedString\
    \ = longestPalindrome.reverse\n        string + reversedString", "        val\
    \ longestPalindrome = longestPalindrome(string.dropRight(1))\n        string +\
    \ longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        string + longestPalindrome", "        val longestPalindrome\
    \ = string.substring(0,string.length-1)\n        val reversedString = longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ ')+1)\n        longestPalindrome + reversedString", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.dropRight(string.size/2))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.substring(0,string.length-1))\n        string +\
    \ longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        val reversedString = reverseString(longestPalindrome,\
    \ string.size)\n        reversedString + longestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(c => c != string.last).reverse\n        val reversedString\
    \ = string.takeWhile(c => c != longestPalindrome).reverse\n        longestPalindrome\
    \ + reversedString", "        // Find longest postfix of supplied string that\
    \ is a palindrome.\n        // The longest postfix is found by reversing a string\
    \ prefix that comes before the postfix.\n        // The longest postfix is found\
    \ by reversing a string prefix that comes before the postfix.\n        // The\
    \ longest postfix is found by reversing a string prefix that comes before the\
    \ postfix.\n        // The longest postfix is found by reversing a string prefix\
    \ that comes before the postfix.\n        // The longest postfix is found by reversing\
    \ a string prefix that comes before the postfix.\n        // The longest postfix\
    \ is found by reversing a string prefix that comes before the postfix.\n     \
    \   // The longest postfix is found by reversing a string prefix that comes before\
    \ the postfix.\n        // The longest postfix is found by reversing a string\
    \ prefix that comes before the postfix.\n        // The longest postfix is found\
    \ by reversing a string prefix that comes before the postfix.\n        // The\
    \ longest postfix is found by reversing a string prefix that comes before the\
    \ postfix.\n        // The longest postfix is found by reversing a string prefix\
    \ that comes before the postfix.\n        // The longest postfix is found by reversing\
    \ a string prefix that comes before the postfix.\n        // The longest postfix\
    \ is found by reversing a string prefix that comes before the postfix.\n     \
    \   // The longest postfix is found by reversing a string prefix that comes before\
    \ the postfix.\n        // The longest postfix is found by reversing a string\
    \ prefix that comes before the postfix.\n        // The longest postfix is found\
    \ by reversing a string prefix that comes before the postfix.\n        // The\
    \ longest postfix is found by reversing a string prefix that comes before the\
    \ postfix.\n        // The longest postfix is found by reversing a string prefix\
    \ that comes before the postfix.\n        // The longest postfix is found by reversing\
    \ a string prefix that comes before the postfix.\n        // The longest postfix\
    \ is found by reversing a string prefix that comes before the postfix.\n     \
    \   // The longest postfix is found by reversing a string prefix that comes before\
    \ the postfix.\n        // The longest postfix is found by reversing a string\
    \ prefix that comes before the postfix.\n        // The longest postfix is found\
    \ by reversing a string prefix that comes before the postfix.\n        // The\
    \ longest postfix is found by reversing a string prefix ", "        val longestPalindrome\
    \ = longestPalindrome(string.substring(0,string.length/2))\n        string + longestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length/2))\n\
    \        val reversedString = longestPalindrome + string.substring(string.length/2,string.length)\n\
    \        reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        longestPalindrome + longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ ')).reverse", "        // Find longest postfix of string that is a palindrome.\n\
    \        var longestPalindrome = string\n        var longestPalindromeLength =\
    \ 0\n        var longestPalindromePostfix = 0\n        var longestPalindromePostfixLength\
    \ = 0\n        var longestPalindromePostfixIndex = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength2 = 1\n        var longestPalindromePostfixIndexLength3\
    \ = 1\n        var longestPalindromePostfixIndexLength4 = 1\n        var longestPalindromePostfixIndexLength5\
    \ = 1\n        var longestPalindromePostfixIndexLength6 = 1\n        var longestPalindromePostfixIndexLength7\
    \ = 1\n        var longestPalindromePostfixIndexLength8 = 1\n        var longestPalindromePostfixIndexLength9\
    \ = 1\n        var longestPalindromePostfixIndexLength10 = 1\n        var longestPalindromePostfixIndexLength11\
    \ = 1\n        var longestPalindromePostfixIndexLength12 = 1\n        var longestPalindromePostfixIndexLength13\
    \ = 1\n        var longestPalindromePostfixIndexLength14 = 1\n        var longestPalindromePostfixIndexLength15\
    \ = 1\n        var longestPalindromePostfixIndexLength16 = 1\n        var longestPalindromePostfixIndexLength17\
    \ = 1\n        var longestPalindromePostfixIndexLength18 = 1\n        var longestPalindromePostfixIndexLength19\
    \ = 1\n        var longestPalindromePostfixIndexLength20 = 1\n        var longestPalindromePostfixIndexLength21\
    \ = 1\n        var longestPalindromePostfixIndexLength22 = 1\n        var longestPalindromePostfixIndexLength23\
    \ = 1\n        var longestPalindromePostfixIndexLength24 = 1\n        var longestPalindromePostfixIndexLength25\
    \ = 1\n        var longestPalindromePostfixIndexLength26 = 1\n        var longestPalindromePostfixIndexLength27\
    \ = 1\n        var longestPalindromePostfixIndexLength28 = 1\n        var longestPalindromePostfixIndexLength29\
    \ = 1\n        var longestPalindromePostfixIndexLength30 = 1\n        var longestPalindromePostfixIndexLength31\
    \ = 1\n        var longestPalindromePostfixIndexLength32 = 1\n        var longestPalindromePostfixIndexLength33\
    \ = 1\n        var longestPalindromePostfixIndexLength34 = 1\n        var longestPalin",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        val longestPalindromicPrefixString = longestPalindromicPrefix(string,\
    \ longestPalindromicSuffix)\n        val longestPalindromicPrefixString = longestPalindromicPrefixString(longestPalindromicPrefixString)\n\
    \        longestPalindromicPrefixString + longestPalindromicSuffix", "       \
    \ val longestPalindrome = findLongestPalindrome(string.tail)\n        val reversedString\
    \ = longestPalindrome.tail.reverse\n        longestPalindrome + reversedString",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedLongestPalindrome = longestPalindrome.reverse\n        val reversedLongestPalindromeLength\
    \ = reversedLongestPalindrome.length\n        val reversedLongestPalindromePrefix\
    \ = reversedLongestPalindrome.substring(0, reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromeSuffix = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindrome = reversedLongestPalindromePrefix + reversedLongestPalindromeSuffix\n\
    \        val reversedLongestPalindromeLength = reversedLongestPalindrome.length\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindrome.substring(0,\
    \ reversedLongestPalindromeLength)\n        val reversedLongestPalindromeSuffix\
    \ = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n   \
    \     val reversedLongestPalindrome = reversedLongestPalindromePrefix + reversedLongestPalindromeSuffix\n\
    \        val reversedLongestPalindromeLength = reversedLongestPalindrome.length\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindrome.substring(0,\
    \ reversedLongestPalindromeLength)\n        val reversedLongestPalindromeSuffix\
    \ = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n   \
    \     val reversedLongestPalindrome = reversedLongestPalindromePrefix + reversedLongestPalindromeSuffix\n\
    \        val reversedLongestPalindromeLength = reversedLongestPalindrome.length\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindrome.substring(0,\
    \ reversedLongestPalindromeLength)\n        val reversedLongestPalindromeSuffix\
    \ = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n   \
    \     val reversedLongestPalindrome = reversedLongestPalindromePrefix + reversedLongestPalindromeSuffix\n\
    \        val reversedLongest", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val reversedString = string.takeWhile(x => x == string.last).reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x == x.reverse).reverse\n        longestPalindrome + longestPalindrome.takeWhile(x\
    \ => x != longestPalindrome.reverse).reverse", "        val longestPalindrome\
    \ = findLongestPalindrome(string.dropRight(1))\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.dropRight(string.size/2))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = string.takeWhile(c\
    \ => c != string.last).reverse\n        val prefix = string.takeWhile(c => c !=\
    \ longestPalindrome.last)\n        val suffix = string.drop(longestPalindrome.last)\n\
    \        prefix + longestPalindrome + suffix", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(c => c != string.reverse(string.indexOf(c))).reverse\n    \
    \    val reversedString = longestPalindrome + string.reverse(longestPalindrome.indexOf(longestPalindrome))\n\
    \        reversedString", "        val longestPalindrome = string.takeWhile(c\
    \ => c != string.reverse(string.indexOf(c))).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.substring(0,\
    \ string.length / 2))\n        val reversedString = longestPalindrome + longestPalindrome.substring(longestPalindrome.length\
    \ / 2, longestPalindrome.length)\n        reversedString", "        val longestPalindrome\
    \ = longestPalindrome(string.tail)\n        string + longestPalindrome", "   \
    \     val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        val reversedString = string.takeWhile(c => c != longestPalindrome.last).reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindromicSuffix\
    \ = string.lastIndexOfLongestPalindromicSuffix(string)\n        string + string.substring(longestPalindromicSuffix,\
    \ string.length)", "        // Find longest postfix of supplied string that is\
    \ a palindrome.\n        val longestPalindrome = string.takeWhile(c => c != string.reverse.charAt(0))\n\
    \        // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        longestPalindrome + string.reverse.takeWhile(c\
    \ => c != longestPalindrome.reverse.charAt(0))", "        val longestPalindrome\
    \ = longestPalindrome(string.trim())\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string.substring(0,string.length/2))\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n  \
    \      val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(c\
    \ => c != string.last).reverse\n        val reversedString = longestPalindrome\
    \ + string.drop(longestPalindrome.size)\n        reversedString", "        val\
    \ longestPalindrome = longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        longestPalindrome + string.reverse.drop(longestPalindrome.length)", " \
    \       val longestPalindrome = findLongestPalindrome(string.chars)\n        val\
    \ reversedLongestPalindrome = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.dropRight(string.size/2))\n        string + longestPalindrome.reverse",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.length)\n\
    \        val reversedPrefixOfLongestPalindromicSuffix = reversedPrefixOfLongestPalindromicSuffix(string,\
    \ longestPalindromicSuffix)\n        val reversedSuffixOfLongestPalindromicSuffix\
    \ = reversedSuffixOfLongestPalindromicSuffix(string, longestPalindromicSuffix)\n\
    \        val reversedPalindrome = reversedPalindrome(string, longestPalindromicSuffix)\n\
    \        val reversedPalindromeWithSuffix = reversedPalindromeWithSuffix(string,\
    \ longestPalindromicSuffix, reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix)\n\
    \        val reversedPalindromeWithPrefixAndSuffix = reversedPalindromeWithPrefixAndSuffix(string,\
    \ longestPalindromicSuffix, reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix,\
    \ reversedPalindrome)\n        val reversedPalindromeWithPrefixAndSuffixAndSuffix\
    \ = reversedPalindromeWithPrefixAndSuffixAndSuffix(string, longestPalindromicSuffix,\
    \ reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix,\
    \ reversedPalindrome, reversedPalindromeWithSuffix)\n        val reversedPalindromeWithPrefixAndSuffixAndSuffixAndSuffix\
    \ = reversedPalindromeWithPrefixAndSuffixAndSuffixAndSuffix(string, longestPalindromicSuffix,\
    \ reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix,\
    \ reversedPalindrome, reversedPalindromeWithSuffix, reversedPalindromeWithPrefixAndSuffix)\n\
    \        val reversedPalindromeWithPrefixAndSuffixAndSuffixAndSuffixAndSuffix\
    \ = reversedPalindromeWithPrefixAndSuffixAndSuffixAndSuffixAndSuffix(string, longestPalindromicSuffix,\
    \ reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix,\
    \ reversedPalindrome, reversedPalindromeWithSuffix, reversedPalindromeWithPrefixAndSuffix,\
    \ reversedPalindromeWithPrefixAndSuffixAndSuffix)\n        val reversed", "  \
    \      val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        val reversedString = longestPalindrome + reverse(string)\n        reversedString",
  "        val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        longestPalindrome + string.dropWhile(c => c != longestPalindrome.last).reverse",
  "        // Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var longestPalindromeIndex = 0\n        //\
    \ Find longest postfix of string that is a palindrome.\n        var longestPalindrome\
    \ = string.substring(0,string.length-1)\n        var longestPalindromeLength =\
    \ longestPalindrome.length\n        var ", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x != string.reverse(string.indexOf(x)))\n        val reversedString\
    \ = string.takeWhile(x => x != string.reverse(string.indexOf(x)))\n        reversedString\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      string + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        val reversedString = longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ ')+1)\n        string + reversedString", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = longestPalindrome.substring(longestPalindrome.indexOfLast(longestPalindrome)\
    \ + 1).reverse\n        longestPalindrome + reversedString", "        val longestPalindrome\
    \ = string.takeWhile(x => x == x.reverse).reverse\n        longestPalindrome +\
    \ longestPalindrome.takeWhile(x => x == x.reverse).reverse", "        val longestPalindrome\
    \ = findLongestPalindrome(string.chars)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        longestPalindrome + reverseString(longestPalindrome.substring(0,\
    \ longestPalindrome.lastIndexOf(\"_\")))", "        // Find the longest postfix\
    \ of supplied string that is a palindrome.\n        // Algorithm idea is simple:\n\
    \        // - Find the longest postfix of supplied string that is a palindrome.\n\
    \        // - Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n        val longestPalindrome = string.substring(0,string.length-1)\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromePrefix = reversedLongestPalindrome.substring(0,longestPalindrome.length)\n\
    \        val palindrome = reversedLongestPalindromePrefix + longestPalindrome\n\
    \        palindrome", "        val longestPalindrome = findLongestPalindrome(string.drop(1))\n\
    \        val reversedString = longestPalindrome.takeRight(longestPalindrome.size\
    \ - 1) + longestPalindrome.dropRight(1)\n        string + reversedString", " \
    \       val longestPalindrome = longestPalindrome(string.substring(0, string.length\
    \ / 2))\n        string + longestPalindrome.reverse", "        val longestPalindrome\
    \ = string.substring(string.length / 2)\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        val reversedLongestPalindromeLength = reversedLongestPalindrome.length\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindrome.substring(0,\
    \ reversedLongestPalindromeLength)\n        val reversedLongestPalindromeSuffix\
    \ = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n   \
    \     val reversedLongestPalindromePrefix = reversedLongestPalindromePrefix +\
    \ reversedLongestPalindromeSuffix\n        val reversedLongestPalindrome = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        val reversedLongestPalindromeLength\
    \ = reversedLongestPalindrome.length\n        val reversedLongestPalindromePrefix\
    \ = reversedLongestPalindrome.substring(0, reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromeSuffix = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        val reversedLongestPalindrome = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        val reversedLongestPalindromeLength\
    \ = reversedLongestPalindrome.length\n        val reversedLongestPalindromePrefix\
    \ = reversedLongestPalindrome.substring(0, reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromeSuffix = reversedLongestPalindrome.substring(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromePrefix = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        val reversedLongestPalindrome = reversedLongestPalindromePrefix\
    \ + reversedLongestPalindromeSuffix\n        val reversedLongestPalindromeLength\
    \ = reversedLongestPalindrome.length\n        val reversedLongestPalindromePrefi",
  "        val longestPalindrome = string.takeWhile(x => x == x.reverse).reverse\n\
    \        val reversedString = longestPalindrome + string.drop(longestPalindrome.size)\n\
    \        reversedString", "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length/2))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.dropRight(string.size/2))\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        val reversedLongestPalindromePrefix = string.takeRight(longestPalindrome.size)\
    \ + reversedLongestPalindrome\n        longestPalindrome + reversedLongestPalindromePrefix",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        longestPalindrome + longestPalindrome.reverse", "    \
    \    val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome", "        // Find longest postfix of supplied\
    \ string that is a palindrome.\n        val longestPalindrome = string.foldLeft(\"\
    \") { (longest, char) =>\n            if (char == longest.length) char + char\n\
    \            else char + char + longest\n        }\n        // Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \        longestPalindrome + longestPalindrome.substring(longestPalindrome.length,\
    \ string.length).reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      string + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(c\
    \ => c != string.last).reverse\n        longestPalindrome + longestPalindrome.takeWhile(c\
    \ => c != longestPalindrome.last)", "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(c => c != string.last).reverse\n        val reversedString\
    \ = string.takeWhile(c => c != longestPalindrome).reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.substring(0,\
    \ string.length / 2))\n        string + longestPalindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.dropRight(1))\n        string + longestPalindrome.reverse",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        val longestPalindromicPrefixString = longestPalindromicPrefix(string,\
    \ longestPalindromicSuffix)\n        longestPalindromicPrefixString + longestPalindromicSuffix",
  "        val longestPalindrome = string.takeWhile(x => x == x.reverse).reverse\n\
    \        val reversedString = longestPalindrome + longestPalindrome.reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        val reversedString = longestPalindrome.trim().reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string.substring(0,string.length-1))\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  string + longestPalindrome", "        val longestPalindrome = string.last.takeWhile(c\
    \ => c != string.last.last)\n        val reversedLongestPalindrome = longestPalindrome.reverse\n\
    \        string + reversedLongestPalindrome", "        val longestPalindrome =\
    \ findLongestPalindrome(string.substring(0,string.length-1))\n        string +\
    \ longestPalindrome.reverse", "        val longestPalindrome = string.takeWhile(c\
    \ => c != string.reverse.charAt(0))\n        longestPalindrome + string.reverse.substring(longestPalindrome.size)",
  "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n  \
    \      string + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string.tail)\n        string + longestPalindrome", "   \
    \     val longestPalindrome = longestPalindrome(string.dropRight(string.size/2))\n\
    \        string + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        longestPalindrome + longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ ')).reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = longestPalindrome + string.drop(longestPalindrome.size)\n        reversedString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = string.takeWhile(x\
    \ => x == x.reverse).reverse\n        longestPalindrome + longestPalindrome.takeWhile(x\
    \ => x != longestPalindrome.reverse).reverse", "        val longestPalindrome\
    \ = longestPalindrome(string.dropRight(string.size/2))\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.takeWhile(x => x.isLetter).reverse\n\
    \        val prefixString = string.takeWhile(x => !x.isLetter)\n        val reversedPrefixString\
    \ = prefixString.reverse\n        val palindrome = longestPalindrome + reversedPrefixString\n\
    \        palindrome", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.substring(0,string.length-1))\n        val reversedString\
    \ = longestPalindrome.substring(longestPalindrome.lastIndexOf(' ')+1)\n      \
    \  string + reversedString", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.size)\n        val reversedPrefixOfLongestPalindromicSuffix = reversedPrefixOfLongestPalindromicSuffix(string,\
    \ longestPalindromicSuffix)\n        val reversedSuffixOfLongestPalindromicSuffix\
    \ = reversedSuffixOfLongestPalindromicSuffix(string, longestPalindromicSuffix)\n\
    \        val palindrome = reversedPrefixOfLongestPalindromicSuffix + reversedSuffixOfLongestPalindromicSuffix\n\
    \        palindrome", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindromicSuffix\
    \ = longestPalindromicSuffix(string.substring(0,string.length-1))\n        val\
    \ reversedString = string.substring(0,string.length-1) + longestPalindromicSuffix\n\
    \        reversedString", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string,\
    \ \"\")\n        longestPalindrome + longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ '))", "        val longestPalindrome = longestPalindrome(string.dropRight(string.size))\
    \ // drop the longest palindrome from the right\n        val reversedString =\
    \ longestPalindrome + string.reverse.drop(longestPalindrome.size) // reverse the\
    \ string and drop the longest palindrome from the left\n        reversedString",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  longestPalindrome + longestPalindrome.reverse", "        // Find longest postfix\
    \ of string that is a palindrome\n        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        // Append reverse of the string prefix that comes before\
    \ the palindromic suffix\n        longestPalindrome + reverseOfPrefix(longestPalindrome,\
    \ string.size)", "        val longestPalindrome = longestPalindrome(string, string.size)\n\
    \        longestPalindrome + longestPalindrome.reverse", "        val longestPalindrome\
    \ = findLongestPalindrome(string.dropRight(1))\n        val reversedString = longestPalindrome.takeRight(longestPalindrome.size\
    \ - 1) + longestPalindrome.dropRight(1)\n        longestPalindrome + reversedString",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        val reversedString = reverseString(longestPalindromicSuffix)\n      \
    \  longestPalindromicSuffix +: reversedString", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        longestPalindrome + longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        val prefixToPalindrome = string.takeWhile(c => c != longestPalindrome).reverse\n\
    \        longestPalindrome + prefixToPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val prefixToPalindrome\
    \ = string.takeWhile(x => x != longestPalindrome).reverse\n        longestPalindrome\
    \ + prefixToPalindrome", "        val longestPalindrome = string.takeWhile(c =>\
    \ c != string.last).reverse\n        val prefixString = string.takeWhile(c =>\
    \ c != longestPalindrome).reverse\n        longestPalindrome + prefixString",
  "        val longestPalindrome = findLongestPalindrome(string)\n        longestPalindrome\
    \ + longestPalindrome.substring(longestPalindrome.lastIndexOf(' ') + 1)", "  \
    \      val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        val reversedString = reverseString(longestPalindromicSuffix)\n      \
    \  longestPalindromicSuffix +: reversedString", "        val longestPalindrome\
    \ = longestPalindrome(string.dropRight(string.size/2))\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        val reversedString = string.drop(longestPalindrome.length)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      string + reversedLongestPalindrome", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        val reversedString = longestPalindrome + string.head\n        reversedString",
  "        val longestPalindrome = longestPalindrome(string, string.size)\n      \
    \  string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.substring(0,string.length-1))\n\
    \        val reversedLongestPalindrome = longestPalindrome.substring(longestPalindrome.lastIndexOf('\
    \ ')+1)\n        string + reversedLongestPalindrome", "        val longestPalindrome\
    \ = longestPalindrome(string.substring(0,string.length-1))\n        string + longestPalindrome",
  "        val longestPalindrome = string.takeWhile(x => x == x.reverse).reverse\n\
    \        longestPalindrome + longestPalindrome.takeWhile(x => x != longestPalindrome.reverse).reverse",
  "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n  \
    \      val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeWithPrefix = reversedLongestPalindrome + string.dropRight(1)\n\
    \        longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        longestPalindrome + longestPalindrome.substring(longestPalindrome.indexOf(string))",
  "        val longestPalindrome = findLongestPalindrome(string.trim())\n        val\
    \ reversedLongestPalindrome = longestPalindrome.reverse\n        string + reversedLongestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.chars)\n        longestPalindrome\
    \ + longestPalindrome.reverse", "        val longestPalindrome = string.takeWhile(x\
    \ => x == x.reverse).reverse\n        val reversedString = longestPalindrome +\
    \ longestPalindrome.takeWhile(x => x == x.reverse).reverse\n        reversedString",
  "        val longestPalindrome = longestPalindrome(string.dropRight(string.size/2))\n\
    \        string + longestPalindrome.reverse", "        // Find longest postfix\
    \ of string that is a palindrome.\n        var longestPalindrome = string\n  \
    \      var longestPalindromeLength = string.length\n        var longestPalindromePostfix\
    \ = 0\n        var longestPalindromePostfixLength = 0\n        var longestPalindromePostfixIndex\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longestPalindromePostfixIndexLength\
    \ = 0\n        var longestPalindromePostfixIndexLength = 0\n        var longest",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedString\
    \ = longestPalindrome.substring(longestPalindrome.lastIndexOf(' ') + 1)\n    \
    \    longestPalindrome + reversedString", "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        longestPalindrome + longestPalindrome.reverse", "    \
    \    // Find longest postfix of supplied string that is a palindrome.\n      \
    \  var longestPalindrome = string\n        var longestPalindromeLength = 0\n \
    \       var longestPalindromePostfix = 0\n        var longestPalindromePostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfix = 0\n        var longestPalindromePostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfix = 0\n        var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfix = 0\n       \
    \ var longestPalindromePostfixPostfixPostfixPostfixLength = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n        var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = 0\n        var longestPalindromePostfixPostfix", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        string + longestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.dropRight(string.size/2))\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.substring(0,string.length-1))\n        val reversedString\
    \ = reverseString(string.substring(0,string.length-1))\n        string + longestPalindrome\
    \ + reversedString", "        // Find longest postfix of string that is a palindrome\n\
    \        var longestPalindrome = string.substring(0,string.length-1)\n       \
    \ var longestPalindromeLength = longestPalindrome.length\n        // Find longest\
    \ postfix of string that is a palindrome\n        var longestPalindromeReversed\
    \ = string.substring(string.length-1,string.length)\n        var longestPalindromeReversedLength\
    \ = longestPalindromeReversed.length\n        // Find longest postfix of string\
    \ that is a palindrome\n        var longestPalindromeReversedReversed = string.substring(string.length-1,string.length-1)\n\
    \        var longestPalindromeReversedReversedLength = longestPalindromeReversedReversed.length\n\
    \        // Find longest postfix of string that is a palindrome\n        var longestPalindromeReversedReversedReversed\
    \ = string.substring(string.length-1,string.length-2)\n        var longestPalindromeReversedReversedReversedLength\
    \ = longestPalindromeReversedReversedReversed.length\n        // Find longest\
    \ postfix of string that is a palindrome\n        var longestPalindromeReversedReversedReversedReversed\
    \ = string.substring(string.length-1,string.length-3)\n        var longestPalindromeReversedReversedReversedReversedLength\
    \ = longestPalindromeReversedReversedReversedReversed.length\n        // Find\
    \ longest postfix of string that is a palindrome\n        var longestPalindromeReversedReversedReversedReversedReversed\
    \ = string.substring(string.length-1,string.length-4)\n        var longestPalindromeReversedReversedReversedReversedLength\
    \ = longestPalindromeReversedReversedReversedReversed.length\n        // Find\
    \ longest postfix of string that is a palindrome\n        var longestPalindromeReversedReversedReversedReversedReversedReversed\
    \ = string.substring(string.length-1,string.length-5)\n        var longestPalindromeReversedReversedReversedReversedReversedReversedLength\
    \ = longestPalindromeReversedReversedReversedReversedReversedReversed.length\n\
    \        // Find longest postfix of string that is a palindrome\n        var longestPalindromeReversedReversedReversedReversedReversedReversedReversed\
    \ = string.substring(string.length-1,string.length-6)\n        var longestPalindromeReversedReversedReversedReversedReversedReversedReversedLength\
    \ = longestPalindromeReversedReversedReversedReversed", "        val longestPalindrome\
    \ = string.takeWhile(x => x != string.last).reverse\n        val reversedString\
    \ = string.takeWhile(x => x != longestPalindrome).reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedString = longestPalindrome.tail.reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x.toString.toInt == x.toString.toInt.reverse)\n      \
    \  val reversedString = longestPalindrome.reverse\n        longestPalindrome +\
    \ reversedString", "        val longestPalindrome = longestPalindrome(string.substring(0,string.length-1))\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.chars)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      string + reversedLongestPalindrome", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        longestPalindrome + longestPalindrome.reverse", "    \
    \    val longestPalindrome = longestPalindrome(string, string.size)\n        longestPalindrome\
    \ + reverseOfPrefix(longestPalindrome, string.size)", "        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindromicSuffix\
    \ = string.takeWhile(c => c != string.reverse(string.indexOf(c))).reverse\n  \
    \      val longestPalindromicPrefixString = string.takeWhile(c => c != longestPalindromicSuffix)\n\
    \        longestPalindromicPrefixString + longestPalindromicSuffix", "       \
    \ val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n       \
    \ string + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n\
    \        val reversedString = longestPalindrome + longestPalindrome.dropRight(1)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string.trim())\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        val reversedLongestPalindromeWithPrefix\
    \ = reversedLongestPalindrome + string.substring(longestPalindrome.size)\n   \
    \     reversedLongestPalindromeWithPrefix", "        // Find longest postfix of\
    \ string that is a palindrome.\n        val longestPalindrome = string.zipWithIndex.maxBy(_._2)._1\n\
    \        // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        string + string.substring(longestPalindrome,\
    \ longestPalindrome + longestPalindrome.length).reverse", "        val longestPalindrome\
    \ = longestPalindrome(string, string.size)\n        longestPalindrome + longestPalindrome.substring(longestPalindrome.size-1)",
  "        val longestPalindrome = findLongestPalindrome(string.dropRight(1))\n  \
    \      val reversedString = longestPalindrome.takeRight(longestPalindrome.size\
    \ - 1) + longestPalindrome.dropRight(1)\n        string + reversedString", " \
    \       val longestPalindrome = findLongestPalindrome(string.tail)\n        val\
    \ reversedLongestPalindrome = longestPalindrome.reverse\n        val reversedLongestPalindromePrefix\
    \ = reversedLongestPalindrome.takeWhile(c => !string.startsWith(c))\n        val\
    \ reversedLongestPalindromeSuffix = reversedLongestPalindrome.dropWhile(c => !string.startsWith(c))\n\
    \        string + reversedLongestPalindromePrefix + reversedLongestPalindromeSuffix",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string,\
    \ string.size)\n        longestPalindrome + reverseOfPrefix(longestPalindrome,\
    \ string.size)", "        val longestPalindrome = longestPalindrome(string.trim())\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.size)\n        val reversedString = reverseString(string, longestPalindromicSuffix)\n\
    \        reversedString + longestPalindromicSuffix", "        val longestPalindrome\
    \ = string.takeWhile(c => c != string.reverse.charAt(0))\n        val reversedString\
    \ = longestPalindrome.reverse\n        longestPalindrome + reversedString", " \
    \       val longestPalindrome = string.takeWhile(x => x == x.reverse).reverse\n\
    \        val reversedString = longestPalindrome + longestPalindrome.takeWhile(x\
    \ => x == x.reverse).reverse\n        reversedString"]
stop_tokens:
- "\n    }\n"
