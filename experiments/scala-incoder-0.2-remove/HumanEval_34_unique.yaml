name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    def unique(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x)) set.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach(x => { if (!seen(x)) seen.add(x) })\n        seen.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sort", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val seen = mutable.Set[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        for (x <- l) {\n       \
    \     if (!seen(x)) {\n                seen.add(x)\n                result +=\
    \ x\n            }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) yield x }\n        l filterNot seen\
    \ map (x => x)", "        val unique = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!unique.contains(x)) unique.add(x)) \n        unique.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (!seen.add(x))\
    \ yield x }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen.add(x)\n        }\n      \
    \  seen.toList", "        val seen = mutable.HashSet[Long]()\n        val result\
    \ = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (seen.contains(i))\
    \ {\n                continue\n            }\n            seen.update(i)\n   \
    \         result += i\n        }\n        result.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.add(x))\
    \ {\n                println(\"Duplicate found: \" + x)\n            }\n     \
    \   }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n   \
    \     l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort", " \
    \       val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (seen.add(x))\
    \ x else seen.add(x) }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   l -= 1\n            } else {\n                seen += e\n            }\n \
    \       }\n        l ++ seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sorted", "        val unique = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!unique.contains(x)) unique.add(x))\n        unique.toList", "      \
    \  val u = new mutable.HashSet[Long]()\n        l.foreach(x => if (!u.contains(x))\
    \ u += x)\n        u.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.iterator.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.map(x => x).toList", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach { x => unique.add(x) }\n        unique.toList", "        val\
    \ unique = mutable.Set[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n           \
    \ if (seen.contains(e)) {\n                l - e\n            } else {\n     \
    \           seen += e\n            }\n        }\n        l - seen.toList", " \
    \       val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n       \
    \     if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sort",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val unique = mutable.LinkedHashSet[Long]()\n\
    \        l.foreach { x => unique.add(x) }\n        unique.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort", " \
    \       val u = new mutable.HashSet[Long]()\n        l.foreach { x => if (!u.contains(x))\
    \ u += x }\n        u.toList", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.sort", "        val\
    \ seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n            if (seen.contains(e))\
    \ {\n                seen.clear()\n            }\n            else {\n       \
    \         seen += e\n            }\n        }\n        seen.toList", "       \
    \ val set = new mutable.HashSet[Long]\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val u = new scala.collection.mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val seen = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (i <- 0 until l.length) {\n            if (seen(i))\n           \
    \     continue\n            seen += l(i)\n            result += l(i)\n       \
    \ }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val u = new mutable.HashSet[Long]()\n        l.foreach { x => if (!u.contains(x))\
    \ u += x }\n        u.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => if (!seen(x)) seen.add(x) }\n        seen.toList", "        val set =\
    \ new mutable.HashSet[Long]\n        l.foreach(x => if (!set.contains(x)) set.add(x))\
    \ \n        set.sort", "        val seen = mutable.HashSet[Long]()\n        val\
    \ unique = mutable.ListBuffer[Long]()\n        for (i <- l if !seen.add(i)) {\n\
    \            unique += i\n        }\n        unique.toList", "        val seen\
    \ = mutable.Set[Long]()\n        l.foreach { x => if (!seen(x)) { seen.add(x);\
    \ x } }\n        seen.sort", "        val unique = mutable.Set[Long]()\n     \
    \   l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (i <- l if !seen(i)) {\n            seen(i) = true\n            result\
    \ += i\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val set = new mutable.HashSet[Long]\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        val result = new mutable.ArrayBuffer[Long]()\n        set.foreach\
    \ { x => result.add(x) }\n        result.toList", "        val uList = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until l.length) {\n            if (uList.contains(l(i)))\
    \ {\n                uList.remove(l(i))\n            } else {\n              \
    \  uList += l(i)\n            }\n        }\n        uList.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.contains(x))\
    \ return\n            seen += x\n        }\n        seen.toList", "        val\
    \ unique = mutable.HashSet[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!u.contains(x)) u += x)\n        u.toList", "    \
    \    val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set += x }\n        set.sorted", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.sorted", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (x <- l) {\n            if (!seen(x)) {\n                result +=\
    \ x\n                seen += x\n            }\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (seen.contains(x)) None else Some(x) }", "      \
    \  val seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if (seen.add(x))\
    \ {\n                println(\"Duplicate found: \" + x)\n            }\n     \
    \   }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n   \
    \     l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n            if (!seen.contains(e))\
    \ {\n                seen += e\n            }\n        }\n        seen.toList",
  "        val seen = mutable.Set[Long]()\n        l.foreach(x => { if (!seen(x))\
    \ seen.add(x); })\n        seen.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!u.contains(x)) u += x }\n        u.toList", " \
    \       val seen = mutable.Set[Long]()\n        l.foreach { x =>\n           \
    \ if (seen.add(x)) {\n                seen.clear()\n            }\n        }\n\
    \        seen.toList", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if(!u.contains(x)) u += x)\n        u.toList", "        val u = new scala.collection.mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        for (x <- l) {\n       \
    \     if (!seen.contains(x)) {\n                seen += x\n                result\
    \ += x\n            }\n        }\n        result.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.iterator.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) yield x }\n        l.toList", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.iterator.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) \n        set.sorted", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) x }\n        l filterNot seen toList",
  "        val seen = mutable.HashSet[Long]()\n        val res = mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (!seen(x)) {\n                res += x\n\
    \                seen += x\n            }\n        }\n        res.toList", " \
    \       val seen = new mutable.HashSet[Long]()\n        l.foreach { x => if (!seen.add(x))\
    \ yield x }\n        l filterNot seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val u = new mutable.HashSet[Long]\n        l.foreach(x => if (!u.contains(x))\
    \ u += x)\n        u.toList", "        val set = new mutable.HashSet[Long]\n \
    \       l.foreach(x => set += x)\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        val unique = mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ unique += x\n            } else {\n                seen += x\n            }\n\
    \        }\n        unique.toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x))\
    \ return\n            seen.add(x))\n        seen.toList", "        val set = new\
    \ mutable.HashSet[Long]\n        l.foreach(x => set.add(x))\n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.add(x)) {\n                result\
    \ += x\n            }\n        }\n        result.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x)) set.add(x))\
    \ \n        set.sort", "        val seen = mutable.Set[Long]()\n        l.foreach\
    \ { x => if (!seen(x)) { seen.add(x); x } }\n        seen.toList", "        val\
    \ unique = mutable.HashSet[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        for (x <- l) {\n   \
    \         if (!seen.contains(x)) {\n                seen += x\n              \
    \  result += x\n            }\n        }\n        result.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) x }\n        seen.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach(x => if (!seen.add(x))\
    \ println(x); seen.add(x))\n        l filterNot seen.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.add(x))\
    \ x else seen.add(x)\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for (i <- l) {\n\
    \            if (seen(i)) continue\n            seen(i) = true\n            result.add(i)\n\
    \        }\n        result.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) \n              \
    \  l.filter(_ != x).sort\n            else \n                seen += x\n     \
    \   }\n        l", "        val unique = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => if (!unique.add(x)) unique.remove(x))\n        unique.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sorted", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val unique = mutable.Set[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen\
    \ -= x\n            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) yield x }\n        l.toList", "  \
    \      val seen = mutable.Set[Long]()\n        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => { if (!seen(x)) unique.add(x); seen.add(x) })\n      \
    \  unique.toList", "        val seen = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => if (!seen.add(x)) x }\n        l filterNot seen.toList", "        val\
    \ set = new mutable.HashSet[Long]\n        l.foreach { x => if (!set.contains(x))\
    \ set += x }\n        set.sorted", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (!seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.add(x))\
    \ {\n                println(s\"$x was seen before\")\n            }\n       \
    \ }\n        l.toList", "        val seen = mutable.HashSet[Long]()\n        val\
    \ result = new ListBuffer[Long]()\n        for (x <- l) {\n            if (seen.add(x))\
    \ {\n                result += x\n            }\n        }\n        return result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach(x => { if (!seen.add(x))\
    \ println(s\"$x was already seen\"); })\n        l.toList", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x)) set\
    \ += x)\n        set.sort", "        val set = new mutable.HashSet[Long]()\n \
    \       l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "      \
    \  val unique = mutable.HashSet[Long]()\n        l.foreach { x => unique.add(x)\
    \ }\n        unique.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.iterator.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val seen = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen += x\n            result += x\n  \
    \      }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val seen = mutable.Set[Long]()\n        l.foreach { x => if (!seen.add(x))\
    \ yield x }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val unique = mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (seen.contains(i)) {\n               \
    \ continue\n            }\n            unique += i\n            seen += i\n  \
    \      }\n        unique.toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) x\n        }\n        seen.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x)) set.add(x))\n\
    \        set.sorted", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach { x => unique.add(x) }\n        unique.toList", "        val\
    \ u = new scala.collection.mutable.HashSet[Long]()\n        l.foreach(x => if(!u.contains(x))\
    \ u += x)\n        u.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (!seen(x))\
    \ { seen.add(x); x } }\n        seen.sorted", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) x }\n        l filterNot { x => seen.contains(x)\
    \ }", "        val set = new mutable.HashSet[Long]\n        l.foreach(x => set\
    \ += x)\n        set.sort", "        val set = new mutable.HashSet[Long]()\n \
    \       l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n \
    \       set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sort", " \
    \       val unique = mutable.HashSet[Long]()\n        l.foreach(x => unique.add(x))\n\
    \        unique.toList", "        val seen = mutable.HashSet[Long]()\n       \
    \ val result = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n     \
    \       if (!seen(x)) {\n                seen.add(x)\n                result +=\
    \ x\n            }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for (i <- l if\
    \ !seen.add(i)) {\n            result += i\n        }\n        result.toList",
  "        val seen = new mutable.HashSet[Long]()\n        val unique = new mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            unique += x\n            seen += x\n  \
    \      }\n        unique.toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x) )\n        unique.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (!seen(x))\
    \ { seen.add(x); x } }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sort",
  "        val seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if\
    \ (seen.contains(x)) return\n            seen += x\n        }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n        \
    \    if (seen(e)) return\n            seen.add(e)\n        }\n        l ++ seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                println(s\"seen $x\")\n            }\n\
    \        }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort",
  "        val seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if\
    \ (seen.contains(x)) return\n            seen += x\n        }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) yield x }\n        l.toList", "  \
    \      val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (!seen(x))\
    \ { seen.add(x) } }\n        seen.sorted", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val set = new mutable.HashSet[Long]\n        l.foreach(x => set += x)\n\
    \        set.sort", "        val unique = mutable.Set[Long]()\n        l.foreach\
    \ { x => if (!unique.contains(x)) unique.add(x) }\n        unique.toList", " \
    \       val u = new mutable.HashSet[Long]()\n        l.foreach(x => if (!u.contains(x))\
    \ u += x)\n        u.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        val result: List[Long] = new mutable.ArrayBuffer[Long]()\n        for\
    \ (i <- l) {\n            if (!seen.contains(i)) {\n                seen.update(i)\n\
    \                result += i\n            }\n        }\n        result", "   \
    \     val seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if\
    \ (!seen(x)) {\n                seen.add(x)\n            }\n        }\n      \
    \  seen.toList", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen.toSet)\n        res.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!u.contains(x)) u += x)\n        u.toList", "    \
    \    val set = new mutable.HashSet[Long]\n        l.foreach(x => set.add(x))\n\
    \        set.sorted", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => if (!set.contains(x)) set += x)\n        set.sorted", "     \
    \   val u = new mutable.HashSet[Long]()\n        l.foreach(x => if (u.contains(x))\
    \ u.delete(x) else u += x)\n        u.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val unique = mutable.ListBuffer[Long]()\n        for (i <- l if !seen.add(i))\
    \ {\n            unique += i\n        }\n        unique.toList", "        val\
    \ unique = mutable.Set[Long]()\n        l.foreach { x => if (!unique.contains(x))\
    \ unique.add(x) }\n        unique.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (!seen(x)) {\n                seen +=\
    \ x\n            }\n        }\n        seen.toList", "        val u = new mutable.HashSet[Long]\n\
    \        l.foreach(x => if (u.contains(x)) u.delete(x) else u += x)\n        u.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen += x\n        }\n        seen\
    \ :+ l.last", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if(!u.contains(x)) u += x)\n        u.toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val seen\
    \ = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n       \
    \ for (x <- l) {\n            if (!seen(x)) {\n                result.append(x)\n\
    \                seen.add(x)\n            }\n        }\n        result.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted",
  "        val u = new mutable.HashSet[Long]()\n        l.foreach(x => if(!u.contains(x))\
    \ u += x)\n        u.toList", "        val seen = mutable.HashSet[Long]()\n  \
    \      l.foreach { x =>\n            if (!seen.contains(x)) {\n              \
    \  seen += x\n            }\n        }\n        seen.toList", "        val seen\
    \ = mutable.Set[Long]()\n        l.foreach { x =>\n            if (!seen(x)) {\n\
    \                seen += x\n            }\n        }\n        seen.toList", " \
    \       val u = new mutable.HashSet[Long]()\n        l.foreach(x => if (!u.contains(x))\
    \ u += x)\n        u.toList", "        val seen = mutable.HashSet[Long]()\n  \
    \      val unique = mutable.ListBuffer[Long]()\n        for (i <- l) {\n     \
    \       if (seen(i)) unique.append(i)\n            else seen(i) = true\n     \
    \   }\n        unique.toList", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sorted", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort",
  "        val unique = mutable.Set[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!u.contains(x)) u += x)\n        u.toList", "    \
    \    val unique = mutable.HashSet[Long]()\n        l.foreach { x => if (!unique.contains(x))\
    \ unique.add(x) }\n        unique.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                println(\"\
    Duplicate element: \" + x)\n            }\n        }\n        l filterNot seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n        \
    \    if (seen.contains(e)) {\n                seen.clear()\n            } else\
    \ {\n                seen += e\n            }\n        }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        val res = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- l if !seen.add(i)) {\n            res += i\n        }\n   \
    \     res.toList", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x)) \n        set.toList", "        val unique\
    \ = mutable.Set[Long]()\n        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n\
    \        unique.toList", "        val u = new mutable.HashSet[Long]()\n      \
    \  l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!u.contains(x)) u += x }\n        u.toList", " \
    \       val seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (i <- l) {\n            if (!seen(i)) {\n                result +=\
    \ i\n            }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (seen.contains(x)) return\n            seen.add(x.toLong))\n\
    \        seen.toList", "        val set = new mutable.HashSet[Long]\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sort", " \
    \       val u = new mutable.HashSet[Long]()\n        l.foreach(x => if(!u.contains(x))\
    \ u += x)\n        u.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sort",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.sorted", "        val set = new mutable.HashSet[Long]()\n   \
    \     l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n   \
    \     set.sort"]
stop_tokens:
- "\n    }\n"
