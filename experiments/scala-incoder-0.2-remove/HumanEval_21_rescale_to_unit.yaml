name: HumanEval_21_rescale_to_unit
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    // such that the smallest number will become 0 and the largest\
  \ will become 1\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat,\
  \ 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"
completions: ["        val min = numbers.min\n        val max = numbers.max\n    \
    \    val range = max - min\n        val scaledList = numbers.map(x => (x - min)\
    \ / range)\n        scaledList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val scaledNumbers = numbers.map(x\
    \ => (x - min) / range)\n        scaledNumbers", "        val minNum = numbers.min\n\
    \        val maxNum = numbers.max\n        val rescaledList = numbers.map(x =>\
    \ (x - minNum) / (maxNum - minNum))\n        rescaledList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map( x => (x - min) / range )\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map( x => (x - min) / range )\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = (maxValue - minValue).toFloat\n        val scaledNumbers = numbers.map(x =>\
    \ (x - minValue) / range)\n        scaledNumbers", "        val minValue = math.min(numbers)\n\
    \        val maxValue = math.max(numbers)\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        scaledNumbers", "      \
    \  val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n    \
    \    newNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val rescaledList = numbers.map(x => (x - minValue) / (maxValue\
    \ - minValue))\n        rescaledList", "        val minValue = numbers.min\n \
    \       val maxValue = numbers.max\n        val newNumbers = numbers.map { x =>\n\
    \            val newX = (x - minValue) / (maxValue - minValue)\n            newX\n\
    \        }\n        newNumbers", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val rescaledList = numbers.map(x\
    \ => (x - min) / range)\n        rescaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        rescaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map(x => (x - min) / range)\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map { x => (x - min) / range }\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n     \
    \   scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val minNum = numbers.min\n    \
    \    val maxNum = numbers.max\n        val newNums = numbers.map(x => (x - minNum)\
    \ / (maxNum - minNum))\n        newNums", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val rescaledList = numbers.map(x => (x - minValue) / range)\n\
    \        rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val rescaledList = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        rescaledList", "       \
    \ val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newNumbers = numbers.map(x => (x - min) / range * 2 - 1)\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newList = numbers.map(x\
    \ => (x - min) / range * 2 - 1)\n        newList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n     \
    \   scaledNumbers", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val range = maxNum - minNum\n        val scaledList = numbers.map(x =>\
    \ (x - minNum) / range)\n        scaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val rescaledList\
    \ = numbers.map(x => (x - minValue) / (maxValue - minValue))\n        rescaledList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        newNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = (max\
    \ - min) / numbers.size\n        numbers.map(x => (x - min) / range)", "     \
    \   val minNum = numbers.min\n        val maxNum = numbers.max\n        val newNumbers\
    \ = numbers.map( x => if (x == minNum) 0 else 1 )\n        val newMin = if (newNumbers.min\
    \ == 0) 0 else newNumbers.min\n        val newMax = if (newNumbers.max == 1) 1\
    \ else newNumbers.max\n        val newNumbersScaled = newNumbers.map( x => (x\
    \ - newMin) / (newMax - newMin) )\n        val newMinScaled = if (newNumbersScaled.min\
    \ == 0) 0 else newNumbersScaled.min\n        val newMaxScaled = if (newNumbersScaled.max\
    \ == 1) 1 else newNumbersScaled.max\n        val newNumbersScaledWithMinMax =\
    \ newNumbersScaled.map( x => (x - newMinScaled) / (newMaxScaled - newMinScaled)\
    \ )\n        newNumbersScaledWithMinMax", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val rescaledList = numbers.map((number:\
    \ Float) => number * (maxValue - minValue) / numbers.size)\n        rescaledList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val newNumbers = numbers.map(x => (x - minValue)\
    \ / (maxValue - minValue))\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map( x => (x - min) / range )\n        newList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map { x => (x - min) / range }\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val newList = numbers.map( x => (x - minValue) / (maxValue - minValue) )\n\
    \        newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val scale = (maxValue\
    \ - minValue) / (numbers.size - 1)\n        numbers.map(x => x * scale).filter(x\
    \ => x >= 0 && x <= 1)", "        val minNum = numbers.min\n        val maxNum\
    \ = numbers.max\n        val newNumbers = numbers.map(x => (x - minNum) / (maxNum\
    \ - minNum))\n        newNumbers", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val rescaledList =\
    \ numbers.map(x => (x - min) / range)\n        rescaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - min) / range *\
    \ newMax - newMin)", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val scale = (maxValue - minValue) / (numbers.size - 1)\n\
    \        numbers.map(x => x * scale)", "        val min = numbers.min\n      \
    \  val max = numbers.max\n        val range = max - min\n        val newList =\
    \ numbers.map(x => (x - min) / range)\n        newList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val rescaledList =\
    \ numbers.map(x => (x - min) / (max - min))\n        rescaledList", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map(x => (x - min) / range)\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map { n =>\
    \ (n - min) / range }\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map(x => (x - min) / range)\n        rescaledList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val rescaledNumbers\
    \ = numbers.map(x => (x - minValue) / (maxValue - minValue))\n        rescaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val rescaledList = numbers.map(x =>\
    \ (x - minValue) / range)\n        rescaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map(x => (x - min) / range)\n        rescaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled: List[Float] = numbers.map(x => (x - min) /\
    \ range)\n        scaled", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val rescaledList = numbers.map(x => (x - minValue) / range)\n       \
    \ rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map( x =>\
    \ (x - min) / range )\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map((x) => x / range\
    \ * 2 - 1)\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newList = numbers.map(x => (x - minValue) / range)\n        newList", "    \
    \    val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ range = maxValue - minValue\n        val newNumbers = numbers.map(x => (x -\
    \ minValue) / range)\n        newNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledList = numbers.map(x => (x - minValue) / range)\n        scaledList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val scaledNumbers = numbers.map((number:\
    \ Float) => number / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map(x => (x - min) / range)\n        rescaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaledNumbers = numbers.map(x => (x - min) / range)\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledList = numbers.map(x => (x - min) / range)\n\
    \        scaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ scaledNumbers = numbers.map(n => (n - minValue) / (maxValue - minValue))\n \
    \       scaledNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ scaledNumbers = numbers.map( x => (x - minValue) / range )\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val rescaledList = numbers.map(x => (x - min) / range)\n      \
    \  rescaledList", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = maxValue - minValue\n        val newList =\
    \ numbers.map(x => (x - minValue) / range * 2 - 1)\n        newList", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val scale = (maxValue - minValue) / (numbers.size - 1)\n        numbers.map(x\
    \ => x * scale).toList", "        val minNum = numbers.min\n        val maxNum\
    \ = numbers.max\n        val range = maxNum - minNum\n        val scaledList =\
    \ numbers.map(x => (x - minNum) / range)\n        scaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min - range / 2\n        val newMax = max + range / 2\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val rescaledList = numbers.map(x => (x - min) / range)\n        rescaledList",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ scaledList = numbers.map(x => (x - minNum) / (maxNum - minNum))\n        scaledList",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ newNums = numbers.map(x => (x - minNum) / (maxNum - minNum))\n        newNums",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        newNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newList\
    \ = numbers.map(x => (x - minValue) / range)\n        newList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaledNumbers = numbers.map(x => (x - min) / range)\n        scaledNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val rescaledList = numbers.map(x =>\
    \ (x - minValue) / range)\n        rescaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val newList = numbers.map(x => (x - minValue) / (maxValue - minValue))\n  \
    \      newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val rescaledList = numbers.map(x\
    \ => (x - min) / range)\n        rescaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledList\
    \ = numbers.map((_ - min) / range)\n        scaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val scaledList = numbers.map(x\
    \ => (x - minNum) / (maxNum - minNum))\n        scaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaledNumbers = numbers.map { n => (n - min) / range }\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledList = numbers.map(x => (x - min) / range)\n\
    \        scaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ scaledList = numbers.map(x => (x - minNum) / (maxNum - minNum))\n        scaledList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range + 0.5f)\n        newNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map( x => (x - min) / range )\n \
    \       newList", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val scale = (maxValue - minValue) / (numbers.size - 1)\n\
    \        numbers.map(x => x * scale).toList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        val newNumbers = numbers.map(x => (x - newMin) / (newMax -\
    \ newMin))\n        newNumbers", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newList = numbers.map(x\
    \ => (x - min) / range)\n        newList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val scaledList = numbers.map(x => (x - min) / range)\n      \
    \  scaledList", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val newNums = numbers.map(x => (x - minNum) / (maxNum - minNum))\n  \
    \      newNums", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        scaledNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n   \
    \     scaledNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val newNumbers = numbers.map(x => (x - minValue) / (maxValue\
    \ - minValue))\n        newNumbers", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val newNumbers\
    \ = numbers.map( x => (x - minValue) / (maxValue - minValue) )\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val minNum = numbers.min\n\
    \        val maxNum = numbers.max\n        val range = maxNum - minNum\n     \
    \   val newNumbers = numbers.map(x => (x - minNum) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val scaledNumbers = numbers.map(x => (x - minValue) /\
    \ (maxValue - minValue))\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val rescaledList = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        rescaledList", "       \
    \ val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n    \
    \    rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val scale = (maxValue - minValue)\
    \ / (numbers.size - 1)\n        numbers.map(x => x * scale.toFloat)", "      \
    \  val minNum = numbers.min\n        val maxNum = numbers.max\n        val newNums\
    \ = numbers.map(x => (x - minNum) / (maxNum - minNum))\n        newNums", "  \
    \      val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val newNumbers = numbers.map( x => x / minValue )\n        val newMax = newNumbers.max\n\
    \        val newMin = newNumbers.min\n        newNumbers.map( x => if (x == 0)\
    \ 0 else 1 )", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        newNumbers", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newList\
    \ = numbers.map(x => (x - minValue) / range)\n        newList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val rescaledList = numbers.map(x => (x - min) / range)\n        rescaledList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / range)\n        newNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newNumbers = numbers.map { x\
    \ => (x - minValue) / (maxValue - minValue) }\n        newNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val scaledNumbers\
    \ = numbers.map { x => (x - minValue) / (maxValue - minValue) }\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledNumbers = numbers.map(n => (n - min) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val newNumbers =\
    \ numbers.map( x => (x - minValue) / (maxValue - minValue) )\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val rescaledList = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        rescaledList", "        val minValue = math.min(numbers)\n        val\
    \ maxValue = math.max(numbers)\n        val scaledNumbers = numbers.map( x =>\
    \ (x - minValue) / (maxValue - minValue) )\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val newNumbers\
    \ = numbers.map(x => (x - minValue) / (maxValue - minValue))\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val newNumbers =\
    \ numbers.map(x => (x - minValue) / (maxValue - minValue))\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range * 2 -\
    \ 1)\n        newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map(x => (x -\
    \ min) / range)\n        newNumbers", "        val min = numbers.min\n       \
    \ val max = numbers.max\n        val rescaledList = numbers.map(x => (x - min)\
    \ / (max - min))\n        rescaledList", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map(x => (x - min) / range)\n        rescaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        numbers.map(x => (x - min) * newRange\
    \ + newRange)", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range)\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val rescaledList\
    \ = numbers.map(x => (x - minValue) / range)\n        rescaledList", "       \
    \ val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newRange = range / 2\n       \
    \ val newMinValue = minValue - newRange\n        val newMaxValue = maxValue +\
    \ newRange\n        numbers.map(x => (x - newMinValue) / newRange)", "       \
    \ val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ newList = numbers.map(x => (x - minValue) / (maxValue - minValue))\n       \
    \ newList", "        val minNum = numbers.min\n        val maxNum = numbers.max\n\
    \        val newNumbers = numbers.map(x => (x - minNum) / (maxNum - minNum))\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newList = numbers.map( x => (x - min) / range )\n        newList",
  "        val minNum = numbers.min\n        val maxNum = numbers.max\n        val\
    \ newList = numbers.map(x => (x - minNum) / (maxNum - minNum))\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newNumbers\
    \ = numbers.map( x => (x - minValue) / range )\n        newNumbers", "       \
    \ val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ range = maxValue - minValue\n        val rescaledList = numbers.map(x => (x\
    \ - minValue) / range)\n        rescaledList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val scaledList\
    \ = numbers.map(x => (x - minValue) / (maxValue - minValue))\n        scaledList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map( x => (x - min) / range )\n \
    \       newList", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val rescaledNumbers = numbers.map( x => (x - minValue)\
    \ / (maxValue - minValue) )\n        rescaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ minValue = math.min(numbers)\n        val maxValue = math.max(numbers)\n   \
    \     val rescaledList = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        rescaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val scaledNumbers = numbers.map(x => (x - minValue) /\
    \ (maxValue - minValue))\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledList\
    \ = numbers.map(x => (x - min) / range)\n        rescaledList", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map( x => (x - min) / range )\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledList = numbers.map(x => (x - min) / range)\n\
    \        scaledList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val scale = (maxValue - minValue) / (numbers.size\
    \ - 1)\n        numbers.map(x => x * scale).toList", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        numbers.map(x => (x - min) * newRange + min).toList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map(x => (x - min) / range)\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range)\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val newNumbers = numbers.map(x => (x - minValue)\
    \ / (maxValue - minValue))\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val rescaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        rescaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newMin = min - range * 0.01\n        val newMax = max + range\
    \ * 0.01\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "     \
    \   val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ newNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n    \
    \    newNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val newNumbers = numbers.map(x => (x - minValue) / (maxValue\
    \ - minValue))\n        newNumbers", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newList = numbers.map(x\
    \ => (x - min) / range)\n        newList", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val scaled:\
    \ List[Float] = numbers.map(x => (x - min) / range)\n        scaled", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n   \
    \     scaledNumbers", "        val minNum = numbers.min\n        val maxNum =\
    \ numbers.max\n        val scaledList = numbers.map(x => (x - minNum) / (maxNum\
    \ - minNum))\n        scaledList"]
stop_tokens:
- "\n    }\n"
