name: HumanEval_1_separate_paren_groups
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n    // separate those group into separate strings\
  \ and return the list of those.\n    // Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n    // Ignore any\
  \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
  \ : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
  (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
  ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
  )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
  (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
  ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
  \    }\n\n}\n"
completions: ["        val paren_groups = mutable.ListBuffer[String]()\n        val\
    \ paren_stack = mutable.Stack[String]()\n        paren_string.split(\"\\\\(\"\
    ).foreach(x => {\n            val paren_stack = mutable.Stack[String]()\n    \
    \        val paren_groups = mutable.ListBuffer[String]()\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = paren_stack.push(paren_groups)\n\
    \            val paren_groups = paren_stack.push(paren_groups)\n            val\
    \ paren_groups = paren_stack.push(paren_groups)\n            val paren_groups\
    \ = paren_stack.push(paren_groups)\n            val paren_groups = ", "      \
    \  val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = ", "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_close_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_counts = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_brace_counts = mutable.ListBuffer[Int]()\n        val paren_open_brace_counts_map\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map =\
    \ mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Int]()\n        val paren_open_brace_counts_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Int]()\n        val paren_close_b", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        var open_braces = 0\n        var close_braces\
    \ = 0\n        var open_parens = 0\n        var close_parens = 0\n        var\
    \ open_brackets = 0\n        var close_brackets = 0\n        var open_curly =\
    \ 0\n        var close_curly = 0\n        var open_paren_groups = 0\n        var\
    \ close_paren_groups = 0\n        var open_curly_groups = 0\n        var close_curly_groups\
    \ = 0\n        var open_curly_group = 0\n        var close_curly_group = 0\n \
    \       var open_curly_group_count = 0\n        var close_curly_group_count =\
    \ 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var open_curly_group_count = 0\n        var close_curly_group_count\
    \ = 0\n        var ", "        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val paren_open = false\n   \
    \     val paren_close = false\n        val paren_group = \"\"\n        val paren_group_count\
    \ = 0\n        val paren_group_open = false\n        val paren_group_close = false\n\
    \        val paren_group_open_braces = mutable.ListBuffer[String]()\n        val\
    \ paren_group_close_braces = mutable.ListBuffer[String]()\n        val paren_group_open_brace_count\
    \ = 0\n        val paren_group_close_brace_count = 0\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        ", "        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \"(\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"{\", \"{\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"}\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\",\", \",\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed\
    \ = paren_groups_with_spaces.map(x => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n    \
    \    val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        // Your code goes here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_map = mutable.Map[Int, Int]()\n        val paren_close_depth_map\
    \ = mutable.Map[Int, Int]()\n        val paren_open_depth_map_size = mutable.Map[Int,\
    \ Int]()\n        val paren_close_depth_map_size = mutable.Map[Int, Int]()\n \
    \       val paren_open_depth_map_depth = mutable.Map[Int, Int]()\n        val\
    \ paren_close_depth_map_depth = mutable.Map[Int, Int]()\n        val paren_open_depth_map_depth_map\
    \ = mutable.Map[Int, Int]()\n        val paren_close_depth_map_depth_map = mutable.Map[Int,\
    \ Int]()\n        val paren_open_depth_map_depth_map_size = mutable.Map[Int, Int]()\n\
    \        val paren_close_depth_map_depth_map_size = mutable.Map[Int, Int]()\n\
    \        val paren_open_depth_map_depth_map_depth = mutable.Map[Int, Int]()\n\
    \        val paren_close_depth_map_depth_map_depth = mutable.Map[Int, Int]()\n\
    \        val paren_open_depth_map_depth_map_depth_map = mutable.Map[Int, Int]()\n\
    \        val paren_close_depth_map_depth_map_depth_map = mutable.Map[Int, Int]()\n\
    \        val paren_open_depth_map_depth_map_depth_map_size = mutable.Map[Int,\
    \ Int]()\n        val paren_close_depth_map_depth_map_depth_map_size = mutable.Map[Int,\
    \ Int]()\n        val paren_open_depth_map_depth_map_depth_map_depth = mutable.Map[Int,\
    \ Int]()\n        val paren_close_depth_map_depth_map_depth_map_depth = mutable.Map[Int,\
    \ Int]()\n        val paren_open_depth_map_depth_map_depth_map_depth_map = mutable.Map[Int,\
    \ Int]()\n        val paren_close_depth_map_depth_map_depth_map_depth_map = mutable.",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x\
    \ => x.trim().nonEmpty)\n        paren_group_strings.toList", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val spaces =\
    \ mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace = mutable.ListBuffer[String]()\n        val paren_close_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\",\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x ", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    \ \", \"\"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"{\", \"\").replace(\"\
    }\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    [\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"\").replace(\"}\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"[\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"\").replace(\"}\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_stack\
    \ = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val paren_group_size\
    \ = paren_string.count('(') - paren_string.count(')')\n            paren_groups\
    \ += paren_string\n            paren_stack.push(paren_string.substring(paren_group_size))\n\
    \        }\n        paren_groups.toList", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]", "        val\
    \ paren_groups = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val open = x.split(\"\\\\)\").length\n  \
    \          val closed = x.split(\"\\\\)\").length - 1\n            if (open >\
    \ closed) {\n                paren_groups += x\n            } else {\n       \
    \         paren_open += x\n            }\n        })\n        paren_groups.toList",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[Int]()\n        val close_braces\
    \ = mutable.ListBuffer[Int]()\n        val open_parens = mutable.ListBuffer[Int]()\n\
    \        val close_parens = mutable.ListBuffer[Int]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val open_paren_count = 0\n \
    \       val close_paren_count = 0\n        val open_brace_open = false\n     \
    \   val close_brace_open = false\n        val open_paren_open = false\n      \
    \  val close_paren_open = false\n        val open_brace_close = false\n      \
    \  val close_brace_close = false\n        val open_paren_close = false\n     \
    \   val close_paren_close = false\n        val open_brace_opened = false\n   \
    \     val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_paren_closed = false\n\
    \        val close_paren_closed = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_paren_opened = false\n\
    \        val close_paren_opened = false", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_count = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                paren_count += 1\n            } else if (c ==\
    \ ')') {\n                paren_count -= 1\n            } else if (c == ' ') {\n\
    \                if (paren_count == 0) {\n                    paren_groups +=\
    \ c\n                }\n            }\n        }\n        paren_groups.toList",
  "        val paren_groups = mutable.ListBuffer[String]()\n        var paren_open_braces\
    \ = 0\n        var paren_closed_braces = 0\n        var paren_group = \"\"\n \
    \       var paren_group_open_braces = 0\n        var paren_group_closed_braces\
    \ = 0\n        var paren_group_open_braces_count = 0\n        var paren_group_closed_braces_count\
    \ = 0\n        var paren_group_open_braces_count_max = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_max = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_min = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_min = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_min = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_min = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_max = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_max = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_min = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_min = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_max = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_max = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_min = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_min = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_max = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_max = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_min = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_min = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_max = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_max = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_min = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_min = paren_group_closed_braces_count\n\
    \        var paren_group_open_braces_count_max = paren_group_open_braces_count\n\
    \        var paren_group_closed_braces_count_max = paren_group_closed_braces_count\n\
    \        var paren_group_open", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_max = mutable.ListBuffer[Int]()\n        val paren_group_size_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren_group_size_max\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_min = mutable.ListBuffer[Double]()\n        val paren", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = mutable.ListBuffer[Int]()\n        val paren_closed_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = mutable.ListBuffer[Int]()\n        val paren_closed_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_avg = mutable.ListBuffer[Int]()\n        val paren_closed_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").trim())\n        paren_group_strings.filter(x => !x.isEmpty)", "  \
    \      val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\") \", \" ) \"))\n  \
    \      val paren_groups_with_spaces_trimmed_trimmed_trimmed = paren_groups_with_spaces_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed.map(x => x.replace(\") \"\
    , \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x => x.replace(\"\
    ( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed.map(x =>\
    \ x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimme",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\"))\n        val paren_group_strings_set\
    \ = paren_group_strings.distinct\n        val paren_group_strings_list_set = paren_group_strings_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_set\
    \ = paren_group_strings_list_set.map(x => x.replace(\")\", \"\")).distinct\n \
    \       val paren_group_strings_list_list_list_set = paren_group_strings_list_list_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_set.map(x => x.replace(\")\", \"\")).distinct\n\
    \        val paren_group_strings_list_list_list_list_list_set = paren_group_strings_list_list_list_list_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_set.map(x => x.replace(\")\"\
    , \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_set.map(x => x.replace(\"\
    (\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_set.map(x => x.replace(\"\
    )\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\")\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\"(\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_list_list_list_list_list_list_list_list_list_list_set.map(x\
    \ => x.replace(\")\", \"\")).distinct\n        val paren_group_strings_list_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_group_strings_list_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_remainder_size = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder = paren_groups_size_remainder_size\
    \ % 2\n        val paren_groups_size_remainder_size_remainder_remainder = paren_groups_size_remainder_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder + 1\n     \
    \   val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder +\
    \ 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ + 1\n        val paren_", "        val paren_groups = paren_string.split(\"\\\
    \\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \")\n \
    \       val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_space", "        val\
    \ paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortWith((x, y) => x.length <= y.length)\n      \
    \  val paren_groups_with_spaces_sorted_with_open_braces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"{\").replace(\")\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"{\"\
    , \"{\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"{\\n \"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n {\", \"\\n {\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\\n {\\n\", \"\\n {\\n \"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\\n {\\n\", \"\\n {\\n \"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_space",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_stack\
    \ = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n        while(paren_stack.nonEmpty)\
    \ {\n            val paren_string = paren_stack.pop()\n            val open_braces\
    \ = paren_string.split(\"\\\\{\").length\n            val close_braces = paren_string.split(\"\
    \\\\}\").length\n            val open_brace_count = paren_string.split(\"\\\\\
    {\").length - 1\n            val close_brace_count = paren_string.split(\"\\\\\
    }\").length - 1\n            val open_brace_count_with_paren = open_brace_count\
    \ + open_brace_count_with_paren\n            val close_brace_count_with_paren\
    \ = close_brace_count + close_brace_count_with_paren\n            val open_brace_count_without_paren\
    \ = open_brace_count - open_brace_count_with_paren\n            val close_brace_count_without_paren\
    \ = close_brace_count - close_brace_count_with_paren\n            val open_brace_count_with_paren_without_paren\
    \ = open_brace_count_without_paren + open_brace_count_with_paren\n           \
    \ val close_brace_count_with_paren_without_paren = close_brace_count_without_paren\
    \ + close_brace_count_with_paren\n            val open_brace_count_without_paren_without_paren\
    \ = open_brace_count_without_paren - open_brace_count_with_paren\n           \
    \ val close_brace_count_without_paren_without_paren = close_brace_count_without_paren\
    \ - close_brace_count_with_paren\n            val open_brace_count_with_paren_without_paren_without_paren\
    \ = open_brace_count_without_paren_without_paren + open_brace_count_with_paren_without_paren\n\
    \            val close_brace_count_with_paren_without_paren_without_paren = close_brace_count_without_paren_without_paren\
    \ + close_brace_count_with_paren_without_paren\n            val open_brace_count_without_paren_without_paren_without_paren\
    \ = open_brace_count_without_paren_without_paren - open_brace_count_with_paren_without_paren\n\
    \            val close_brace_count_without_paren_without_paren_without_paren =\
    \ close_brace_count_without_paren_without_paren - close_brace_count_with_paren_without_paren\n\
    \            val open_brace_count_with_paren_without_paren_without_paren_without_paren\
    \ = open_brace_count_without_paren_", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val open = x.split(\"\\\\)\").length\n            val closed\
    \ = x.split(\"\\\\)\").length - 1\n            paren_groups ++= x.split(\"\\\\\
    (\")\n            paren_open ++= x.split(\"\\\\(\").take(open)\n            paren_closed\
    \ ++= x.split(\"\\\\(\").drop(open)\n        })\n        paren_groups.toList",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_depth_limit_max = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max =\
    \ mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_max_max_max_max_max_max_max_max_max\
    \ = mutable.ListBuffer[Int]()", "        // Initialize a list to hold all the\
    \ separate groups\n        val groups: List[String] = Nil\n        // Iterate\
    \ over each character in the string\n        for (c <- paren_string) {\n     \
    \       // If the character is a left parenthesis, add it to the list\n      \
    \      if (c == '(') {\n                groups = groups ::: List(c)\n        \
    \    }\n            // If the character is a right parenthesis, remove the last\
    \ element from the list\n            else if (c == ')') {\n                groups\
    \ = groups.tail\n            }\n            // If the character is a space, ignore\
    \ it\n            else if (c == ' ') {\n            }\n            // If the character\
    \ is not a left parenthesis or right parenthesis, ignore it\n            else\
    \ {\n            }\n        }\n        // Return the list of groups\n        return\
    \ groups", "        val paren_groups = paren_string.split(\"\\\\(\")\n       \
    \ val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\", \" \\\\\
    )\").replace(\"(\", \" \\\\(\"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x ",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortWith((x, y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\") \", \" \"))\n     \
    \   val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\")\
    \ \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren", "        val paren_groups = paren_string.split(\"\\\\(\")\n      \
    \  val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_group", "        val paren_groups = mutable.ListBuffer[String]()\n \
    \       var open_braces = 0\n        var closed_braces = 0\n        var open_brace_count\
    \ = 0\n        var closed_brace_count = 0\n        var paren_group = \"\"\n  \
    \      for (c <- paren_string) {\n            if (c == '(') {\n              \
    \  open_braces += 1\n                open_brace_count += 1\n            } else\
    \ if (c == ')') {\n                closed_braces += 1\n                closed_brace_count\
    \ += 1\n                if (open_braces == closed_braces) {\n                \
    \    paren_group += c\n                    paren_groups += paren_group\n     \
    \               open_braces = 0\n                    closed_braces = 0\n     \
    \               open_brace_count = 0\n                    closed_brace_count =\
    \ 0\n                    paren_group = \"\"\n                }\n            }\
    \ else if (c == ' ') {\n                if (open_brace_count == closed_brace_count)\
    \ {\n                    paren_group += c\n                    paren_groups +=\
    \ paren_group\n                    open_braces = 0\n                    closed_braces\
    \ = 0\n                    open_brace_count = 0\n                    closed_brace_count\
    \ = 0\n                    paren_group = \"\"\n                }\n           \
    \ }\n        }\n        paren_groups += paren_group\n        paren_groups", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val open_brace_count = 0\n        val close_brace_count = 0\n       \
    \ val open_brace_open = false\n        val close_brace_open = false\n        val\
    \ open_brace_close = false\n        val close_brace_close = false\n        val\
    \ open_brace_open_brace = false\n        val close_brace_open_brace = false\n\
    \        val open_brace_close_brace = false\n        val close_brace_close_brace\
    \ = false\n        val open_brace_open_brace_close = false\n        val close_brace_open_brace_close\
    \ = false\n        val open_brace_close_brace_close = false\n        val close_brace_close_brace_close\
    \ = false\n        val open_brace_open_brace_open = false\n        val close_brace_open_brace_open\
    \ = false\n        val open_brace_close_brace_open = false\n        val close_brace_close_brace_open\
    \ = false\n        val open_brace_open_brace_close = false\n        val close_brace_open_brace_close\
    \ = false\n        val open_brace_close_brace_close = false\n        val close_brace_close_brace_close\
    \ = false\n        val open_brace_open_brace_open_brace = false\n        val close_brace_open_brace_open_brace\
    \ = false\n        val open_brace_close_brace_open_brace = false\n        val\
    \ close_brace_close_brace_open_brace = false\n        val open_brace_open_brace_close_brace\
    \ = false\n        val close_brace_open_brace_close_brace = false\n        val\
    \ open_brace_close_brace_close_brace = false\n        val close_brace_close_brace_close_brace\
    \ = false\n        val open_brace_open_brace_open_brace_close = false\n      \
    \  val close_brace_open_brace_open_brace_close = false\n        val open_brace_close_brace_open_brace_close\
    \ = false\n        val close_brace_close_brace_open_brace_close = false\n    \
    \    val open_brace_open_brace_close_brace_close = false\n        val close_brace_open_brace_",
  "        // Initialize a list to hold our result\n        var result: List[String]\
    \ = Nil\n        // Iterate over each character in the string\n        for (c\
    \ <- paren_string) {\n            // If the character is a left paren, add it\
    \ to the list\n            if (c == '(') {\n                result ::= c\n   \
    \         }\n            // If the character is a right paren, remove it from\
    \ the list\n            else if (c == ')') {\n                result ::= result.takeWhile(_\
    \ != '(')\n            }\n            // If the character is a space, ignore it\n\
    \            else if (c == ' ') {\n            }\n            // If the character\
    \ is not a left paren, ignore it\n            else {\n            }\n        }\n\
    \        // Return the list\n        result", "        // Write your code here\n\
    \        val paren_groups = mutable.ListBuffer[String]()\n        val paren_group_regex\
    \ = \"\"\"[(]([^)]*)[)]\"\"\".r\n        paren_string.split(\"[()]\").foreach(x\
    \ => {\n            val m = paren_group_regex.findFirstMatchIn(x)\n          \
    \  if (m.isDefined) {\n                paren_groups += m.group(1).trim\n     \
    \       }\n        })\n        paren_groups.toList", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_open_braces =\
    \ paren_groups.map(x => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_open_braces_sorted = paren_groups_with_open_braces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces.sortBy(x => x.length)\n\
    \        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[Int]()\n\
    \        val close_braces = mutable.ListBuffer[Int]()\n        val open_parens\
    \ = mutable.ListBuffer[Int]()\n        val close_parens = mutable.ListBuffer[Int]()\n\
    \        val open_brace_count = 0\n        val close_brace_count = 0\n       \
    \ val open_paren_count = 0\n        val close_paren_count = 0\n        val open_brace_open\
    \ = false\n        val close_brace_open = false\n        val open_paren_open =\
    \ false\n        val close_paren_open = false\n        val open_brace_close =\
    \ false\n        val close_brace_close = false\n        val open_paren_close =\
    \ false\n        val close_paren_close = false\n        val open_brace_open2 =\
    \ false\n        val close_brace_open2 = false\n        val open_paren_open2 =\
    \ false\n        val close_paren_open2 = false\n        val open_brace_close2\
    \ = false\n        val close_brace_close2 = false\n        val open_paren_close2\
    \ = false\n        val close_paren_close2 = false\n        val open_brace_open3\
    \ = false\n        val close_brace_open3 = false\n        val open_paren_open3\
    \ = false\n        val close_paren_open3 = false\n        val open_brace_close3\
    \ = false\n        val close_brace_close3 = false\n        val open_paren_close3\
    \ = false\n        val close_paren_close3 = false\n        val open_brace_open4\
    \ = false\n        val close_brace_open4 = false\n        val open_paren_open4\
    \ = false\n        val close_paren_open4 = false\n        val open_brace_close4\
    \ = false\n        val close_brace_close4 = false\n        val open_paren_close4\
    \ = false\n        val close_paren_close4 = false\n        val open_brace_open5\
    \ = false\n        val close_brace_open5 = false\n        val open_paren_open5\
    \ = false\n        val close_paren_open5 = false\n        val open_brace_close5\
    \ = false\n        val close_brace_close5 = false\n        val open_paren_close5\
    \ = false\n        val close_paren_close5 = false\n        val open_brace_open6\
    \ = false\n        val close_brace_open6 = false\n        val open_paren_open6\
    \ = false\n        val close_paren_open6 = false", "        val paren_groups =\
    \ mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group = mutable.ListBuffer[Int]()\n \
    \       val paren_open_brace_count_in_group_with_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group_with_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_in_group_with_paren_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group_with_paren_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_in_group_with_paren_closed_with_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_in_group_with_paren_closed_with_paren =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_in_group_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_in_group_with_paren_closed_with_paren_closed_with_paren_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_", "       \
    \ val paren_groups = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val open_brace_open = false\n\
    \        val close_brace_open = false\n        val open_brace_close = false\n\
    \        val close_brace_close = false\n        val open_brace_opened = false\n\
    \        val close_brace_opened = false\n        val open_brace_closed = false\n\
    \        val close_brace_closed = false\n        val open_brace_opened1 = false\n\
    \        val close_brace_opened1 = false\n        val open_brace_closed1 = false\n\
    \        val close_brace_closed1 = false\n        val open_brace_opened2 = false\n\
    \        val close_brace_opened2 = false\n        val open_brace_closed2 = false\n\
    \        val open_brace_opened3 = false\n        val close_brace_opened3 = false\n\
    \        val open_brace_closed3 = false\n        val open_brace_opened4 = false\n\
    \        val close_brace_opened4 = false\n        val open_brace_closed4 = false\n\
    \        val open_brace_opened5 = false\n        val close_brace_opened5 = false\n\
    \        val open_brace_closed5 = false\n        val open_brace_opened6 = false\n\
    \        val close_brace_opened6 = false\n        val open_brace_closed6 = false\n\
    \        val open_brace_opened7 = false\n        val close_brace_opened7 = false\n\
    \        val open_brace_closed7 = false\n        val open_brace_opened8 = false\n\
    \        val close_brace_opened8 = false\n        val open_brace_closed8 = false\n\
    \        val open_brace_opened9 = false\n        val close_brace_opened9 = false\n\
    \        val open_brace_closed9 = false\n        val open_brace_opened10 = false\n\
    \        val close_brace_opened10 = false\n        val open_brace_closed10 = false\n\
    \        val open_brace_opened11 = false\n        val close_brace_opened11 = false\n\
    \        val open_brace_closed11 = false\n        val open_brace_opened12 = false\n\
    \        val close_brace_opened12 = false\n        val open_brace_closed12 = false\n\
    \        val open_bra", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_close_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_count = 0\n   \
    \     val paren_close_brace_count = 0\n        val paren_open_brace_count_in_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group = 0\n\
    \        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        val paren_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_",
  "        // Initialize a list to hold our result\n        var result: List[String]\
    \ = Nil\n        // Initialize a stack to hold our parens\n        var parenStack:\
    \ List[String] = Nil\n        // Iterate over each character in the string\n \
    \       for (c <- paren_string) {\n            // If the character is a left paren,\
    \ push it onto the stack\n            if (c == '(') {\n                parenStack\
    \ ::= c\n            }\n            // If the character is a right paren, pop\
    \ it from the stack\n            else if (c == ')') {\n                parenStack\
    \ ::= parenStack.tail\n            }\n            // If the character is a space,\
    \ ignore it\n            else if (c == ' ') {\n            }\n            // If\
    \ the character is a comma, ignore it\n            else if (c == ',') {\n    \
    \        }\n            // If the character is a newline, ignore it\n        \
    \    else if (c == '\\n') {\n            }\n            // If the character is\
    \ a tab, ignore it\n            else if (c == '\\t') {\n            }\n      \
    \      // If the character is a carriage return, ignore it\n            else if\
    \ (c == '\\r') {\n            }\n            // If the character is a backslash,\
    \ ignore it\n            else if (c == '\\\\') {\n            }\n            //\
    \ If the character is a letter, ignore it\n            else if (c.isLetter) {\n\
    \            }\n            // If the character is a number, ignore it\n     \
    \       else if (c.isDigit) {\n            }\n            // If the character\
    \ is a non-alphanumeric character, ignore it\n            else {\n           \
    \ }\n        }\n        // If the stack is empty, return an empty list\n     \
    \   if (parenStack.isEmpty) {\n            return Nil\n        }\n        // Otherwise,\
    \ pop off the last character from the stack and add it to the result\n       \
    \ else {\n            result ::= parenStack.tail\n        }\n        // Return\
    \ the result\n        result", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\",\"\").replace(\"\
    )\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces.sortWith((x,y) => x.length\
    \ <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\",\" \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\",\" \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\",\" \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_set\
    \ = paren_groups.toSet\n        val paren_groups_list_with_duplicates = paren_groups.toList.distinct\n\
    \        val paren_groups_list_without_duplicates = paren_groups_list_with_duplicates.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted = paren_groups_list_without_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted.distinct\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates.sortBy(x => x)\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\") \", \" \"))\n    \
    \    val paren_groups_with_spaces_trimmed_trimmed_trimmed = paren_groups_with_spaces_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed.map(x => x.replace(\") \"\
    , \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x => x.replace(\"\
    ) \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed.map(x =>\
    \ x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\") \", \" \"))\n        val paren_groups_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_", "        val paren_groups = mutable.ListBuffer[String]()\n      \
    \  val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_brace_size = mutable.ListBuffer[Int]()\n        val paren_group_closed_brace_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_brace_brace_size = mutable.ListBuffer[Int]()\n     \
    \   val paren_group_closed_brace_brace_size = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_brace_brace_brace = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_closed_brace_brace_brace = mutable.ListBuffer[Int]()\n  \
    \      val paren_group_open_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_brace_brace_brace_brace_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_brace_brace_brace_brace_brace_size = mutable.List",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \" (\"))\n     \
    \   val paren_groups_with_spaces_sorted_with_spaces_without_spaces = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    )\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" )\")\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_space", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_close_braces = mutable.ListBuffer[String]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_size = mutable.ListBuffer[Int]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_brace_count_sum = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_avg = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_avg = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_brace_count_avg = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count_av", "    \
    \    val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_flat\
    \ = paren_groups.flatten\n        val paren_groups_flat2 = paren_groups_flat.filterNot(_\
    \ == \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_ == \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \")\")\n\
    \        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n  \
    \      val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n   \
    \     val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n   \
    \     val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n  \
    \      val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n \
    \       val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val spaces =\
    \ mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_open2 = mutable.ListBuffer[String]()\n\
    \        val paren_close2 = mutable.ListBuffer[String]()\n        val paren_space2\
    \ = mutable.ListBuffer[String]()\n        val paren_open3 = mutable.ListBuffer[String]()\n\
    \        val paren_close3 = mutable.ListBuffer[String]()\n        val paren_space3\
    \ = mutable.ListBuffer[String]()\n        val paren_open4 = mutable.ListBuffer[String]()\n\
    \        val paren_close4 = mutable.ListBuffer[String]()\n        val paren_space4\
    \ = mutable.ListBuffer[String]()\n        val paren_open5 = mutable.ListBuffer[String]()\n\
    \        val paren_close5 = mutable.ListBuffer[String]()\n        val paren_space5\
    \ = mutable.ListBuffer[String]()\n        val paren_open6 = mutable.ListBuffer[String]()\n\
    \        val paren_close6 = mutable.ListBuffer[String]()\n        val paren_space6\
    \ = mutable.ListBuffer[String]()\n        val paren_open7 = mutable.ListBuffer[String]()\n\
    \        val paren_close7 = mutable.ListBuffer[String]()\n        val paren_space7\
    \ = mutable.ListBuffer[String]()\n        val paren_open8 = mutable.ListBuffer[String]()\n\
    \        val paren_close8 = mutable.ListBuffer[String]()\n        val paren_space8\
    \ = mutable.ListBuffer[String]()\n        val paren_open9 = mutable.ListBuffer[String]()\n\
    \        val paren_close9 = mutable.ListBuffer[String]()\n        val paren_space9\
    \ = mutable.ListBuffer[String]()\n        val paren_open10 = mutable.ListBuffer[String]()\n\
    \        val paren_close10 = mutable.ListBuffer[String]()\n        val paren_space10\
    \ = mutable.ListBuffer[String]()\n        val paren_open", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortWith((x, y) => x.size < y.size)\n        val\
    \ paren_groups_with_spaces_sorted_with_open_braces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"{\").replace(\")\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"{\"\
    , \"{\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => ", "        val paren_groups = mutable.ListBuffer[String]()\n        val\
    \ paren_open = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_closed_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(",
  "        // Initialize a list to hold our result\n        var result: List[String]\
    \ = Nil\n\n        // Iterate over each character in the string\n        for (c\
    \ <- paren_string) {\n            // If we are not at a closing brace, add this\
    \ character to the list\n            if (c != ')') {\n                result ::=\
    \ c\n            } else {\n                // If we are at a closing brace, add\
    \ this character to the list\n                result ::= c\n                //\
    \ If we have not yet found a closing brace, add this character to the list\n \
    \               if (result.last != '(') {\n                    result ::= c\n\
    \                }\n            }\n        }\n\n        // Return the list\n \
    \       result", "        val paren_groups = paren_string.split(\"\\\\(\")\n \
    \       val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\",\
    \ \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"  \", \" \"))\n     \
    \   val paren_groups_with_spaces_sorted_without_spaces_without_spaces = paren_groups_with_spaces_sorted_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_space", "        val\
    \ paren_groups = mutable.ListBuffer[String]()\n        var paren_group = \"\"\n\
    \        var paren_group_open = false\n        var paren_group_closed = false\n\
    \        var paren_group_opening_char = \"\"\n        var paren_group_closing_char\
    \ = \"\"\n        var paren_group_opening_char_count = 0\n        var paren_group_closing_char_count\
    \ = 0\n        var paren_group_opening_char_count_in_paren = 0\n        var paren_group_closing_char_count_in_paren\
    \ = 0\n        var paren_group_opening_char_is_space = false\n        var paren_group_closing_char_is_space\
    \ = false\n        var paren_group_opening_char_is_newline = false\n        var\
    \ paren_group_closing_char_is_newline = false\n        var paren_group_opening_char_is_newline_or_space\
    \ = false\n        var paren_group_closing_char_is_newline_or_space = false\n\
    \        var paren_group_opening_char_is_newline_or_space_or_paren = false\n \
    \       var paren_group_closing_char_is_newline_or_space_or_paren = false\n  \
    \      var paren_group_opening_char_is_newline_or_space_or_paren_or_comma = false\n\
    \        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma =\
    \ false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_opening_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_closing_char_is_newline_or_space_or_paren_or_comma\
    \ = false\n        var paren_group_", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(!paren_stack.isEmpty) {\n            val current_group = paren_stack.pop()\n\
    \            val current_group_length = current_group.length\n            val\
    \ open_paren_count = current_group.indexOf(\"(\")\n            val close_paren_count\
    \ = current_group.indexOf(\")\")\n            val close_paren_count_diff = close_paren_count\
    \ - open_paren_count\n            val close_paren_count_diff_abs = close_paren_count_diff\
    \ % 2\n            val close_paren_count_diff_mod = close_paren_count_diff / 2\n\
    \            val close_paren_count_diff_mod_abs = close_paren_count_diff_mod %\
    \ 2\n            val close_paren_count_diff_mod_abs = close_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff = open_paren_count - close_paren_count\n\
    \            val open_paren_count_diff_abs = open_paren_count_diff % 2\n     \
    \       val open_paren_count_diff_mod = open_paren_count_diff / 2\n          \
    \  val open_paren_count_diff_mod_abs = open_paren_count_diff_mod % 2\n       \
    \     val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs % 2\n\
    \            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren_count_diff_mod_abs\
    \ % 2\n            val open_paren_count_diff_mod_abs = open_paren", "        //\
    \ Your code here\n        val paren_groups = mutable.ListBuffer[String]()\n  \
    \      val paren_group_regex = \"\"\"[(]([^)]*)[)]\"\"\".r\n        val paren_group_matcher\
    \ = paren_group_regex.findFirstIn(paren_string)\n        while (paren_group_matcher.isDefined)\
    \ {\n            paren_groups += paren_group_matcher.group\n            paren_group_matcher\
    \ = paren_group_regex.findFirstIn(paren_string)\n        }\n        paren_groups.toList",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = mutable.ListBuffer[Int]()\n        val paren_closed_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_closed_depth_min = paren_closed_depth_sum\n\
    \        val paren_open_depth_max = paren_open_depth_sum\n        val paren_closed_depth_max\
    \ = paren_closed_depth_sum\n        val paren_open_depth_sum = paren_open_depth_sum\n\
    \        val paren_closed_depth_sum = paren_closed_depth_sum\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_closed_depth_min = paren_closed_depth_sum\n\
    \        val paren_open_depth_max = paren_open_depth_sum\n        val paren_closed_depth_max\
    \ = paren_closed_depth_sum\n        val paren_open_depth_sum = paren_open_depth_sum\n\
    \        val paren_closed_depth_sum = paren_closed_depth_sum\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_closed_depth_min = paren_closed_depth_sum\n\
    \        val paren_open_depth_max = paren_open_depth_sum\n        val paren_closed_depth_max\
    \ = paren_closed_depth_sum\n        val paren_open_depth_sum = paren_open_depth_sum\n\
    \        val paren_closed_depth_sum = paren_closed_depth_sum\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_closed_depth_min = paren_closed_depth_sum\n\
    \        ", "        val paren_groups = paren_string.split(\"\\\\(\")\n      \
    \  val paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\", \" )\
    \ \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted = paren_groups_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_reversed = paren_groups_with_spaces_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed = paren_groups_with_spaces_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed.sortBy(x => x)\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted.reverse\n\
    \        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed_sorted_reversed_trimmed\
    \ = paren_groups_with_spaces_trimmed_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_space",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_without_spaces_sorted = paren_groups_with_spaces_sorted_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_count = 0\n        var open_braces = 0\n        var close_braces\
    \ = 0\n        var open_parens = 0\n        var close_parens = 0\n        var\
    \ paren_start = 0\n        var paren_end = 0\n        var paren_start_index =\
    \ 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n    \
    \    var paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_end_index = 0\n        var\
    \ paren_start_index = 0\n        var paren_end_index = 0\n        var paren_start_index\
    \ = 0\n        var paren_end_index = 0\n        var paren_start_index = 0\n  \
    \      var paren_end_index = 0\n        var paren_start_index = 0\n        var\
    \ paren_end_index = 0\n        var paren_start_index = 0\n        var paren_end_index\
    \ = 0\n        var paren_start_index = 0\n        var paren_end_index = 0\n  \
    \      var paren_start_index = 0\n        var paren_", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x.length)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"( \", \" \"))\n     \
    \   val paren_groups_with_spaces_sorted_without_spaces_without_spaces = paren_groups_with_spaces_sorted_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_space", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_size = paren_groups.length\n\
    \        val paren_groups_size_plus_one = paren_groups_size + 1\n        val paren_groups_size_plus_two\
    \ = paren_groups_size_plus_one * 2\n        val paren_groups_size_plus_three =\
    \ paren_groups_size_plus_two * 2\n        val paren_groups_size_plus_four = paren_groups_size_plus_three\
    \ * 2\n        val paren_groups_size_plus_five = paren_groups_size_plus_four *\
    \ 2\n        val paren_groups_size_plus_six = paren_groups_size_plus_five * 2\n\
    \        val paren_groups_size_plus_seven = paren_groups_size_plus_six * 2\n \
    \       val paren_groups_size_plus_eight = paren_groups_size_plus_seven * 2\n\
    \        val paren_groups_size_plus_nine = paren_groups_size_plus_eight * 2\n\
    \        val paren_groups_size_plus_ten = paren_groups_size_plus_nine * 2\n  \
    \      val paren_groups_size_plus_eleven = paren_groups_size_plus_ten * 2\n  \
    \      val paren_groups_size_plus_twelve = paren_groups_size_plus_eleven * 2\n\
    \        val paren_groups_size_plus_thirteen = paren_groups_size_plus_twelve *\
    \ 2\n        val paren_groups_size_plus_fourteen = paren_groups_size_plus_thirteen\
    \ * 2\n        val paren_groups_size_plus_fifteen = paren_groups_size_plus_fourteen\
    \ * 2\n        val paren_groups_size_plus_sixteen = paren_groups_size_plus_fifteen\
    \ * 2\n        val paren_groups_size_plus_seventeen = paren_groups_size_plus_sixteen\
    \ * 2\n        val paren_groups_size_plus_eighteen = paren_groups_size_plus_seventeen\
    \ * 2\n        val paren_groups_size_plus_nineteen = paren_groups_size_plus_eighteen\
    \ * 2\n        val paren_groups_size_plus_twenty = paren_groups_size_plus_nineteen\
    \ * 2\n        val paren_groups_size_plus_thirty = paren_groups_size_plus_twenty\
    \ * 2\n        val paren_groups_size_plus_forty = paren_groups_size_plus_thirty\
    \ * 2\n        val paren_groups_size_plus_fifty = paren_groups_size_plus_forty\
    \ * 2\n        val paren_groups_size_plus_sixty = paren_groups_size_plus_fifty\
    \ * 2\n        val paren_groups_size_plus_seventy = paren_groups_size_plus_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_set\
    \ = paren_groups.toSet\n        val paren_groups_list_with_duplicates = paren_groups.toList.distinct\n\
    \        val paren_groups_list_without_duplicates = paren_groups_list_with_duplicates.toList\n\
    \        val paren_groups_list_without_duplicates_sorted = paren_groups_list_without_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted.distinct\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates.sortBy(x => x)\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.sortBy(x\
    \ => x)\n        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted\
    \ = paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted.distinct\n\
    \        val paren_groups_list_without_duplicates_sorted_with_duplicates_sorted_with_duplicates_sorted_with_duplicates_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\"(\", \" ( \").replace(\")\", \" ) \"))\n\
    \        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ).replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group", "        val paren_groups = paren_string.split(\"\\\\(\")\n\
    \        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace = mutable.ListBuffer[String]()\n        val paren_space_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space = mutable.ListBuffer[String]()\n        val\
    \ paren_space_space_brace = mutable.ListBuffer[String]()\n        val paren_open_brace_space_space\
    \ = mutable.ListBuffer[String]()\n        val paren_close_brace_space_space =\
    \ mutable.ListBuffer[String]()\n        val paren_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_space_space_brace = mutable.ListBuffer",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_stack\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(x => {\n            val paren_open\
    \ = x.split(\"\\\\)\").length\n            paren_open.toList.foreach(y => {\n\
    \                val paren_close = y.split(\"\\\\)\").length\n               \
    \ paren_close.toList.foreach(z => {\n                    paren_groups += z\n \
    \               })\n            })\n            paren_groups += x\n        })\n\
    \        paren_groups.toList", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_groups_with_close_braces = paren_groups_with_open_braces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_not_nested\
    \ = paren_groups_with_close_braces.filter(x => !x.contains(\"(\"))\n        val\
    \ paren_groups_with_close_braces_not_nested = paren_groups_with_open_braces_not_nested.filter(x\
    \ => !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces\
    \ = paren_groups_with_close_braces_not_nested.filter(x => !x.contains(\"(\") ||\
    \ !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces\
    \ = paren_groups_with_open_braces_not_nested_with_spaces.filter(x => !x.contains(\"\
    (\") || !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_close_braces_not_nested_with_spaces.filter(x => !x.contains(\"\
    (\") || !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_open_braces_not_nested_with_spaces_not_nested.filter(x =>\
    \ !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces_not_nested_with_spaces\
    \ = paren_groups_with_close_braces_not_nested_with_spaces_not_nested.filter(x\
    \ => !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces\
    \ = paren_groups_with_open_braces_not_nested_with_spaces_not_nested_with_spaces.filter(x\
    \ => !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_with_spaces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces.filter(x\
    \ => !x.contains(\"(\") || !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_with_spaces_not_nested_with_spaces_not_nested\
    \ = paren_groups_with_open_braces_not_nested_with_spaces_not_nested_", "     \
    \   val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \") \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"{\", \"{\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    }\", \"}\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\",\", \",\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\":\", \":\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\";\", \";\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\",\", \",\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\":\", \":\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.", '        // Your code goes here', "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_set\
    \ = paren_groups.toSet\n        val paren_groups_list_set = paren_groups.toList.toSet\n\
    \        val paren_groups_list_list_set = paren_groups.toList.toList.toSet\n \
    \       val paren_groups_list_list_list_set = paren_groups.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_set = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toList.toSet\n\
    \        val paren_groups_list_list_list_list_list_list_list_list_list_list_list_list_set\
    \ = paren_groups.toList.toList.to", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    (\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"{\", \" { \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"}\", \" } \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_", "        val paren_groups =\
    \ paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\").trim())\n        val paren_group_strings_sorted\
    \ = paren_group_strings.sortWith((x, y) => x.length <= y.length)\n        val\
    \ paren_group_strings_sorted_without_duplicates = paren_group_strings_sorted.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted = paren_group_strings_sorted_without_duplicates.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted.distinct\n        val\
    \ paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.distinct\n\
    \        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted\
    \ = paren_group_strings_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted_without_duplicates_sorted.sortWith((x,\
    \ y) => x.length <= y.length)\n        val paren_group_strings_sorted_without_duplicates_sorted_without_duplicate",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list2 = paren_groups_size_list.map(x\
    \ => x.reverse)\n        val paren_groups_size_list3 = paren_groups_size_list2.map(x\
    \ => x.reverse)\n        val paren_groups_size_list4 = paren_groups_size_list3.map(x\
    \ => x.reverse)\n        val paren_groups_size_list5 = paren_groups_size_list4.map(x\
    \ => x.reverse)\n        val paren_groups_size_list6 = paren_groups_size_list5.map(x\
    \ => x.reverse)\n        val paren_groups_size_list7 = paren_groups_size_list6.map(x\
    \ => x.reverse)\n        val paren_groups_size_list8 = paren_groups_size_list7.map(x\
    \ => x.reverse)\n        val paren_groups_size_list9 = paren_groups_size_list8.map(x\
    \ => x.reverse)\n        val paren_groups_size_list10 = paren_groups_size_list9.map(x\
    \ => x.reverse)\n        val paren_groups_size_list11 = paren_groups_size_list10.map(x\
    \ => x.reverse)\n        val paren_groups_size_list12 = paren_groups_size_list11.map(x\
    \ => x.reverse)\n        val paren_groups_size_list13 = paren_groups_size_list12.map(x\
    \ => x.reverse)\n        val paren_groups_size_list14 = paren_groups_size_list13.map(x\
    \ => x.reverse)\n        val paren_groups_size_list15 = paren_groups_size_list14.map(x\
    \ => x.reverse)\n        val paren_groups_size_list16 = paren_groups_size_list15.map(x\
    \ => x.reverse)\n        val paren_groups_size_list17 = paren_groups_size_list16.map(x\
    \ => x.reverse)\n        val paren_groups_size_list18 = paren_groups_size_list17.map(x\
    \ => x.reverse)\n        val paren_groups_size_list19 = paren_groups_size_list18.map(x\
    \ => x.reverse)\n        val paren_groups_size_list20 = paren_groups_size_list19.map(x\
    \ => x.reverse)\n        val paren_groups_size_list21 = paren_groups_size_list20.map(x\
    \ => x.reverse)\n        val paren_groups_size_list22 = paren_groups_size_list21.map(x\
    \ => x.reverse)\n        val paren_groups_size_list23 = paren_groups_size_list22.map(x\
    \ => x.reverse", "        // Your code goes here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[Int]()\n        val close_braces\
    \ = mutable.ListBuffer[Int]()\n        val open_brace_count = 0\n        val close_brace_count\
    \ = 0\n        val paren_open = mutable.ListBuffer[Int]()\n        val paren_close\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_open_size_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_count_max = mutable.ListBuffer[Int]()\n        val paren_open_size_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val paren_open_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val paren_open_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val paren_open_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_count_min = mutable.ListBuffer[Int]()\n        val paren_open_size_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_count_min = mutable.List", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted =\
    \ paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\)\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_without_spaces_sorted = paren_groups_with_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\(\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_space",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_close_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min = mutable.ListBuffer[Int]()\n        val paren_close_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_close_depth_min = paren_close_depth_sum\n\
    \        val paren_open_depth_max = paren_open_depth_sum\n        val paren_close_depth_max\
    \ = paren_close_depth_sum\n        val paren_open_depth_sum = paren_open_depth_sum\n\
    \        val paren_close_depth_sum = paren_close_depth_sum\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_close_depth_min = paren_close_depth_sum\n\
    \        val paren_open_depth_max = paren_open_depth_sum\n        val paren_close_depth_max\
    \ = paren_close_depth_sum\n        val paren_open_depth_sum = paren_open_depth_sum\n\
    \        val paren_close_depth_sum = paren_close_depth_sum\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_close_depth_min = paren_close_depth_sum\n\
    \        val paren_open_depth_max = paren_open_depth_sum\n        val paren_close_depth_max\
    \ = paren_close_depth_sum\n        val paren_open_depth_sum = paren_open_depth_sum\n\
    \        val paren_close_depth_sum = paren_close_depth_sum\n        val paren_open_depth_min\
    \ = paren_open_depth_sum\n        val paren_close_depth_min = paren_close_depth_sum\n\
    \        val paren", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_close_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_depth_min_index = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_depth_min_size = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_min_depth = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_depth_min_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_max_depth_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_max_depth_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_open_depth_min_depth_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_min_depth_size = mutable.ListBuffer[Int]()\n  \
    \      val paren_open_depth_max_depth_depth = mutable.ListBuffer[Int]()\n    \
    \    val paren_close_depth_max_depth_depth = mutable.ListBuffer[Int]()\n     \
    \   ", "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_", "        // Your code here\n        val\
    \ paren_groups = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth = mutable.ListBuffer[Int]()\n        val paren_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n        val paren_open_depth_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = paren_open_depth_sum\n\
    \        val paren_closed_depth_min = paren_closed_depth_sum\n        val paren_open_depth_max\
    \ = paren_open_depth_sum\n        val paren_closed_depth_max = paren_closed_depth_sum\n\
    \        val paren_open_depth_sum = paren_open_depth_sum\n        val paren_closed_depth_sum\
    \ = paren_closed_depth_sum\n        val paren_open_depth_min = paren_open_depth_sum\n\
    \        val paren_closed_depth_min = paren_closed_depth_sum\n        val paren_open_depth_max\
    \ = paren_open_depth_sum\n        val paren_closed_depth_max = paren_closed_depth_sum\n\
    \        val paren_open_depth_sum = paren_open_depth_sum\n        val paren_closed_depth_sum\
    \ = paren_closed_depth_sum\n        val paren_open_depth_min = paren_open_depth_sum\n\
    \        val paren_closed_depth_min = paren_closed_depth_sum\n        val paren_open_depth_max\
    \ = paren_open_depth_sum\n        val paren_closed_depth_max = paren_closed_depth_sum\n\
    \        val paren_open_depth_sum = paren_open_depth_sum\n        val paren_closed_depth_sum\
    \ = paren_closed_depth_sum\n        val paren_open_depth_min = paren_open_depth_sum\n\
    \        val paren_closed_depth_min = paren_close", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\")\", \") \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\")\", \")\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    (\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"(\", \"(\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \")\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.", "        val paren_groups = mutable.ListBuffer[String]()\n        val\
    \ open_braces = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val open_brace_count = 0\n        val close_brace_count = 0\n       \
    \ val paren_open = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_close_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth = mutable.ListBuffer[Int]()\n        val paren_open_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_count_sum_sum = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_sum_sum_sum = mutable.ListBuffer[Int]()\n      \
    \  val paren_close_count_sum_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n        val paren_close_depth_sum_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_sum_sum_sum_sum =\
    \ mutable.ListBuffer[Int]()\n        val paren_close_count_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_depth_sum_sum_sum_sum_sum = mutable.ListBuffer[Int]",
  '        // Your code goes here', "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ) \"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed\
    \ = paren_groups_with_spaces.map(x => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces\
    \ = paren_groups_with_spaces_trimmed.filter(x => !x.equals(\"\"))\n        val\
    \ paren_groups_with_spaces_trimmed_without_spaces_sorted = paren_groups_with_spaces_trimmed_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted.filter(x => !x.equals(\"\
    \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted_without_spaces_sorted\
    \ = paren_groups_with_spaces_trimmed_without_spaces_sorted_without_spaces_", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_openedd = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_spaced\
    \ = mutable.ListBuffer[String]()\n        val paren_opened", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n\
    \        val paren_groups_flat2 = paren_groups_flat.filterNot(x => x.contains(\"\
    (\"))\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(x => x.contains(\"\
    )\"))\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(x => x.contains(\"\
    {\"))\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(x => x.contains(\"\
    }\"))\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(x => x.contains(\"\
    [\"))\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(x => x.contains(\"\
    ]\"))\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(x => x.contains(\"\
    {\"))\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(x => x.contains(\"\
    }\"))\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(x => x.contains(\"\
    [\"))\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(x => x.contains(\"\
    ]\"))\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(x => x.contains(\"\
    (\"))\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(x => x.contains(\"\
    )\"))\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(x => x.contains(\"\
    {\"))\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(x => x.contains(\"\
    }\"))\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(x => x.contains(\"\
    [\"))\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(x => x.contains(\"\
    ]\"))\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(x => x.contains(\"\
    (\"))\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(x => x.contains(\"\
    )\"))\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(x => x.contains(\"\
    {\"))\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(x => x.contains(\"\
    }\"))\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(x ", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => ", "        val paren_groups = mutable.ListBuffer[String]()\n        val\
    \ paren_open = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_close_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace = mutable.ListBuffer[Int]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_close_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_bra", "        val paren_groups = paren_string.split(\"\\\\(\")\n\
    \        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \")\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \"\
    )\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n\
    \        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n \
    \       val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x => x.replace(\"\
    (\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces.filter(x =>\
    \ !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"{\", \" { \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"}\", \" } \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"[\", \" [ \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\"]\", \" ] \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_with_spaces_trimmed_",
  "        // Write your code here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_braces = mutable.ListBuffer[String]()\n\
    \        val paren_closed_braces = mutable.ListBuffer[String]()\n        val paren_open_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_count_min = mutable.", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.filter(x => !x.equals(\"\"))\n   \
    \     val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.filter(x => !x.equals(\"\
    \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => !x.equals(\"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortWith((x,y) => x.length < y.length)\n        val\
    \ paren_groups_with_spaces_sorted_with_open_braces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted = paren_groups_with_spaces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open", "    \
    \    val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x + \" \").filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \").filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val open_parens = mutable.ListBuffer[String]()\n        val close_parens\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open = mutable.ListBuffer[Int]()\n        val paren_group_close\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_size = mutable.ListBuffer[Int]()\n        val paren_group_open_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count = mutable.ListBuffer[Int]()\n        val paren_group_close_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_size =\
    \ mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_count_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_count = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_opened = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_opened = mutable.ListBuffer[String]()\n        val ", "   \
    \     val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val closed_braces = mutable.ListBuffer[String]()\n\
    \        val open_brace_count = 0\n        val closed_brace_count = 0\n      \
    \  val paren_open = false\n        val paren_closed = false\n        val paren_open_brace\
    \ = false\n        val paren_closed_brace = false\n        val paren_open_brace_count\
    \ = 0\n        val paren_closed_brace_count = 0\n        val paren_open_brace_open\
    \ = false\n        val paren_closed_brace_open = false\n        val paren_open_brace_closed\
    \ = false\n        val paren_closed_brace_closed = false\n        val paren_open_brace_open_brace\
    \ = false\n        val paren_closed_brace_open_brace = false\n        val paren_open_brace_closed_brace\
    \ = false\n        val paren_closed_brace_closed_brace = false\n        val paren_open_brace_open_brace_count\
    \ = 0\n        val paren_closed_brace_open_brace_count = 0\n        val paren_open_brace_closed_brace_count\
    \ = 0\n        val paren_closed_brace_closed_brace_count = 0\n        val paren_open_brace_open_brace_open\
    \ = false\n        val paren_closed_brace_open_brace_open = false\n        val\
    \ paren_open_brace_closed_brace_open = false\n        val paren_closed_brace_closed_brace_open\
    \ = false\n        val paren_open_brace_open_brace_closed = false\n        val\
    \ paren_closed_brace_open_brace_closed = false\n        val paren_open_brace_closed_brace_closed\
    \ = false\n        val paren_closed_brace_closed_brace_closed = false\n      \
    \  val paren_open_brace_open_brace_open_brace = false\n        val paren_closed_brace_open_brace_open_brace\
    \ = false\n        val paren_open_brace_closed_brace_open_brace = false\n    \
    \    val paren_closed_brace_closed_brace_open_brace = false\n        val paren_open_brace_open_brace_closed_brace\
    \ = false\n        val paren_closed_brace_open_brace_closed_brace = false\n  \
    \      val paren_open_brace_closed_brace_closed_brace = false\n        ", "  \
    \      val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = paren_open_index.init\n\
    \        val paren_closed_index = paren_closed_index.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_index = paren_open_index.init\n        val paren_closed_index = paren_closed_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_index = paren_open_index.init\n        val paren_closed_index\
    \ = paren_closed_index.init\n        val paren_open = paren_open.init\n      \
    \  val paren_closed = paren_closed.init\n        val paren_open_index = paren_open_index.init\n\
    \        val paren_closed_index = paren_closed_index.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_index = paren_open_index.init\n        val paren_closed_index = paren_closed_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_index = paren_open_index.init\n        val paren_closed_index\
    \ = paren_closed_index.init\n        val paren_open = paren_open.init\n      \
    \  val paren_closed = paren_closed.init\n        val paren_open_index = paren_open_index.init\n\
    \        val paren_closed_index = paren_closed_index.init\n        val paren_open\
    \ = paren_open.init\n        val paren_closed = paren_closed.init\n        val\
    \ paren_open_index = paren_open_index.init\n        val paren_closed_index = paren_closed_index.init\n\
    \        val paren_open = paren_open.init\n        val paren_closed = paren_closed.init\n\
    \        val paren_open_index = paren_open_index.init\n        val paren_closed_index\
    \ = paren_closed_index.init\n        val paren_open = paren_open.init\n      \
    \  val paren_closed = ", "        val paren_groups = paren_string.split(\"\\\\\
    (\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ) \"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_count\
    \ = paren_groups.length\n        val paren_groups_strings = mutable.ListBuffer[String]()\n\
    \        val paren_groups_strings_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_groups_strings_count_max = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = mutable.ListBuffer[Int]()\n        val paren_groups_strings_count_max_value_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = mutable.ListBuffer[Int", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brackets\
    \ = 0\n        var closed_brackets = 0\n        var open_squares = 0\n       \
    \ var closed_squares = 0\n        var open_curlys = 0\n        var closed_curlys\
    \ = 0\n        var open_angles = 0\n        var closed_angles = 0\n        var\
    \ open_parens = 0\n        var closed_parens = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0\n        var closed_angled_brackets = 0\n        var open_angled_brackets\
    \ = 0", "        val paren_groups = paren_string.split(\"\\\\(\")\n        val\
    \ paren_groups_with_spaces = paren_groups.map(x => x.replace(\")\", \" ) \"))\n\
    \        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        var open_braces\
    \ = 0\n        var closed_braces = 0\n        var open_brackets = 0\n        var\
    \ closed_brackets = 0\n        var open_squares = 0\n        var closed_squares\
    \ = 0\n        var open_brackets_count = 0\n        var closed_brackets_count\
    \ = 0\n        var open_squares_count = 0\n        var closed_squares_count =\
    \ 0\n        var open_braces_count = 0\n        var closed_braces_count = 0\n\
    \        var open_squares_count = 0\n        var closed_squares_count = 0\n  \
    \      var open_braces_count = 0\n        var closed_braces_count = 0\n      \
    \  var open_squares_count = 0\n        var closed_squares_count = 0\n        var\
    \ open_braces_count = 0\n        var closed_braces_count = 0\n        var open_squares_count\
    \ = 0\n        var closed_squares_count = 0\n        var open_braces_count = 0\n\
    \        var closed_braces_count = 0\n        var open_squares_count = 0\n   \
    \     var closed_squares_count = 0\n        var open_braces_count = 0\n      \
    \  var closed_braces_count = 0\n        var open_squares_count = 0\n        var\
    \ closed_squares_count = 0\n        var open_braces_count = 0\n        var closed_braces_count\
    \ = 0\n        var open_squares_count = 0\n        var closed_squares_count =\
    \ 0\n        var open_braces_count = 0\n        var closed_braces_count = 0\n\
    \        var open_squares_count = 0\n        var closed_squares_count = 0\n  \
    \      var open_braces_count = 0\n        var closed_braces_count = 0\n      \
    \  var open_squares_count = 0\n        var closed_squares_count = 0\n        var\
    \ open_braces_count = 0\n        var closed_braces_count = 0\n        var open_squares_count\
    \ = 0\n        var closed_squares_count = 0\n        var open_braces_count = 0\n\
    \        var closed_braces_count = 0\n        var open_squares_count = 0\n   \
    \     var closed_squares_count = 0\n        var open_braces_count = 0\n      \
    \  var closed_braces_count = 0\n        var open_squares_count = 0\n        var\
    \ closed_squares_count = 0\n        var open_braces_count = 0\n        var closed_braces_count\
    \ = 0\n        var open_squares_count = 0\n        var closed_squares_count =\
    \ 0\n        var open_braces_count = 0\n        var closed_braces_count = 0\n\
    \        var open_squares_count = 0\n        var closed_squares_count = 0\n  \
    \      var open_braces_count = 0\n        var closed_braces_count = 0\n      \
    \  var open_squares_count = 0\n        var closed_squares_count = 0\n        var\
    \ open_braces_count = 0\n        var closed_braces_count = 0\n        var open_squares_count\
    \ = 0\n        var closed_squares_count = 0\n        var open_braces_count = 0\n\
    \        var closed_braces_count = 0\n        var open_squares_count = 0\n   \
    \     var closed_squares_count = 0\n        var ", "        val paren_groups =\
    \ paren_string.split(\"\\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_commas = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces_without_commas.map(x => x.replace(\"\
    [\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas.map(x\
    \ => x.replace(\"[\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets_without_spaces_without_commas_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_bracket",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted\
    \ = paren_group_strings.sortWith((x, y) => x.compareTo(y) == 0)\n        val paren_group_strings_sorted_with_open_braces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"{\").replace(\")\"\
    , \"}\"))\n        val paren_group_strings_sorted_with_close_braces = paren_group_strings_sorted_with_open_braces.map(x\
    \ => x.replace(\"{\", \"(\").replace(\"}\", \"))\")\n        val paren_group_strings_sorted_with_open_braces_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces.map(x => x.replace(\")\", \"\
    ]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets.map(x => x.replace(\"\
    ]\", \"[\").replace(\"[\", \"(\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"{\").replace(\"{\", \"(\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"{\", \"[\").replace(\"[\", \"{\").replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_b",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[Int]()\n        val close_braces = mutable.ListBuffer[Int]()\n\
    \        val open_parens = mutable.ListBuffer[Int]()\n        val close_parens\
    \ = mutable.ListBuffer[Int]()\n        val paren_opens = mutable.ListBuffer[Int]()\n\
    \        val paren_closes = mutable.ListBuffer[Int]()\n        val paren_group_strings\
    \ = mutable.ListBuffer[String]()\n        val paren_group_strings_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens = mutable.ListBuffer[Int]()\n        val paren_group_closes\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_opens_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_opens_size_sum = mutable.ListBuffer[Int]()\n        val paren_group_closes_size_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_opens_size_sum_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_size_sum_min = mutable.ListBuffer[Int]()\n   \
    \     val paren_group_opens_size_sum_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_size_sum_max = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_opens_size_sum_max_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_closes_size_sum_max_min = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_opens_size_sum_max_min_max = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_closes_size_sum_max_min_max = mutable.ListBuffer[Int]()\n  \
    \      val paren_group_opens_size_sum_max_min_max_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_size_sum_max_min_max_min = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum_max_min_max_min_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closes_size_sum_max_min_max_min_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_opens_size_sum_max_min_max_min_max_min = mutable.ListBuffer[Int]()\n\
    \        val ", "        val paren_groups = paren_string.split(\"\\\\(\")\n  \
    \      val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\\\\\
    s+\", \" \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" \\\\(\"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \"\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        ", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces =\
    \ paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n      \
    \  val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val open = x.indexOf(\"(\")\n           \
    \ val close = x.indexOf(\")\")\n            val paren_str = x.substring(open +\
    \ 1, close)\n            paren_open.append(paren_str)\n            paren_closed.append(paren_str)\n\
    \            paren_stack.append(paren_str)\n        })\n        paren_stack.foreach(x\
    \ => {\n            val open = x.indexOf(\"(\")\n            val close = x.indexOf(\"\
    )\")\n            val paren_str = x.substring(open + 1, close)\n            paren_groups.append(paren_str)\n\
    \        })\n        paren_groups.toList", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val open_braces = paren_string.split(\"\\\\(\").length\n        \
    \    val close_braces = paren_string.split(\"\\\\)\").length\n            val\
    \ open_brace_count = paren_string.split(\"\\\\(\").length\n            val close_brace_count\
    \ = paren_string.split(\"\\\\)\").length\n            val open_brace_count_in_group\
    \ = open_brace_count / paren_groups.length\n            val close_brace_count_in_group\
    \ = close_brace_count / paren_groups.length\n            val open_brace_count_in_group_plus_1\
    \ = open_brace_count_in_group + 1\n            val close_brace_count_in_group_plus_1\
    \ = close_brace_count_in_group + 1\n            val open_brace_count_in_group_plus_2\
    \ = open_brace_count_in_group_plus_1 + 1\n            val close_brace_count_in_group_plus_2\
    \ = close_brace_count_in_group_plus_1 + 1\n            val open_brace_count_in_group_plus_3\
    \ = open_brace_count_in_group_plus_2 + 1\n            val close_brace_count_in_group_plus_3\
    \ = close_brace_count_in_group_plus_2 + 1\n            val open_brace_count_in_group_plus_4\
    \ = open_brace_count_in_group_plus_3 + 1\n            val close_brace_count_in_group_plus_4\
    \ = close_brace_count_in_group_plus_3 + 1\n            val open_brace_count_in_group_plus_5\
    \ = open_brace_count_in_group_plus_4 + 1\n            val close_brace_count_in_group_plus_5\
    \ = close_brace_count_in_group_plus_4 + 1\n            val open_brace_count_in_group_plus_6\
    \ = open_brace_count_in_group_plus_5 + 1\n            val close_brace_count_in_group_plus_6\
    \ = close_brace_count_in_group_plus_5 + 1\n            val open_brace_count_in_group_plus_7\
    \ = open_brace_count_in_group_plus_6 + 1\n            val close_brace_count_in_group_plus_7\
    \ = close_brace_count_in_group_plus_6 + 1\n            val open_brace_count_in_group_plus_8\
    \ = open_brace_count_in_group_plus_7 + 1\n            val close_brace_count_in_group_plus_8\
    \ = close_brace_count_in_group_plus_7 + 1\n            val open_bra", "      \
    \  val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_flat\
    \ = paren_groups.flatten\n        val paren_groups_flat2 = paren_groups_flat.filterNot(_\
    \ == \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_ == \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ == \")\")\n\
    \        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"(\")\n \
    \       val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \")\")\n  \
    \      val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"(\")\n   \
    \     val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \")\")\n   \
    \     val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \"(\")\n  \
    \      val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \")\")\n \
    \       val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \")\")\n\
    \        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \")\")\n\
    \        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \")\")\n\
    \        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \")\")\n\
    \        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \")\")\n\
    \        val paren_groups_flat25 = paren_groups_flat24.filter", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x => x)\n     \
    \   val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trim",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed\
    \ = paren_groups_with_spaces.map(x => x.trim())\n        val paren_groups_with_spaces_trimmed_flat\
    \ = paren_groups_with_spaces_trimmed.flatMap(x => x.split(\" \"))\n        val\
    \ paren_groups_with_spaces_trimmed_flat_trimmed = paren_groups_with_spaces_trimmed_flat.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed.sorted\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted.filter(x => x.trim().nonEmpty)\n\
    \        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed.filter(x => x.trim().nonEmpty)\n\
    \        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.filter(x\
    \ => x.trim().nonEmpty)\n        val paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_sorted_trimmed_trimmed_trimmed_trimmed_trimmed_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_close_size = mutable.ListBuffer[Int]()\n        val paren_open_sizes\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_sizes = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_sum = mutable.ListBuffer[Int]()\n        val paren_open_size_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_size_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_sizes_sum = mutable.ListBuffer[Int]()\n        val paren_close_sizes_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_sum_sum = mutable.ListBuffer[Int]()\n        val paren_open_sizes_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_sizes_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_sum_sum_sum = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_size_sum_sum_sum = mutable.ListBuffer[Int]()\n        val paren_close_size_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_sizes_sum_sum_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_close_sizes_sum_sum_sum = mutable.ListBuffer[Int]()\n     \
    \   val paren_group_size_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n       \
    \ val paren_open_size_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n        val\
    \ paren_close_size_sum_sum_sum_sum = mutable.ListBuffer[Int]()\n        val paren_open_sizes_sum_sum_sum_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_sizes_sum_sum_", "    \
    \    val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open = mutable.ListBuffer[Int]()\n        val paren_group_close\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_count_size = mutable.ListBuffer[Int]()\n        val paren_group_close_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_size = mutable.ListBuffer[Int]()\n      \
    \  val paren_group_open_count_count_size = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_close_count_count_size = mutable.ListBuffer[Int]()\n       \
    \ val paren_group_open_count_count_count_size = mutable.ListBuffer[Int]()\n  \
    \      val paren_group_close_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_count_count_count_count_count_count_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_count_count_count_count_count_count_", "       \
    \ val paren_groups = mutable.ListBuffer[String]()\n        var paren_open_braces\
    \ = 0\n        var paren_closed_braces = 0\n        var paren_open_brace_count\
    \ = 0\n        var paren_closed_brace_count = 0\n        var paren_open_brace_count_in_group\
    \ = 0\n        var paren_closed_brace_count_in_group = 0\n        var paren_open_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_close = 0\n  \
    \      var paren_open_brace_count_in_group_after_last_open = 0\n        var paren_closed_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_close = 0\n    \
    \    var paren_closed_brace_count_in_group_after_last_close = 0\n        var paren_open_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_open = 0\n   \
    \     var paren_open_brace_count_in_group_after_last_close = 0\n        var paren_closed_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_open = 0\n     \
    \   var paren_closed_brace_count_in_group_after_last_open = 0\n        var paren_open_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_close = 0\n  \
    \      var paren_open_brace_count_in_group_after_last_open = 0\n        var paren_closed_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_close = 0\n    \
    \    var paren_closed_brace_count_in_group_after_last_close = 0\n        var paren_open_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_open = 0\n   \
    \     var paren_open_brace_count_in_group_after_last_close = 0\n        var paren_closed_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_open = 0\n     \
    \   var paren_closed_brace_count_in_group_after_last_open = 0\n        var paren_open_brace_count_in_group_after_last_close\
    \ = 0\n        var paren_closed_brace_count_in_group_after_last_close = 0\n  \
    \      var paren_open_brace_count_in_group_after_last_open = 0\n        var paren_closed_brace_count_in_group_after_last_open\
    \ = 0\n        var paren_open_brace_count_in_group_after_last_close = 0\n    \
    \    var paren_close", "        val paren_groups = paren_string.split(\"\\\\(\"\
    )\n        val paren_groups_count = paren_groups.length\n        val paren_groups_list_with_parens\
    \ = mutable.ListBuffer[String]()\n        var paren_groups_list_with_parens_index\
    \ = 0\n        var paren_groups_list_with_parens_length = 0\n        for(paren_groups_index\
    \ <- 0 until paren_groups_count) {\n            val paren_group_string = paren_groups(paren_groups_index)\n\
    \            val paren_group_length = paren_group_string.length\n            paren_groups_list_with_parens_length\
    \ += 1\n            paren_groups_list_with_parens += paren_group_string\n    \
    \        if(paren_groups_index == paren_groups_count - 1) {\n                paren_groups_list_with_parens_index\
    \ += 1\n                paren_groups_list_with_parens += \"(\"\n            }\n\
    \            else if(paren_groups_index != 0) {\n                paren_groups_list_with_parens_index\
    \ += 1\n                paren_groups_list_with_parens += \"(\"\n            }\n\
    \        }\n        val paren_groups_list_with_parens_length = paren_groups_list_with_parens.length\n\
    \        val paren_groups_list_with_parens_index = paren_groups_list_with_parens.length\
    \ - 1\n        val paren_groups_list_with_parens_last_index = paren_groups_list_with_parens_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string = paren_groups_list_with_parens(paren_groups_list_with_parens_last_index)\n\
    \        val paren_groups_list_with_parens_last_string_length = paren_groups_list_with_parens_last_string.length\n\
    \        val paren_groups_list_with_parens_last_string_length = paren_groups_list_with_parens_last_string_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string_last_index = paren_groups_list_with_parens_last_string_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string_last_string = paren_groups_list_with_parens_last_string(paren_groups_list_with_parens_last_string_last_index)\n\
    \        val paren_groups_list_with_parens_last_string_last_string_length = paren_groups_list_with_parens_last_string_last_string.length\n\
    \        val paren_groups_list_with_parens_last_string_last_string_length = paren_groups_list_with_parens_last_string_last_string_length\
    \ - 1\n        val paren_groups_list_with_parens_last_string_last_string_last_index\
    \ = paren_groups_list_with_parens_last_string_last_string_length - 1\n       \
    \ val paren_groups_list_with_parens_last_string_last_string_last_string = paren_groups_list_with_parens_last_string_last_string(paren_groups_list_with_paren",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_flat\
    \ = paren_groups.flatten\n        val paren_groups_flat2 = paren_groups_flat.filterNot(x\
    \ => x.contains(\"(\"))\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(x\
    \ => x.contains(\")\"))\n        paren_groups_flat3.toList", "        // Your\
    \ code goes here\n        val paren_groups = mutable.ListBuffer[String]()\n  \
    \      val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached2 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached2 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached3 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached3 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached4 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached4 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached5 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached5 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached6 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached6 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached7 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached7 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached8 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached8 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached9 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached9 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached10 = mutable.ListBuffer[Boolean]()\n\
    \        val ", "        // Your code goes here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val closed_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ closed_brace_count = 0\n        val open_brace_open = false\n        val closed_brace_open\
    \ = false\n        val open_brace_closed = false\n        val closed_brace_closed\
    \ = false\n        val open_brace_opened = false\n        val closed_brace_opened\
    \ = false\n        val open_brace_closed = false\n        val closed_brace_closed\
    \ = false\n        val open_brace_opened1 = false\n        val closed_brace_opened1\
    \ = false\n        val open_brace_closed1 = false\n        val closed_brace_closed1\
    \ = false\n        val open_brace_opened2 = false\n        val closed_brace_opened2\
    \ = false\n        val open_brace_closed2 = false\n        val closed_brace_closed2\
    \ = false\n        val open_brace_opened3 = false\n        val closed_brace_opened3\
    \ = false\n        val open_brace_closed3 = false\n        val closed_brace_closed3\
    \ = false\n        val open_brace_opened4 = false\n        val closed_brace_opened4\
    \ = false\n        val open_brace_closed4 = false\n        val closed_brace_closed4\
    \ = false\n        val open_brace_opened5 = false\n        val closed_brace_opened5\
    \ = false\n        val open_brace_closed5 = false\n        val closed_brace_closed5\
    \ = false\n        val open_brace_opened6 = false\n        val closed_brace_opened6\
    \ = false\n        val open_brace_closed6 = false\n        val closed_brace_closed6\
    \ = false\n        val open_brace_opened7 = false\n        val closed_brace_opened7\
    \ = false\n        val open_brace_closed7 = false\n        val closed_brace_closed7\
    \ = false\n        val open_brace_opened8 = false\n        val closed_brace_opened8\
    \ = false\n        val open_brace_closed8 = false\n        val closed_brace_closed8\
    \ = false\n        val open_brace_opened9 = false\n        val closed_brace_opened9\
    \ = false\n        val open_brace_closed9 = false\n        val closed_brace_closed9\
    \ = false\n        val open_brace_opened", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed\
    \ = paren_groups_with_spaces.map(x => x.trim())\n        val paren_groups_with_spaces_trimmed_without_spaces\
    \ = paren_groups_with_spaces_trimmed.map(x => x.replace(\"  \", \" \"))\n    \
    \    val paren_groups_with_spaces_trimmed_without_spaces_without_spaces = paren_groups_with_spaces_trimmed_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_trimmed_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", ", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces : Int = 0\n        var close_braces : Int = 0\n     \
    \   var open_parens : Int = 0\n        var close_parens : Int = 0\n        var\
    \ paren_count : Int = 0\n        var paren_string : String = \"\"\n        for(i\
    \ <- 0 until paren_string.length){\n            paren_string = paren_string.substring(0,i)\n\
    \            if(paren_string.charAt(i) == '('){\n                paren_count +=\
    \ 1\n                open_parens += 1\n            }\n            else if(paren_string.charAt(i)\
    \ == ')'){\n                paren_count -= 1\n                close_parens +=\
    \ 1\n            }\n            else if(paren_string.charAt(i) == ')' && paren_count\
    \ < 0){\n                paren_count -= 1\n                close_parens += 1\n\
    \            }\n            else if(paren_string.charAt(i) == '(' && paren_count\
    \ > 0){\n                paren_count += 1\n                open_braces += 1\n\
    \            }\n            else if(paren_string.charAt(i) == ')' && paren_count\
    \ == 0){\n                open_braces -= 1\n                close_braces += 1\n\
    \            }\n            else if(paren_string.charAt(i) == ')' && open_braces\
    \ == 0 && close_braces == 0 && open_parens == 0 && close_parens == 0){\n     \
    \           paren_groups += paren_string.substring(0,i)\n            }\n     \
    \   }\n        return paren_groups.toList", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var open_parens\
    \ = 0\n        var close_parens = 0\n        var in_group = 0\n        var in_group_parens\
    \ = 0\n        var in_group_parens_count = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var in_group_parens_count_max\
    \ = 0\n        var in_group_parens_count_max_index = 0\n        var in_group_parens_count_min\
    \ = 0\n        var in_group_parens_count_min_index = 0\n        var ", "     \
    \   val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_closed_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_count = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_count_max = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_min = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]()\n        val paren_closed_brace_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_count_max = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_brace_count_min = mutable.ListBuffer[Int]", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open = mutable.ListBuffer[Int]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index = mutable.ListBuffer[Int]()\n        val paren_group_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index2 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index2 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index3 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index3\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index4 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index4 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index5 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index5\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index6 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index6 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index7 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index7\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index8 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index8 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index9 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index9\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index10 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index10 = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index11 = mutable.ListBuffer[Int]()\n        val paren_group_closed_index11\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_index12 = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index12 = mutable.ListBuffer[Int]()", "      \
    \  val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_size_list = paren_groups_size.map(x\
    \ => List(x))\n        val paren_groups_size_list2 = paren_groups_size.map(x =>\
    \ List(x))\n        val paren_groups_size_list3 = paren_groups_size.map(x => List(x))\n\
    \        val paren_groups_size_list4 = paren_groups_size.map(x => List(x))\n \
    \       val paren_groups_size_list5 = paren_groups_size.map(x => List(x))\n  \
    \      val paren_groups_size_list6 = paren_groups_size.map(x => List(x))\n   \
    \     val paren_groups_size_list7 = paren_groups_size.map(x => List(x))\n    \
    \    val paren_groups_size_list8 = paren_groups_size.map(x => List(x))\n     \
    \   val paren_groups_size_list9 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list10 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list11 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list12 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list13 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list14 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list15 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list16 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list17 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list18 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list19 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list20 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list21 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list22 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list23 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list24 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list25 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size_list26 = paren_groups_size.map(x => List(x))\n      \
    \  val paren_groups_size", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_regex = \"\"\"[(]([^()]*[)]*)\"\"\".r\n        paren_string.split(\"\
    [()]\").foreach(x => {\n            val m = paren_group_regex.findFirstMatchIn(x)\n\
    \            if (m != null) {\n                paren_groups += m.group(1)\n  \
    \          }\n        })\n        paren_groups.toList", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val spaces =\
    \ mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_opens = mutable.ListBuffer[String]()\n\
    \        val paren_closes = mutable.ListBuffer[String]()\n        val paren_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_opens_count = mutable.ListBuffer[String]()\n\
    \        val paren_closes_count = mutable.ListBuffer[String]()\n        val paren_spaces_count\
    \ = mutable.ListBuffer[String]()\n        val paren_opens_count_max = mutable.ListBuffer[String]()\n\
    \        val paren_closes_count_max = mutable.ListBuffer[String]()\n        val\
    \ paren_spaces_count_max = mutable.ListBuffer[String]()\n        val paren_opens_count_min\
    \ = mutable.ListBuffer[String]()\n        val paren_closes_count_min = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_count_min = mutable.ListBuffer[String]()\n        val\
    \ paren_opens_count_max = mutable.ListBuffer[String]()\n        val paren_closes_count_max\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_count_max = mutable.ListBuffer[String]()\n\
    \        val paren_opens_count_min = mutable.ListBuffer[String]()\n        val\
    \ paren_closes_count_min = mutable.ListBuffer[String]()\n        val paren_spaces_count_min\
    \ = mutable.ListBuffer[String]()\n        val paren_opens_count_max = mutable.ListBuffer[String]()\n\
    \        val paren_closes_count_max = mutable.ListBuffer[String]()\n        val\
    \ paren_spaces_count_max = mutable.ListBuffer[String]()\n        val paren_opens_count_min\
    \ = mutable.ListBuffer[String]()\n        val paren_closes_count_min = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_count_min = mutable.ListBuffer[String]()\n        val\
    \ paren_opens_count_max = mutable.List", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace = mutable.ListBuffer[Int]()\n        val paren_open_brace_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_size = mutable.ListBuffer[Int]()\n\
    \        val paren_open_brace_group = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_group_size = mutable.ListBuffer[Int]()\n     \
    \   val paren_open_brace_group_count = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_group_count = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_group_count_count_count_count_count_count_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_brace_group_", "     \
    \   val paren_groups = mutable.ListBuffer[String]()\n        val paren_open =\
    \ mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_closed_in_group = mutable.ListBuffer[String]()\n        val\
    \ paren_open_in_group = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_without_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_in_group_with_paren_without_paren_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_spaces\
    \ = mutable.ListBuffer[String]()\n        val paren_opens = mutable.ListBuffer[String]()\n\
    \        val paren_closes = mutable.ListBuffer[String]()\n        val paren_spaces_open\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_close = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens = mutable.ListBuffer[String]()\n        val paren_spaces_closes\
    \ = mutable.ListBuffer[String]()\n        val paren_spaces_opens_close = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes = mutable.ListBuffer[String]()\n      \
    \  val paren_spaces_opens_closes_open = mutable.ListBuffer[String]()\n       \
    \ val paren_spaces_opens_closes_close = mutable.ListBuffer[String]()\n       \
    \ val paren_spaces_opens_closes_closes = mutable.ListBuffer[String]()\n      \
    \  val paren_spaces_opens_closes_closes_open = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_close = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_closes = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_closes_open = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_closes_close = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_closes_closes = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_closes_closes_open = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_closes_closes_close = mutable.ListBuffer[String]()\n\
    \        val paren_spaces_opens_closes_closes_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\") \", \" ))\"\
    )\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_stack.push(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_group: List[String] = paren_string.split(\"\\\\(\")\n \
    \           paren_groups += paren_group\n            paren_group.foreach(paren_string\
    \ => {\n                val paren_open = paren_string.indexOf(\"(\")\n       \
    \         val paren_close = paren_string.indexOf(\")\")\n                if(paren_open\
    \ != -1 && paren_close != -1) {\n                    paren_stack.push(paren_string.substring(0,\
    \ paren_open))\n                    paren_stack.push(paren_string.substring(paren_open\
    \ + 1, paren_close))\n                }\n            })\n        }\n        paren_groups.toList",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[Int]()\n        val closed_braces = mutable.ListBuffer[Int]()\n\
    \        val open_brace_count = 0\n        val closed_brace_count = 0\n      \
    \  val open_brace_open = false\n        val closed_brace_open = false\n      \
    \  val open_brace_closed = false\n        val closed_brace_closed = false\n  \
    \      val open_brace_opened = false\n        val closed_brace_opened = false\n\
    \        val open_brace_closed = false\n        val closed_brace_closed = false\n\
    \        val open_brace_opened = 0\n        val closed_brace_opened = 0\n    \
    \    val open_brace_closed = 0\n        val closed_brace_closed = 0\n        val\
    \ open_brace_count = 0\n        val closed_brace_count = 0\n        val open_brace_open\
    \ = false\n        val closed_brace_open = false\n        val open_brace_closed\
    \ = false\n        val closed_brace_closed = false\n        val open_brace_opened\
    \ = false\n        val closed_brace_opened = false\n        val open_brace_closed\
    \ = false\n        val closed_brace_closed = false\n        val open_brace_count\
    \ = 0\n        val closed_brace_count = 0\n        val open_brace_open = false\n\
    \        val closed_brace_open = false\n        val open_brace_closed = false\n\
    \        val closed_brace_closed = false\n        val open_brace_opened = 0\n\
    \        val closed_brace_opened = 0\n        val open_brace_closed = 0\n    \
    \    val closed_brace_closed = 0\n        val open_brace_count = 0\n        val\
    \ closed_brace_count = 0\n        val open_brace_open = false\n        val closed_brace_open\
    \ = false\n        val open_brace_closed = false\n        val closed_brace_closed\
    \ = false\n        val open_brace_opened = 0\n        val closed_brace_opened\
    \ = 0\n        val open_brace_closed = 0\n        val closed_brace_closed = 0\n\
    \        val open_brace_count = 0\n        val closed_brace_count = 0\n      \
    \  val open_brace_open = false\n        val closed_brace_open = false\n      \
    \  val open_brace_closed = false\n        val closed_brace_closed = false\n  \
    \      val open_brace_opened = 0\n", "        // Your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val spaces =\
    \ mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace = mutable.ListBuffer[String]()\n        val paren_space_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space = mutable.ListBuffer[String]()\n        val\
    \ paren_space_space_brace = mutable.ListBuffer[String]()\n        val paren_open_brace_space_space\
    \ = mutable.ListBuffer[String]()\n        val paren_close_brace_space_space =\
    \ mutable.ListBuffer[String]()\n        val paren_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_space_brace = mut", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_close\
    \ = mutable.ListBuffer[String]()\n        val paren_open_count = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count = mutable.ListBuffer[Int]()\n        val paren_open_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_min = mutable.ListBuffer[Int]()\n        val paren_close_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_min = mutable.ListBuffer[Int]()\n        val paren_open_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_min = mutable.ListBuffer[Int]()\n        val paren_close_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_max = mutable.ListBuffer[Int]()\n        val paren_open_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_max = mutable.ListBuffer[Int]()\n        val paren_close_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_min = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_min = mutable.ListBuffer[Int]()\n        val paren_open_count_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_count_min = mutable.ListBuffer[Int]()\n        val paren_close_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_count_max = mutable.ListBuffer[Int]()\n\
    \        val paren_close_count_max = mutable.ListBuffer[Int]()\n        val paren_open_count_min\
    \ = mutable.ListBuffer[Int]()\n        val paren_close_", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed\
    \ = paren_groups_with_spaces.map(x => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed.sortBy(x => x)\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_trimmed_sorted.map(x => x.replace(\")\", \" ) \"\
    ))\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed =\
    \ paren_groups_with_spaces_trimmed_sorted_with_spaces.map(x => x.trim())\n   \
    \     val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted =\
    \ paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x => x)\n\
    \        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_trimmed_sorted_", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_balance = mutable.ListBuffer[Int]()\n        val paren_closed_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_balance_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_balance_depth = mutable.ListBuffer[Int]()\n        val paren_closed_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_balance_balance = mutable.ListBuffer[Int]()\n      \
    \  val paren_open_balance_balance_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_balance_balance_size = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_balance_balance_balance_balance\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_balance_balance_balance_balance\
    \ = mutable.ListBuffer[Int", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_even = paren_groups_size\
    \ % 2 == 0\n        val paren_groups_size_odd = paren_groups_size % 2 != 0\n \
    \       val paren_groups_size_even_remainder = paren_groups_size_even && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder = paren_groups_size_odd && paren_groups_size_remainder\n\
    \        val paren_groups_size_even_remainder_remainder = paren_groups_size_even_remainder\
    \ && paren_groups_size_remainder\n        val paren_groups_size_odd_remainder_remainder\
    \ = paren_groups_size_odd_remainder && paren_groups_size_remainder\n        val\
    \ paren_groups_size_even_remainder_odd = paren_groups_size_even_remainder && paren_groups_size_odd\n\
    \        val paren_groups_size_odd_remainder_even = paren_groups_size_odd_remainder\
    \ && paren_groups_size_even\n        val paren_groups_size_even_remainder_odd_remainder\
    \ = paren_groups_size_even_remainder_remainder && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder_even_remainder = paren_groups_size_odd_remainder_remainder\
    \ && paren_groups_size_remainder\n        val paren_groups_size_even_remainder_odd_remainder_remainder\
    \ = paren_groups_size_even_remainder_odd_remainder && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder_even_remainder_odd = paren_groups_size_odd_remainder_even_remainder\
    \ && paren_groups_size_odd\n        val paren_groups_size_even_remainder_odd_remainder_even\
    \ = paren_groups_size_even_remainder_odd_remainder && paren_groups_size_even\n\
    \        val paren_groups_size_odd_remainder_even_remainder_odd_remainder = paren_groups_size_odd_remainder_even_remainder_odd_remainder\
    \ && paren_groups_size_remainder\n        val paren_groups_size_even_remainder_odd_remainder_even_remainder_odd\
    \ = paren_groups_size_even_remainder_odd_remainder_even_remainder_odd && paren_groups_size_remainder\n\
    \        val paren_groups_size_odd_remainder_even_remainder_odd_", "        val\
    \ paren_groups = mutable.ListBuffer[String]()\n        val open_braces = mutable.ListBuffer[String]()\n\
    \        val close_braces = mutable.ListBuffer[String]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val paren_open = false\n   \
    \     val paren_close = false\n        val paren_group = \"\"\n        val paren_group_open\
    \ = false\n        val paren_group_close = false\n        val paren_group_open_brace\
    \ = false\n        val paren_group_close_brace = false\n        val paren_group_open_brace_count\
    \ = 0\n        val paren_group_close_brace_count = 0\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n        val paren_group_close_brace_close = false\n        val paren_group_open_brace_open\
    \ = false\n        val paren_group_open_brace_close = false\n        val paren_group_close_brace_open\
    \ = false\n", "        val paren_groups = paren_string.split(\"\\\\(\")\n    \
    \    val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\" \",\
    \ \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\)\", \") \"))\n        val ", "        // Write your code\
    \ here\n        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_space\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace = mutable.ListBuffer[String]()\n        val paren_space_brace\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brace_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space = mutable.ListBuffer[String]()\n        val\
    \ paren_space_space_brace = mutable.ListBuffer[String]()\n        val paren_open_brace_space_space\
    \ = mutable.ListBuffer[String]()\n        val paren_close_brace_space_space =\
    \ mutable.ListBuffer[String]()\n        val paren_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_brace = mutable.ListBuffer[String]()\n\
    \        val paren_open_brace_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_close_brace_space_space_space_space_space_space_space = mutable.ListBuffer[String]()\n\
    \        val paren_space_space_space_space_space_space_space_space_brace", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brackets\
    \ = 0\n        var closed_brackets = 0\n        var open_brackets_count = 0\n\
    \        var closed_brackets_count = 0\n        var open_braces_count = 0\n  \
    \      var closed_braces_count = 0\n        var open_braces_count_temp = 0\n \
    \       var closed_braces_count_temp = 0\n        var open_brackets_count_temp\
    \ = 0\n        var closed_brackets_count_temp = 0\n        var open_braces_count_temp2\
    \ = 0\n        var closed_braces_count_temp2 = 0\n        var open_brackets_count_temp2\
    \ = 0\n        var closed_brackets_count_temp2 = 0\n        var open_braces_count_temp3\
    \ = 0\n        var closed_braces_count_temp3 = 0\n        var open_brackets_count_temp3\
    \ = 0\n        var closed_brackets_count_temp3 = 0\n        var open_braces_count_temp4\
    \ = 0\n        var closed_braces_count_temp4 = 0\n        var open_brackets_count_temp4\
    \ = 0\n        var closed_brackets_count_temp4 = 0\n        var open_braces_count_temp5\
    \ = 0\n        var closed_braces_count_temp5 = 0\n        var open_brackets_count_temp5\
    \ = 0\n        var closed_brackets_count_temp5 = 0\n        var open_braces_count_temp6\
    \ = 0\n        var closed_braces_count_temp6 = 0\n        var open_brackets_count_temp6\
    \ = 0\n        var closed_brackets_count_temp6 = 0\n        var open_braces_count_temp7\
    \ = 0\n        var closed_braces_count_temp7 = 0\n        var open_brackets_count_temp7\
    \ = 0\n        var closed_brackets_count_temp7 = 0\n        var open_braces_count_temp8\
    \ = 0\n        var closed_braces_count_temp8 = 0\n        var open_brackets_count_temp8\
    \ = 0\n        var closed_brackets_count_temp8 = 0\n        var open_braces_count_temp9\
    \ = 0\n        var closed_braces_count_temp9 = 0\n        var open_brackets_count_temp9\
    \ = 0\n        var closed_brackets_count_temp9 = 0\n        var open_braces_count_temp10\
    \ = 0\n        var closed_braces_count_temp10 = 0\n        var open_brackets_count_temp10\
    \ = 0\n        var closed_brackets_count_temp10 = 0\n        var open_braces_count_temp11\
    \ = 0\n        var closed_braces_count_temp11 = 0\n        var open_brackets_count_temp11\
    \ = 0\n        var closed_brackets_count_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y) == 0)\n        val paren_groups_with_spaces_sorted_without_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\"))\n       \
    \ val paren_groups_with_spaces_sorted_without_spaces_without_spaces = paren_groups_with_spaces_sorted_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_without_spaces_without_spaces_", "       \
    \ val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\"))\n        paren_group_strings",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_braces = mutable.ListBuffer[String]()\n        val paren_closed_braces\
    \ = mutable.ListBuffer[String]()\n        val paren_open_brackets = mutable.ListBuffer[String]()\n\
    \        val paren_closed_brackets = mutable.ListBuffer[String]()\n        val\
    \ paren_open_squares = mutable.ListBuffer[String]()\n        val paren_closed_squares\
    \ = mutable.ListBuffer[String]()\n        val paren_open_curlys = mutable.ListBuffer[String]()\n\
    \        val paren_closed_curlys = mutable.ListBuffer[String]()\n        val paren_open_angles\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_angles = mutable.ListBuffer[String]()\n\
    \        val paren_open_commas = mutable.ListBuffer[String]()\n        val paren_closed_commas\
    \ = mutable.ListBuffer[String]()\n        val paren_open_semis = mutable.ListBuffer[String]()\n\
    \        val paren_closed_semis = mutable.ListBuffer[String]()\n        val paren_open_colons\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_colons = mutable.ListBuffer[String]()\n\
    \        val paren_open_semicolons = mutable.ListBuffer[String]()\n        val\
    \ paren_closed_semicolons = mutable.ListBuffer[String]()\n        val paren_open_equals\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_equals = mutable.ListBuffer[String]()\n\
    \        val paren_open_equals_braces = mutable.ListBuffer[String]()\n       \
    \ val paren_closed_equals_braces = mutable.ListBuffer[String]()\n        val paren_open_equals_brackets\
    \ = mutable.ListBuffer[String]()\n        val paren_closed_equals_brackets = mutable.ListBuffer[String]()\n\
    \        val paren_open_equals_squares = mutable.ListBuffer[String]()\n      \
    \  val paren_closed_equals_squares = mutable.ListBuffer[String]()\n        val\
    \ paren_open_equals_curlys = mutable.ListBuffer[String]", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\" \", \"\"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \ \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\").trim())\n        val paren_group_strings_sorted\
    \ = paren_group_strings.sortWith((x, y) => x.length < y.length)\n        val paren_group_strings_sorted_with_open_braces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"{\").replace(\")\"\
    , \"}\"))\n        val paren_group_strings_sorted_with_close_braces = paren_group_strings_sorted.map(x\
    \ => x.replace(\"{\", \"(\").replace(\"}\", \")\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces.map(x => x.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\"))\n        val paren_group_strings_sorted_with_close_braces_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces.map(x => x.replace(\"[\", \"\
    {\").replace(\"]\", \"}\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets.map(x => x.replace(\"\
    [\", \"{\").replace(\"]\", \"}\"))\n        val paren_group_strings_sorted_with_close_braces_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces_with_brackets.map(x => x.replace(\"\
    {\", \"[\").replace(\"}\", \"]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"{\").replace(\"]\", \"}\"))\n        val paren_group_strings_sorted_with_close_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_close_braces_with_brackets_with_brackets.map(x\
    \ => x.replace(\"{\", \"[\").replace(\"}\", \"]\"))\n        val paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_group_strings_sorted_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"", "        val paren_groups = paren_string.split(\"\\\\(\")\n\
    \        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_size\
    \ = paren_groups.size\n        val paren_groups_list_size_2 = paren_groups_list_size\
    \ + 1\n        val paren_groups_list_size_3 = paren_groups_list_size_2 + 1\n \
    \       val paren_groups_list_size_4 = paren_groups_list_size_3 + 1\n        val\
    \ paren_groups_list_size_5 = paren_groups_list_size_4 + 1\n        val paren_groups_list_size_6\
    \ = paren_groups_list_size_5 + 1\n        val paren_groups_list_size_7 = paren_groups_list_size_6\
    \ + 1\n        val paren_groups_list_size_8 = paren_groups_list_size_7 + 1\n \
    \       val paren_groups_list_size_9 = paren_groups_list_size_8 + 1\n        val\
    \ paren_groups_list_size_10 = paren_groups_list_size_9 + 1\n        val paren_groups_list_size_11\
    \ = paren_groups_list_size_10 + 1\n        val paren_groups_list_size_12 = paren_groups_list_size_11\
    \ + 1\n        val paren_groups_list_size_13 = paren_groups_list_size_12 + 1\n\
    \        val paren_groups_list_size_14 = paren_groups_list_size_13 + 1\n     \
    \   val paren_groups_list_size_15 = paren_groups_list_size_14 + 1\n        val\
    \ paren_groups_list_size_16 = paren_groups_list_size_15 + 1\n        val paren_groups_list_size_17\
    \ = paren_groups_list_size_16 + 1\n        val paren_groups_list_size_18 = paren_groups_list_size_17\
    \ + 1\n        val paren_groups_list_size_19 = paren_groups_list_size_18 + 1\n\
    \        val paren_groups_list_size_20 = paren_groups_list_size_19 + 1\n     \
    \   val paren_groups_list_size_21 = paren_groups_list_size_20 + 1\n        val\
    \ paren_groups_list_size_22 = paren_groups_list_size_21 + 1\n        val paren_groups_list_size_23\
    \ = paren_groups_list_size_22 + 1\n        val paren_groups_list_size_24 = paren_groups_list_size_23\
    \ + 1\n        val paren_groups_list_size_25 = paren_groups_list_size_24 + 1\n\
    \        val paren_groups_list_size_26 = paren_groups_list_size_25 + 1\n     \
    \   val paren_groups_list_size_27 = paren_groups_list_size_26 + 1\n        val\
    \ paren_groups_list_size_28 = paren_groups_list_size_27 + 1\n        val paren_groups_list_size_29\
    \ = paren_groups_list_size_28 + 1\n        val paren_groups_list_size_30 = ",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ) \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ))\")\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit = mutable.ListBuffer[Int]()\n      \
    \  val paren_closed_depth_limit_limit = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_limit_limit_limit = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_depth_limit_limit_limit = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n     \
    \   val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_limit_limit_limit_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_limit_limit_limit = mutable.ListBuffer", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_opened\
    \ = mutable.ListBuffer[String]()\n        val paren_opened2 = mutable.ListBuffer[String]()\n\
    \        val paren_opened3 = mutable.ListBuffer[String]()\n        val paren_opened4\
    \ = mutable.ListBuffer[String]()\n        val paren_opened5 = mutable.ListBuffer[String]()\n\
    \        val paren_opened6 = mutable.ListBuffer[String]()\n        val paren_opened7\
    \ = mutable.ListBuffer[String]()\n        val paren_opened8 = mutable.ListBuffer[String]()\n\
    \        val paren_opened9 = mutable.ListBuffer[String]()\n        val paren_opened10\
    \ = mutable.ListBuffer[String]()\n        val paren_opened11 = mutable.ListBuffer[String]()\n\
    \        val paren_opened12 = mutable.ListBuffer[String]()\n        val paren_opened13\
    \ = mutable.ListBuffer[String]()\n        val paren_opened14 = mutable.ListBuffer[String]()\n\
    \        val paren_opened15 = mutable.ListBuffer[String]()\n        val paren_opened16\
    \ = mutable.ListBuffer[String]()\n        val paren_opened17 = mutable.ListBuffer[String]()\n\
    \        val paren_opened18 = mutable.ListBuffer[String]()\n        val paren_opened19\
    \ = mutable.ListBuffer[String]()\n        val paren_opened20 = mutable.ListBuffer[String]()\n\
    \        val paren_opened21 = mutable.ListBuffer[String]()\n        val paren_opened22\
    \ = mutable.ListBuffer[String]()\n        val paren_opened23 = mutable.ListBuffer[String]()\n\
    \        val paren_opened24 = mutable.ListBuffer[String]()\n        val paren_opened25\
    \ = mutable.ListBuffer[String]()\n        val paren_opened26 = mutable.ListBuffer[String]()\n\
    \        val paren_opened27 = mutable.ListBuffer[String]()\n        val paren_opened28\
    \ = mutable.ListBuffer[String]()\n        val paren_opened29 = mutable.ListBuffer[String]()\n",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_trimmed = paren_groups_with_spaces_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x => x)\n     \
    \   val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    (\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\"{\", \" { \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\"}\", \" } \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.replace(\"[\", \" [ \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortWith(_.length > _.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \"{\").replace(\"\
    )\", \"}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"{\"\
    , \"{\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"\\n}\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"\\n}\", \"\\n\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces_without_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_braces_without_spaces_without_spaces_without_braces.map(x\
    \ => x.replace(\"\\n\", \"\\n\"))\n        val ", "        val paren_groups =\
    \ paren_string.split(\"\\\\(\")\n        val paren_group_strings = paren_groups.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed = paren_group_strings_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_strings = paren_group_strings_sorted_reversed.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings.sortBy(x => x.length)\n      \
    \  val paren_group_strings_sorted_reversed_strings_sorted_strings = paren_group_strings_sorted_reversed_strings_sorted.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings.sortBy(x => x.length)\n\
    \        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted.map(x =>\
    \ x.replace(\"(\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings_sorted\
    \ = paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_sorted_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed_strings_sorted_strings_sorted_strings_sorted_strings_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x + \" \").filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \" \").filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \").filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_", "        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \" \"))\n       \
    \ val paren_groups_with_open_braces_without_spaces_without_commas = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces.map(x\
    \ => x.replace(\",\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_commas_without_spaces_without_commas_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val space_count = 0\n      \
    \  val paren_group = \"\"\n        val open_brace_char = \"\"\n        val close_brace_char\
    \ = \"\"\n        val space_char = \"\"\n        val paren_group_char = \"\"\n\
    \        val open_brace_char_count = 0\n        val close_brace_char_count = 0\n\
    \        val space_char_count = 0\n        val paren_group_char_count = 0\n  \
    \      val open_brace_char_count_in_paren_group = 0\n        val close_brace_char_count_in_paren_group\
    \ = 0\n        val space_char_count_in_paren_group = 0\n        val paren_group_char_count_in_paren_group\
    \ = 0\n        val open_brace_char_count_in_paren_group_count = 0\n        val\
    \ close_brace_char_count_in_paren_group_count = 0\n        val space_char_count_in_paren_group_count\
    \ = 0\n        val paren_group_char_count_in_paren_group_count = 0\n        val\
    \ open_brace_char_count_in_paren_group_count_in_paren_group = 0\n        val close_brace_char_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val space_char_count_in_paren_group_count_in_paren_group = 0\n\
    \        val paren_group_char_count_in_paren_group_count_in_paren_group = 0\n\
    \        val open_brace_char_count_in_paren_group_count_in_paren_group_count =\
    \ 0\n        val close_brace_char_count_in_paren_group_count_in_paren_group_count\
    \ = 0\n        val space_char_count_in_paren_group_count_in_paren_group_count\
    \ = 0\n        val paren_group_char_count_in_paren_group_count_in_paren_group_count\
    \ = 0\n        val open_brace_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val close_brace_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val space_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val paren_group_char_count_in_paren_group_count_in_paren_group_count_in_paren_group\
    \ = 0\n        val open_brace_char_count_in_paren_group_count_in_paren_group_count_in_paren_group_",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_count\
    \ = paren_groups.length\n        val paren_groups_count_with_paren = paren_groups_count\
    \ + 1\n        val paren_groups_count_without_paren = paren_groups_count - 1\n\
    \        val paren_groups_count_with_paren_and_without_paren = paren_groups_count_with_paren\
    \ - paren_groups_count_without_paren\n        val paren_groups_count_with_paren_and_without_paren_plus_one\
    \ = paren_groups_count_with_paren_and_without_paren + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_two\
    \ = paren_groups_count_with_paren_and_without_paren_plus_one + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_three = paren_groups_count_with_paren_and_without_paren_plus_two\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_four =\
    \ paren_groups_count_with_paren_and_without_paren_plus_three + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_five = paren_groups_count_with_paren_and_without_paren_plus_four\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_six =\
    \ paren_groups_count_with_paren_and_without_paren_plus_five + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_seven\
    \ = paren_groups_count_with_paren_and_without_paren_plus_six + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_eight = paren_groups_count_with_paren_and_without_paren_plus_seven\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_nine =\
    \ paren_groups_count_with_paren_and_without_paren_plus_eight + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_ten = paren_groups_count_with_paren_and_without_paren_plus_nine\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_eleven\
    \ = paren_groups_count_with_paren_and_without_paren_plus_ten + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_twelve = paren_groups_count_with_paren_and_without_paren_plus_eleven\
    \ + 1\n        val paren_groups_count_with_paren_and_without_paren_plus_thirteen\
    \ = paren_groups_count_with_paren_and_without_paren_plus_twelve + 1\n        val\
    \ paren_groups_count_with_paren_and_without_paren_plus_fourteen = paren_groups_count_with_paren_and_without_paren_plus_thirteen\
    \ + 1\n        val paren_groups_count_with_paren", "        val paren_groups =\
    \ paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\"(\", \" ( \").replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\").replace(\") \"\
    , \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ).replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\").replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_",
  "        // Write your code here\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum2 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum2 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum3 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum3\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum4 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum4 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum5 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum5\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum6 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum6 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum7 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum7\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum8 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum8 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum9 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum9\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum10 = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_sum10 = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_depth_sum11 = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum11\
    \ = mutable.ListBuffer[Int]()\n        val paren_", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\" \", \"\"))\n       \
    \ val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(",
  "        val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"", "        val paren_groups = paren_string.split(\"\\\\(\")\n\
    \        val paren_group_strings = paren_groups.map(x => x.replace(\")\", \"\"\
    ).trim())\n        paren_group_strings.filter(x => !x.isEmpty)", "        val\
    \ paren_groups = paren_string.split(\"\\\\(\")\n        val paren_group_strings\
    \ = paren_groups.map(x => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted\
    \ = paren_group_strings.sortWith((x, y) => x.compareTo(y))\n        val paren_group_strings_sorted_without_spaces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"\").replace(\")\",\
    \ \"\"))\n        val paren_group_strings_sorted_without_spaces_without_duplicates\
    \ = paren_group_strings_sorted_without_spaces.distinct\n        val paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_duplicates.map(x => x.replace(\"\
    (\", \"\").replace(\")\", \"\"))\n        paren_group_strings_sorted_without_spaces_without_duplicates_without_spaces",
  "        // Use a stack to keep track of which parenthesis groups are open\n   \
    \     val stack = mutable.Stack[String]()\n        // Use a list to keep track\
    \ of which parenthesis groups are closed\n        val closed_groups = mutable.ListBuffer[String]()\n\
    \        // Use a list to keep track of which parenthesis groups are open\n  \
    \      val open_groups = mutable.ListBuffer[String]()\n        // Iterate over\
    \ each character in the string\n        for (c <- paren_string) {\n          \
    \  // If character is a left parenthesis, push it onto the stack\n           \
    \ if (c == '(') {\n                stack.push(c)\n            }\n            //\
    \ If character is a right parenthesis, pop it from the stack\n            else\
    \ if (c == ')') {\n                stack.pop()\n            }\n            //\
    \ If character is a left parenthesis, push it onto the stack\n            else\
    \ if (c == '{') {\n                stack.push(c)\n            }\n            //\
    \ If character is a right parenthesis, pop it from the stack\n            else\
    \ if (c == '}') {\n                stack.pop()\n            }\n            //\
    \ If character is a left curly brace, push it onto the stack\n            else\
    \ if (c == '[') {\n                stack.push(c)\n            }\n            //\
    \ If character is a right curly brace, pop it from the stack\n            else\
    \ if (c == ']') {\n                stack.pop()\n            }\n            //\
    \ If character is a left square brace, push it onto the stack\n            else\
    \ if (c == '{') {\n                stack.push(c)\n            }\n            //\
    \ If character is a right square brace, pop it from the stack\n            else\
    \ if (c == '}') {\n                stack.pop()\n            }\n            //\
    \ If character is a space, ignore it\n            else if (c == ' ') {\n     \
    \       }\n            // If character is a new line, ignore it\n            else\
    \ if (c == '\\n') {\n            }\n            // If character is a tab, ignore\
    \ it\n            else if (c == '\\t') {\n            }\n            // If character\
    \ is a carriage return, ignore it\n            else if (c == '\\r') {\n      \
    \      }\n            // If character is a backslash, ignore it\n            else\
    \ if (c == '\\\\') {\n            }\n            // If character is a comma, ignore\
    \ it\n            else if (c == ',') {\n            }\n            // If character\
    \ is a dot, ignore it\n            else if (c == '.') {\n            }\n     \
    \       // If character is a colon, ignore it\n            else if (c == ':')\
    \ {\n            }\n            // If character is a semicolon, ignore it\n  \
    \          else if (c == ';') {\n            }\n            // If character is\
    \ a colon, ignore it\n            else if (c == '=') {\n            }\n      \
    \      // If character is a comma, ignore it\n            else if (c == '+", " \
    \       val paren_groups = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\"( \", \" (\"))\n        val\
    \ paren_groups_with_spaces_without_spaces_without_spaces = paren_groups_with_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\") \", \" ) \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_",
  "        val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_close = mutable.ListBuffer[String]()\n        val paren_group_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_max = mutable.ListBuffer[Int]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Int]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_size_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_max = mutable.ListBuffer[Double]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_max = mutable.ListBuffer[Double]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_max = mutable.ListBuffer[Double]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_max = mutable.ListBuffer[Double]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Double]()\n        val\
    \ paren_group_size_max = mutable.ListBuffer[Double]()\n        val paren_group_size_sum\
    \ = mutable.ListBuffer[Double]()\n        val paren_group_size_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_group_size_min = mutable.ListBuffer[Double]()\n        val\
    \ paren", "        val paren_groups = mutable.ListBuffer[String]()\n        val\
    \ paren_stack = mutable.Stack[String]()\n        paren_stack.append(paren_string)\n\
    \        while(paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_group_string = paren_string.substring(0,paren_string.length-1)\n\
    \            paren_groups.append(paren_group_string)\n            val paren_group_length\
    \ = paren_string.length-1\n            val paren_group_open_braces = paren_string.substring(paren_group_length).split(\"\
    \\\\(\").length\n            val paren_group_close_braces = paren_string.substring(paren_group_length).split(\"\
    \\\\)\").length\n            if(paren_group_open_braces == paren_group_close_braces)\
    \ {\n                paren_stack.append(paren_string.substring(paren_group_length))\n\
    \            } else {\n                paren_stack.append(paren_string.substring(0,paren_group_length))\n\
    \            }\n        }\n        paren_groups.toList", "        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_open = mutable.ListBuffer[String]()\n\
    \        val paren_closed = mutable.ListBuffer[String]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val paren_open_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_index = mutable.ListBuffer[Int]()\n\
    \        val paren_open_index = mutable.ListBuffer[Int]()\n        val paren_closed_index\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_index = mutable.ListBuffer[Int]()\n        val ", " \
    \       val paren_groups = mutable.ListBuffer[String]()\n        val open_braces\
    \ = mutable.ListBuffer[String]()\n        val close_braces = mutable.ListBuffer[String]()\n\
    \        val spaces = mutable.ListBuffer[String]()\n        val open_brace_count\
    \ = 0\n        val close_brace_count = 0\n        val space_count = 0\n      \
    \  val paren_group = \"\"\n        val open_brace_open = false\n        val close_brace_open\
    \ = false\n        val space_open = false\n        val space_close = false\n \
    \       val paren_open = false\n        val paren_close = false\n        val open_brace_close\
    \ = false\n        val close_brace_close = false\n        val space_close = false\n\
    \        val space_open = false\n        val paren_open = false\n        val paren_close\
    \ = false\n        val open_brace_open = false\n        val close_brace_open =\
    \ false\n        val space_open = false\n        val space_close = false\n   \
    \     val paren_open = false\n        val paren_close = false\n        val open_brace_close\
    \ = false\n        val close_brace_close = false\n        val space_close = false\n\
    \        val space_open = false\n        val paren_open = false\n        val paren_close\
    \ = false\n        val open_brace_open = false\n        val close_brace_open =\
    \ false\n        val space_open = false\n        val space_close = false\n   \
    \     val paren_open = false\n        val paren_close = false\n        val open_brace_close\
    \ = false\n        val close_brace_close = false\n        val space_close = false\n\
    \        val space_open = false\n        val paren_open = false\n        val paren_close\
    \ = false\n        val open_brace_open = false\n        val close_brace_open =\
    \ false\n        val space_open = false\n        val space_close = false\n   \
    \     val paren_open = false\n        val paren_close = false\n        val open_brace_close\
    \ = false\n        val close_brace_close = false\n        val space_close = false\n\
    \        val space_open = false\n        val paren_open = false\n        val paren_close\
    \ = false\n        val open_brace_open = false\n        val close_brace_open =\
    \ false\n        val space_open = false\n        val space_close = false\n   \
    \     val paren_open = false\n        val paren_close = false\n        val open_brace_close\
    \ = false\n        val close_brace_close = false\n        val space_close = false\n\
    \        val space_open = false\n", "        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_closed = mutable.ListBuffer[String]()\n\
    \        val paren_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached = mutable.", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_size = paren_groups.length\n\
    \        val paren_groups_size2 = paren_groups_size * 2\n        val paren_groups_size3\
    \ = paren_groups_size2 * 2\n        val paren_groups_size4 = paren_groups_size3\
    \ * 2\n        val paren_groups_size5 = paren_groups_size4 * 2\n        val paren_groups_size6\
    \ = paren_groups_size5 * 2\n        val paren_groups_size7 = paren_groups_size6\
    \ * 2\n        val paren_groups_size8 = paren_groups_size7 * 2\n        val paren_groups_size9\
    \ = paren_groups_size8 * 2\n        val paren_groups_size10 = paren_groups_size9\
    \ * 2\n        val paren_groups_size11 = paren_groups_size10 * 2\n        val\
    \ paren_groups_size12 = paren_groups_size11 * 2\n        val paren_groups_size13\
    \ = paren_groups_size12 * 2\n        val paren_groups_size14 = paren_groups_size13\
    \ * 2\n        val paren_groups_size15 = paren_groups_size14 * 2\n        val\
    \ paren_groups_size16 = paren_groups_size15 * 2\n        val paren_groups_size17\
    \ = paren_groups_size16 * 2\n        val paren_groups_size18 = paren_groups_size17\
    \ * 2\n        val paren_groups_size19 = paren_groups_size18 * 2\n        val\
    \ paren_groups_size20 = paren_groups_size19 * 2\n        val paren_groups_size21\
    \ = paren_groups_size20 * 2\n        val paren_groups_size22 = paren_groups_size21\
    \ * 2\n        val paren_groups_size23 = paren_groups_size22 * 2\n        val\
    \ paren_groups_size24 = paren_groups_size23 * 2\n        val paren_groups_size25\
    \ = paren_groups_size24 * 2\n        val paren_groups_size26 = paren_groups_size25\
    \ * 2\n        val paren_groups_size27 = paren_groups_size26 * 2\n        val\
    \ paren_groups_size28 = paren_groups_size27 * 2\n        val paren_groups_size29\
    \ = paren_groups_size28 * 2\n        val paren_groups_size30 = paren_groups_size29\
    \ * 2\n        val paren_groups_size31 = paren_groups_size30 * 2\n        val\
    \ paren_groups_size32 = paren_groups_size31 * 2\n        val paren_groups_size33\
    \ = paren_", "        val paren_groups = paren_string.split(\"\\\\(\")\n     \
    \   val paren_groups_size = paren_groups.length\n        val paren_groups_size_remainder\
    \ = paren_groups_size % 2\n        val paren_groups_size_remainder_size = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder = paren_groups_size_remainder\
    \ + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_groups_size_remainder_size_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = paren_groups_size_remainder + 1\n        val paren_", "        val paren_groups\
    \ = paren_string.split(\"\\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\" \", \"\"))\n       \
    \ val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_"]
stop_tokens:
- "\n    }\n"
