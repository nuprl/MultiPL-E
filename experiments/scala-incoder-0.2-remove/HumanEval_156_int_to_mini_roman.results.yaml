language: scala
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ romanNum = number\n        while (romanNum > 0) {\n            roman += romanNum\
    \ % 10 + romanNum / 10\n            romanNum = romanNum / 10\n        }\n    \
    \    roman.mkString.toLowerCase\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9d40t2dp.scala:12:37\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            roman += romanNum\
    \ % \e[31m10\e[0m + romanNum / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx178lvdq.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx178lvdq.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLen\e[0m =\
    \ scala.collection.mutable.ArrayBuffer.fill(number)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx178lvdq.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.fill(number)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx178lvdq.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.fill(number)(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in th"
  stdout: ''
  timestamp: 1660010557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ romanNum = number\n        while (romanNum > 0) {\n            roman += romanNum\
    \ % 10 + romanNum / 10\n            romanNum = romanNum / 10\n        }\n    \
    \    roman.toString().toLowerCase \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbyzjvdo8.scala:12:37\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            roman += romanNum\
    \ % \e[31m10\e[0m + romanNum / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        val nums = mutable.ListBuffer[Int]()\n\
    \        val numsString = mutable.ListBuffer[String]()\n        val numsStringBuilder\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder2 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder3 = mutable.ListBuffer[String]()\n        val numsStringBuilder4\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder5 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder6 = mutable.ListBuffer[String]()\n        val numsStringBuilder7\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder8 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder9 = mutable.ListBuffer[String]()\n        val numsStringBuilder10\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder11 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder12 = mutable.ListBuffer[String]()\n        val numsStringBuilder13\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder14 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder15 = mutable.ListBuffer[String]()\n        val numsStringBuilder16\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder17 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder18 = mutable.ListBuffer[String]()\n        val numsStringBuilder19\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder20 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder21 = mutable.ListBuffer[String]()\n        val numsStringBuilder22\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder23 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder24 = mutable.ListBuffer[String]()\n        val numsStringBuilder25\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder26 = mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder27 = mutable.ListBuffer[String]()\n        val numsStringBuilder28\
    \ = mutable.ListBuffer[String]()\n        val numsStringBuilder29\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh967llf.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmh967llf.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mromans\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmh967llf.scala:10:19\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmh967llf.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsString\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  \
    \ |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmh967llf.scala:12:32 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsStringBuilder\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmh967llf.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder2\e[0m\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         "
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val nums = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val result = mutable.ArrayBuffer(\"\")\n        var i = 0\n        while\
    \ (i < number) {\n            val roman = romans((number % 1000) / 100).substring(0,\
    \ 1)\n            val num = nums(number % 100).substring(0, 1)\n            result\
    \ += roman.concat(num).concat(\" \")\n            number /= 100\n            i\
    \ += 1\n        }\n        result.mkString.toLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxrnddef1.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxrnddef1.scala:12:19 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxrnddef1.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ArrayBuffer(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxrnddef1.scala:21:19\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            number /= \e\
    [31m100\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value /= is not a member of Long - did you mean number.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val romanDigit = if (num < 1000) \"M\" else if (num < 5000)\
    \ \"D\" else \"C\"\n            roman += romanDigit\n        }\n        roman.mkString.toLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp50wu6qn0.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp50wu6qn0.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp50wu6qn0.scala:12:22 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   var num = 0\n        while (number > 0) {\n            roman.append(roman.last.charAt(0).toLower)\n\
    \            val remainder = number % 10\n            number /= 10\n         \
    \   roman.append(remainder.toString)\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmppmgf7_mv.scala:12:18 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman.last.charAt(\e[31m0\e\
    [0m).toLower)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m\
    \ in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems: String*):\
    \ (roman : scala.collection.mutable.ListBuffer[String])\n\e[31m   |\e[0m (elem:\
    \ String): (roman : scala.collection.mutable.ListBuffer[String])\n\e[31m   |\e\
    [0mmatch arguments ((scala.runtime.RichChar#toLower : => Char))\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppmgf7_mv.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl1i9w71f.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl1i9w71f.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.math.log10(number).toInt\n        val numDigitsInBase = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInBaseString = numDigitsInBase.toString\n \
    \       val numDigitsInBaseStringLength = numDigitsInBaseString.length\n     \
    \   val numDigitsInBaseStringWithZeros = numDigitsInBaseString.padTo(\"0\", numDigitsInBaseStringLength)\n\
    \        val numDigitsInBaseStringWithZerosLength = numDigitsInBaseStringWithZeros.length\n\
    \        val numDigitsInBaseStringWithZerosWithLeadingZeros = numDigitsInBaseStringWithZeros.padTo(\"\
    0\", numDigitsInBaseStringLength)\n        val numDigitsInBaseStringWithZerosWithLeadingZerosLength\
    \ = numDigitsInBaseStringWithZerosWithLeadingZeros.length\n        val numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZeros\
    \ = numDigitsInBaseStringWithZerosWithLeadingZeros.padTo(\"0\", numDigitsInBaseStringLength)\n\
    \        val numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZerosLength\
    \ = numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZeros.length\n  \
    \      val numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZerosWithLeadingZeros\
    \ = numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZeros.padTo(\"0\"\
    , numDigitsInBaseStringLength)\n        val numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZerosWithLeadingZerosLength\
    \ = numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZerosWithLeadingZeros.length\n\
    \        val numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZerosWithLeadingZerosWithLeadingZeros\
    \ = numDigitsInBaseStringWithZerosWithLeadingZerosWithLeadingZerosWithLeadingZeros.padTo(\"\
    0\", numDigitsInBaseStringLength)\n        val numDigitsIn\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ux4d32j.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp7ux4d32j.scala:15:67\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36mnumDigitsInBaseStringWithZeros\e[0m = numDigitsInBaseString.padTo(\e\
    [31m\"0\"\e[0m, numDigitsInBaseStringLength)\n\e[31m\e[31m   |\e[0m          \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mpadTo\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m   |\e[0m (len:\
    \ Int, elem: Char): String\n\e[31m   |\e[0m [B >: Char](len: Int, elem: B): IndexedSeq[B]\n\
    \e[31m   |\e[0mmatch arguments ((\e[32m\"0\"\e[0m : String), (numDigitsInBaseStringLength\
    \ : Int))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ux4d32j.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        var i\
    \ = number\n        while(i >= 1000) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    M\")\n            i /= 1000\n        }\n        while(i >= 100) {\n          \
    \  roman.append(i.toString.substring(0,3)).append(\"CM\")\n            i /= 100\n\
    \        }\n        while(i >= 10) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    D\")\n            i /= 10\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    CD\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    C\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    XC\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    L\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    XL\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    X\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    IX\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    V\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    IV\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    I\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    I\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    I\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    I\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.substring(0,3)).append(\"\
    I\")\n            i /= 1\n        }\n        while(i >= 1) {\n            roman.append(i.toString.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpomnodl00.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpomnodl00.scala:101:0 ---------------------------\e[0m\e[0m\n\e[31m101\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpomnodl00.scala:100:1\
    \ --------------------\e[0m\e[0m\n\e[31m100 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: String\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpomnodl00.scala:83:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m83 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        var num = 0L\n        while (number > 0) {\n            num += 1L\n \
    \           number -= num\n            romans.append(numToRoman(num))\n      \
    \      nums += num\n        }\n        romans.reverse.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_c8abio6.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_c8abio6.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_c8abio6.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number -= num\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean number.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        var num = 0\n   \
    \     while(number > 0) {\n            num += 1\n            number -= num\n \
    \           roman.append(numToRoman(num))\n            nums += num\n        }\n\
    \        roman.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_sm3h9p.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number -= num\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean number.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_sm3h9p.scala:15:25\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            roman.append(numToRoman(num))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Not found: numToRoman\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsString = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsStringBuilder = scala.collection.mutable.ListBuffer[String]()\n \
    \       val numsStringBuilder2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder3 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder4 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder6 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder10 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder11 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder12 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder13 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder15 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder17 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder18 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder20 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder21 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder23 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder24 = scala.collection.mutable.ListBuffer[String\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1hrfnggo.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1hrfnggo.scala:9:20\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1hrfnggo.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigits =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigits =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigits =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val romanDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val romanDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val romanDigit = scala.collection.mutable.ArrayBuffer.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2iv4z94g.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2iv4z94g.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mromanDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigits is already defined as \e[33mvalue\e[0m \e[35mromanDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2iv4z94g.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mromanDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigit is already defined as \e[33mvalue\e[0m \e[35mromanDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2iv4z94g.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mromanDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanDigits is already defined as \e[33mvalue\e[0m \e[35mromanDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2iv4z94g.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mromanDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val remainder = num % 10\n            val digit = num /\
    \ 10\n            roman += if (digit > 0) \"M\" else if (digit == 0) \"C\" else\
    \ \"D\"\n            roman += if (remainder > 0) \"C\" else if (remainder == 0)\
    \ \"X\" else \"L\"\n        }\n        roman.mkString.toLowerCase\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps45xj_rv.scala:15:21 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            roman += \e[33mif\e[0m (digit > \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (digit == \e[31m0\e[0m) \e\
    [31m\"C\"\e[0m \e[33melse\e[0m \e[31m\"D\"\e[0m\n\e[31m\e[31m   |\e[0m       \
    \              ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmps45xj_rv.scala:16:21 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            roman += \e[33mif\e[0m (remainder > \e[31m0\e[0m) \e[31m\"\
    C\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m0\e[0m) \e[31m\"X\"\
    \e[0m \e[33melse\e[0m \e[31m\"L\"\e[0m\n\e[31m\e[31m   |\e[0m                \
    \     ^^\e[0m\n\e[31m   |\e[0m                     expression expected but \e\
    [31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps45xj_rv.scala:9:20\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m  |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps45xj_rv.scala:11:31\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until nums.size) {\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value size is\
    \ not a member of Double\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmps45xj_rv.scala:12:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e\
    [0m \e[36mnum\e[0m = nums(i)\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mnums\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsString =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStringBuilder24\
    \ = scala.collection.mutable.List\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_2s8oqf.scala:35:59 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder24\e[0m\
    \ = scala.collection.mutable.List\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue List is\
    \ not a member of scala.collection.mutable - did you mean mutable.ListMap?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_2s8oqf.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val nums = scala.collection.mutable.ArrayBuffer(\n\
    \            \"\", \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\"\
    , \"DCCC\", \"CM\", \"M\", \"MM\", \"MMM\"\n        )\n        val romanNum =\
    \ scala.collection.mutable.ArrayBuffer(\n            \"\", \"\", \"I\", \"II\"\
    , \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XX\", \"\
    XXX\"\n        )\n        val romanNums = scala.collection.mutable.ArrayBuffer(\n\
    \            \"\", \"\", \"I\", \"II\", \"III\", \"IIII\", \"IV\", \"V\", \"VI\"\
    , \"VII\", \"VIII\", \"VIIII\", \"IX\", \"X\", \"XX\", \"XXX\"\n        )\n  \
    \      val romanNumsII = scala.collection.mutable.ArrayBuffer(\n            \"\
    \", \"\", \"II\", \"III\", \"IIII\", \"IIIII\", \"IV\", \"V\", \"VI\", \"VII\"\
    , \"VIII\", \"VIIII\", \"VIIIII\", \"IX\", \"X\", \"XX\", \"XXX\"\n        )\n\
    \        val romanNumsIII = scala.collection.mutable.ArrayBuffer(\n          \
    \  \"\", \"\", \"III\", \"IIII\", \"IIIII\", \"IIIIII\", \"IV\", \"V\", \"VI\"\
    , \"VII\", \"VIII\", \"VIIII\", \"VIIIII\", \"IX\", \"X\", \"XX\", \"XXX\"\n \
    \       )\n        val romanNumsIIII = scala.collection.mutable.ArrayBuffer(\n\
    \            \"\", \"\", \"IIII\", \"IIIII\", \"IIIIII\", \"IIIIIII\", \"IV\"\
    , \"V\", \"VI\", \"VII\", \"VIII\", \"VIIII\", \"VIIIII\", \"VIIIIII\", \"IX\"\
    , \"X\", \"XX\", \"XXX\"\n        )\n        val romanNumsIIIII = scala.collection.mutable.ArrayBuffer(\n\
    \            \"\", \"\", \"IIIII\", \"IIIIII\", \"IIIIIII\", \"IIIIIIII\", \"\
    IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"VIIII\", \"VIIIII\", \"VIIIIII\", \"\
    IX\", \"X\", \"XX\", \"XXX\"\n        )\n        val romanNumsIIIIII = scala.collection.mutable.ArrayBuffer(\n\
    \            \"\", \"\", \"IIII\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpika6b3zl.scala:34:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[31m\"\"\e[0m, \e[31m\"\"\e[0m, \"IIII\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpika6b3zl.scala:36:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpika6b3zl.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpika6b3zl.scala:36:4 -------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: IIIIdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcd1z781p.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcd1z781p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcd1z781p.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcd1z781p.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        while (number > 0) {\n\
    \            num += 1\n            roman = roman.substring(0, roman.length - 1)\
    \ + \"M\"\n            number -= 1000\n        }\n        roman = roman.substring(0,\
    \ roman.length - 1) + \"D\"\n        roman = roman.substring(0, roman.length -\
    \ 1) + \"C\"\n        roman = roman.substring(0, roman.length - 1) + \"L\"\n \
    \       roman = roman.substring(0, roman.length - 1) + \"X\"\n        roman =\
    \ roman.substring(0, roman.length - 1) + \"V\"\n        roman = roman.substring(0,\
    \ roman.length - 1) + \"I\"\n        roman = roman.substring(0, roman.length -\
    \ 1) + \"I\"\n        roman = roman.substring(0, roman.length - 1) + \"I\"\n \
    \       roman = roman.substring(0, roman.length - 1) + \"I\"\n        roman =\
    \ roman.substring(0, roman.length - 1) + \"I\"\n        roman = roman.substring(0,\
    \ roman.length - 1) + \"I\"\n        roman = roman.substring(0, roman.length -\
    \ 1) + \"I\"\n        roman = roman.substring(0, roman.length - 1) + \"I\"\n \
    \       roman = roman.substring(0, roman.length - 1) + \"I\"\n        roman =\
    \ roman.substring(0, roman.length - 1) + \"I\"\n        roman = roman.substring(0,\
    \ roman.length - 1) + \"I\"\n        roman = roman.substring(0, roman.length -\
    \ 1) + \"I\"\n        roman = roman.substring(0, roman.length - 1) + \"I\"\n \
    \       roman = roman.substring(0, roman.length - 1) + \"I\"\n        roman =\
    \ roman.substring(0, roman.length - 1) + \"I\"\n        roman = roman.substring(0,\
    \ roman.length - 1) + \"I\"\n        roman = roman.substring(0, roman.length -\
    \ 1) + \"I\"\n        roman = roman.substring(0, roman.length - 1) + \"I\"\n \
    \       roman = roman.substring(0, roman.length - 1) + \"I\"\n        roman =\
    \ roman.substring(0, roman.length - 1) + \"I\"\n        roman = roman.substring(0,\
    \ roman.length - 1) + \"I\"\n        roman = roman.substring(0, roman.length -\
    \ 1) + \"I\"\n        roman = roman.substring(0, roman.length - 1) + \"I\"\n \
    \       roman = roman.substring(0, roman.length - 1) + \"I\"\n        roman =\
    \ roman.substring(0, \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxjd3mbfm.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxjd3mbfm.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            number -= \e\
    [31m1000\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value -= is not a member of Long - did you mean number.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxjd3mbfm.scala:45:14 --------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        roman = roman.substring(\e[31m0\e[0m, \n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap2\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap3\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap4\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap5\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap6\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap7\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap8\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap9\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap10\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap11\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap12\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap13\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap14\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap15\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap16\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap17\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap18\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap19\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap20\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap21\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap22\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap23\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap24\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcwp3n41d.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numThousand = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val numThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numTen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousand\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn0v0gsb1.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0v0gsb1.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0v0gsb1.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0v0gsb1.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ E"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        var index = 0\n        var romanString = \"\"\n\
    \        while (number > 0) {\n            val remainder = number % 10\n     \
    \       number /= 10\n            romanString += roman(index).substring(0, remainder)\n\
    \            index += 1\n        }\n        romanString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptfvkpkxk.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptfvkpkxk.scala:17:24\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            romanString +=\
    \ roman(index).substring(\e[31m0\e[0m, remainder)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean String.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptfvkpkxk.scala:17:53 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \            romanString += roman(index).substring(\e[31m0\e[0m, remainder)\n\e\
    [31m\e[31m   |\e[0m                                                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    (remainder\
    \ : Long)\n\e[31m   |\e[0m                                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tens = scala.collection.mutable.ListBuffer[Int]()\n        val hundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyh976k7o.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyh976k7o.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyh976k7o.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyh976k7o.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyh976k7o.scala:23:12 -----"
  stdout: ''
  timestamp: 1660010566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      var lastDigitCount = 0\n        var lastDigitCount2 = 0\n        var lastDigitCount3\
    \ = 0\n        var lastDigitCount4 = 0\n        var lastDigitCount5 = 0\n    \
    \    var lastDigitCount6 = 0\n        var lastDigitCount7 = 0\n        var lastDigitCount8\
    \ = 0\n        var lastDigitCount9 = 0\n        var lastDigitCount10 = 0\n   \
    \     var lastDigitCount11 = 0\n        var lastDigitCount12 = 0\n        var\
    \ lastDigitCount13 = 0\n        var lastDigitCount14 = 0\n        var lastDigitCount15\
    \ = 0\n        var lastDigitCount16 = 0\n        var lastDigitCount17 = 0\n  \
    \      var lastDigitCount18 = 0\n        var lastDigitCount19 = 0\n        var\
    \ lastDigitCount20 = 0\n        var lastDigitCount21 = 0\n        var lastDigitCount22\
    \ = 0\n        var lastDigitCount23 = 0\n        var lastDigitCount24 = 0\n  \
    \      var lastDigitCount25 = 0\n        var lastDigitCount26 = 0\n        var\
    \ lastDigitCount27 = 0\n        var lastDigitCount28 = 0\n        var lastDigitCount29\
    \ = 0\n        var lastDigitCount30 = 0\n        var lastDigitCount31 = 0\n  \
    \      var lastDigitCount32 = 0\n        var lastDigitCount33 = 0\n        var\
    \ lastDigitCount34 = 0\n        var lastDigitCount35 = 0\n        var lastDigitCount36\
    \ = 0\n        var lastDigitCount37 = 0\n        var lastDigitCount38 = 0\n  \
    \      var lastDigitCount39 = 0\n        var lastDigitCount40 = 0\n        var\
    \ lastDigitCount41 = 0\n        var lastDigitCount42 = 0\n        var lastDigitCount43\
    \ = 0\n        var lastDigitCount44 = 0\n        var lastDigitCount45 = 0\n  \
    \      var lastDigitCount46 = 0\n        var lastDigitCount47 = 0\n        var\
    \ lastDigitCount48 = 0\n        var lastDigitCount49 = 0\n        var lastDigitCount50\
    \ = 0\n        var lastDigitCount51 = 0\n        var lastDigitCount52 = 0\n  \
    \      var lastDigitCount53 = 0\n        var lastDigitCount54 = 0\n        var\
    \ lastDigitCount55 = 0\n        var lastDigitCount56 = 0\n        var lastDigitCount57\
    \ = 0\n        var lastDigitCount58 = 0\n        var lastDigitCount59 = 0\n  \
    \      var lastDigitCount60 = 0\n        var lastDigitCount61 = 0\n        var\
    \ lastDigitCount62 = 0\n        var lastDigitCount63 = 0\n        var lastDigitCount64\
    \ = 0\n        var lastDigitCount65 = 0\n        var lastDigitCount66 = 0\n  \
    \      var lastDigitCount67 = 0\n        var lastDigitCount68 = 0\n        var\
    \ lastDigitCount69 = 0\n        var lastDigitCount70 = 0\n        var lastDigitCount71\
    \ = 0\n        var last\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_e0pdmjj.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_e0pdmjj.scala:84:5 ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numThousand = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val numThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numTen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousand\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn0v0gsb1.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0v0gsb1.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0v0gsb1.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn0v0gsb1.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ E"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsMap = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap2 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap3 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap4 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap5 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap6 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap7 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap8 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap9 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap10 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap12 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap13 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap14 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap15 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap16 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap17 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap18 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap21 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap22 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap23 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap24 = scala.collection.mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_dh0t7_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpf_dh0t7_.scala:9:20 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf_dh0t7_.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = scala.collection.mutable.Map[Long, String]()\n        romans(1)\
    \ = \"I\"\n        romans(2) = \"II\"\n        romans(3) = \"III\"\n        romans(4)\
    \ = \"IV\"\n        romans(5) = \"V\"\n        romans(6) = \"VI\"\n        romans(7)\
    \ = \"VII\"\n        romans(8) = \"VIII\"\n        romans(9) = \"IX\"\n      \
    \  romans(10) = \"X\"\n        romans(11) = \"XI\"\n        romans(12) = \"XII\"\
    \n        romans(13) = \"XIII\"\n        romans(14) = \"XIV\"\n        romans(15)\
    \ = \"XV\"\n        romans(16) = \"XVI\"\n        romans(17) = \"XVII\"\n    \
    \    romans(18) = \"XVIII\"\n        romans(19) = \"XIX\"\n        romans(20)\
    \ = \"XX\"\n        romans(21) = \"XXI\"\n        romans(22) = \"XXII\"\n    \
    \    romans(23) = \"XXIII\"\n        romans(24) = \"XXIV\"\n        romans(25)\
    \ = \"XXV\"\n        romans(26) = \"XXVI\"\n        romans(27) = \"XXVII\"\n \
    \       romans(28) = \"XXVIII\"\n        romans(29) = \"XXIX\"\n        romans(30)\
    \ = \"XXX\"\n        romans(31) = \"XXXI\"\n        romans(32) = \"XXXII\"\n \
    \       romans(33) = \"XXXIII\"\n        romans(34) = \"XXXIV\"\n        romans(35)\
    \ = \"XXXV\"\n        romans(36) = \"XXXVI\"\n        romans(37) = \"XXXVII\"\n\
    \        romans(38) = \"XXXVIII\"\n        romans(39) = \"XXXIX\"\n        romans(40)\
    \ = \"XL\"\n        romans(41) = \"L\"\n        romans(42) = \"LX\"\n        romans(43)\
    \ = \"LXX\"\n        romans(44) = \"LXXX\"\n        romans(45) = \"LXXXX\"\n \
    \       romans(46) = \"LXXXXX\"\n        romans(47) = \"LXXXII\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6qipm8gy.scala:56:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        romans(\e[31m47\e[0m) = \"LXXXII\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmp6qipm8gy.scala:58:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6qipm8gy.scala:58:4 -------------------------\e[0m\e[0m\n\e[31m58 |\e\
    [0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: LXXXIIdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var isNegative = false\n\
    \        var isFirst = true\n        var isLast = false\n        var isMiddle\
    \ = false\n        var isFirstHalf = false\n        var isLastHalf = false\n \
    \       var isMiddleHalf = false\n        var isFirstQuarter = false\n       \
    \ var isLastQuarter = false\n        var isMiddleQuarter = false\n        var\
    \ isFirstDime = false\n        var isLastDime = false\n        var isMiddleDime\
    \ = false\n        var isFirstNickel = false\n        var isLastNickel = false\n\
    \        var isMiddleNickel = false\n        var isFirstPenny = false\n      \
    \  var isLastPenny = false\n        var isMiddlePenny = false\n        var isFirstQuarter\
    \ = number % 100 == 0\n        var isLastQuarter = number % 400 == 0\n       \
    \ var isMiddleQuarter = number % 500 == 0\n        var isFirstDime = number %\
    \ 100 == 0\n        var isLastDime = number % 10 == 0\n        var isMiddleDime\
    \ = number % 5 == 0\n        var isFirstNickel = number % 10 == 0\n        var\
    \ isLastNickel = number % 5 == 0\n        var isMiddleNickel = number % 1 == 0\n\
    \        var isFirstPenny = number % 5 == 0\n        var isLastPenny = number\
    \ % 1 == 0\n        var isMiddlePenny = number % 1 == 0\n        var isFirstHalf\
    \ = number % 100 == 0\n        var isLastHalf = number % 400 == 0\n        var\
    \ isMiddleHalf = number % 500 == 0\n        var isFirstQuarter = number % 100\
    \ == 0\n        var isLastQuarter = number % 400 == 0\n        var isMiddleQuarter\
    \ = number % 500 == 0\n        var isFirstNickel = number % 10 == 0\n        var\
    \ isLastNickel = number % 5 == 0\n        var isMiddleNickel = number % 1 == 0\n\
    \        var isFirstPenny = number % 5 == 0\n        var isLastPenny = number\
    \ % 1 == 0\n        var isMiddlePenny = number % 1 == 0\n        var isFirstHalf\
    \ = number % 100 == 0\n        var isLastHalf = number % 400 == 0\n        var\
    \ isMiddleHalf = number % 500 == 0\n        var isFirstQuarter = number % 100\
    \ == 0\n        var isLastQuarter = number % 400 == 0\n        var isMiddleQuarter\
    \ = number % 500 == 0\n        var isFirstNickel = number % 10 == 0\n        var\
    \ isLastNickel = number % 5 == 0\n        var isMiddleNickel = number % 1 == 0\n\
    \        var isFirstPenny = number % 5 == 0\n        var isLastPenny = number\
    \ % 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprg8igq60.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36misFirstQuarter\e[0m = number\
    \ % \e[31m100\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misFirstQuarter is already defined as \e[33mvariable\e[0m \e\
    [35misFirstQuarter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprg8igq60.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36misLastQuarter\e[0m = number\
    \ % \e[31m400\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastQuarter is already defined as \e[33mvariable\e[0m \e\
    [35misLastQuarter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmprg8igq60.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36misMiddleQuarter\e[0m = number\
    \ % \e[31m500\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misMiddleQuarter is already defined as \e[33mvariable\e[0m\
    \ \e[35misMiddleQuarter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprg8igq60.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36misFirstDime\e[0m = number\
    \ % \e[31m100\e[0m == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misFirstDime is already defined as \e[33mvariable\e[0m \e[35misFirstDime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprg8igq60.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mvar\e[0m \e[36misLastDime\e[0m = number % "
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer.empty[String]\n        val digits = scala.math.pow(10,\
    \ number.toInt)\n        for(i <- 0 until digits.length) roman.append(digits(i).toString)\n\
    \        roman.takeWhile(_.length < number).mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyd6d45au.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyd6d45au.scala:11:32 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until digits.length)\
    \ roman.append(digits(i).toString)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value length\
    \ is not a member of Double\n2 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsMap = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap4\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap8\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap18\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap23\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap26 = scala.collection.mutable.Map[Int, Int]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dqz57fx.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val digits = scala.math.pow(10,\
    \ number.toInt)\n        val numDigits = scala.math.ceil(digits.length)\n    \
    \    val numDigitsInRoman = scala.math.ceil(scala.math.log10(numDigits))\n   \
    \     val numDigitsInRomanWithLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRoman))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \        val numDigitsInRomanWithoutLeadingZeros = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeading\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb561opt7.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb561opt7.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanWithoutLeadingZeros\e[0m = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInRomanWithoutLeadingZeros is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumDigitsInRomanWithoutLeadingZeros\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb561opt7.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanWithoutLeadingZeros\e[0m = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInRomanWithoutLeadingZeros is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumDigitsInRomanWithoutLeadingZeros\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb561opt7.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanWithoutLeadingZeros\e[0m = scala.math.ceil(scala.math.log10(numDigitsInRomanWithoutLeadingZeros))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInRomanWithoutLeadingZeros is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumDigitsInRomanWithoutLeadingZeros\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ i = number\n        while (i > 0) {\n            roman.append(roman.last.charAt(0).toLowerCase)\n\
    \            i -= Math.pow(10, roman.last.length)\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp44_7tu8m.scala:12:46 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman.last.charAt(\e[31m0\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp44_7tu8m.scala:13:14\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            i -= Math.pow(\e\
    [31m10\e[0m, roman.last.length)\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e\
    [31m   |\e[0m            value -= is not a member of Long - did you mean Long.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNumLen = romanNum.length\n        val romanNumLen2 = romanNumLen\
    \ * 2\n        val romanNumLen3 = romanNumLen * 3\n        val romanNumLen4 =\
    \ romanNumLen * 4\n        val romanNumLen5 = romanNumLen * 5\n        val romanNumLen6\
    \ = romanNumLen * 6\n        val romanNumLen7 = romanNumLen * 7\n        val romanNumLen8\
    \ = romanNumLen * 8\n        val romanNumLen9 = romanNumLen * 9\n        val romanNumLen10\
    \ = romanNumLen * 10\n        val romanNumLen11 = romanNumLen * 11\n        val\
    \ romanNumLen12 = romanNumLen * 12\n        val romanNumLen13 = romanNumLen *\
    \ 13\n        val romanNumLen14 = romanNumLen * 14\n        val romanNumLen15\
    \ = romanNumLen * 15\n        val romanNumLen16 = romanNumLen * 16\n        val\
    \ romanNumLen17 = romanNumLen * 17\n        val romanNumLen18 = romanNumLen *\
    \ 18\n        val romanNumLen19 = romanNumLen * 19\n        val romanNumLen20\
    \ = romanNumLen * 20\n        val romanNumLen21 = romanNumLen * 21\n        val\
    \ romanNumLen22 = romanNumLen * 22\n        val romanNumLen23 = romanNumLen *\
    \ 23\n        val romanNumLen24 = romanNumLen * 24\n        val romanNumLen25\
    \ = romanNumLen * 25\n        val romanNumLen26 = romanNumLen * 26\n        val\
    \ romanNumLen27 = romanNumLen * 27\n        val romanNumLen28 = romanNumLen *\
    \ 28\n        val romanNumLen29 = romanNumLen * 29\n        val romanNumLen30\
    \ = romanNumLen\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rmaw0t0.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2rmaw0t0.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2rmaw0t0.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romansLength = romans.length\n        var roman = \"\"\
    \n        var i = 0\n        while (i < romansLength) {\n            roman +=\
    \ romans(number%romansLength)\n            number /= romansLength\n          \
    \  i += 1\n        }\n        roman\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0p9lt7d.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpz0p9lt7d.scala:17:19 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            number /= romansLength\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1gg2y0a.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1gg2y0a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1gg2y0a.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk1gg2y0a.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var i = 0\n        while (number > 0) {\n            val remainder = number\
    \ % 1000\n            number /= 1000\n            roman(i) = roman(i) + roman(remainder)\n\
    \            i += 1\n        }\n        roman.takeWhile(_ != \"\").mkString.toLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrsl4f7x.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            number /= \e[31m1000\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean number.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnrsl4f7x.scala:14:40 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m            roman(i) = roman(i) + roman(remainder)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                     Found:    (remainder : Long)\n\e[31m   |\e\
    [0m                                        Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsMap = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap11 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap14 = scala.collection.mutable.Map[Int, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap16 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap19 = scala.collection.mutable.Map[Int, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap21 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap24 = scala.collection.mutable.Map[Int, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap26 = scala.collection.mutable.Map[Int,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpteplkufa.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = scala.collection.mutable.Map[Int, String]()\n        romans(1)\
    \ = \"I\"\n        romans(2) = \"II\"\n        romans(3) = \"III\"\n        romans(4)\
    \ = \"IV\"\n        romans(5) = \"V\"\n        romans(6) = \"VI\"\n        romans(7)\
    \ = \"VII\"\n        romans(8) = \"VIII\"\n        romans(9) = \"IX\"\n      \
    \  romans(10) = \"X\"\n        romans(11) = \"XI\"\n        romans(12) = \"XII\"\
    \n        romans(13) = \"XIII\"\n        romans(14) = \"XIV\"\n        romans(15)\
    \ = \"XV\"\n        romans(16) = \"XVI\"\n        romans(17) = \"XVII\"\n    \
    \    romans(18) = \"XVIII\"\n        romans(19) = \"XIX\"\n        romans(20)\
    \ = \"XX\"\n        romans(21) = \"XXI\"\n        romans(22) = \"XXII\"\n    \
    \    romans(23) = \"XXIII\"\n        romans(24) = \"XXIV\"\n        romans(25)\
    \ = \"XXV\"\n        romans(26) = \"XXVI\"\n        romans(27) = \"XXVII\"\n \
    \       romans(28) = \"XXVIII\"\n        romans(29) = \"XXIX\"\n        romans(30)\
    \ = \"XXX\"\n        romans(31) = \"XXXI\"\n        romans(32) = \"XXXII\"\n \
    \       romans(33) = \"XXXIII\"\n        romans(34) = \"XXXIV\"\n        romans(35)\
    \ = \"XXXV\"\n        romans(36) = \"XXXVI\"\n        romans(37) = \"XXXVII\"\n\
    \        romans(38) = \"XXXVIII\"\n        romans(39) = \"XXXIX\"\n        romans(40)\
    \ = \"XL\"\n        romans(41) = \"L\"\n        romans(42) = \"LX\"\n        romans(43)\
    \ = \"LXX\"\n        romans(44) = \"LXXX\"\n        romans(45) = \"LXXXX\"\n \
    \       romans(46) = \"LXXXXX\"\n        romans(47) = \"LXXXII\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp37m511sw.scala:56:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        romans(\e[31m47\e[0m) = \"LXXXII\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmp37m511sw.scala:58:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp37m511sw.scala:58:4 -------------------------\e[0m\e[0m\n\e[31m58 |\e\
    [0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: LXXXIIdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        while(number > 0) {\n\
    \            roman = roman + romanDigit(number % 10)\n            number /= 10\n\
    \        }\n        roman = roman.substring(0,roman.length-1)\n        return\
    \ roman\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnoq1ag9v.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman = roman + romanDigit(number % \e[31m10\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: romanDigit\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnoq1ag9v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjlwmmbe.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprjlwmmbe.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        var i\
    \ = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            number /= 10\n            roman(i) = remainder\n            nums(i)\
    \ = remainder\n            i += 1\n        }\n        roman.sortWith((a, b) =>\
    \ a.compareTo(b) < 0)\n        val romanString = roman.mkString(\"\")\n      \
    \  val numString = nums.mkString(\"\")\n        romanString + numString.toLower\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr2fjwpmy.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2fjwpmy.scala:15:23 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \            roman(i) = remainder\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    (remainder\
    \ : Long)\n\e[31m   |\e[0m                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr2fjwpmy.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            nums(i) = remainder\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    (remainder : Long)\n\e[31m   |\e[0m                      Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr2fjwpmy.scala:22:32\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        romanString + numString.toLower\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      value toLower is not a member of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660010569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer.empty[String]\n        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        val digits = mutable.ArrayBuffer.empty[Int]\n        val numDigits =\
    \ mutable.ArrayBuffer.empty[Int]\n        val numDigitIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexCount = mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigitIndexMax = mutable.ArrayBuffer.empty[Int]\n        val numDigitIndexMaxCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val numDigitIndexMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinCount = mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigitIndexMinMax = mutable.ArrayBuffer.empty[Int]\n        val numDigitIndexMinMaxCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val numDigitIndexMinMaxIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMax = mutable.ArrayBuffer.empty[Int]\n  \
    \      val numDigitIndexMinMaxIndexMaxCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexMaxCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexMaxIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexMaxIndexCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexMaxIndexMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigitIndexMinMaxIndexMaxIndexMaxIndexMaxIndexMaxCount = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbxujiwiv.scala:36:70 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnumDigitIndexMinMaxIndexMaxIndexMaxIndexMaxIndexMaxCount\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \        expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbxujiwiv.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbxujiwiv.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbxujiwiv.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbxujiwiv.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        var index = 0\n   \
    \     while(number > 0) {\n            val remainder = number % 1000\n       \
    \     roman.append(remainder / 100).append(remainder % 100)\n            number\
    \ /= 1000\n            index += 1\n        }\n        roman.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptti_4ctb.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptti_4ctb.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number /= \e[31m1000\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsString =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString3 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString4 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString6 = scala.collection.mutable.ListBuffer[String]()\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString9 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsString11 = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsString12 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString13 = scala.collection.mutable.ListBuffer[String]()\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString15 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString17 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString18 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString19 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString21 = scala.collection.mutable.ListBuffer[String]()\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString23 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString25 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmf7tw_av.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd4wsno6_.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4wsno6_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4wsno6_.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd4wsno6_.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[Int, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap7 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap10 = scala.collection.mutable.Map[Int, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap12 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap15 = scala.collection.mutable.Map[Int, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap17 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap20 = scala.collection.mutable.Map[Int, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap22 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap25 = scala.collection.mutable.Map[Int, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Int, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps218grb1.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsLen = mutable.ListBuffer[Int]()\n        val numsLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLen = mutable.ListBuffer[Int]()\n        val numsLenLenLenLen\
    \ = mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n   \
    \     val numsLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n   \
    \     val numsLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val nums\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1uqjb7bm.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1uqjb7bm.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1uqjb7bm.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1uqjb7bm.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660010574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        var romanNum = number\n\
    \        var romanDigit = 0\n        while (romanNum > 0) {\n            romanDigit\
    \ += 1\n            romanNum = romanNum / 10\n        }\n        romanDigit -=\
    \ 1\n        romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n\
    \        romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n \
    \       romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n  \
    \      romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n   \
    \     romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n    \
    \    romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n     \
    \   romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n      \
    \  romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n       \
    \ romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n        romanDigit\
    \ -= 1\n        romanDigit += 1\n        romanDigit -= 1\n        romanDigit +=\
    \ 1\n        romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n\
    \        romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n \
    \       romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n  \
    \      romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n   \
    \     romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n    \
    \    romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n     \
    \   romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n      \
    \  romanDigit += 1\n        romanDigit -= 1\n        romanDigit += 1\n       \
    \ romanDigit -= 1\n        romanDigit += 1\n        romanDigit -= 1\n        romanDigit\
    \ += 1\n        romanDigit -= 1\n        romanDigit += 1\n        romanDigit -=\
    \ 1\n        romanDigit += 1\n        romanDigit -= 1\n        roman\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaniahzh_.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyjbu920.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsyjbu920.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsyjbu920.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsyjbu920.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1660010577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        romans += \"M\"\n\
    \        romans += \"CM\"\n        romans += \"D\"\n        romans += \"CD\"\n\
    \        romans += \"C\"\n        romans += \"XC\"\n        romans += \"L\"\n\
    \        romans += \"XL\"\n        romans += \"X\"\n        romans += \"IX\"\n\
    \        romans += \"V\"\n        romans += \"IV\"\n        romans += \"I\"\n\
    \        romans += \"II\"\n        romans += \"III\"\n        romans += \"IV\"\
    \n        romans += \"V\"\n        romans += \"VI\"\n        romans += \"VII\"\
    \n        romans += \"VIII\"\n        romans += \"IX\"\n        romans += \"X\"\
    \n        romans += \"XI\"\n        romans += \"XII\"\n        romans += \"XIII\"\
    \n        romans += \"XIV\"\n        romans += \"XV\"\n        romans += \"XVI\"\
    \n        romans += \"XVII\"\n        romans += \"XVIII\"\n        romans += \"\
    XIX\"\n        romans += \"XX\"\n        romans += \"XXX\"\n        romans +=\
    \ \"XL\"\n        romans += \"L\"\n        romans += \"LX\"\n        romans +=\
    \ \"LXX\"\n        romans += \"LXXX\"\n        romans += \"XC\"\n        romans\
    \ += \"C\"\n        romans += \"C\"\n        romans += \"CC\"\n        romans\
    \ += \"CCC\"\n        romans += \"CD\"\n        romans += \"D\"\n        romans\
    \ += \"DC\"\n        romans += \"DCC\"\n        romans += \"DCCC\"\n        romans\
    \ += \"CM\"\n        romans += \"M\"\n        romans += \"MM\"\n        romans\
    \ += \"MMM\"\n        romans += \"MMMM\"\n        romans += \"MMMMM\"\n      \
    \  romans += \"MMMMMM\"\n        romans += \"MMMMMMM\"\n        romans += \"MMMMMMMM\"\
    \n        romans += \"MMMMMMMMM\"\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgedxyitu.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var i = 0\n        while (i < number) {\n \
    \           roman += romanToMiniRoman(number % 10)\n            number /= 10\n\
    \            i += 1\n        }\n        roman\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ulsrjoc.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman += romanToMiniRoman(number % \e[31m10\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \    value += is not a member of String - did you mean String.!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2ulsrjoc.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman += romanToMiniRoman(number % \e[31m10\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: romanToMiniRoman\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ulsrjoc.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   var remainder = number\n        while(number > 0){\n            roman.append(roman.last.charAt(0).toLowerCase)\n\
    \            number -= roman.last.length\n        }\n        roman.reverse\n \
    \       roman.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2rq0gdw.scala:12:46 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman.last.charAt(\e[31m0\e\
    [0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2rq0gdw.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            number -= roman.last.length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsMap = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap2 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap3 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap4 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap5 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap6 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap7 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap8 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap9 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap10 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap12 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap13 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap14 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap15 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap16 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap17 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap18 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap21 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap22 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap23 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap24 = scala.collection.mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_dh0t7_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpf_dh0t7_.scala:9:20 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf_dh0t7_.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   var i = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n            i /= 1000\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmpeq315s3f.scala:15)\n\tat Problem$.main(tmpeq315s3f.scala:19)\n\
    \tat Problem.main(tmpeq315s3f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ i = 0\n        while (number > 0) {\n            roman.append(scala.math.pow(10,\
    \ i).toString)\n            number -= scala.math.pow(10, i).toLong\n         \
    \   i += 1\n        }\n        roman.reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34qbkse2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            number -= scala.math.pow(\e[31m10\e[0m, i).toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2gd7joa1.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2gd7joa1.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2gd7joa1.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2gd7joa1.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same gro"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val\
    \ digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val tenths = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ hundredths = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandths\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tenthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mut\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7p8_57eg.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7p8_57eg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhundredththths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredththths is already defined as \e[33mvalue\e[0m \e[35mhundredththths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7p8_57eg.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7p8_57eg.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mhundredththths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredththths is already defined as \e[33mvalue\e[0m \e[35mhundredththths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sam"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsString =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString3 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString4 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString6 = scala.collection.mutable.ListBuffer[String]()\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString9 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsString11 = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsString12 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString13 = scala.collection.mutable.ListBuffer[String]()\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString15 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString17 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString18 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString19 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString21 = scala.collection.mutable.ListBuffer[String]()\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString23 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString25 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcdywmmwh.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        var romanString = \"\"\n        var i = 0\n        while(i < roman.size)\
    \ {\n            val romanDigit = roman(i).toInt\n            val romanDigitRemainder\
    \ = number % romanDigit\n            romanString = romanString + romanDigit\n\
    \            number = number - romanDigitRemainder\n            i = i + 1\n  \
    \      }\n        romanString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvsiry6j.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmppvsiry6j.scala:18:19 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            number = number - romanDigitRemainder\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \         Reassignment to val number\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        var index = 0\n \
    \       while(number > 0) {\n            val remainder = number % 10\n       \
    \     roman.append(remainder)\n            nums.append(remainder)\n          \
    \  number /= 10\n        }\n        while(nums.nonEmpty) {\n            val num\
    \ = nums.head\n            val romanDigit = roman.last\n            roman.last\
    \ = \"\"\n            roman.append(romanDigit)\n            nums.last = (num -\
    \ nums.last) * 100\n        }\n        roman.mkString.toLowerCase\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3frk42mo.scala:14:18 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmp3frk42mo.scala:15:17 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            nums.append(remainder)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with\
    \ types\n\e[31m   |\e[0m (elems: Int*): (nums : scala.collection.mutable.ListBuffer[Int])\n\
    \e[31m   |\e[0m (elem: Int): (nums : scala.collection.mutable.ListBuffer[Int])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3frk42mo.scala:16:19 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3frk42mo.scala:21:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            roman.last\
    \ = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Reassignment to val last\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp3frk42mo.scala:23:22 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            nums.last = (num - nums.last) * \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Reassignment to val last\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9d53ol66.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9d53ol66.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9d53ol66.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9d53ol66.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9d53ol66.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsString =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString3 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString4 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString6 = scala.collection.mutable.ListBuffer[String]()\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString9 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsString11 = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsString12 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString13 = scala.collection.mutable.ListBuffer[String]()\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString15 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString17 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString18 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString19 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString21 = scala.collection.mutable.ListBuffer[String]()\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString23 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString25 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmf7tw_av.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var i = number\n        while(i > 0){\n            val remainder = i % 10\n\
    \            roman.append(remainder)\n            i /= 10\n        }\n       \
    \ roman.reverse.mkString.toLowerCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe7tcid76.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660010576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.math.log10(number).toInt\n        var i = 0\n        while\
    \ (i < numDigits) {\n            val digit = number / Math.pow(10, i)\n      \
    \      roman.append(digitToRoman(digit))\n            digits.append(digit)\n \
    \           i += 1\n        }\n        roman.toString().toLowerCase + digits.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbmo9iuqe.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            roman.append(digitToRoman(digit))\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Not found: digitToRoman\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpbmo9iuqe.scala:16:19 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            digits.append(digit)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: Int*): (digits : scala.collection.mutable.ArrayBuffer[Int])\n\
    \e[31m   |\e[0m (elem: Int): (digits : scala.collection.mutable.ArrayBuffer[Int])\n\
    \e[31m   |\e[0mmatch arguments ((digit : Double))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"C\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"\n        )\n        var romanStr = \"\"\n        var romanNumStr\
    \ = \"\"\n        var i = 0\n        while (i < number) {\n            romanStr\
    \ += roman(i).toLowerCase\n            romanNumStr += romanNum(i).toLowerCase\n\
    \            i += 1\n        }\n        romanStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 12 is out of bounds (min 0, max 11)\n\
    \tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:99)\n\tat Problem$.intToMiniRoman(tmpnbkevk2e.scala:20)\n\
    \tat Problem$.main(tmpnbkevk2e.scala:26)\n\tat Problem.main(tmpnbkevk2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val hundredsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val hundredsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val thousandsTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val thousandsHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredsThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandsThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val tensThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val tensHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val tensTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val tensHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensThousand = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val tensHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensThousand = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val tensHundred = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensThousand = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val tensThousands = scala.collection.mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2py84969.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2py84969.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mtensHundreds\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtensHundreds is already defined as \e[33mvalue\e[0m \e[35mtensHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2py84969.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mtensThousands\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtensThousands is already defined as \e[33mvalue\e[0m \e[35mtensThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2py84969.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mtensHundred\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtensHundred is already defined as \e[33mvalue\e[0m \e[35mtensHundred\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2py84969.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mtensHundreds\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"I\", \"II\", \"III\"\
    , \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"\
    XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\"\
    , \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LXI\", \"LXII\"\
    , \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\", \"\
    LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\"\
    , \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIV\"\
    , \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\"\
    , \"CI\", \"CIX\", \"CX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\"\
    , \"CXXV\", \"CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\", \"CXXX\", \"CXXXI\"\
    , \"CXXXII\", \"CXXXIII\", \"CXXXIV\", \"CXXXV\", \"CXXXVI\", \"CXXXVII\", \"\
    CXXXVIII\", \"CXXXIX\", \"CXL\", \"CL\", \"CLI\", \"CLX\", \"CLXX\", \"CLXXX\"\
    , \"CLXXXI\", \"CLXXXII\", \"CLXXXIII\", \"CLXXXIV\", \"CLXXXV\", \"CLXXXVI\"\
    , \"CLXXXVII\", \"CLXXXVIII\", \"CLXXXIX\", \"CLXL\", \"CLL\", \"CLII\", \"CLXII\"\
    , \"CLXIII\", \"CLXIV\", \"CLXV\", \"CLXVI\", \"CLXVII\", \"CLXVIII\", \"CLXIX\"\
    , \"CLXX\", \"CLXXI\", \"CLXXII\", \"CLXXIII\", \"CLXXIV\", \"CLXXV\", \"CLXXVI\"\
    , \"CLXXVII\", \"CLXXVIII\", \"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0ko4t1md.scala:10:1142 ---------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[31m\"I\"\e[0m, \e[31m\"II\"\e[0m, \e[31m\"\
    III\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"VI\"\e[0m, \e[31m\"VII\"\
    \e[0m, \e[31m\"VIII\"\e[0m, \e[31m\"IX\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"XI\"\e\
    [0m, \e[31m\"XII\"\e[0m, \e[31m\"XIII\"\e[0m, \e[31m\"XIV\"\e[0m, \e[31m\"XV\"\
    \e[0m, \e[31m\"XVI\"\e[0m, \e[31m\"XVII\"\e[0m, \e[31m\"XVIII\"\e[0m, \e[31m\"\
    XIX\"\e[0m, \e[31m\"XX\"\e[0m, \e[31m\"XXI\"\e[0m, \e[31m\"XXII\"\e[0m, \e[31m\"\
    XXIII\"\e[0m, \e[31m\"XXIV\"\e[0m, \e[31m\"XXV\"\e[0m, \e[31m\"XXVI\"\e[0m, \e\
    [31m\"XXVII\"\e[0m, \e[31m\"XXVIII\"\e[0m, \e[31m\"XXIX\"\e[0m, \e[31m\"XXX\"\e\
    [0m, \e[31m\"XXXI\"\e[0m, \e[31m\"XXXII\"\e[0m, \e[31m\"XXXIII\"\e[0m, \e[31m\"\
    XXXIV\"\e[0m, \e[31m\"XXXV\"\e[0m, \e[31m\"XXXVI\"\e[0m, \e[31m\"XXXVII\"\e[0m,\
    \ \e[31m\"XXXVIII\"\e[0m, \e[31m\"XXXIX\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"L\"\
    \e[0m, \e[31m\"LI\"\e[0m, \e[31m\"LXI\"\e[0m, \e[31m\"LXII\"\e[0m, \e[31m\"LXIII\"\
    \e[0m, \e[31m\"LXIV\"\e[0m, \e[31m\"LXV\"\e[0m, \e[31m\"LXVI\"\e[0m, \e[31m\"\
    LXVII\"\e[0m, \e[31m\"LXVIII\"\e[0m, \e[31m\"LXIX\"\e[0m, \e[31m\"LXX\"\e[0m,\
    \ \e[31m\"LXXI\"\e[0m, \e[31m\"LXXII\"\e[0m, \e[31m\"LXXIII\"\e[0m, \e[31m\"LXXIV\"\
    \e[0m, \e[31m\"LXXV\"\e[0m, \e[31m\"LXXVI\"\e[0m, \e[31m\"LXXVII\"\e[0m, \e[31m\"\
    LXXVIII\"\e[0m, \e[31m\"LXXIX\"\e[0m, \e[31m\"LXXX\"\e[0m, \e[31m\"LXXXI\"\e[0m,\
    \ \e[31m\"LXXXII\"\e[0m, \e[31m\"LXXXIII\"\e[0m, \e[31m\"LXXXIV\"\e[0m, \e[31m\"\
    LXXXV\"\e[0m, \e[31m\"LXXXVI\"\e[0m, \e[31m\"LXXXVII\"\e[0m, \e[31m\"LXXXVIII\"\
    \e[0m, \e[31m\"LXXXIX\"\e[0m, \e[31m\"XC\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"CI\"\
    \e[0m, \e[31m\"CIX\"\e[0m, \e[31m\"CX\"\e[0m, \e[31m\"CXX\"\e[0m, \e[31m\"CXXI\"\
    \e[0m, \e[31m\"CXXII\"\e[0m, \e[31m\"CXXIII\"\e[0m, \e[31m\"CXXIV\"\e[0m, \e[31m\"\
    CXXV\"\e[0m, \e[31m\"CXXVI\"\e[0m, \e[31m\"CXXVII\"\e[0m, \e[31m\"CXXVIII\"\e\
    [0m, \e[31m\"CXXIX\"\e[0m, \e[31m\"CXXX\"\e[0m, \e[31m\"CXXXI\"\e[0m, \e[31m\"\
    CXXXII\"\e[0m, \e[31m\"CXXXIII\"\e[0m, \e[31m\"CXXXIV\"\e[0m, \e[31m\"CXXXV\"\e\
    [0m, \e[31m\"CXXXVI\"\e[0m, \e[31m\"CXXXVII\"\e[0m, \e[31m\"CXXXVIII\"\e[0m, \e\
    [31m\"CXXXIX\"\e[0m, \e[31m\"CXL\"\e[0m, \e[31m\"CL\"\e[0m, \e[31m\"CLI\"\e[0m,\
    \ \e[31m\"CLX\"\e[0m, \e[31m\"CLXX\"\e[0m, \e[31m\"CLXXX\"\e[0m, \e[31m\"CLXXXI\"\
    \e[0m, \e[31m\"CLXXXII\"\e[0m, \e[31m\"CLXXXIII\"\e[0m, \e[31m\"CLXXXIV\"\e[0m,\
    \ \e[31m\"CLXXXV\"\e[0m, \e[31m\"CLXXXVI\"\e[0m, \e[31m\"CLXXXVII\"\e[0m, \e[31m\"\
    CLXXXVIII\"\e[0m, \e[3"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkvh28u9.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4apbyzsg.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4apbyzsg.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4apbyzsg.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4apbyzsg.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4apbyzsg.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousand =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numThousand = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9qlkce2_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9qlkce2_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9qlkce2_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9qlkce2_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /t"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkvh28u9.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_7_7lji.scala:34:51 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd_7_7lji.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[Int, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap7 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap10 = scala.collection.mutable.Map[Int, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap12 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap15 = scala.collection.mutable.Map[Int, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap17 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap20 = scala.collection.mutable.Map[Int, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap22 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap25 = scala.collection.mutable.Map[Int, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Int, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps218grb1.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprjlwmmbe.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprjlwmmbe.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum2 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum3 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val\
    \ romanNum4 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum6 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n   \
    \         \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n           \
    \ \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum10 = mutable.ArrayBuffer(\n            \"\
    M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romanNum11 = mutable.ArrayBuffer(\n            \"M\",\
    \ \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanNum12 = mutable.ArrayBuffer(\n            \"M\", \"\
    D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n     \
    \   )\n        val romanNum13 = mutable.ArrayBuffer(\n            \"M\", \"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpve2lz50m.scala:49:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            \e[31m\"M\"\e[0m, \"\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve2lz50m.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpve2lz50m.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpve2lz50m.scala:15:24 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum2\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpve2lz50m.scala:18:24 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum3\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpve2lz50m.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum4\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      while(number > 0) {\n            val digit = number % 10\n            number\
    \ /= 10\n            if(digit > lastDigit) {\n                roman += romanDigit(lastDigit)\n\
    \            }\n            roman += romanDigit(digit)\n            lastDigit\
    \ = digit\n        }\n        roman\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8a4xsixt.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8a4xsixt.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                roman +=\
    \ romanDigit(lastDigit)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of String - did you mean String.!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8a4xsixt.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                roman += romanDigit(lastDigit)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8a4xsixt.scala:18:18 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            roman += romanDigit(digit)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean String.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8a4xsixt.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            roman += romanDigit(digit)\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: romanDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8a4xsixt.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            lastDigit = digit\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Found:    (digit : Long)\n\e[31m   |\e[0m                \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660010586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romansLength = romans.length\n        val romansIndex\
    \ = romans.indexWhere(_ == romans(romansLength - 1))\n        val romansIndex2\
    \ = romans.indexWhere(_ == romansIndex)\n        val romansIndex3 = romans.indexWhere(_\
    \ == romansIndex2)\n        val romansIndex4 = romans.indexWhere(_ == romansIndex3)\n\
    \        val romansIndex5 = romans.indexWhere(_ == romansIndex4)\n        val\
    \ romansIndex6 = romans.indexWhere(_ == romansIndex5)\n        val romansIndex7\
    \ = romans.indexWhere(_ == romansIndex6)\n        val romansIndex8 = romans.indexWhere(_\
    \ == romansIndex7)\n        val romansIndex9 = romans.indexWhere(_ == romansIndex8)\n\
    \        val romansIndex10 = romans.indexWhere(_ == romansIndex9)\n        val\
    \ romansIndex11 = romans.indexWhere(_ == romansIndex10)\n        val romansIndex12\
    \ = romans.indexWhere(_ == romansIndex11)\n        val romansIndex13 = romans.indexWhere(_\
    \ == romansIndex12)\n        val romansIndex14 = romans.indexWhere(_ == romansIndex13)\n\
    \        val romansIndex15 = romans.indexWhere(_ == romansIndex14)\n        val\
    \ romansIndex16 = romans.indexWhere(_ == romansIndex15)\n        val romansIndex17\
    \ = romans.indexWhere(_ == romansIndex16)\n        val romansIndex18 = romans.indexWhere(_\
    \ == romansIndex17)\n        val romansIndex19 = romans.indexWhere(_ == romansIndex18)\n\
    \        val romansIndex20 = romans.indexWhere(_ == romansIndex19)\n        val\
    \ romansIndex21 = romans.indexWhere(_ == romansIndex20)\n        val romansIndex22\
    \ = romans.indexWhere(_ == romansIndex21)\n        val romansIndex23 = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplof59iq_.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mromansIndex23\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplof59iq_.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplof59iq_.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var remainder = number\n        while(number > 0){\n            val remainderDigit\
    \ = remainder % 100\n            roman.append(romanDigitToChar(remainderDigit))\n\
    \            remainder = remainder / 100\n        }\n        roman.toString().toLower\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrl88cl4.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            roman.append(romanDigitToChar(remainderDigit))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                         Not found: romanDigitToChar\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfrl88cl4.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        roman.toString().toLower\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value toLower\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ArrayBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpba8tmf4l.scala:34:51 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpba8tmf4l.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsMap = {\n            val numsMap = new scala.collection.mutable.HashMap[Int,\
    \ Int]\n            for(i <- 1 to number) {\n                numsMap(i) = numsMap.getOrElse(i,\
    \ 0) + i\n            }\n            numsMap\n        }\n        val digitsMap\
    \ = {\n            val digitsMap = new scala.collection.mutable.HashMap[Int, Int]\n\
    \            for(i <- 1 to number) {\n                digitsMap(i) = digitsMap.getOrElse(i,\
    \ 0) + i\n            }\n            digitsMap\n        }\n        val tensMap\
    \ = {\n            val tensMap = new scala.collection.mutable.HashMap[Int, Int]\n\
    \            for(i <- 1 to number) {\n                tensMap(i) = tensMap.getOrElse(i,\
    \ 0) + i\n            }\n            tensMap\n        }\n        val hundredsMap\
    \ = {\n            val hundredsMap = new scala.collection.mutable.HashMap[Int,\
    \ Int]\n            for(i <- 1 to number) {\n                hundredsMap(i) =\
    \ hundredsMap.getOrElse(i, 0) + i\n            }\n            hundredsMap\n  \
    \      }\n        val thousandsMap = {\n            val thousandsMap = new scala.collection.mutable.HashMap[Int,\
    \ Int]\n            for(i <- 1 to number) {\n                thousandsMap(i) =\
    \ thousandsMap.getOrElse(i, 0) + i\n            }\n            thousandsMap\n\
    \        }\n        for(i <- 1 to number) {\n            val num = numsMap(i)\n\
    \            val digit = digitsMap(i)\n            val tens = tensMap(i)\n   \
    \         val hundreds = hundredsMap(i)\n            val thousands = thousandsMap(i)\n\
    \            val romanDigit = if (num < 1000) \"M\" else if (num < 1000000) num\
    \ / 1000 % 10 + \"C\" else if (num < 1000000000) num / 1000000 % 10 + \"L\" else\
    \ if (num < 1000000000000) num / 1000000000 % 10 + \"X\" else if (num < 100000000000000\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5mp048iu.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5mp048iu.scala:76:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp5mp048iu.scala:17:26 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            \e[33mfor\e[0m(i <- \e[31m1\e[0m to number) {\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Found:    (number : Long)\n\e[31m   |\e[0m                  \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mp048iu.scala:24:26\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(i\
    \ <- \e[31m1\e[0m to number) {\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (number : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5mp048iu.scala:31:26 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mfor\e[0m(i <- \e[31m1\e[0m to number)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    (number : Long)\n\e[31m   |\e[0m      \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5mp048iu.scala:38:26 --------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m            \e[33mfor\e[0m(i <- \e[31m1\e[0m to number) {\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             Found:    (number : Long)\n\e[31m   |\e[0m                     \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ wh"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLen =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scal\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbf0flik5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbf0flik5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbf0flik5.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbf0flik5.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m"
  stdout: ''
  timestamp: 1660010588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsMap = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap4 = scala.collection.mutable.Map[Long, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap6 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap9 = scala.collection.mutable.Map[Long, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap11 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap14 = scala.collection.mutable.Map[Long, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap16 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap19 = scala.collection.mutable.Map[Long, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap21 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap24 = scala.collection.mutable.Map[Long, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap26 = scala.collection.mutable.Map[Long,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ww2uc_t.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       var i = 0\n        while (i < numsArrayLength) {\n            val num\
    \ = numsArray(i).toInt\n            val numString = num.toString.reverse\n   \
    \         val numArray = numString.toCharArray\n            val numArrayLength\
    \ = numArray.length\n            val numArraySum = numArray.reduceLeft(_ + _)\n\
    \            val numArraySumString = numArraySum.toString.reverse\n          \
    \  val numArraySumArray = numArraySumString.toCharArray\n            val numArraySumArrayLength\
    \ = numArraySumArray.length\n            val numArraySumArraySum = numArraySumArray.reduceLeft(_\
    \ + _)\n            val numArraySumArraySumString = numArraySumArraySum.toString.reverse\n\
    \            val numArraySumArraySumArray = numArraySumArraySumString.toCharArray\n\
    \            val numArraySumArraySumArrayLength = numArraySumArraySumArray.length\n\
    \            val numArraySumArraySumArraySum = numArraySumArraySumArray.reduceLeft(_\
    \ + _)\n            val numArraySumArraySumArraySumString = numArraySumArraySumArraySum.toString.reverse\n\
    \            val numArraySumArraySumArraySumArray = numArraySumArraySumArraySumArray.toCharArray\n\
    \            val numArraySumArraySumArraySumArrayLength = numArraySumArraySumArraySumArray.length\n\
    \            val numArraySumArraySumArraySumArraySum = numArraySumArraySumArraySumArray.reduceLeft(_\
    \ + _)\n            val numArraySumArraySumArraySumArraySumString = numArraySumArraySumArraySumArraySum.toString.reverse\n\
    \            val numArraySumArraySumArraySumArraySumArray = numArraySumArraySumArraySumArraySumArray.toCharArray\n\
    \            val numArraySumArraySumArraySumArraySumArrayLength = numArraySumArraySumArraySumArraySumArray.length\n\
    \            val numArraySumArraySumArraySumArraySumArraySum = numArraySumArraySumArraySumArraySumArray.reduceLeft(_\
    \ + _)\n            val numArraySumArraySumArraySumArraySumArraySumString = numArraySumArraySumArraySumArraySumArraySum.toString.reverse\n\
    \            val numArray\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq06g708.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeq06g708.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpeq06g708.scala:9:20 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpeq06g708.scala:20:50 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnumArraySum\e[0m = numArray.reduceLeft(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                                \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Int\n\e[31m   |\e[0m                                           \
    \       Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeq06g708.scala:24:66\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mnumArraySumArraySum\e[0m = numArraySumArray.reduceLeft(_ + _)\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Int\n\e[31m   |\e[0m                                             \
    \             Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeq06g708.scala:28:82 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            \e[33mval\e[0m \e[36mnumArraySumArraySumArraySum\e[0m = numArraySumArraySumArray.reduceLeft(_\
    \ + _)\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigitIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndexIndexIndexIndexIndexIndexIndexIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmponuzk0k5.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmponuzk0k5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndexIndexIndexIndexIndexIndexIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxDigitIndexIndexIndexIndexIndexIndexIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmponuzk0k5.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndexIndexIndexIndexIndexIndexIndexIndex is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxDigitIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmponuzk0k5.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxDigitIndexIndexIndexIndexIndexIndexIndexIndex\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndexIndexIndexIndexIndexIndexIndexIndex is already\
    \ defi"
  stdout: ''
  timestamp: 1660010589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7odpwubu.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ romanNum = number\n        while (romanNum > 0) {\n            romanNum = romanNum\
    \ / 10\n            romans += romanNum.toString\n        }\n        romans.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpys4_b076.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        romans.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap2 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap3 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap4 = scala.collection.mutable.HashMap.empty[Int, Int]\n   \
    \     val numsMap5 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap6 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap9 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap10 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap12 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap13 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap14 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap17 =\
    \ scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap18 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap21 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap22 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap23 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0gely8d2.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0gely8d2.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkvh28u9.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val num\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbutu_fw.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdbutu_fw.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdbutu_fw.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdbutu_fw.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdbutu_fw.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mval"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqy9kki_2.scala:34:51 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqy9kki_2.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsMap = scala.collection.mutable.Map[Int, Int]()\n        val digitsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val tensMap = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val hundredsMap = scala.collection.mutable.Map[Int, Int]()\n\
    \        val thousandsMap = scala.collection.mutable.Map[Int, Int]()\n       \
    \ val numsMap2 = scala.collection.mutable.Map[Int, Int]()\n        val digitsMap2\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val tensMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val hundredsMap2 = scala.collection.mutable.Map[Int, Int]()\n\
    \        val thousandsMap2 = scala.collection.mutable.Map[Int, Int]()\n      \
    \  val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n        val digitsMap3\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val tensMap3 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val hundredsMap3 = scala.collection.mutable.Map[Int, Int]()\n\
    \        val thousandsMap3 = scala.collection.mutable.Map[Int, Int]()\n      \
    \  val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val digitsMap4\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val tensMap4 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val hundredsMap4 = scala.collection.mutable.Map[Int, Int]()\n\
    \        val thousandsMap4 = scala.collection.mutable.Map[Int, Int]()\n      \
    \  val numsMap5 = scala.collection.mutable.Map[Int, Int]()\n        val digitsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val tensMap5 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz6fncmji.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"I\", \"II\", \"III\"\
    , \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"\
    XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\"\
    , \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LX\", \"LXI\",\
    \ \"LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"\
    LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\"\
    , \"LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\"\
    , \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"\
    XC\", \"C\", \"CI\", \"CX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\"\
    , \"CXXV\", \"CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\", \"CXXX\", \"CXXXI\"\
    , \"CXXXII\", \"CXXXIII\", \"CXXXIV\", \"CXXXV\", \"CXXXVI\", \"CXXXVII\", \"\
    CXXXVIII\", \"CXXXIX\", \"CXL\", \"CL\", \"CLI\", \"CLX\", \"CLXI\", \"CLXII\"\
    , \"CLXIII\", \"CLXIV\", \"CLXV\", \"CLXVI\", \"CLXVII\", \"CLXVIII\", \"CLXIX\"\
    , \"CLXX\", \"CLXXI\", \"CLXXII\", \"CLXXIII\", \"CLXXIV\", \"CLXXV\", \"CLXXVI\"\
    , \"CLXXVII\", \"CLXXVIII\", \"CLXXIX\", \"CLXXX\", \"CLXXXI\", \"CLXXXII\", \"\
    CLXXXIII\", \"CLXXXIV\", \"CLXXXV\", \"CLXXXVI\", \"CLXXXVII\", \"CLXXXVIII\"\
    , \"CLXXXIX\", \"CLXL\", \"CLL\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0_lfyozz.scala:10:1136 ---------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[31m\"I\"\e[0m, \e[31m\"II\"\e[0m, \e[31m\"\
    III\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"VI\"\e[0m, \e[31m\"VII\"\
    \e[0m, \e[31m\"VIII\"\e[0m, \e[31m\"IX\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"XI\"\e\
    [0m, \e[31m\"XII\"\e[0m, \e[31m\"XIII\"\e[0m, \e[31m\"XIV\"\e[0m, \e[31m\"XV\"\
    \e[0m, \e[31m\"XVI\"\e[0m, \e[31m\"XVII\"\e[0m, \e[31m\"XVIII\"\e[0m, \e[31m\"\
    XIX\"\e[0m, \e[31m\"XX\"\e[0m, \e[31m\"XXI\"\e[0m, \e[31m\"XXII\"\e[0m, \e[31m\"\
    XXIII\"\e[0m, \e[31m\"XXIV\"\e[0m, \e[31m\"XXV\"\e[0m, \e[31m\"XXVI\"\e[0m, \e\
    [31m\"XXVII\"\e[0m, \e[31m\"XXVIII\"\e[0m, \e[31m\"XXIX\"\e[0m, \e[31m\"XXX\"\e\
    [0m, \e[31m\"XXXI\"\e[0m, \e[31m\"XXXII\"\e[0m, \e[31m\"XXXIII\"\e[0m, \e[31m\"\
    XXXIV\"\e[0m, \e[31m\"XXXV\"\e[0m, \e[31m\"XXXVI\"\e[0m, \e[31m\"XXXVII\"\e[0m,\
    \ \e[31m\"XXXVIII\"\e[0m, \e[31m\"XXXIX\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"L\"\
    \e[0m, \e[31m\"LI\"\e[0m, \e[31m\"LX\"\e[0m, \e[31m\"LXI\"\e[0m, \e[31m\"LXII\"\
    \e[0m, \e[31m\"LXIII\"\e[0m, \e[31m\"LXIV\"\e[0m, \e[31m\"LXV\"\e[0m, \e[31m\"\
    LXVI\"\e[0m, \e[31m\"LXVII\"\e[0m, \e[31m\"LXVIII\"\e[0m, \e[31m\"LXIX\"\e[0m,\
    \ \e[31m\"LXX\"\e[0m, \e[31m\"LXXI\"\e[0m, \e[31m\"LXXII\"\e[0m, \e[31m\"LXXIII\"\
    \e[0m, \e[31m\"LXXIV\"\e[0m, \e[31m\"LXXV\"\e[0m, \e[31m\"LXXVI\"\e[0m, \e[31m\"\
    LXXVII\"\e[0m, \e[31m\"LXXVIII\"\e[0m, \e[31m\"LXXIX\"\e[0m, \e[31m\"LXXX\"\e\
    [0m, \e[31m\"LXXXI\"\e[0m, \e[31m\"LXXXII\"\e[0m, \e[31m\"LXXXIII\"\e[0m, \e[31m\"\
    LXXXIV\"\e[0m, \e[31m\"LXXXV\"\e[0m, \e[31m\"LXXXVI\"\e[0m, \e[31m\"LXXXVII\"\e\
    [0m, \e[31m\"LXXXVIII\"\e[0m, \e[31m\"LXXXIX\"\e[0m, \e[31m\"XC\"\e[0m, \e[31m\"\
    C\"\e[0m, \e[31m\"CI\"\e[0m, \e[31m\"CX\"\e[0m, \e[31m\"CXX\"\e[0m, \e[31m\"CXXI\"\
    \e[0m, \e[31m\"CXXII\"\e[0m, \e[31m\"CXXIII\"\e[0m, \e[31m\"CXXIV\"\e[0m, \e[31m\"\
    CXXV\"\e[0m, \e[31m\"CXXVI\"\e[0m, \e[31m\"CXXVII\"\e[0m, \e[31m\"CXXVIII\"\e\
    [0m, \e[31m\"CXXIX\"\e[0m, \e[31m\"CXXX\"\e[0m, \e[31m\"CXXXI\"\e[0m, \e[31m\"\
    CXXXII\"\e[0m, \e[31m\"CXXXIII\"\e[0m, \e[31m\"CXXXIV\"\e[0m, \e[31m\"CXXXV\"\e\
    [0m, \e[31m\"CXXXVI\"\e[0m, \e[31m\"CXXXVII\"\e[0m, \e[31m\"CXXXVIII\"\e[0m, \e\
    [31m\"CXXXIX\"\e[0m, \e[31m\"CXL\"\e[0m, \e[31m\"CL\"\e[0m, \e[31m\"CLI\"\e[0m,\
    \ \e[31m\"CLX\"\e[0m, \e[31m\"CLXI\"\e[0m, \e[31m\"CLXII\"\e[0m, \e[31m\"CLXIII\"\
    \e[0m, \e[31m\"CLXIV\"\e[0m, \e[31m\"CLXV\"\e[0m, \e[31m\"CLXVI\"\e[0m, \e[31m\"\
    CLXVII\"\e[0m, \e[31m\"CLXVIII\"\e[0m, \e[31m\"CLXIX\"\e[0m, \e[31m\"CLXX\"\e\
    [0m, \e[31m\"CLXXI\"\e[0m, \e["
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum2 = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\"\
    , \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romanNum3 = mutable.ArrayBuffer(\n            \"M\", \"\
    D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n     \
    \   )\n        val romanNum4 = mutable.ArrayBuffer(\n            \"M\", \"CM\"\
    , \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum5 = mutable.ArrayBuffer(\n            \"M\"\
    , \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanNum6 = mutable.ArrayBuffer(\n            \"M\", \"\
    CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n           \
    \ \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum10 = mutable.ArrayBuffer(\n          \
    \  \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\",\
    \ \"V\", \"IV\", \"I\"\n        )\n        val romanNum11 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNum12 = mutable.ArrayBuffer(\n  \
    \          \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\",\
    \ \"IX\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58z6s80m.scala:46:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            \e[31m\"M\"\e[0m, \e[31m\"CM\"\e[0m, \e[31m\"\
    D\"\e[0m, \e[31m\"CD\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"XC\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"XL\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"IX\"\e[0m, \"\n\e[31m\e[31m\
    \   |\e[0m                                                                   ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58z6s80m.scala:9:20\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m  |\e[0m                  \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp58z6s80m.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp58z6s80m.scala:15:24 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mromanNum2\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp58z6s80m.scala:18:24 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mromanNum3\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp58z6s80m.scala:21:24 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var i = 0\n        while (i < number) {\n \
    \           roman += romans(number%10)\n            number /= 10\n           \
    \ i += 1\n        }\n        roman\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpinix1nbd.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman += romans(number%\e[31m10\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpinix1nbd.scala:12:21 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            roman += romans(number%\e[31m10\e[0m)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \      Not found: romans\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpinix1nbd.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tens = scala.collection.mutable.ListBuffer[Int]()\n        val hundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp442fyzzd.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp442fyzzd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp442fyzzd.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp442fyzzd.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp442fyzzd.scala:27:12 -----"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\")\n        val nums = scala.collection.mutable.ArrayBuffer(\n     \
    \       \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\")\n        val numsCount = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount2 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount3 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount4 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount5 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount6 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount7 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount8 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount9 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount10 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount11 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount12 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount13 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount14 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount15 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount16 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount17 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount18 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount19 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount20 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount21 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount22 = scala.collection.mutable.ArrayBuffer(\n\
    \            0, 0, 0, 0, 0, 0, 0, 0)\n        val numsCount23 = scala.collection.mutable.ArrayBuffer(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvdil9jgq.scala:57:63 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mnumsCount23\e[0m = scala.collection.mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvdil9jgq.scala:58:5 ---------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        while (number > 0) {\n\
    \            num = number % 10\n            roman = roman.concat(num.toString)\n\
    \            number /= 10\n        }\n        return roman\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg0mf_scl.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            num = number % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Found:    Long\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg0mf_scl.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            number /= \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value /= is not a member of Long - did you mean number.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigitsInReverse = scala.collection.mutable.ListBuffer[Int]()\n     \
    \   val numsDigitsInReverse2 = scala.collection.mutable.ListBuffer[Int]()\n  \
    \      val numsDigitsInReverse3 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse4 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse5 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse6 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse7 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse8 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse9 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse10 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse11 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse12 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse13 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse14 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse15 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse16 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse17 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse18 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse19 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse20 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse21 = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigitsInReverse22 = scala.collection.mutable.ListBuffer\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30d44p4h.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val romanDigits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxRoman = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ minRoman = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxNum\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val minNum = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxNumDigit = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val minNumDigit = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxNumRoman = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val minNumRoman = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ maxNumDigitRoman = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ minNumDigitRoman = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ maxNumRomanDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ minNumRomanDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ maxNumRomanDigitRoman = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val minNumRomanDigitRoman = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxNumDigitRomanDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minNumDigitRomanDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxNumRomanDigitRomanDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minNumRomanDigitRomanDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxNumDigitRomanDigitRoman = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minNumDigitRomanDigitRoman = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxNumRomanDigitRoman\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wwhckem.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6wwhckem.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1gg2y0a.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1gg2y0a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1gg2y0a.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk1gg2y0a.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      var lastDigitCount = 0\n        var lastDigitCount2 = 0\n        var lastDigitCount3\
    \ = 0\n        var lastDigitCount4 = 0\n        var lastDigitCount5 = 0\n    \
    \    var lastDigitCount6 = 0\n        var lastDigitCount7 = 0\n        var lastDigitCount8\
    \ = 0\n        var lastDigitCount9 = 0\n        var lastDigitCount10 = 0\n   \
    \     var lastDigitCount11 = 0\n        var lastDigitCount12 = 0\n        var\
    \ lastDigitCount13 = 0\n        var lastDigitCount14 = 0\n        var lastDigitCount15\
    \ = 0\n        var lastDigitCount16 = 0\n        var lastDigitCount17 = 0\n  \
    \      var lastDigitCount18 = 0\n        var lastDigitCount19 = 0\n        var\
    \ lastDigitCount20 = 0\n        var lastDigitCount21 = 0\n        var lastDigitCount22\
    \ = 0\n        var lastDigitCount23 = 0\n        var lastDigitCount24 = 0\n  \
    \      var lastDigitCount25 = 0\n        var lastDigitCount26 = 0\n        var\
    \ lastDigitCount27 = 0\n        var lastDigitCount28 = 0\n        var lastDigitCount29\
    \ = 0\n        var lastDigitCount30 = 0\n        var lastDigitCount31 = 0\n  \
    \      var lastDigitCount32 = 0\n        var lastDigitCount33 = 0\n        var\
    \ lastDigitCount34 = 0\n        var lastDigitCount35 = 0\n        var lastDigitCount36\
    \ = 0\n        var lastDigitCount37 = 0\n        var lastDigitCount38 = 0\n  \
    \      var lastDigitCount39 = 0\n        var lastDigitCount40 = 0\n        var\
    \ lastDigitCount41 = 0\n        var lastDigitCount42 = 0\n        var lastDigitCount43\
    \ = 0\n        var lastDigitCount44 = 0\n        var lastDigitCount45 = 0\n  \
    \      var lastDigitCount46 = 0\n        var lastDigitCount47 = 0\n        var\
    \ lastDigitCount48 = 0\n        var lastDigitCount49 = 0\n        var lastDigitCount50\
    \ = 0\n        var lastDigitCount51 = 0\n        var lastDigitCount52 = 0\n  \
    \      var lastDigitCount53 = 0\n        var lastDigitCount54 = 0\n        var\
    \ lastDigitCount55 = 0\n        var lastDigitCount56 = 0\n        var lastDigitCount57\
    \ = 0\n        var lastDigitCount58 = 0\n        var lastDigitCount59 = 0\n  \
    \      var lastDigitCount60 = 0\n        var lastDigitCount61 = 0\n        var\
    \ lastDigitCount62 = 0\n        var lastDigitCount63 = 0\n        var lastDigitCount64\
    \ = 0\n        var lastDigitCount65 = 0\n        var lastDigitCount66 = 0\n  \
    \      var lastDigitCount67 = 0\n        var lastDigitCount68 = 0\n        var\
    \ lastDigitCount69 = 0\n        var lastDigitCount70 = 0\n        var lastDigitCount71\
    \ = 0\n        var last\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_e0pdmjj.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_e0pdmjj.scala:84:5 ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe9bloi8h.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe9bloi8h.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe9bloi8h.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe9bloi8h.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /t"
  stdout: ''
  timestamp: 1660010597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousand = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousand =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numThousand = scala.collection.mutable.ListBuffer.empty[\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8wjjba07.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8wjjba07.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8wjjba07.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8wjjba07.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8wjjba07.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already d"
  stdout: ''
  timestamp: 1660010598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toString.toInt\n            val romanDigit\
    \ = digit - num % 10\n            roman.append(romanDigit.toString)\n        }\n\
    \        roman.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsoikoc4r.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpsoikoc4r.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpsoikoc4r.scala:12:22 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9d53ol66.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9d53ol66.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9d53ol66.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9d53ol66.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9d53ol66.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ digitsLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val digitsNums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNums = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsNumsLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsNumsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsNumsNums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsLen = scala.collection.mutable.ListBuffer[Int]()\n  \
    \      val numsNumsNumsDigits = scala.collection.mutable.ListBuffer[Int]()\n \
    \       val numsNumsNumsNums = scala.collection.mutable.ListBuffer[Int]()\n  \
    \      val numsNumsNumsNumsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsNums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsNumsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsNumsDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsNumsNums = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsNumsNumsNumsNumsNumsLen\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphbr1yh61.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphbr1yh61.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsMap = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap4 = scala.collection.mutable.Map[Long, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap6 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap9 = scala.collection.mutable.Map[Long, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap11 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap14 = scala.collection.mutable.Map[Long, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap16 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap19 = scala.collection.mutable.Map[Long, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap21 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap24 = scala.collection.mutable.Map[Long, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap26 = scala.collection.mutable.Map[Long,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ww2uc_t.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer.empty[String]\n        romans += \"\
    M\"\n        romans += \"CM\"\n        romans += \"D\"\n        romans += \"CD\"\
    \n        romans += \"C\"\n        romans += \"XC\"\n        romans += \"L\"\n\
    \        romans += \"XL\"\n        romans += \"X\"\n        romans += \"IX\"\n\
    \        romans += \"V\"\n        romans += \"IV\"\n        romans += \"I\"\n\
    \        val roman = romans.toList\n        val romanString = roman.map(x => x.charAt(0).toLowerCase\
    \ + x.substring(1)).mkString(\"\")\n        val romanNumber = roman.map(x => x.charAt(0).toUpperCase\
    \ + x.substring(1)).mkString(\"\")\n        val romanNumberInt = romanNumber.toInt\n\
    \        val romanNumberIntInt = romanNumberInt.toInt\n        val romanNumberIntIntInt\
    \ = romanNumberIntInt.toInt\n        val romanNumberIntIntIntInt = romanNumberIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntInt = romanNumberIntIntIntInt.toInt\n    \
    \    val romanNumberIntIntIntIntIntInt = romanNumberIntIntIntIntInt.toInt\n  \
    \      val romanNumberIntIntIntIntIntIntInt = romanNumberIntIntIntIntIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntIntIntIntInt = romanNumberIntIntIntIntIntIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntIntIntIntIntInt = romanNumberIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntIntIntIntIntIntIntInt = romanNumberIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntIntIntIntIntIntIntIntIntInt = romanNumberIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntIntIntIntIntIntIntIntIntIntInt = romanNumberIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val romanNumberIntIntIntIntIntInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5z1lha_e.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5z1lha_e.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mromans\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m \
    \ |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                    \
    \ Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5z1lha_e.scala:32:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mromanNumberIntIntIntIntIntIntInt\e[0m = romanNumberIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35mromanNumberIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5z1lha_e.scala:33:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mromanNumberIntIntIntIntIntIntIntInt\e[0m = romanNumberIntIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mromanNumberIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5z1lha_e.scala:34:53\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mromanNumberIntIntIntIntIntIntIntIntInt\e[0m = romanNumberIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: romanNumberIntIntIntIntIntIntIntIntIntInt\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling wit"
  stdout: ''
  timestamp: 1660010601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tens = scala.collection.mutable.ListBuffer[Int]()\n        val hundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvzyjbjjr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvzyjbjjr.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvzyjbjjr.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvzyjbjjr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvzyjbjjr.scala:27:12 -----"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsDigits = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsDigit = scala.collection.mutable.ListBuffer\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe8nqck18.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe8nqck18.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe8nqck18.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe8nqck18.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe8nqck18.scala:18:12 ---------"
  stdout: ''
  timestamp: 1660010601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsMap = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap2 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap3 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap4 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap5 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap6 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap7 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap8 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap9 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap10 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap11 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap12 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap13 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap14 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap15 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap16 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap17 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap18 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap19 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap20 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap21 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap22 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap23 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n        val numsMap24 = new\
    \ scala.collection.mutable.HashMap[Long, String]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1pi3t7pm.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer.empty[String]\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsMap = mutable.HashMap[Long, String]()\n        val numsMap2 =\
    \ mutable.HashMap[Long, String]()\n        val numsMap3 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap4 = mutable.HashMap[Long, String]()\n        val\
    \ numsMap5 = mutable.HashMap[Long, String]()\n        val numsMap6 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap7 = mutable.HashMap[Long, String]()\n        val\
    \ numsMap8 = mutable.HashMap[Long, String]()\n        val numsMap9 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap10 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap11 = mutable.HashMap[Long, String]()\n        val numsMap12 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap13 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap14 = mutable.HashMap[Long, String]()\n        val numsMap15 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap16 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap17 = mutable.HashMap[Long, String]()\n        val numsMap18 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap19 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap20 = mutable.HashMap[Long, String]()\n        val numsMap21 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap22 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap23 = mutable.HashMap[Long, String]()\n        val numsMap24 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap25 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap26 = mutable.HashMap[Long, String]()\n        val numsMap27 = mutable.HashMap[Long,\
    \ String]()\n        val numsMap28 = mutable.HashMap[Long, String]()\n       \
    \ val numsMap29 = mutable.HashMap[Long, String]()\n        val numsMap\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnhrprxd5.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhrprxd5.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mromans\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m \
    \ |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                    \
    \ Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhrprxd5.scala:10:19\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhrprxd5.scala:11:22\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsMap\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnhrprxd5.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsMap2\e[0m = mutable.HashMap[\e[35mLong\e[0m,\
    \ \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhrprxd5.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsMap3\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: "
  stdout: ''
  timestamp: 1660010601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val\
    \ digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val digitsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz00yjbwp.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz00yjbwp.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var index = 0\n        while (number > 0) {\n            val remainder =\
    \ number % 10\n            roman(index) = roman(index).ord + remainder\n     \
    \       number /= 10\n            index += 1\n        }\n        roman.map(_.toChar).mkString.toLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_67xk0r.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            roman(index) = roman(index).ord + remainder\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value ord is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9_67xk0r.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_67xk0r.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        roman.map(_.toChar).mkString.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          value toChar is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsString =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString3 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString4 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString6 = scala.collection.mutable.ListBuffer[String]()\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString9 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsString11 = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsString12 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString13 = scala.collection.mutable.ListBuffer[String]()\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString15 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString17 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString18 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString19 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString21 = scala.collection.mutable.ListBuffer[String]()\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString23 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString25 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcdywmmwh.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romanNum = number / 100\n        val romanDigit = number\
    \ % 100\n        val roman = romans(romanNum)\n        val romanDigitStr = romanDigit.map(_.toString).getOrElse(\"\
    I\")\n        val romanStr = romanStr + romanDigitStr\n        romanStr\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrg14hkq.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfrg14hkq.scala:15:39 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mromanDigitStr\e[0m = romanDigit.map(_.toString).getOrElse(\e\
    [31m\"I\"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value map is not a member of Long\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfrg14hkq.scala:16:23 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mromanStr\e[0m = romanStr\
    \ + romanDigitStr\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Recursive \e[33mvalue\e[0m \e[35mromanStr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"I\", \"II\", \"III\"\
    , \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"\
    XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\"\
    , \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LXI\", \"LXII\"\
    , \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\", \"\
    LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\"\
    , \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIV\"\
    , \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\"\
    , \"CI\", \"CIX\", \"CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"\
    CXVI\", \"CXVII\", \"CXVIII\", \"CXIX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\"\
    , \"CXXIV\", \"CXXV\", \"CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\", \"CXXX\"\
    , \"CXXXI\", \"CXXXII\", \"CXXXIII\", \"CXXXIV\", \"CXXXV\", \"CXXXVI\", \"CXXXVII\"\
    , \"CXXXVIII\", \"CXXXIX\", \"CM\", \"M\", \"MI\", \"MII\", \"MIII\", \"MIIV\"\
    , \"MIV\", \"MIVI\", \"MIVII\", \"MIVIII\", \"MIVIV\", \"MIVV\", \"MIVVI\", \"\
    MIVVII\", \"MIVVIII\", \"MIVIX\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\"\
    , \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"\
    MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"\
    MMMMMMMM\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_6ir__ij.scala:10:1188 ---------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[31m\"I\"\e[0m, \e[31m\"II\"\e[0m, \e[31m\"\
    III\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"VI\"\e[0m, \e[31m\"VII\"\
    \e[0m, \e[31m\"VIII\"\e[0m, \e[31m\"IX\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"XI\"\e\
    [0m, \e[31m\"XII\"\e[0m, \e[31m\"XIII\"\e[0m, \e[31m\"XIV\"\e[0m, \e[31m\"XV\"\
    \e[0m, \e[31m\"XVI\"\e[0m, \e[31m\"XVII\"\e[0m, \e[31m\"XVIII\"\e[0m, \e[31m\"\
    XIX\"\e[0m, \e[31m\"XX\"\e[0m, \e[31m\"XXI\"\e[0m, \e[31m\"XXII\"\e[0m, \e[31m\"\
    XXIII\"\e[0m, \e[31m\"XXIV\"\e[0m, \e[31m\"XXV\"\e[0m, \e[31m\"XXVI\"\e[0m, \e\
    [31m\"XXVII\"\e[0m, \e[31m\"XXVIII\"\e[0m, \e[31m\"XXIX\"\e[0m, \e[31m\"XXX\"\e\
    [0m, \e[31m\"XXXI\"\e[0m, \e[31m\"XXXII\"\e[0m, \e[31m\"XXXIII\"\e[0m, \e[31m\"\
    XXXIV\"\e[0m, \e[31m\"XXXV\"\e[0m, \e[31m\"XXXVI\"\e[0m, \e[31m\"XXXVII\"\e[0m,\
    \ \e[31m\"XXXVIII\"\e[0m, \e[31m\"XXXIX\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"L\"\
    \e[0m, \e[31m\"LI\"\e[0m, \e[31m\"LXI\"\e[0m, \e[31m\"LXII\"\e[0m, \e[31m\"LXIII\"\
    \e[0m, \e[31m\"LXIV\"\e[0m, \e[31m\"LXV\"\e[0m, \e[31m\"LXVI\"\e[0m, \e[31m\"\
    LXVII\"\e[0m, \e[31m\"LXVIII\"\e[0m, \e[31m\"LXIX\"\e[0m, \e[31m\"LXX\"\e[0m,\
    \ \e[31m\"LXXI\"\e[0m, \e[31m\"LXXII\"\e[0m, \e[31m\"LXXIII\"\e[0m, \e[31m\"LXXIV\"\
    \e[0m, \e[31m\"LXXV\"\e[0m, \e[31m\"LXXVI\"\e[0m, \e[31m\"LXXVII\"\e[0m, \e[31m\"\
    LXXVIII\"\e[0m, \e[31m\"LXXIX\"\e[0m, \e[31m\"LXXX\"\e[0m, \e[31m\"LXXXI\"\e[0m,\
    \ \e[31m\"LXXXII\"\e[0m, \e[31m\"LXXXIII\"\e[0m, \e[31m\"LXXXIV\"\e[0m, \e[31m\"\
    LXXXV\"\e[0m, \e[31m\"LXXXVI\"\e[0m, \e[31m\"LXXXVII\"\e[0m, \e[31m\"LXXXVIII\"\
    \e[0m, \e[31m\"LXXXIX\"\e[0m, \e[31m\"XC\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"CI\"\
    \e[0m, \e[31m\"CIX\"\e[0m, \e[31m\"CX\"\e[0m, \e[31m\"CXI\"\e[0m, \e[31m\"CXII\"\
    \e[0m, \e[31m\"CXIII\"\e[0m, \e[31m\"CXIV\"\e[0m, \e[31m\"CXV\"\e[0m, \e[31m\"\
    CXVI\"\e[0m, \e[31m\"CXVII\"\e[0m, \e[31m\"CXVIII\"\e[0m, \e[31m\"CXIX\"\e[0m,\
    \ \e[31m\"CXX\"\e[0m, \e[31m\"CXXI\"\e[0m, \e[31m\"CXXII\"\e[0m, \e[31m\"CXXIII\"\
    \e[0m, \e[31m\"CXXIV\"\e[0m, \e[31m\"CXXV\"\e[0m, \e[31m\"CXXVI\"\e[0m, \e[31m\"\
    CXXVII\"\e[0m, \e[31m\"CXXVIII\"\e[0m, \e[31m\"CXXIX\"\e[0m, \e[31m\"CXXX\"\e\
    [0m, \e[31m\"CXXXI\"\e[0m, \e[31m\"CXXXII\"\e[0m, \e[31m\"CXXXIII\"\e[0m, \e[31m\"\
    CXXXIV\"\e[0m, \e[31m\"CXXXV\"\e[0m, \e[31m\"CXXXVI\"\e[0m, \e[31m\"CXXXVII\"\e\
    [0m, \e[31m\"CXXXVIII\"\e[0m, \e[31m\"CXXXIX\"\e[0m, \e[31m\"CM\"\e[0m, \e[31m\"\
    M\"\e[0m, \e[31m\"MI\"\e[0m, \e[31m\"MII\"\e[0m, \e[31m\"MIII\"\e[0m, \e[31m\"\
    MIIV\"\e[0m, \e[31m\"MIV\"\e[0m"
  stdout: ''
  timestamp: 1660010602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val\
    \ numsMap = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap2 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap3 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap4 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap5 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap6 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap8 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap9 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap10 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap11 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap12 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap13 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap14 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap16 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap17 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap18 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap19 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap20 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap21 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap22 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap23 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4p5ivak_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4p5ivak_.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcd1z781p.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcd1z781p.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcd1z781p.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcd1z781p.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1660010556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"I\", \"II\", \"III\"\
    , \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"\
    XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\"\
    , \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LX\", \"LXI\",\
    \ \"LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"\
    LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\"\
    , \"LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\"\
    , \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"\
    XC\", \"C\", \"CI\", \"CX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\"\
    , \"CXXV\", \"CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\", \"CC\", \"CCI\", \"\
    CCX\", \"CCXX\", \"CCXXI\", \"CCXXII\", \"CCXXIII\", \"CCXXIV\", \"CCXXV\", \"\
    CCXXVI\", \"CCXXVII\", \"CCXXVIII\", \"CCXXIX\", \"CCO\", \"CCOI\", \"CCOX\",\
    \ \"CCOXX\", \"CCOXXI\", \"CCOXXII\", \"CCOXXIII\", \"CCOXXIV\", \"CCOXXV\", \"\
    CCOXXVI\", \"CCOXXVII\", \"CCOXXVIII\", \"CCOXXIX\", \"CCH\", \"CCHI\", \"CCHX\"\
    , \"CCHXX\", \"CCHXXI\", \"CCHXXII\", \"CCHXXIII\", \"CCHXXIV\", \"CCHXXV\", \"\
    CCHXXVI\", \"CCHXXVII\", \"CCHXXVIII\", \"CCHXXIX\", \"CCHC\", \"C\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6f6r27fu.scala:10:1102 ---------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[31m\"I\"\e[0m, \e[31m\"II\"\e[0m, \e[31m\"\
    III\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"VI\"\e[0m, \e[31m\"VII\"\
    \e[0m, \e[31m\"VIII\"\e[0m, \e[31m\"IX\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"XI\"\e\
    [0m, \e[31m\"XII\"\e[0m, \e[31m\"XIII\"\e[0m, \e[31m\"XIV\"\e[0m, \e[31m\"XV\"\
    \e[0m, \e[31m\"XVI\"\e[0m, \e[31m\"XVII\"\e[0m, \e[31m\"XVIII\"\e[0m, \e[31m\"\
    XIX\"\e[0m, \e[31m\"XX\"\e[0m, \e[31m\"XXI\"\e[0m, \e[31m\"XXII\"\e[0m, \e[31m\"\
    XXIII\"\e[0m, \e[31m\"XXIV\"\e[0m, \e[31m\"XXV\"\e[0m, \e[31m\"XXVI\"\e[0m, \e\
    [31m\"XXVII\"\e[0m, \e[31m\"XXVIII\"\e[0m, \e[31m\"XXIX\"\e[0m, \e[31m\"XXX\"\e\
    [0m, \e[31m\"XXXI\"\e[0m, \e[31m\"XXXII\"\e[0m, \e[31m\"XXXIII\"\e[0m, \e[31m\"\
    XXXIV\"\e[0m, \e[31m\"XXXV\"\e[0m, \e[31m\"XXXVI\"\e[0m, \e[31m\"XXXVII\"\e[0m,\
    \ \e[31m\"XXXVIII\"\e[0m, \e[31m\"XXXIX\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"L\"\
    \e[0m, \e[31m\"LI\"\e[0m, \e[31m\"LX\"\e[0m, \e[31m\"LXI\"\e[0m, \e[31m\"LXII\"\
    \e[0m, \e[31m\"LXIII\"\e[0m, \e[31m\"LXIV\"\e[0m, \e[31m\"LXV\"\e[0m, \e[31m\"\
    LXVI\"\e[0m, \e[31m\"LXVII\"\e[0m, \e[31m\"LXVIII\"\e[0m, \e[31m\"LXIX\"\e[0m,\
    \ \e[31m\"LXX\"\e[0m, \e[31m\"LXXI\"\e[0m, \e[31m\"LXXII\"\e[0m, \e[31m\"LXXIII\"\
    \e[0m, \e[31m\"LXXIV\"\e[0m, \e[31m\"LXXV\"\e[0m, \e[31m\"LXXVI\"\e[0m, \e[31m\"\
    LXXVII\"\e[0m, \e[31m\"LXXVIII\"\e[0m, \e[31m\"LXXIX\"\e[0m, \e[31m\"LXXX\"\e\
    [0m, \e[31m\"LXXXI\"\e[0m, \e[31m\"LXXXII\"\e[0m, \e[31m\"LXXXIII\"\e[0m, \e[31m\"\
    LXXXIV\"\e[0m, \e[31m\"LXXXV\"\e[0m, \e[31m\"LXXXVI\"\e[0m, \e[31m\"LXXXVII\"\e\
    [0m, \e[31m\"LXXXVIII\"\e[0m, \e[31m\"LXXXIX\"\e[0m, \e[31m\"XC\"\e[0m, \e[31m\"\
    C\"\e[0m, \e[31m\"CI\"\e[0m, \e[31m\"CX\"\e[0m, \e[31m\"CXX\"\e[0m, \e[31m\"CXXI\"\
    \e[0m, \e[31m\"CXXII\"\e[0m, \e[31m\"CXXIII\"\e[0m, \e[31m\"CXXIV\"\e[0m, \e[31m\"\
    CXXV\"\e[0m, \e[31m\"CXXVI\"\e[0m, \e[31m\"CXXVII\"\e[0m, \e[31m\"CXXVIII\"\e\
    [0m, \e[31m\"CXXIX\"\e[0m, \e[31m\"CC\"\e[0m, \e[31m\"CCI\"\e[0m, \e[31m\"CCX\"\
    \e[0m, \e[31m\"CCXX\"\e[0m, \e[31m\"CCXXI\"\e[0m, \e[31m\"CCXXII\"\e[0m, \e[31m\"\
    CCXXIII\"\e[0m, \e[31m\"CCXXIV\"\e[0m, \e[31m\"CCXXV\"\e[0m, \e[31m\"CCXXVI\"\e\
    [0m, \e[31m\"CCXXVII\"\e[0m, \e[31m\"CCXXVIII\"\e[0m, \e[31m\"CCXXIX\"\e[0m, \e\
    [31m\"CCO\"\e[0m, \e[31m\"CCOI\"\e[0m, \e[31m\"CCOX\"\e[0m, \e[31m\"CCOXX\"\e\
    [0m, \e[31m\"CCOXXI\"\e[0m, \e[31m\"CCOXXII\"\e[0m, \e[31m\"CCOXXIII\"\e[0m, \e\
    [31m\"CCOXXIV\"\e[0m, \e[31m\"CCOXXV\"\e[0m, \e[31m\"CCOXXVI\"\e[0m, \e[31m\"\
    CCOXXVII\"\e[0m, \e[31m\"CCO"
  stdout: ''
  timestamp: 1660010601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNums = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse2 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse3 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse4 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse5 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse6 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse7 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumsReverse8 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk62wgkka.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk62wgkka.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      var lastDigitCount = 0\n        var lastDigitCount2 = 0\n        var lastDigitCount3\
    \ = 0\n        var lastDigitCount4 = 0\n        var lastDigitCount5 = 0\n    \
    \    var lastDigitCount6 = 0\n        var lastDigitCount7 = 0\n        var lastDigitCount8\
    \ = 0\n        var lastDigitCount9 = 0\n        var lastDigitCount10 = 0\n   \
    \     var lastDigitCount11 = 0\n        var lastDigitCount12 = 0\n        var\
    \ lastDigitCount13 = 0\n        var lastDigitCount14 = 0\n        var lastDigitCount15\
    \ = 0\n        var lastDigitCount16 = 0\n        var lastDigitCount17 = 0\n  \
    \      var lastDigitCount18 = 0\n        var lastDigitCount19 = 0\n        var\
    \ lastDigitCount20 = 0\n        var lastDigitCount21 = 0\n        var lastDigitCount22\
    \ = 0\n        var lastDigitCount23 = 0\n        var lastDigitCount24 = 0\n  \
    \      var lastDigitCount25 = 0\n        var lastDigitCount26 = 0\n        var\
    \ lastDigitCount27 = 0\n        var lastDigitCount28 = 0\n        var lastDigitCount29\
    \ = 0\n        var lastDigitCount30 = 0\n        var lastDigitCount31 = 0\n  \
    \      var lastDigitCount32 = 0\n        var lastDigitCount33 = 0\n        var\
    \ lastDigitCount34 = 0\n        var lastDigitCount35 = 0\n        var lastDigitCount36\
    \ = 0\n        var lastDigitCount37 = 0\n        var lastDigitCount38 = 0\n  \
    \      var lastDigitCount39 = 0\n        var lastDigitCount40 = 0\n        var\
    \ lastDigitCount41 = 0\n        var lastDigitCount42 = 0\n        var lastDigitCount43\
    \ = 0\n        var lastDigitCount44 = 0\n        var lastDigitCount45 = 0\n  \
    \      var lastDigitCount46 = 0\n        var lastDigitCount47 = 0\n        var\
    \ lastDigitCount48 = 0\n        var lastDigitCount49 = 0\n        var lastDigitCount50\
    \ = 0\n        var lastDigitCount51 = 0\n        var lastDigitCount52 = 0\n  \
    \      var lastDigitCount53 = 0\n        var lastDigitCount54 = 0\n        var\
    \ lastDigitCount55 = 0\n        var lastDigitCount56 = 0\n        var lastDigitCount57\
    \ = 0\n        var lastDigitCount58 = 0\n        var lastDigitCount59 = 0\n  \
    \      var lastDigitCount60 = 0\n        var lastDigitCount61 = 0\n        var\
    \ lastDigitCount62 = 0\n        var lastDigitCount63 = 0\n        var lastDigitCount64\
    \ = 0\n        var lastDigitCount65 = 0\n        var lastDigitCount66 = 0\n  \
    \      var lastDigitCount67 = 0\n        var lastDigitCount68 = 0\n        var\
    \ lastDigitCount69 = 0\n        var lastDigitCount70 = 0\n        var lastDigitCount71\
    \ = 0\n        var last\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_e0pdmjj.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_e0pdmjj.scala:84:5 ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqy9kki_2.scala:34:51 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqy9kki_2.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7d0f9_59.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7d0f9_59.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7d0f9_59.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7d0f9_59.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1660010604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numsLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val digitsLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numsLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val digitsLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val numsLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7zavmz9z.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7zavmz9z.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsMap = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap11 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap14 = scala.collection.mutable.Map[Int, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap16 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap19 = scala.collection.mutable.Map[Int, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap21 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap24 = scala.collection.mutable.Map[Int, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap26 = scala.collection.mutable.Map[Int,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpteplkufa.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        var i = number\n\
    \        while(i >= 1000) {\n            roman.append(scala.math.pow(10, i).toString)\n\
    \            nums.append(i)\n            i /= 1000\n        }\n        while(i\
    \ >= 100) {\n            roman.append(scala.math.pow(10, i).toString)\n      \
    \      nums.append(i)\n            i /= 100\n        }\n        while(i >= 10)\
    \ {\n            roman.append(scala.math.pow(10, i).toString)\n            nums.append(i)\n\
    \            i /= 10\n        }\n        roman.append(scala.math.pow(10, i).toString)\n\
    \        nums.append(i)\n        roman.mkString(\"\").toLowerCase\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumk4w4zi.scala:32)\n\tat Problem.main(tmpumk4w4zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        val nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numsStr = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr3\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr17\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr26 = scala.collection.mutable.ListBuffer[String]()\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbl2832ev.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbl2832ev.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqy9kki_2.scala:34:51 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqy9kki_2.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = new scala.collection.mutable.HashMap[Long, String]\n        val numsMap2 =\
    \ new scala.collection.mutable.HashMap[Long, String]\n        val numsMap3 = new\
    \ scala.collection.mutable.HashMap[Long, String]\n        val numsMap4 = new scala.collection.mutable.HashMap[Long,\
    \ String]\n        val numsMap5 = new scala.collection.mutable.HashMap[Long, String]\n\
    \        val numsMap6 = new scala.collection.mutable.HashMap[Long, String]\n \
    \       val numsMap7 = new scala.collection.mutable.HashMap[Long, String]\n  \
    \      val numsMap8 = new scala.collection.mutable.HashMap[Long, String]\n   \
    \     val numsMap9 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap10 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap11 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap12 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap13 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap14 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap15 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap16 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap17 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap18 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap19 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap20 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap21 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap22 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap23 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap24 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val numsMap25 = new scala.collection.mutable.HashMap[Long, String]\n    \
    \    val nums\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4l76gz7.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpe4l76gz7.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Int]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[Int, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap10 = scala.collection.mutable.Map[String, Int]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Int]()\n       \
    \ val numsMap15 = scala.collection.mutable.Map[Int, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap17 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap20 = scala.collection.mutable.Map[String, Int]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Int]()\n       \
    \ val numsMap25 = scala.collection.mutable.Map[Int, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap27 = scala.collection.mut\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcewwsvcs.scala:37:41 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mnumsMap27\e[0m = scala.collection.mut\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value mut is not a member of collection - did you mean collection.Set?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcewwsvcs.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romansLength = romans.length\n        val romansIndexes\
    \ = romans.indices.toArray\n        val romansIndexesLength = romansIndexes.length\n\
    \        val romansIndexesIndex = 0\n        val romansIndexesIndexLength = romansIndexesIndex.length\n\
    \        val romansIndexesIndexLengthMinusOne = romansIndexesIndexLength - 1\n\
    \        val romansIndexesIndexLengthMinusOneMinusOne = romansIndexesIndexLengthMinusOne\
    \ - 1\n        val romansIndexesIndexLengthMinusOneMinusOneMinusOne = romansIndexesIndexLengthMinusOneMinusOne\
    \ - 1\n        val romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOne =\
    \ romansIndexesIndexLengthMinusOneMinusOneMinusOne - 1\n        val romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyyui67vl.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyui67vl.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mromans\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m  |\e[0m                 \
    \    ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyui67vl.scala:16:58 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mromansIndexesIndexLength\e\
    [0m = romansIndexesIndex.length\n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                        value length is not a member of Int\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpyyui67vl.scala:22:87 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mromansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m = romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mromansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyyui67vl.scala:23:103\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mromansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\e\
    [0m = romansIndexesIndexLengthMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e["
  stdout: ''
  timestamp: 1660010610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNums = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n    \
    \    val romanNumsReverse = mutable.ArrayBuffer(\n            \"M\", \"D\", \"\
    C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNumsReverse2 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n    \
    \    val romanNumsReverse3 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"\
    C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNumsReverse4 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n    \
    \    val romanNumsReverse5 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"\
    C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNumsReverse6 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n    \
    \    val romanNumsReverse7 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"\
    C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNumsReverse8 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n    \
    \    val romanNumsReverse9 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"\
    C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNumsReverse10 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n    \
    \    val romanNumsReverse11 = mutable.ArrayBuffer(\n            \"M\", \"D\",\
    \ \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val romanNumsReverse12\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"L\", \"X\", \"V\"\
    , \"I\"\n        )\n        val romanNumsReverse13 = mutable.ArrayBuffer(\n  \
    \          \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n      \
    \  val romanNumsReverse14 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqrg7ezwx.scala:57:32 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mromanNumsReverse14\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqrg7ezwx.scala:9:20\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m  |\e[0m                  \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqrg7ezwx.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqrg7ezwx.scala:15:24 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mromanNums\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqrg7ezwx.scala:18:31 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mromanNumsReverse\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqrg7ezwx.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mromanNumsReverse2\e[0m"
  stdout: ''
  timestamp: 1660010609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < number) {\n            val num = (number / i).toInt\n        \
    \    roman.append(nums(num))\n            nums += num\n            i += 1\n  \
    \      }\n        roman.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmplz6ppob7.scala:14:18 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            roman.append(nums(num))\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments (Long)\n1 error found\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      var lastDigitCount = 0\n        var lastDigitCount2 = 0\n        var lastDigitCount3\
    \ = 0\n        var lastDigitCount4 = 0\n        var lastDigitCount5 = 0\n    \
    \    var lastDigitCount6 = 0\n        var lastDigitCount7 = 0\n        var lastDigitCount8\
    \ = 0\n        var lastDigitCount9 = 0\n        var lastDigitCount10 = 0\n   \
    \     var lastDigitCount11 = 0\n        var lastDigitCount12 = 0\n        var\
    \ lastDigitCount13 = 0\n        var lastDigitCount14 = 0\n        var lastDigitCount15\
    \ = 0\n        var lastDigitCount16 = 0\n        var lastDigitCount17 = 0\n  \
    \      var lastDigitCount18 = 0\n        var lastDigitCount19 = 0\n        var\
    \ lastDigitCount20 = 0\n        var lastDigitCount21 = 0\n        var lastDigitCount22\
    \ = 0\n        var lastDigitCount23 = 0\n        var lastDigitCount24 = 0\n  \
    \      var lastDigitCount25 = 0\n        var lastDigitCount26 = 0\n        var\
    \ lastDigitCount27 = 0\n        var lastDigitCount28 = 0\n        var lastDigitCount29\
    \ = 0\n        var lastDigitCount30 = 0\n        var lastDigitCount31 = 0\n  \
    \      var lastDigitCount32 = 0\n        var lastDigitCount33 = 0\n        var\
    \ lastDigitCount34 = 0\n        var lastDigitCount35 = 0\n        var lastDigitCount36\
    \ = 0\n        var lastDigitCount37 = 0\n        var lastDigitCount38 = 0\n  \
    \      var lastDigitCount39 = 0\n        var lastDigitCount40 = 0\n        var\
    \ lastDigitCount41 = 0\n        var lastDigitCount42 = 0\n        var lastDigitCount43\
    \ = 0\n        var lastDigitCount44 = 0\n        var lastDigitCount45 = 0\n  \
    \      var lastDigitCount46 = 0\n        var lastDigitCount47 = 0\n        var\
    \ lastDigitCount48 = 0\n        var lastDigitCount49 = 0\n        var lastDigitCount50\
    \ = 0\n        var lastDigitCount51 = 0\n        var lastDigitCount52 = 0\n  \
    \      var lastDigitCount53 = 0\n        var lastDigitCount54 = 0\n        var\
    \ lastDigitCount55 = 0\n        var lastDigitCount56 = 0\n        var lastDigitCount57\
    \ = 0\n        var lastDigitCount58 = 0\n        var lastDigitCount59 = 0\n  \
    \      var lastDigitCount60 = 0\n        var lastDigitCount61 = 0\n        var\
    \ lastDigitCount62 = 0\n        var lastDigitCount63 = 0\n        var lastDigitCount64\
    \ = 0\n        var lastDigitCount65 = 0\n        var lastDigitCount66 = 0\n  \
    \      var lastDigitCount67 = 0\n        var lastDigitCount68 = 0\n        var\
    \ lastDigitCount69 = 0\n        var lastDigitCount70 = 0\n        var lastDigitCount71\
    \ = 0\n        var last\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_e0pdmjj.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_e0pdmjj.scala:84:5 ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        var index = 0\n        var romanString = \"\"\n\
    \        while (number > 0) {\n            val remainder = number % 10\n     \
    \       romanString = roman(index) + romanString\n            number /= 10\n \
    \           index += 1\n        }\n        romanString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmsdim40.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsCount = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numsCount2 = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numsCount3 = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numsCount4 = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numsCount5 = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsCount6\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsCount7 =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsCount8 = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsCount9 = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val numsCount10 = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numsCount11 = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numsCount12 = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numsCount13 = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numsCount14 = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numsCount15 = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numsCount16 = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsCount17\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsCount18 =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsCount19 = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsCount20 = scala.collection.mutable.ArrayBuffer.empty[Int]\n \
    \       val numsCount21 = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val numsCount22 = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numsCount23 = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numsCount24 = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numsCount25 = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numsCount26 = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfev8lfkc.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfev8lfkc.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.Map[Int, String]()\n        romans(1) = \"I\"\n\
    \        romans(2) = \"II\"\n        romans(3) = \"III\"\n        romans(4) =\
    \ \"IV\"\n        romans(5) = \"V\"\n        romans(6) = \"VI\"\n        romans(7)\
    \ = \"VII\"\n        romans(8) = \"VIII\"\n        romans(9) = \"IX\"\n      \
    \  romans(10) = \"X\"\n        romans(11) = \"XI\"\n        romans(12) = \"XII\"\
    \n        romans(13) = \"XIII\"\n        romans(14) = \"XIV\"\n        romans(15)\
    \ = \"XV\"\n        romans(16) = \"XVI\"\n        romans(17) = \"XVII\"\n    \
    \    romans(18) = \"XVIII\"\n        romans(19) = \"XIX\"\n        romans(20)\
    \ = \"XX\"\n        romans(21) = \"XXI\"\n        romans(22) = \"XXII\"\n    \
    \    romans(23) = \"XXIII\"\n        romans(24) = \"XXIV\"\n        romans(25)\
    \ = \"XXV\"\n        romans(26) = \"XXVI\"\n        romans(27) = \"XXVII\"\n \
    \       romans(28) = \"XXVIII\"\n        romans(29) = \"XXIX\"\n        romans(30)\
    \ = \"XXX\"\n        romans(31) = \"XXXI\"\n        romans(32) = \"XXXII\"\n \
    \       romans(33) = \"XXXIII\"\n        romans(34) = \"XXXIV\"\n        romans(35)\
    \ = \"XXXV\"\n        romans(36) = \"XXXVI\"\n        romans(37) = \"XXXVII\"\n\
    \        romans(38) = \"XXXVIII\"\n        romans(39) = \"XXXIX\"\n        romans(40)\
    \ = \"XL\"\n        romans(41) = \"L\"\n        romans(42) = \"LX\"\n        romans(43)\
    \ = \"LXX\"\n        romans(44) = \"LXXX\"\n        romans(45) = \"LXXXX\"\n \
    \       romans(46) = \"LXXXXX\"\n        romans(47) = \"LXXXII\"\n        \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_bagmr5x.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum = scala.collection.mutable.ArrayBuffer(\n\
    \            \"\", \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNumLen = romanNum.length\n\
    \        val romanNumStr = romanNum.mkString\n        val romanNumLenStr = romanNumLen.toString\n\
    \        val romanNumStrLen = romanNumStr.length\n        val romanNumStrLenStr\
    \ = romanNumStrLen.toString\n        val romanNumStrLenInt = (romanNumStrLen -\
    \ romanNumLenStr).toInt\n        val romanNumStrLenIntStr = romanNumStrLenInt.toString\n\
    \        val romanNumStrLenIntStr2 = romanNumStrLenIntStr.toString\n        val\
    \ romanNumStrLenIntStr3 = romanNumStrLenIntStr2.toString\n        val romanNumStrLenIntStr4\
    \ = romanNumStrLenIntStr3.toString\n        val romanNumStrLenIntStr5 = romanNumStrLenIntStr4.toString\n\
    \        val romanNumStrLenIntStr6 = romanNumStrLenIntStr5.toString\n        val\
    \ romanNumStrLenIntStr7 = romanNumStrLenIntStr6.toString\n        val romanNumStrLenIntStr8\
    \ = romanNumStrLenIntStr7.toString\n        val romanNumStrLenIntStr9 = romanNumStrLenIntStr8.toString\n\
    \        val romanNumStrLenIntStr10 = romanNumStrLenIntStr9.toString\n       \
    \ val romanNumStrLenIntStr11 = romanNumStrLenIntStr10.toString\n        val romanNumStrLenIntStr12\
    \ = romanNumStrLenIntStr11.toString\n        val romanNumStrLenIntStr13 = romanNumStrLenIntStr12.toString\n\
    \        val romanNumStrLenIntStr14 = romanNumStrLenIntStr13.toString\n      \
    \  val romanNumStrLenIntStr15 = romanNumStrLenIntStr14.toString\n        val romanNumStrLenIntStr16\
    \ = romanNumStrLenIntStr15.toString\n        val romanNumStrLenIntStr17\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqnxzy4cf.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqnxzy4cf.scala:20:48\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mromanNumStrLenInt\e[0m = (romanNumStrLen - romanNumLenStr).toInt\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((romanNumLenStr : String))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqnxzy4cf.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var i = 0\n        while (i < number) {\n            roman += romanToMiniRoman(i)\n\
    \            i += 1\n        }\n        roman.toString().toLowerCase\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwfzxfhz7.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman += romanToMiniRoman(i)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \             Not found: romanToMiniRoman\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        val nums = mutable.ListBuffer[Int]()\n\
    \        val numsLen = mutable.ListBuffer[Int]()\n        val numsLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLen = mutable.ListBuffer[Int]()\n        val numsLenLenLenLen\
    \ = mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n   \
    \     val numsLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n   \
    \     val numsLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Int]()\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp552doyff.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp552doyff.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp552doyff.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp552doyff.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp552doyff."
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.List\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpncug2gv4.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncug2gv4.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncug2gv4.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncug2gv4.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnc"
  stdout: ''
  timestamp: 1660010613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        var i = 0\n     \
    \   while (number > 0) {\n            nums += number\n            number /= 10\n\
    \            i += 1\n        }\n        val numsReversed = nums.reverse\n    \
    \    val numsReversedLength = numsReversed.length\n        var j = 0\n       \
    \ while (j < numsReversedLength) {\n            roman += numsReversed(j).toString()\
    \ + \" \"\n            j += 1\n        }\n        roman.dropRight(roman.length\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_lw67ax.scala:13:20\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            nums += number\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Found:    (number : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph_lw67ax.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            number /= \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value /= is not a member of Long - did you mean number.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph_lw67ax.scala:24:23 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        roman.dropRight(roman.length - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    scala.collection.mutable.ListBuffer[String]\n\e[31m\
    \   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        var index = 0\n        var romanString = \"\"\n\
    \        while (number > 0) {\n            romanString += roman(index % 10)\n\
    \            index += 1\n            number -= 10\n        }\n        romanString.toLower\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmmyz12y1.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            number -= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmmyz12y1.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        romanString.toLower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value toLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      while(number > 0) {\n            val digit = number % 10\n            number\
    \ /= 10\n            roman += digitToRoman(digit)\n        }\n        roman\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxumt99c8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxumt99c8.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            roman += digitToRoman(digit)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxumt99c8.scala:15:21 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            roman += digitToRoman(digit)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \  Not found: digitToRoman\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = scala.collection.mutable.ListBuffer[String]()\n        for(i\
    \ <- 1 to number) {\n            romans += \"M\"\n            romans += \"C\"\n\
    \            romans += \"D\"\n            romans += \"C\"\n            romans\
    \ += \"X\"\n            romans += \"L\"\n            romans += \"X\"\n       \
    \     romans += \"V\"\n            romans += \"I\"\n        }\n        romans.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ej9kfw8.scala:10:22\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to number) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    (number : Long)\n\e[31m   |\e[0m\
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ i = number\n        while (i > 0) {\n            roman.append(roman(i).substring(0,\
    \ 1).toLowerCase)\n            i -= roman(i).length\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpri99j1k2.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman(i).substring(\e\
    [31m0\e[0m, \e[31m1\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                \
    \               ^\e[0m\n\e[31m   |\e[0m                               Found: \
    \   (i : Long)\n\e[31m   |\e[0m                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpri99j1k2.scala:13:14\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            i -= roman(i).length\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpri99j1k2.scala:13:23 --------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m            i -= roman(i).length\n\e[31m\e[31m   |\e[0m       \
    \                ^\e[0m\n\e[31m   |\e[0m                       Found:    (i :\
    \ Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsMap = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap11 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap14 = scala.collection.mutable.Map[Int, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap16 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap19 = scala.collection.mutable.Map[Int, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap21 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap24 = scala.collection.mutable.Map[Int, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap26 = scala.collection.mutable.Map[Int,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpteplkufa.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer.empty[String]\n        for(i <- 1 to\
    \ number) {\n            val roman = intToRoman(i)\n            romans += roman\n\
    \        }\n        romans.toList.toString.toLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5fd_g84.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr5fd_g84.scala:10:22 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to number) {\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    (number : Long)\n\e[31m   |\e[0m                  \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr5fd_g84.scala:11:24\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m\
    \ \e[36mroman\e[0m = intToRoman(i)\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: intToRoman\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap2\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap3\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap4\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap5\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap6\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap7\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap8\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap9\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap10\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap11\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap12\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap13\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap14\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap15\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap16\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap17\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap18\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap19\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap20\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap21\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap22\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap23\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n        val numsMap24\
    \ = new scala.collection.mutable.HashMap[Int, String]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcwp3n41d.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeew4wrvi.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeew4wrvi.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLen =\
    \ scal\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoyrm8u2t.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoyrm8u2t.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoyrm8u2t.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoyrm8u2t.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Err"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ digits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val maxDigit = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val minDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ maxRoman = scala.collection.mutable.ListBuffer[Int]()\n        val minRoman\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val maxNum = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val minNum = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ maxNumDigits = scala.collection.mutable.ListBuffer[Int]()\n        val minNumDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val maxNumRoman = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val minNumRoman = scala.collection.mutable.ListBuffer[Int]()\n      \
    \  val maxNumDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val minNumDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ maxNumRomanDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ minNumRomanDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ maxNumDigitRomanDigits = scala.collection.mutable.ListBuffer[Int]()\n      \
    \  val minNumDigitRomanDigits = scala.collection.mutable.ListBuffer[Int]()\n \
    \       val maxNumRomanDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val minNumRomanDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val maxNumDigitRomanDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val minNumDigitRomanDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val maxNumRomanDigitRomanDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val minNumRomanDigitRomanDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val maxNumDigitRomanDigitRoman = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val min\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8vckzrfy.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8vckzrfy.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumDigitRomanDigitRoman\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumDigitRomanDigitRoman is already defined as \e[33mvalue\e\
    [0m \e[35mmaxNumDigitRomanDigitRoman\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8vckzrfy.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundreds\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredths = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val thousandths = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wqstj3h.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1wqstj3h.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mhundredththths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredththths is already defined as \e[33mvalue\e[0m \e[35mhundredththths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wqstj3h.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wqstj3h.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wqstj3h.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val\
    \ numsMap = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap2 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap3 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap4 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap5 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap6 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap8 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap9 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap10 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap11 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap12 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap13 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap14 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap16 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap17 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap18 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap19 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap20 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap21 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap22 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap23 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4p5ivak_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4p5ivak_.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   var i = 0\n        while (i < number) {\n            roman += romanDigits(i).toLowerCase\n\
    \            i += 1\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb3l3ohsf.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman += romanDigits(i).toLowerCase\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousand =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numThousand = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9qlkce2_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9qlkce2_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9qlkce2_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9qlkce2_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /t"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastDigit = 0\n  \
    \      var lastDigitCount = 0\n        var lastDigitCount2 = 0\n        var lastDigitCount3\
    \ = 0\n        var lastDigitCount4 = 0\n        var lastDigitCount5 = 0\n    \
    \    var lastDigitCount6 = 0\n        var lastDigitCount7 = 0\n        var lastDigitCount8\
    \ = 0\n        var lastDigitCount9 = 0\n        var lastDigitCount10 = 0\n   \
    \     var lastDigitCount11 = 0\n        var lastDigitCount12 = 0\n        var\
    \ lastDigitCount13 = 0\n        var lastDigitCount14 = 0\n        var lastDigitCount15\
    \ = 0\n        var lastDigitCount16 = 0\n        var lastDigitCount17 = 0\n  \
    \      var lastDigitCount18 = 0\n        var lastDigitCount19 = 0\n        var\
    \ lastDigitCount20 = 0\n        var lastDigitCount21 = 0\n        var lastDigitCount22\
    \ = 0\n        var lastDigitCount23 = 0\n        var lastDigitCount24 = 0\n  \
    \      var lastDigitCount25 = 0\n        var lastDigitCount26 = 0\n        var\
    \ lastDigitCount27 = 0\n        var lastDigitCount28 = 0\n        var lastDigitCount29\
    \ = 0\n        var lastDigitCount30 = 0\n        var lastDigitCount31 = 0\n  \
    \      var lastDigitCount32 = 0\n        var lastDigitCount33 = 0\n        var\
    \ lastDigitCount34 = 0\n        var lastDigitCount35 = 0\n        var lastDigitCount36\
    \ = 0\n        var lastDigitCount37 = 0\n        var lastDigitCount38 = 0\n  \
    \      var lastDigitCount39 = 0\n        var lastDigitCount40 = 0\n        var\
    \ lastDigitCount41 = 0\n        var lastDigitCount42 = 0\n        var lastDigitCount43\
    \ = 0\n        var lastDigitCount44 = 0\n        var lastDigitCount45 = 0\n  \
    \      var lastDigitCount46 = 0\n        var lastDigitCount47 = 0\n        var\
    \ lastDigitCount48 = 0\n        var lastDigitCount49 = 0\n        var lastDigitCount50\
    \ = 0\n        var lastDigitCount51 = 0\n        var lastDigitCount52 = 0\n  \
    \      var lastDigitCount53 = 0\n        var lastDigitCount54 = 0\n        var\
    \ lastDigitCount55 = 0\n        var lastDigitCount56 = 0\n        var lastDigitCount57\
    \ = 0\n        var lastDigitCount58 = 0\n        var lastDigitCount59 = 0\n  \
    \      var lastDigitCount60 = 0\n        var lastDigitCount61 = 0\n        var\
    \ lastDigitCount62 = 0\n        var lastDigitCount63 = 0\n        var lastDigitCount64\
    \ = 0\n        var lastDigitCount65 = 0\n        var lastDigitCount66 = 0\n  \
    \      var lastDigitCount67 = 0\n        var lastDigitCount68 = 0\n        var\
    \ lastDigitCount69 = 0\n        var lastDigitCount70 = 0\n        var lastDigitCount71\
    \ = 0\n        var last\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_e0pdmjj.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_e0pdmjj.scala:84:5 ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var romanNum = number\n        while(romanNum > 0) {\n            val remainder\
    \ = romanNum % 1000\n            romanNum /= 1000\n            roman.append(remainder)\n\
    \        }\n        roman.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnx7scswy.scala:14:18 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660010615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var numeral = 0\n        var denominator =\
    \ 1000\n        while (numeral <= number) {\n            numeral = numeral + denominator\n\
    \            denominator = denominator / 10\n        }\n        while (numeral\
    \ > number) {\n            numeral = numeral - denominator\n            denominator\
    \ = denominator / 10\n        }\n        numeral = numeral + 1\n        numeral\
    \ = numeral * 10\n        numeral = numeral / 10\n        numeral = numeral.toInt\n\
    \        numeral = numeral.toString\n        numeral.charAt(0).toLowerCase\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppbqzyhgy.scala:24:18\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        numeral = numeral.toString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    String\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppbqzyhgy.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        numeral.charAt(\e\
    [31m0\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value charAt is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsCount = scala.collection.mutable.ListBuffer.empty[Int]\n        val digitsCount\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tensCount = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsCount = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsCount = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsCount2 = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val digitsCount2 = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val tensCount2 = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val hundredsCount2 = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val thousandsCount2 = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numsCount3 = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val digitsCount3 = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ tensCount3 = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsCount3\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsCount3\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsCount4 = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val digitsCount4 = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val tensCount4 = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredsCount4 = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandsCount4 = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val numsCount5 = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val digitsCount5 = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val tensCount5 = scala.collection.mutable.ListBuffer.empty[Int]\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkrf7m_j0.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkvh28u9.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsString =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString3 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString4 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString6 = scala.collection.mutable.ListBuffer[String]()\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString9 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsString11 = scala.collection.mutable.ListBuffer[String]()\n       \
    \ val numsString12 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString13 = scala.collection.mutable.ListBuffer[String]()\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString15 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString17 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString18 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString19 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString20 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString21 = scala.collection.mutable.ListBuffer[String]()\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString23 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString25 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcdywmmwh.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val\
    \ numsMap = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap2 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap3 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap4 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap5 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap6 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap8 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap9 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap10 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap11 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap12 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap13 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap14 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap16 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap17 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap18 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap19 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap20 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap21 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap22 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap23 = scala.collection.mutable.HashMap.empty[Long, String]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4p5ivak_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4p5ivak_.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   var i = number\n        while (i >= 1000) {\n            roman.append(i.toString.substring(0,\
    \ 3)).append(\"M\")\n            i /= 1000\n        }\n        roman.append(i.toString.substring(0,\
    \ 3)).append(\"CM\")\n        i /= 100\n        while (i >= 50) {\n          \
    \  roman.append(i.toString.substring(0, 3)).append(\"D\")\n            i /= 50\n\
    \        }\n        roman.append(i.toString.substring(0, 3)).append(\"CD\")\n\
    \        i /= 10\n        while (i >= 1) {\n            roman.append(i.toString.substring(0,\
    \ 3)).append(\"C\")\n            i /= 10\n        }\n        roman.append(i.toString.substring(0,\
    \ 3)).append(\"XC\")\n        i /= 10\n        while (i >= 1) {\n            roman.append(i.toString.substring(0,\
    \ 3)).append(\"L\")\n            i /= 10\n        }\n        roman.append(i.toString.substring(0,\
    \ 3)).append(\"XL\")\n        i /= 10\n        while (i >= 1) {\n            roman.append(i.toString.substring(0,\
    \ 3)).append(\"X\")\n            i /= 10\n        }\n        roman.append(i.toString.substring(0,\
    \ 3)).append(\"IX\")\n        i /= 10\n        while (i >= 1) {\n            roman.append(i.toString.substring(0,\
    \ 3)).append(\"V\")\n            i /= 10\n        }\n        roman.append(i.toString.substring(0,\
    \ 3)).append(\"IV\")\n        i /= 10\n        while (i >= 1) {\n            roman.append(i.toString.substring(0,\
    \ 3)).append(\"I\")\n            i /= 10\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 3, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.intToMiniRoman(tmpyr2y2w52.scala:15)\n\tat Problem$.main(tmpyr2y2w52.scala:54)\n\
    \tat Problem.main(tmpyr2y2w52.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ i = number\n        while (i > 0) {\n            roman.append(roman(i).substring(0,\
    \ 1))\n            i -= 1\n        }\n        roman.mkString.toLowerCase\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcbmy7z3s.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman(i).substring(\e\
    [31m0\e[0m, \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \   ^\e[0m\n\e[31m   |\e[0m                               Found:    (i : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb2nggx9q.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb2nggx9q.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb2nggx9q.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb2nggx9q.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb2nggx9q.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already d"
  stdout: ''
  timestamp: 1660010622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer(\n            \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum2 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum3 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum4 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum6 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum7 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum8 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum9 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum10 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum11 = scala.collection.mutable.ArrayBuffer(\n\
    \            \"M\", \"CM\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqxq0a2wj.scala:43:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[31m\"M\"\e[0m, \"CM\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpqxq0a2wj.scala:45:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqxq0a2wj.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqxq0a2wj.scala:45:4 -------------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: CMdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val nums = mutable.ArrayBuffer(\n            \"I\", \"II\"\
    , \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"\
    XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\"\
    , \"XXI\", \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\"\
    , \"XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"\
    XXXVI\", \"XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\
    , \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpoaphkbvt.scala:13:1149 ---------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[31m\"I\"\e[0m, \e[31m\"II\"\e[0m, \e[31m\"\
    III\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"VI\"\e[0m, \e[31m\"VII\"\
    \e[0m, \e[31m\"VIII\"\e[0m, \e[31m\"IX\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"XI\"\e\
    [0m, \e[31m\"XII\"\e[0m, \e[31m\"XIII\"\e[0m, \e[31m\"XIV\"\e[0m, \e[31m\"XV\"\
    \e[0m, \e[31m\"XVI\"\e[0m, \e[31m\"XVII\"\e[0m, \e[31m\"XVIII\"\e[0m, \e[31m\"\
    XIX\"\e[0m, \e[31m\"XX\"\e[0m, \e[31m\"XXI\"\e[0m, \e[31m\"XXII\"\e[0m, \e[31m\"\
    XXIII\"\e[0m, \e[31m\"XXIV\"\e[0m, \e[31m\"XXV\"\e[0m, \e[31m\"XXVI\"\e[0m, \e\
    [31m\"XXVII\"\e[0m, \e[31m\"XXVIII\"\e[0m, \e[31m\"XXIX\"\e[0m, \e[31m\"XXX\"\e\
    [0m, \e[31m\"XXXI\"\e[0m, \e[31m\"XXXII\"\e[0m, \e[31m\"XXXIII\"\e[0m, \e[31m\"\
    XXXIV\"\e[0m, \e[31m\"XXXV\"\e[0m, \e[31m\"XXXVI\"\e[0m, \e[31m\"XXXVII\"\e[0m,\
    \ \e[31m\"XXXVIII\"\e[0m, \e[31m\"XXXIX\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"L\"\
    \e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m,\
    \ \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e\
    [31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e\
    [31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e\
    [31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e\
    [31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e\
    [31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e\
    [31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"\
    L\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"L\"\e[0m, \e["
  stdout: ''
  timestamp: 1660010620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n        val numDigitsInt\
    \ = scala.math.pow(10, numDigits)\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInt = scala.math.pow(10, numDigits)\n     \
    \   val numDigitsInt = scala.math.pow(10, numDigits)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7odpwubu.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInt\e[0m = scala.math.pow(\e\
    [31m10\e[0m, numDigits)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitsInt is already defined as \e[33mvalue\e[0m \e[35mnumDigitsInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7odpwubu.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660010590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ i = number\n        while(i > 0) {\n            roman.append(roman(i).substring(0,\
    \ 1))\n            i -= 1\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23b8ftqi.scala:12:31\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman(i).substring(\e\
    [31m0\e[0m, \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \   ^\e[0m\n\e[31m   |\e[0m                               Found:    (i : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ i = number\n        while (i > 0){\n            roman.append(roman.last.charAt(0).toLowerCase\
    \ + roman.last.substring(1))\n            i -= 1\n        }\n        roman.reverse\n\
    \        roman.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4yr3hw6o.scala:12:46 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman.append(roman.last.charAt(\e[31m0\e\
    [0m).toLowerCase + roman.last.substring(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         value toLowerCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Long]()\n        val numsMap = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap4 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[String, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap10 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap11 = scala.collection.mutable.Map[String, String]()\n        val numsMap12\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap13 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap14 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap15 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap16 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap17 = scala.collection.mutable.Map[String, String]()\n        val numsMap18\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap19 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap20 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap21 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap22 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[String, String]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap25 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap26 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap27 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuh4i0tc8.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuh4i0tc8.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   var i = 0\n        while (i < number) {\n            roman += romanDigits(i).mkString(\"\
    \")\n            i += 1\n        }\n        roman.mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdfsimf2.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman += romanDigits(i).mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\",\
    \ \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val nums = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"L\", \"X\", \"V\", \"I\"\n        )\n        val numsLength = nums.length\n\
    \        val romansLength = romans.length\n        val romansCount = romansLength\
    \ / numsLength\n        val romansIndex = (romansLength % numsLength).toInt\n\
    \        val romansArray = romans.toArray\n        val numsArray = nums.toArray\n\
    \        val romansArrayLength = romansArray.length\n        val numsArrayLength\
    \ = numsArray.length\n        val romansArrayIndex = (romansArrayLength - 1).toInt\n\
    \        val numsArrayIndex = (numsArrayLength - 1).toInt\n        val romansArrayIndex2\
    \ = romansArrayIndex + 1\n        val numsArrayIndex2 = numsArrayIndex + 1\n \
    \       val romansArrayIndex3 = romansArrayIndex + 2\n        val numsArrayIndex3\
    \ = numsArrayIndex + 2\n        val romansArrayIndex4 = romansArrayIndex + 3\n\
    \        val numsArrayIndex4 = numsArrayIndex + 3\n        val romansArrayIndex5\
    \ = romansArrayIndex + 4\n        val numsArrayIndex5 = numsArrayIndex + 4\n \
    \       val romansArrayIndex6 = romansArrayIndex + 5\n        val numsArrayIndex6\
    \ = numsArrayIndex + 5\n        val romansArrayIndex7 = romansArrayIndex + 6\n\
    \        val numsArrayIndex7 = numsArrayIndex + 6\n        val romansArrayIndex8\
    \ = romansArrayIndex + 7\n        val numsArrayIndex8 = numsArrayIndex + 7\n \
    \       val romansArrayIndex9 = romansArrayIndex + 8\n        val numsArrayIndex9\
    \ = numsArrayIndex + 8\n        val romansArrayIndex10 = romansArrayIndex + 9\n\
    \        val numsArrayIndex10 = numsArrayIndex + 9\n        val romansArrayIndex11\
    \ = romansArrayIndex + 10\n        val numsArrayIndex11 = numsArrayIndex + 10\n\
    \        val romansArrayIndex12 = romansArrayIndex + 11\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppiq7vyvh.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppiq7vyvh.scala:12:19 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppiq7vyvh.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ remainder = number\n        var romanNum = number\n        while (remainder\
    \ > 0) {\n            romanNum = remainder % 10\n            roman.append(romanNum.toString)\n\
    \            remainder = remainder / 10\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6axsia2.scala:20)\n\tat Problem.main(tmpd6axsia2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNums = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ArrayBuffer.fill(number)(0)\n\
    \        val romanNumsLenLenLenLenLenLenLenLenLenLen = scala.collection.mut\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcp9obuex.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcp9obuex.scala:10:61 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = scala.collection.mutable.ArrayBuffer.fill(number)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                 Found:    (number : Long)\n\e[31m   |\e[0m                 \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcp9obuex.scala:11:66 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mromanNums\e[0m = scala.collection.mutable.ArrayBuffer.fill(number)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                      Found:    (number : Long)\n\e[31m   |\e[0m            \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpcp9obuex.scala:12:64 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mnumsLen\e[0m = scala.collection.mutable.ArrayBuffer.fill(number)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                    Found:    (number : Long)\n\e[31m   |\e[0m              \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1660010626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm5njcdve.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm5njcdve.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm5njcdve.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm5njcdve.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1660010624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val romans = mutable.ListBuffer[String]()\n        var romanNum = number\n\
    \        while(romanNum > 0) {\n            romanNum -= 100\n            romans\
    \ += \"M\"\n        }\n        while(romanNum >= 10) {\n            romanNum -=\
    \ 10\n            romans += \"CM\"\n        }\n        while(romanNum >= 5) {\n\
    \            romanNum -= 5\n            romans += \"D\"\n        }\n        while(romanNum\
    \ >= 1) {\n            romanNum -= 1\n            romans += \"CD\"\n        }\n\
    \        romans.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf971y5em.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mromans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toString.charAt(0)\n            val romanDigit\
    \ = if (digit == 'I') \"V\" else if (digit == 'V') \"I\" else if (digit == 'X')\
    \ \"L\" else if (digit == 'L') \"X\" else if (digit == 'C') \"C\" else if (digit\
    \ == 'D') \"M\" else if (digit == 'M') \"D\" else \"I\"\n            roman.append(romanDigit)\n\
    \        }\n        roman.toString().toLower\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ee6_fzb.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_ee6_fzb.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp_ee6_fzb.scala:12:22 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredths = scala.collection.mutable.ListBuffer.empty[Int]\n        val tenths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val tenthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredththths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val tenththths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val hundredththths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val tenththths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredththths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ tenththths = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tenththths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredththths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val tenththths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val hundredththths = scala.collection.mutable.List\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrylegyu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfrylegyu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mhundredththths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredththths is already defined as \e[33mvalue\e[0m \e[35mhundredththths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfrylegyu.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mtenththths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtenththths is already defined as \e[33mvalue\e[0m \e[35mtenththths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfrylegyu.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk1gg2y0a.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1gg2y0a.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk1gg2y0a.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk1gg2y0a.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numsMap = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap2 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap3 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap4 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap5 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap6 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap7 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap8 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap9 = scala.collection.mutable.HashMap.empty[Int, String]\n \
    \       val numsMap10 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap12 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap13 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap14 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap15 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap16 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap17 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap18 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap21 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap22 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap23 = scala.collection.mutable.HashMap.empty[Int, String]\n\
    \        val numsMap24 = scala.collection.mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_dh0t7_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpf_dh0t7_.scala:9:20 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf_dh0t7_.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd4wsno6_.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4wsno6_.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLen is already defined as \e\
    [33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd4wsno6_.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd4wsno6_.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sa"
  stdout: ''
  timestamp: 1660010568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    var romanNum = number\n        while (romanNum > 0) {\n            roman.append(romanNum\
    \ % 10)\n            romanNum /= 10\n        }\n        roman.toString().toLower\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmptye1kmnc.scala:12:18 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            roman.append(romanNum % \e[31m10\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e\
    [0m with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments (Long)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptye1kmnc.scala:15:25 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        roman.toString().toLower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value toLower is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray.length\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArrayLength = numsArray.length\n\
    \        val numsArrayLength = numsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxex_yskz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxex_yskz.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxex_yskz.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxex_yskz.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumsArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxex_yskz.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayLength\e[0m = numsArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ nums = scala.collection.mutable.ListBuffer[Int]()\n        var i = 0\n     \
    \   while (i < number) {\n            val remainder = number % 10\n          \
    \  roman.append(remainder)\n            nums.append(remainder)\n            number\
    \ /= 10\n            i += 1\n        }\n        val romanString = roman.mkString(\"\
    \")\n        val numString = nums.mkString(\"\")\n        val romanStringLower\
    \ = romanString.toLowerCase\n        val numStringLower = numString.toLowerCase\n\
    \        val romanStringDigits = romanString.substring(1, romanString.length -\
    \ 1)\n        val numStringDigits = numString.substring(1, numString.length -\
    \ 1)\n        val romanStringDigit = romanStringDigits.charAt(0)\n        val\
    \ numStringDigit = numStringDigits.charAt(0)\n        val romanStringRoman = romanStringLower.substring(0,\
    \ romanStringLower.length - romanStringDigits.length)\n        val numStringRoman\
    \ = numStringLower.substring(0, numStringLower.length - numStringDigits.length)\n\
    \        val romanStringRomanDigit = romanStringRoman.charAt(romanStringRoman.length\
    \ - 1)\n        val numStringRomanDigit = numStringRoman.charAt(numStringRoman.length\
    \ - 1)\n        val romanStringRomanRoman = romanStringRoman.substring(0, romanStringRoman.length\
    \ - 1)\n        val numStringRomanRoman = numStringRoman.substring(0, numStringRoman.length\
    \ - 1)\n        val romanStringRomanRomanDigit = romanStringRomanRoman.charAt(romanStringRomanRoman.length\
    \ - 1)\n        val numStringRomanRomanDigit = numStringRomanRoman.charAt(numStringRomanRoman.length\
    \ - 1)\n        val romanStringRomanRomanRoman = romanStringRomanRoman.substring(0,\
    \ romanStringRomanRoman.length - 1)\n        val numStringRomanRomanRoman = numStringRomanRoman.substring(0,\
    \ numStringRomanRoman.length - 1)\n        val romanStringRomanRomanRomanDigit\
    \ = romanStringRomanRomanRoman.charAt(romanStringRomanRomanRoman.length - 1)\n\
    \        val numStringRomanRomanRomanDigit = numStringRomanRomanRoman.charAt(numStringRomanRomanRoman.length\
    \ - 1)\n        val romanStringRoman\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpijv5g3ym.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpijv5g3ym.scala:14:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            roman.append(remainder)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e\
    [0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpijv5g3ym.scala:15:17 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m            nums.append(remainder)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with\
    \ types\n\e[31m   |\e[0m (elems: Int*): (nums : scala.collection.mutable.ListBuffer[Int])\n\
    \e[31m   |\e[0m (elem: Int): (nums : scala.collection.mutable.ListBuffer[Int])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpijv5g3ym.scala:16:19 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpijv5g3ym.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        var roman = \"\"\n        var num = 0\n        var lastNum = 0\n    \
    \    var lastRoman = \"\"\n        var lastRomanNum = 0\n        var numDigits\
    \ = 0\n        var romanDigits = 0\n        var romanNum = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n        var romanNumDigit = 0\n       \
    \ var romanNumDigits = 0\n        var romanNumDigit = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n        var romanNumDigit = 0\n       \
    \ var romanNumDigits = 0\n        var romanNumDigit = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n        var romanNumDigit = 0\n       \
    \ var romanNumDigits = 0\n        var romanNumDigit = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n        var romanNumDigit = 0\n       \
    \ var romanNumDigits = 0\n        var romanNumDigit = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n        var romanNumDigit = 0\n       \
    \ var romanNumDigits = 0\n        var romanNumDigit = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n        var romanNumDigit = 0\n       \
    \ var romanNumDigits = 0\n        var romanNumDigit = 0\n        var romanNumDigits\
    \ = 0\n        var romanNumDigit = 0\n        var romanNumDigits = 0\n       \
    \ var romanNumDigit = 0\n        var romanNumDigits = 0\n        var romanNumDigit\
    \ = 0\n        var romanNumDigits = 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7jblzcf.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mromanNumDigits\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mromanNumDigits is already defined as \e[33mvariable\e[0m \e[35mromanNumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe7jblzcf.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mromanNumDigit\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mromanNumDigit\
    \ is already defined as \e[33mvariable\e[0m \e[35mromanNumDigit\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe7jblzcf.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36mromanNumDigits\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mromanNumDigits\
    \ is already defined as \e[33mvariable\e[0m \e[35mromanNumDigits\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe7jblzcf.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mvar\e[0m \e[36mromanNumDigit\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mromanNumDigit\
    \ is already defined as \e[33mvariable\e[0m \e[35mromanNumDigit\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe7jblzcf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mromanNumDigits\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mromanNumDigits\
    \ is already defined as \e[33mvariable\e[0m \e[35mromanNumDigits\e[0m\n\e[31m\
    \   |"
  stdout: ''
  timestamp: 1660010625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkvh28u9.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    def intToMiniRoman(number : Long) : String = {\n\
    \        val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    \
    \    )\n        val nums = scala.collection.mutable.ArrayBuffer(\n           \
    \ scala.math.pow(10, 0), scala.math.pow(10, 1), scala.math.pow(10, 2), scala.math.pow(10,\
    \ 3), scala.math.pow(10, 4), scala.math.pow(10, 5), scala.math.pow(10, 6), scala.math.pow(10,\
    \ 7), scala.math.pow(10, 8), scala.math.pow(10, 9), scala.math.pow(10, 10)\n \
    \       )\n        val result = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var i = 0\n        while (i < number) {\n            val num = scala.math.pow(10,\
    \ i)\n            val remainder = number % num\n            result += roman(remainder)\n\
    \            number -= remainder\n            i += 1\n        }\n        val result\
    \ = result.mkString\n        result.toLower\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkod543fd.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.mkString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkod543fd.scala:9:20\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m  |\e[0m                  \
    \  ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkod543fd.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            number -= remainder\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkod543fd.scala:25:15\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        result.toLower\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLower is\
    \ not a member of scala.collection.mutable.ArrayBuffer[String]\n4 errors found\n"
  stdout: ''
  timestamp: 1660010625
