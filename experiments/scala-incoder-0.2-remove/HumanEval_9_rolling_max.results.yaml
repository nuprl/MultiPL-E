language: scala
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, Math.max(max.getOrElse(x, 0),\
    \ x)))\n        max.values.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9557h9fj.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            val index = maxIndex.indexOf(math.max(maxList))\n \
    \           if (index == -1) {\n                maxList += number\n          \
    \      maxIndex += index\n            } else {\n                maxList += number\n\
    \                maxIndex += index\n            }\n        }\n        maxIndex.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7ak48g2.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi7ak48g2.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var index = 0\n        for (number <- numbers)\
    \ {\n            if (number > max) {\n                max = number\n         \
    \       index = rollingMax.size\n            }\n            rollingMax += number\n\
    \        }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8t_g_wnh.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max.getOrElseUpdate(n,\
    \ 0L)\n            if (maxKey > n) max.put(n, maxKey)\n        }\n        val\
    \ maxList = new mutable.ListBuffer[Long]()\n        max.foreach { case (k, v)\
    \ =>\n            maxList += k\n        }\n        return maxList.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2njj4c9c.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2njj4c9c.scala:12:26\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(number => {\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                val maxValue = maxList(maxIndex - 1)\n      \
    \          if (number > maxValue) {\n                    maxList += number\n \
    \               }\n            }\n        })\n        maxList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_cmwr4u.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            if (max.containsKey(n))\
    \ {\n                val max = max(n) + 1\n                max.foreach { m =>\n\
    \                    max.remove(m)\n                }\n            } else {\n\
    \                max.put(n, 1L)\n            }\n        }\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_jcplvv9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => maxes += x)\n        val rollingMax = maxes.max\n\
    \        val rollingMaxIndex = maxes.indexWhere(x => x == rollingMax)\n      \
    \  val rollingMaxList = maxes.take(rollingMaxIndex + 1)\n        rollingMaxList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9cga7ek.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnq6h5mz.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        val rollingMaxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            rollingMax.add(number)\n            rollingMaxIndex\
    \ += number\n        }\n        rollingMax.foreach { number =>\n            val\
    \ index = rollingMaxIndex.indexOf(number)\n            rollingMaxIndex.remove(index)\n\
    \            rollingMax.add(number)\n        }\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnhmgm8uj.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnhmgm8uj.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.clear()\n       \
    \     rollingMax.append (number)\n            rollingMax.foreach { rollingMax\
    \ =>\n                val maxIndex = rollingMax.lastIndex\n                rollingMax.insert(maxIndex\
    \ + 1, rollingMax.last)\n            }\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfanmoawc.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxRollingMaxIndex = maxRollingMax.lastIndex\n\
    \            val maxRollingMaxValue = maxRollingMax(maxRollingMaxIndex)\n    \
    \        if (number > maxRollingMaxValue) {\n                maxRollingMax.clear()\n\
    \                maxRollingMax.push(number)\n            } else {\n          \
    \      maxRollingMax.push(number)\n            }\n        }\n        maxRollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm4q1cbox.scala:7:28 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                            ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                            Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ArrayBuffer[Long]()\n        numbers.foreach(n\
    \ => {\n            val maxKey = max.keySet().iterator().next()\n            if\
    \ (maxKey > n) {\n                max.put(n, maxKey)\n            } else {\n \
    \               max.put(n, maxKey + 1)\n            }\n        })\n        numbers.foreach(n\
    \ => {\n            val maxKey = max.keySet().iterator().next()\n            if\
    \ (maxKey > n) {\n                rollingMax += maxKey\n            }\n      \
    \  })\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qo9stpo.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_qo9stpo.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax += number\n     \
    \   }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mfl7q0v.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndex = new mutable.HashMap[Long, Int]()\n        numbers.foreach\
    \ { number =>\n            val index = max.keys.toList.indexOf(number)\n     \
    \       if (index == -1) {\n                max.put(number, number)\n        \
    \        maxIndex.put(number, 0)\n            } else {\n                val maxIndex\
    \ = maxIndex.keys.toList.indexOf(number)\n                val maxValue = max.get(number)\n\
    \                if (maxValue > number) {\n                    max.put(number,\
    \ number)\n                    maxIndex.put(number, maxIndex + 1)\n          \
    \      }\n            }\n        }\n        max.keys.toList.map(x => (x, maxIndex.get(x)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptp90x7ir.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptp90x7ir.scala:8:27\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                           ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            val index = maxIndex.last\n            val maxValue\
    \ = maxList.getOrElse(index, math.max(number, 0))\n            maxIndex += index\n\
    \            maxList += maxValue\n        }\n        maxList.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9_bqler.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa9_bqler.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax += number\n     \
    \   }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mfl7q0v.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        val maxRollingIndex = new mutable.ListBuffer[Int]()\n        numbers.foreach(number\
    \ => {\n            val index = maxRolling.size\n            maxRolling.append(number)\n\
    \            maxRollingIndex.append(index)\n        })\n        val maxRollingIndexSize\
    \ = maxRollingIndex.size\n        val maxRollingIndexMax = maxRollingIndex.max\n\
    \        val maxRollingIndexMin = maxRollingIndex.min\n        val maxRollingIndexSum\
    \ = maxRollingIndex.sum\n        val maxRollingIndexSumSize = maxRollingIndexSum.size\n\
    \        val maxRollingIndexSumMax = maxRollingIndexSum.max\n        val maxRollingIndexSumMin\
    \ = maxRollingIndexSum.min\n        val maxRollingIndexSumSum = maxRollingIndexSum.sum\n\
    \        val maxRollingIndexSumSumSize = maxRollingIndexSumSum.size\n        val\
    \ maxRollingIndexSumSumMax = maxRollingIndexSumSum.max\n        val maxRollingIndexSumSumMin\
    \ = maxRollingIndexSumSum.min\n        val maxRollingIndexSumSumSum = maxRollingIndexSumSum.sum\n\
    \        val maxRollingIndexSumSumSumSize = maxRollingIndexSumSumSum.size\n  \
    \      val maxRollingIndexSumSumSumMax = maxRollingIndexSumSumSum.max\n      \
    \  val maxRollingIndexSumSumSumMin = maxRollingIndexSumSumSum.min\n        val\
    \ maxRollingIndexSumSumSumSum = maxRollingIndexSumSumSum.sum\n        val maxRollingIndexSumSumSumSumSize\
    \ = maxRollingIndexSumSumSumSum.size\n        val maxRollingIndexSumSumSumSumMax\
    \ = maxRollingIndexSumSumSumSumMax.size\n        val maxRollingIndexSumSumSumSumMin\
    \ = maxRollingIndexSumSumSumMin.size\n        val maxRollingIndexSumSumSumSumSum\
    \ = maxRollingIndexSumSumSumSum.size\n        val maxRollingIndexSumSumSumSumSumSize\
    \ = maxRollingIndexSumSumSumSumSumSize.size\n        val maxRollingIndexSumSumSumSumSumMax\
    \ = maxRollingIndexSumSumSumSumMax.max\n        val maxRollingIndexSumSumSumSumSumMin\
    \ = maxRollingIndexSumSumSumSumMin.max\n        val maxRollingIndexSumSumSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2298j0cu.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2298j0cu.scala:7:29\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxRolling\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2298j0cu.scala:8:34 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingIndex\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m      \
    \                            ^^^^^^^\e[0m\n\e[31m  |\e[0m                    \
    \              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp2298j0cu.scala:31:45 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxRollingIndexSumSumSumSumMax\e[0m = maxRollingIndexSumSumSumSumMax.size\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m               Recursive \e[33mvalue\e[0m \e[35mmaxRollingIndexSumSumSumSumMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2298j0cu.scala:34:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxRollingIndexSumSumSumSumSumSize\e[0m = maxRollingIndexSumSumSumSumSumSize.size\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m           Recursive \e[33mvalue\e[0m \e[35mmaxRollingIndexSumSumSumSumSumSize\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2298j0cu.scala:38:5\
    \ ----"
  stdout: ''
  timestamp: 1660010784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = rollingMax.lastIndex\n\
    \            rollingMax.updated(maxIndex, number)\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiva3_y1b.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach\
    \ { number =>\n            val currentMax = max.get(number).getOrElse(number)\n\
    \            val newMax = currentMax + number\n            max.put(number, newMax)\n\
    \            maxList += newMax\n        }\n        maxList.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1podx1k9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1podx1k9.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => maxList += x)\n        val maxIndex = maxList.indexOf(0)\n\
    \        val maxValue = maxList.take(maxIndex).max\n        val maxIndexList =\
    \ maxList.drop(maxIndex).takeWhile(x => x <= maxValue).toList\n        val maxIndexListSize\
    \ = maxIndexList.size\n        val maxIndexListSize = maxIndexListSize + 1\n \
    \       val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n        val maxIndexListSize = maxIndexListSize + 1\n\
    \        val maxIndexListSize = maxIndexListSize + 1\n        val maxIndexListSize\
    \ = maxIndexListSize + 1\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpntl6h2ac.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpntl6h2ac.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpntl6h2ac.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpntl6h2ac.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpntl6h2ac.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxInd"
  stdout: ''
  timestamp: 1660010786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = rollingMax.lastIndex\n\
    \            rollingMax.updated(maxIndex + 1, number)\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2pb2529.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { number =>\n            val max = number.max(max)\n\
    \        }\n        max.values.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85k7dyvy.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp85k7dyvy.scala:9:33\
    \ ----------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mval\e\
    [0m \e[36mmax\e[0m = number.max(max)\n\e[31m\e[31m  |\e[0m                   \
    \              ^\e[0m\n\e[31m  |\e[0m                                 Recursive\
    \ \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.maxKey\n\
    \            if (maxKey == null || n < maxKey) {\n                max += n ->\
    \ n\n            }\n        })\n        max.values.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqqaqaale.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRollingNumbers = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val maxNumber = number + maxRollingNumbers.last\n\
    \            maxRollingNumbers += maxNumber\n        }\n        maxRollingNumbers.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkbnwuk8.scala:7:32 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingNumbers\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m  |\e[0m                                Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number) //\
    \ append the number to the rolling max list\n            rollingMax.lastOption\
    \ // get the last element of the rolling max list\n                .map { rollingMax\
    \ =>\n                    rollingMax.max // get the max of the rolling max list\n\
    \                }\n                .foreach { rollingMax =>\n               \
    \     rollingMax.foreach { rollingMax =>\n                        rollingMax.foreach\
    \ { rollingMax =>\n                            rollingMax.foreach { rollingMax\
    \ =>\n                                rollingMax.foreach { rollingMax =>\n   \
    \                                 rollingMax.foreach { rollingMax =>\n       \
    \                                 rollingMax.foreach { rollingMax =>\n       \
    \                                     rollingMax.foreach { rollingMax =>\n   \
    \                                             rollingMax.foreach { rollingMax\
    \ =>\n                                                    rollingMax.foreach {\
    \ rollingMax =>\n                                                        rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \  rollingMax.foreach { rollingMax =>\n                                      \
    \                          rollingMax.foreach { rollingMax =>\n              \
    \                                                      rollingMax.foreach { rollingMax\
    \ =>\n                                                                       \
    \ rollingMax.foreach { rollingMax =>\n                                       \
    \                                     rollingMax.foreach { rollingMax =>\n   \
    \                                                                            \
    \ rollingMax.foreach { rollingMax =>\n                                       \
    \                                             rollingMax.foreach { rollingMax\
    \ =>\n                                                                       \
    \                 rollingMax.foreach { rollingMax =>\n                       \
    \                                                                     rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                      rollingMax.foreach { rollingMax =>\n  \
    \                                                                            \
    \                      rollingMax.foreach { rollingMax =>\n                  \
    \                                                                            \
    \          rollingMax.foreach { rollingMax =>\n                              \
    \                                                                            \
    \  rollingMax.foreach { rollingMax =>\n                                      \
    \                                                                          rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                                          rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                                              rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                                                  rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                                                      rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                                                          rollingMax.foreach\
    \ { rollingMax =>\n                                                          \
    \                                                                            \
    \  rollingMax.foreach { rollingMax =>\n                                      \
    \                                                                            \
    \                          rollingMax.foreach { rolling\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptxfprt_r.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxfprt_r.scala:7:25\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m               \
    \          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptxfprt_r.scala:8:24 ---------------------\e[0m\e[0m\n\e[31m 8\
    \ |\e[0m        numbers.foreach { \e[36mnumber\e[0m =>\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m 9 |\e[0m            rollingMax.append(number)\
    \ \e[34m// append the number to the rolling max list\e[0m\n\e[31m10 |\e[0m   \
    \         rollingMax.lastOption \e[34m// get the last element of the rolling max\
    \ list\e[0m\n\e[31m11 |\e[0m                .map { \e[36mrollingMax\e[0m =>\n\e\
    [31m12 |\e[0m                    rollingMax.max \e[34m// get the max of the rolling\
    \ max list\e[0m\n\e[31m13 |\e[0m                }\n\e[31m14 |\e[0m           \
    \     .foreach { \e[36mrollingMax\e[0m =>\n\e[31m15 |\e[0m                   \
    \ rollingMax.foreach { \e[36mrollingMax\e[0m =>\n\e[31m16 |\e[0m             \
    \           rollingMax.foreach { \e[36mrollingMax\e[0m =>\n\e[31m17 |\e[0m   \
    \                         rollingMax.foreach { \e[36mrollingMax\e[0m =>\n\e[31m18\
    \ |\e[0m                                rollingMax.foreach { \e[36mrollingMax\e\
    [0m =>\n\e[31m19 |\e[0m                                    rollingMax.foreach\
    \ { \e[36mrollingMax\e[0m =>\n\e[31m20 |\e[0m                                \
    \        rollingMax.foreach { \e[36mrollingMax\e[0m =>\n\e[31m21 |\e[0m      \
    \                                      rollingMax.foreach { \e[36mrollingMax\e\
    [0m =>\n\e[31m22 |\e[0m                                                rollingMax.foreach\
    \ { \e[36mrollingMax\e[0m =>\n\e[31m23 |\e[0m              "
  stdout: ''
  timestamp: 1660010795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        maxList.sortWith((x, y) => y.compareTo(x) < 0);\n        maxList.reverse.takeWhile(x\
    \ => x <= numbers.getOrElse(maxList.size, 0L)).map(x => maxList.remove(x)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfc2irx9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfc2irx9.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRollingNumbers = mutable.ListBuffer[Long]()\n\
    \        var maxRollingNumber = 0L\n        var currentRollingNumber = 0L\n  \
    \      numbers.foreach{ number =>\n            currentRollingNumber = number\n\
    \            while (currentRollingNumber > maxRollingNumber) {\n             \
    \   maxRollingNumbers += maxRollingNumber\n                maxRollingNumber =\
    \ 0L\n            }\n            currentRollingNumber -= 1\n        }\n      \
    \  maxRollingNumbers += maxRollingNumber\n        return maxRollingNumbers\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp07iubg6g.scala:7:32 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingNumbers\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                \
    \                ^^^^^^^\e[0m\n\e[31m  |\e[0m                                Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach\
    \ { number =>\n            val currentMax = max.get(number).getOrElse(number)\n\
    \            val currentMaxList = maxList.getOrElse(currentMax, new mutable.ArrayList[Long]())\n\
    \            currentMaxList += number\n            max.put(number, currentMax)\n\
    \            maxList += currentMaxList\n        }\n        maxList.map(_.max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoiqm027t.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoiqm027t.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        val rollingMaxIndex = mutable.ListBuffer.empty[Int]\n        val rollingMaxIndexSize\
    \ = mutable.ListBuffer.empty[Int]\n        numbers.foreach { number =>\n     \
    \       rollingMax.add(number)\n            rollingMaxIndexSize += rollingMaxIndex.size\
    \ + rollingMaxIndex.last\n            rollingMaxIndex += number\n        }\n \
    \       rollingMaxIndex.foreach { index =>\n            rollingMaxIndexSize -=\
    \ index\n        }\n        rollingMaxIndex.foreach { index =>\n            rollingMaxIndexSize\
    \ += index\n        }\n        rollingMaxIndex.foreach { index =>\n          \
    \  rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach {\
    \ index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize -= index\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            rollingMaxIndexSize += index\n        }\n        rollingMaxIndex.fore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfl9iovzy.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfl9iovzy.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfl9iovzy.scala:9:34 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndexSize\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m  |\e[0m           \
    \                       ^^^^^^^\e[0m\n\e[31m  |\e[0m                         \
    \         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(number\
    \ => {\n            val currentMax = max.get(number).getOrElse(number)\n     \
    \       val newMax = currentMax + number\n            max.put(number, newMax)\n\
    \            maxList += newMax\n        })\n        maxList.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyrexif6.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjyrexif6.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => rollingMax += x)\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcqa42tf.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max.getOrElse(x, 0) + x))\n        max.foreach(x => rollingMax.append(max.get(x).max))\n\
    \        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj06v1577.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj06v1577.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => {\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += x\n           \
    \ } else {\n                val maxValue = maxList(maxIndex - 1)\n           \
    \     if (x > maxValue) {\n                    maxList += x\n                }\n\
    \            }\n        })\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnjlcaq0.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc8uffkmp.scala:88:0 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc8uffkmp.scala:7:25\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                     \
    \    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc8uffkmp.scala:87:1\
    \ ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpc8uffkmp.scala:80:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m80 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            if (max.containsKey(n))\
    \ {\n                val maxValue = max.get(n)\n                if (maxValue <\
    \ n) {\n                    max.put(maxValue, n)\n                }\n        \
    \    } else {\n                max.put(n, n)\n            }\n        })\n    \
    \    max.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplmscefpi.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val rollingMaxElement = number\
    \ + rollingMax.last\n            rollingMax.append(rollingMaxElement)\n      \
    \  }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcx2nwmcd.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \            if (rollingMax.size > rollingMax.last)\n                rollingMax.dropRight(1)\n\
    \        }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp07qzywrt.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        maxList.sortWith((x, y) => y.compareTo(x) < 0);\n        maxList.reverse.takeWhile(x\
    \ => x <= numbers(0)).drop(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkolxloml.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkolxloml.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => rollingMax.append(x))\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ohxup_a.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0L) + x))\n\
    \        val maxList = max.toList.sortBy(_._1).reverse\n        val maxElement\
    \ = maxList.head._2\n        val maxElementList = maxList.filter(_._2 > maxElement)\n\
    \        val maxElementListWithMaxElement = maxElementList.map(_._1)\n       \
    \ val maxElementListWithoutMaxElement = maxElementList.filter(_._1 == maxElement)\n\
    \        val maxElementListWithoutMaxElementWithMaxElement = maxElementListWithoutMaxElement.map(_._2)\n\
    \        val maxElementListWithoutMaxElementWithoutMaxElement = maxElementListWithoutMaxElementWithMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElement.filter(_._2 == maxElement)\n\
    \        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement\
    \ = maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElementWithoutMaxElement.filter(_._2\
    \ == maxElement)\n        val maxElementListWithoutMaxElementWithoutMaxElementWithoutMaxElementWithout\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsdanjfxo.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdanjfxo.scala:7:22\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m       \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsdanjfxo.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ListBuffer[Long]()\n        for\
    \ (i <- 0 until numbers.size) {\n            val value = numbers(i)\n        \
    \    val max = max.getOrElse(value, 0)\n            val rollingMax = rollingMax.getOrElse(max,\
    \ 0)\n            max.update(value, rollingMax + 1)\n            rollingMax.update(0,\
    \ value)\n        }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr49bilvf.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr49bilvf.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max + (n ->\
    \ n)\n            if (maxKey._2 > n)\n                max += n -> n\n        })\n\
    \        val maxList = max map { case (k, v) => k -> v }\n        val maxListSorted\
    \ = maxList.sortBy(_._1)\n        val maxListSortedReversed = maxListSorted.reverse\n\
    \        val maxListSortedReversedSorted = maxListSortedReversed.sortBy(_._1)\n\
    \        val maxListSortedReversedSorted2 = maxListSortedReversedSorted.reverse\n\
    \        val maxListSortedReversedSorted3 = maxListSortedReversedSorted2.sortBy(_._1)\n\
    \        val maxListSortedReversedSorted4 = maxListSortedReversedSorted3.reverse\n\
    \        val maxListSortedReversedSorted5 = maxListSortedReversedSorted4.sortBy(_._1)\n\
    \        val maxListSortedReversedSorted6 = maxListSortedReversedSorted5.reverse\n\
    \        val maxListSortedReversedSorted7 = maxListSortedReversedSorted6.sortBy(_._1)\n\
    \        val maxListSortedReversedSorted8 = maxListSortedReversedSorted7.reverse\n\
    \        val maxListSortedReversedSorted9 = maxListSortedReversedSorted8.sortBy(_._1)\n\
    \        val maxListSortedReversedSorted10 = maxListSortedReversedSorted9.reverse\n\
    \        val maxListSortedReversedSorted11 = maxListSortedReversedSorted10.reverse\n\
    \        val maxListSortedReversedSorted12 = maxListSortedReversedSorted11.reverse\n\
    \        val maxListSortedReversedSorted13 = maxListSortedReversedSorted12.reverse\n\
    \        val maxListSortedReversedSorted14 = maxListSortedReversedSorted13.reverse\n\
    \        val maxListSortedReversedSorted15 = maxListSortedReversedSorted14.reverse\n\
    \        val maxListSortedReversedSorted16 = maxListSortedReversedSorted15.reverse\n\
    \        val maxListSortedReversedSorted17 = maxListSortedReversedSorted16.reverse\n\
    \        val maxListSortedReversedSorted18 = maxListSortedReversedSorted17.reverse\n\
    \        val maxListSortedReversedSorted19 = maxListSortedReversedSorted18.reverse\n\
    \        val maxListSortedReversedSorted20 = maxListSortedReversedSorted19.reverse\n\
    \        val maxListSortedReversedSorted21 = maxListSortedReversedSorted20.reverse\n\
    \        val maxListSortedReversedSorted22 = maxListSortedReversedSorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzezbw1sn.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzezbw1sn.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { number =>\n            val max = number.max(max)\n\
    \        }\n        max.values.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85k7dyvy.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp85k7dyvy.scala:9:33\
    \ ----------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mval\e\
    [0m \e[36mmax\e[0m = number.max(max)\n\e[31m\e[31m  |\e[0m                   \
    \              ^\e[0m\n\e[31m  |\e[0m                                 Recursive\
    \ \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \            rollingMax.append(number)\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00nrwxsp.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            val index = maxIndex.lastOption.orElse(maxIndex.size\
    \ + 1)\n            val maxValue = maxList.get(index - 1).orElse(number)\n   \
    \         if (number > maxValue) {\n                maxList += number\n      \
    \          maxIndex += index\n            }\n        }\n        maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjr2gwd9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmjr2gwd9.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = -1\n        val maxValue = numbers.head\n        val maxIndexList\
    \ = mutable.ListBuffer.empty[Int]\n        val maxIndexValue = numbers.head\n\
    \        numbers.foreach { number =>\n            if (number > maxValue) {\n \
    \               maxValue = number\n                maxIndex = 0\n            \
    \    maxIndexList.clear()\n                maxIndexList.clear()\n            \
    \    maxIndexList.clear()\n            }\n            if (number == maxValue)\
    \ {\n                maxIndex += 1 \n                maxIndexList += maxIndex\n\
    \            }\n            if (number > maxValue) {\n                maxValue\
    \ = number\n                maxIndex = maxIndexList(0)\n                maxIndexList.clear()\n\
    \                maxIndexList.clear()\n                maxIndexList.clear()\n\
    \            }\n        }\n        maxIndexList.foreach { index =>\n         \
    \   if (maxIndexList.contains(index)) {\n                maxIndex += 1 \n    \
    \            maxIndexList += maxIndex\n            }\n        }\n        maxIndexList.foreach\
    \ { index =>\n            if (maxIndexList.contains(index)) {\n              \
    \  maxIndex += 1 \n                maxIndexList += maxIndex\n            }\n \
    \       }\n        maxIndexList.foreach { index =>\n            if (maxIndexList.contains(index))\
    \ {\n                maxIndex += 1 \n                maxIndexList += maxIndex\n\
    \            }\n        }\n        maxIndexList.foreach { index =>\n         \
    \   if (maxIndexList.contains(index)) {\n                maxIndex += 1 \n    \
    \            maxIndexList += maxIndex\n            }\n        }\n        maxIndexList.foreach\
    \ { index =>\n            if (maxIndexList.contains(index)) {\n              \
    \  maxIndex += 1 \n                maxIndexList += maxIndex\n            }\n \
    \       }\n        maxIndexList.foreach { index =>\n            if (maxIndexList.contains(index))\
    \ {\n                maxIndex += 1 \n                maxIndexList += maxIndex\n\
    \            }\n        }\n        maxIndexList.foreach { index =>\n         \
    \   if (maxIndexList.contains(index)) {\n                maxIndex += 1 \n    \
    \            maxIndexList += maxIndex\n            }\n        }\n        maxIndexList.foreach\
    \ { index =>\n            if (maxIndexList.contains(index)) {\n              \
    \  maxIndex += 1 \n                maxIndexList += maxIndex\n            }\n \
    \       }\n        maxIndexList.foreach { index =>\n            if (maxIndexList.contains(index))\
    \ {\n                maxIndex += 1 \n                maxIndexList += maxIndex\n\
    \            }\n        }\n        maxIndexList.foreach { index =>\n         \
    \   if (maxIndexList.contains(index)) {\n                maxIndex += 1 \n    \
    \            maxIndexList += maxIndex\n            }\n        }\n        maxIndexList.foreach\
    \ { index \n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7re1qpv3.scala:102:0 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7re1qpv3.scala:7:22\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7re1qpv3.scala:10:27\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexList\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp7re1qpv3.scala:14:25 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                maxValue = number\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7re1qpv3.scala:15:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                maxIndex\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7re1qpv3.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                maxIndex += \e[31m1\e[0m \n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value\
    \ += is not a member of Int - did you mean maxIndex.!=?\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp7re1qpv3.scala:25:25 -----------------------------\e[0m\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => max.put(x, x))\n        while(max.size > 0){\n            val maxKey = max.keys.max\n\
    \            val maxValue = max.get(maxKey)\n            max.remove(maxKey)\n\
    \            rollingMax += maxValue\n        }\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44myh1hx.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44myh1hx.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val result = new mutable.ListBuffer[Long]()\n        max.values.foreach(x\
    \ => if (x > 0) result += x)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbh3p45_.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbh3p45_.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax += number\n     \
    \   }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mfl7q0v.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => {\n            val max = max(x) + x\n            max.foreach { y => max.remove(y)\
    \ }\n            val list = maxList.filter(_ > x)\n            list += max\n \
    \           maxList.clear()\n        })\n        maxList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3vlini07.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3vlini07.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => {\n            if (max.contains(x)) {\n                val max = max(x)\n\
    \                val maxList = maxList.toList\n                maxList += max\n\
    \            } else {\n                val max = x\n                val maxList\
    \ = maxList.toList\n                maxList += max\n                max.foreach\
    \ { y => max.remove(y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                max.foreach\
    \ { y => max.put(y, y) }\n                max.foreach { y => max.put(y, y) }\n\
    \                max.foreach { y => max.put(y, y) }\n                \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbk6mmbx6.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbk6mmbx6.scala:7:22\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m       \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbk6mmbx6.scala:8:26 -------------------------\e[0m\e[0m\n\e[31m8 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbk6mmbx6.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                max.foreach { \e[36my\e[0m => max.remove(y)\
    \ }\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              value foreach is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpbk6mmbx6.scala:19:20 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                max.foreach { \e[36my\e[0m => max.put(y, y) }\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         value foreach is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbk6mmbx6.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                max.foreach { \e[36my\e[0m => max.put(y, y) }\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ value foreach is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbk6mmbx6.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                max.foreach { \e[36my\e[0m => max.put(y, y) }\n\e[31m\e[31m\
    \   |\e[0m                ^^"
  stdout: ''
  timestamp: 1660010816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            rollingMax += number\n     \
    \   }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptqipmh4r.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(number => {\n            val maxIndex = numbers.indexWhere(x\
    \ => x > number)\n            val maxValue = numbers(maxIndex)\n            val\
    \ maxRollingIndex = maxIndex - maxRolling.size\n            val maxRollingValue\
    \ = maxRolling.getOrElse(maxRollingIndex, 0L)\n            if (maxRollingValue\
    \ < maxValue) {\n                maxRollingValue += number\n                maxRolling.append(maxRollingValue)\n\
    \            }\n        })\n        maxRolling\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9nw4ubt.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max max n\n\
    \            if (maxKey > n) max += n -> maxKey\n        })\n        max map {\
    \ case (k, v) => v }\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputrbuz1d.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ArrayBuffer[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max.getOrElse(x, 0L) + x))\n        max.foreach(x => rollingMax.append(max.getOrElse(x,\
    \ 0L)))\n        rollingMax\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fnzvl27.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fnzvl27.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var i = 0\n        while (i < numbers.length) {\n\
    \            if (numbers(i) > max) {\n                max = numbers(i)\n     \
    \       }\n            i += 1\n        }\n        val rollingMax = numbers.takeWhile(_\
    \ < max).reverse.takeWhile(_ < max).reverse\n        rollingMax.foreach(x => maxList\
    \ += x)\n        return maxList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppl5yp5fw.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => {\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += x\n           \
    \ } else {\n                val maxValue = maxList(maxIndex) + 1\n           \
    \     if (x > maxValue) {\n                    maxList += x\n                }\n\
    \            }\n        })\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpavhgs13p.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var index = 0\n        numbers.foreach(n => {\n\
    \            max = math.max(max, n)\n            rollingMax += max\n         \
    \   index += 1\n        })\n        rollingMax.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnz75uq8.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            val index = maxIndex.last\n            if (number >\
    \ maxList.getOrElse(index + 1, number)) {\n                maxList += number\n\
    \                maxIndex += index\n            }\n        }\n        maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7tb628j9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7tb628j9.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ArrayList[Long]()\n        numbers.foreach\
    \ { number =>\n            val maxValue = max.getOrElse(number, 0)\n         \
    \   val newMaxValue = number + maxValue\n            max.put(number, newMaxValue)\n\
    \            rollingMax += newMaxValue\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0cqzt5p7.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0cqzt5p7.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, math.max(max.getOrElse(x, 0),\
    \ x)))\n        max.values.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr180o_i5.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                val maxValue = maxList(maxIndex - 1)\n      \
    \          if (number > maxValue) {\n                    maxList += number\n \
    \               }\n            }\n        }\n        maxList.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2th9vwl.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var current = 0L\n        var index = 0\n     \
    \   numbers.foreach { n =>\n            current = n\n            max = n\n   \
    \         rollingMax.append(max)\n            index += 1\n            if (index\
    \ > numbers.size - 1) {\n                rollingMax.append(current)\n        \
    \    }\n        }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzr09vof0.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxNumber = maxList.max\n\
    \            if (number > maxNumber) {\n                maxList += number\n  \
    \          }\n        }\n        maxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6gs6nbp8.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => {\n            val max = max.getOrElse(x, x)\n            val list = maxList.getOrElse(x,\
    \ new mutable.ArrayList[Long]())\n            list.add(max)\n            max.foreach\
    \ { y => max.update(y, y + y) }\n            maxList.addAll(list)\n        })\n\
    \        maxList.map(_.max)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lonutbu.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lonutbu.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(n => {\n            val maxIndex = maxes.indexWhere(x\
    \ => x > n)\n            if (maxIndex >= 0) {\n                maxes(maxIndex)\
    \ = maxes(maxIndex) + n\n            } else {\n                maxes += n\n  \
    \          }\n        })\n        maxes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprj2s9ah6.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                val maxValue = maxList(maxIndex - 1)\n      \
    \          if (number > maxValue) {\n                    maxList += number\n \
    \               }\n            }\n        }\n        maxList.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptv2l4mds.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val result = new mutable.ListBuffer[Long]()\n        max.values.foreach(x\
    \ => result.add(x))\n        result.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5oa_iken.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5oa_iken.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { number =>\n            val max = number.max(max)\n\
    \        }\n        max.values.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85k7dyvy.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp85k7dyvy.scala:9:33\
    \ ----------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mval\e\
    [0m \e[36mmax\e[0m = number.max(max)\n\e[31m\e[31m  |\e[0m                   \
    \              ^\e[0m\n\e[31m  |\e[0m                                 Recursive\
    \ \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => {\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += x\n           \
    \ } else {\n                val maxValue = maxList(maxIndex) + 1\n           \
    \     if (x > maxValue) {\n                    maxList += x\n                }\n\
    \            }\n        })\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3q8qckkj.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxList = max.toList.sortBy(_._1).reverse.takeWhile(_._2 > 0).reverse\n\
    \        val maxElement = maxList.head._2\n        val maxElements = maxList.tail.takeWhile(_._2\
    \ > 0).reverse\n        val maxElementsSum = maxElements.sum\n        val maxElementsSumOfElements\
    \ = maxElements.map(x => x._2).sum\n        val maxElementsSumOfElementsSquared\
    \ = maxElements.map(x => x._2 * x._2).sum\n        val maxElementsSumOfElementsSquaredSquared\
    \ = maxElements.map(x => x._2 * x._2).map(x => x * x).sum\n        val maxElementsSumOfElementsSquaredCube\
    \ = maxElements.map(x => x._2 * x._2 * x._2).sum\n        val maxElementsSumOfElementsCube\
    \ = maxElements.map(x => x._2 * x._2 * x._2 * x._2).sum\n        val maxElementsSumOfElementsCubeCube\
    \ = maxElements.map(x => x._2 * x._2 * x._2 * x._2 * x._2).sum\n        val maxElementsSumOfElementsCubeCubeCube\
    \ = maxElements.map(x => x._2 * x._2 * x._2 * x._2 * x._2 * x._2).sum\n      \
    \  val maxElementsSumOfElementsCubeCubeCubeCube = maxElements.map(x => x._2 *\
    \ x._2 * x._2 * x._2 * x._2 * x._2 * x._2).sum\n        val maxElementsSumOfElementsCubeCubeCubeCubeCube\
    \ = maxElements.map(x => x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2).sum\n\
    \        val maxElementsSumOfElementsCubeCubeCubeCubeCube = maxElements.map(x\
    \ => x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2).sum\n     \
    \   val maxElementsSumOfElementsCubeCubeCubeCubeCube = maxElements.map(x => x._2\
    \ * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2).sum\n        val maxElementsSumOfElementsCubeCubeCubeCube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx25t9ytu.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx25t9ytu.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementsSumOfElementsCubeCubeCubeCubeCube\e[0m = maxElements.map(\e\
    [36mx\e[0m => x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2 * x._2).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementsSumOfElementsCubeCubeCubeCubeCube is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxElementsSumOfElementsCubeCubeCubeCubeCube\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx25t9ytu.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxElementsSumOfElementsCubeCubeCubeCubeCube\e\
    [0m = maxElements.map(\e[36mx\e[0m => x._2 * x._2 * x._2 * x._2 * x._2 * x._2\
    \ * x._2 * x._2 * x._2).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementsSumOfElementsCubeCubeCubeCubeCube is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxElementsSumOfElementsCubeCubeCubeCubeCube\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx25t9ytu.scala:7:22 -------------------------\e[0m\e[0m\n\e[31m7 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007]"
  stdout: ''
  timestamp: 1660010816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var index = 0\n        numbers.foreach{n =>\n \
    \           if (n > max) {\n                max = n\n                maxes +=\
    \ max\n            }\n            if (n == max) {\n                maxes += max\n\
    \            }\n        }\n        maxes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpelijs96c.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => maxList += x)\n        val maxIndex = maxList.lastIndex\n\
    \        val maxValue = maxList(maxIndex)\n        val maxElements = maxList.drop(maxIndex).takeWhile(x\
    \ => x <= maxValue)\n        val maxElementsIndex = maxElements.lastIndex\n  \
    \      val maxElementsValue = maxElements(maxElementsIndex)\n        val maxElementsElements\
    \ = maxElements.drop(maxElementsIndex).takeWhile(x => x <= maxElementsValue)\n\
    \        val maxElementsElementsIndex = maxElementsElements.lastIndex\n      \
    \  val maxElementsElementsValue = maxElementsElements(maxElementsElementsIndex)\n\
    \        val maxElementsElementsElements = maxElementsElements.drop(maxElementsElementsIndex).takeWhile(x\
    \ => x <= maxElementsElementsValue)\n        val maxElementsElementsElementsIndex\
    \ = maxElementsElementsElements.lastIndex\n        val maxElementsElementsElementsValue\
    \ = maxElementsElementsElements(maxElementsElementsElementsIndex)\n        val\
    \ maxElementsElementsElementsElements = maxElementsElementsElements.drop(maxElementsElementsElementsIndex).takeWhile(x\
    \ => x <= maxElementsElementsElementsValue)\n        val maxElementsElementsElementsElementsIndex\
    \ = maxElementsElementsElementsElements.lastIndex\n        val maxElementsElementsElementsElementsValue\
    \ = maxElementsElementsElementsElements(maxElementsElementsElementsElementsIndex)\n\
    \        val maxElementsElementsElementsElementsElements = maxElementsElementsElementsElements.drop(maxElementsElementsElementsIndex).takeWhile(x\
    \ => x <= maxElementsElementsElementsValue)\n        val maxElementsElementsElementsElementsElementsIndex\
    \ = maxElementsElementsElementsElementsElements.lastIndex\n        val maxElementsElementsElementsElementsElementsValue\
    \ = maxElementsElementsElementsElementsElements(maxElementsElementsElementsElementsElementsIndex)\n\
    \        val maxElementsElementsElementsElementsElementsElements = maxElementsElementsElementsElementsElements.drop(maxElementsElementsElementsIndex).takeWhile(x\
    \ => x <= maxElementsElementsElementsValue)\n        val maxElementsElementsElementsElementsElementsElementsIndex\
    \ = max\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdyedj96.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzdyedj96.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxes = max.toList.sortBy(_._1).reverse\n        val maxesWithMax\
    \ = maxes.takeWhile(_._2 > numbers.size).reverse\n        val maxesWithMaxAndIndex\
    \ = maxesWithMax.zipWithIndex.filter(_._2 > numbers.size).reverse\n        val\
    \ maxesWithMaxAndIndexWithMax = maxesWithMaxAndIndex.map(_._1).reverse\n     \
    \   val maxesWithMaxAndIndexWithMaxAndIndex = maxesWithMaxAndIndexWithMax.zipWithIndex.filter(_._2\
    \ > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMax.zipWithIndex.filter(_._2 > numbers.size).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax.zipWithIndex.filter(_._2\
    \ > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax.zipWithIndex.filter(_._2\
    \ > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMax\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptefkrb8t.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptefkrb8t.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = numbers.indexOf(0)\n        val maxValue = numbers(maxIndex)\n\
    \        numbers.foreach { number =>\n            if (number > maxValue) {\n \
    \               maxList += maxValue\n                maxIndex = numbers.indexOf(number)\
    \ + 1\n                maxValue = numbers(maxIndex)\n            }\n        }\n\
    \        maxList += maxValue\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnk3hnet7.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpnk3hnet7.scala:13:25 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                maxIndex = numbers.indexOf(number) +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val maxIndex\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpnk3hnet7.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                maxValue = numbers(maxIndex)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        val maxIndex = numbers.indexOf(0)\n        while(maxIndex != -1) {\n\
    \            maxList += numbers(maxIndex)\n            maxIndex -= 1\n       \
    \ }\n        return maxList.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp42fuuik1.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp42fuuik1.scala:11:21 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            maxIndex -= \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not\
    \ a member of Int - did you mean maxIndex.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max max n\n\
    \            if (maxKey > n) max += n -> maxKey\n        }\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyocem9ds.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, if (max.contains(x)) max.get(x)\
    \ else x))\n        val result = new mutable.ListBuffer[Long]()\n        val current\
    \ = new mutable.HashMap[Long, Long]()\n        numbers.foreach(x => {\n      \
    \      val max = current.getOrElse(x, 0)\n            val next = if (max.isDefined)\
    \ max.getOrElse(x, 0) + 1 else 1\n            current.put(x, next)\n         \
    \   if (next > numbers.size) result += x\n        })\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdan6gk9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdan6gk9.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzdan6gk9.scala:10:26 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mcurrent\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        val rollingMaxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            rollingMax.synchronized {\n                rollingMax.last\
    \ match {\n                    case Some(max) =>\n                        rollingMaxIndex.synchronized\
    \ {\n                            rollingMaxIndex.last match {\n              \
    \                  case Some(index) =>\n                                    rollingMaxIndex.synchronized\
    \ {\n                                        rollingMaxIndex.last match {\n  \
    \                                          case Some(index) =>\n             \
    \                                   rollingMaxIndex.synchronized {\n         \
    \                                           rollingMaxIndex.last match {\n   \
    \                                                     case Some(index) =>\n  \
    \                                                          rollingMaxIndex.synchronized\
    \ {\n                                                                rollingMaxIndex.last\
    \ match {\n                                                                  \
    \  case Some(index) =>\n                                                     \
    \                   rollingMaxIndex.synchronized {\n                         \
    \                                                   rollingMaxIndex.last match\
    \ {\n                                                                        \
    \        case Some(index) =>\n                                               \
    \                                     rollingMaxIndex.synchronized {\n       \
    \                                                                            \
    \     rollingMaxIndex.last match {\n                                         \
    \                                                   case Some(index) =>\n    \
    \                                                                            \
    \                rollingMaxIndex.synchronized {\n                            \
    \                                                                        rollingMaxIndex.last\
    \ match {\n                                                                  \
    \                                      case Some(index) =>\n                 \
    \                                                                            \
    \               rollingMaxIndex.synchronized {\n                             \
    \                                                                            \
    \       rollingMaxIndex.last match {\n                                       \
    \                                                                            \
    \ case Some(index) =>\n                                                      \
    \                                                                  rollingMaxIndex.synchronized\
    \ {\n                                                                        \
    \                                                    rollingMaxIndex.last match\
    \ {\n                                                                        \
    \                                                                    case Some(index)\
    \ =>\n                                                                       \
    \                                                                         rollingMaxIndex.synchronized\
    \ {\n                                                                        \
    \                                                                            rollingMaxIndex.last\
    \ match {\n                                                                  \
    \                                                                            \
    \          case Some(index) =>\n                                             \
    \                                                                            \
    \                                   rollingMaxIndex.synchronized {\n         \
    \                                                                            \
    \                                                                           rollingMaxIndex.last\
    \ match {\n                                                                  \
    \                                                                            \
    \                      case Some(index) =>\n                                 \
    \                                                                            \
    \                                                           rollingMaxIndex.synchronized\
    \ {\n                                                                        \
    \                                                                            \
    \                        rollingMaxIndex.last match {\n                      \
    \                                                                            \
    \                                                                            \
    \  case Some(index) =>\n                                                     \
    \                                                                            \
    \                                                   rollingMaxIndex.synchronized\
    \ {\n                                                                        \
    \                                                                            \
    \                                    rollingMaxIndex.last match {\n          \
    \                                                                            \
    \                                                                            \
    \                          case Some(index) =>\n                             \
    \                                                                            \
    \                                                                            \
    \                                           rollingMaxIndex.synchronized {\n \
    \                                                                            \
    \                                                                            \
    \                                           rollingMaxIndex.last match {\n   \
    \                                                                            \
    \                                                                            \
    \                                             case Some(index) =>\n          \
    \                                                                            \
    \                                                                            \
    \                                                                          rollingMaxIndex.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3jspuqmw.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but unindent found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp3jspuqmw.scala:65:0 ----------------------------\e[0m\e[0m\n\e\
    [31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jspuqmw.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3jspuqmw.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmp3jspuqmw.scala:57:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach{ n =>\n            val maxIndex = maxes.indexWhere(x\
    \ => x > n)\n            if (maxIndex == -1) {\n                maxes += n\n \
    \           } else {\n                maxes(maxIndex) = maxes(maxIndex) > n ?\
    \ maxes(maxIndex) : n\n            }\n        }\n        maxes.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgtxj0wo.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val rollingMax = mutable.ListBuffer.empty[Long]\n        numbers.foreach(number\
    \ => {\n            rollingMax += number\n            if (rollingMax.size > maxList.size)\
    \ {\n                maxList += rollingMax.last\n                rollingMax.clear()\n\
    \            }\n        })\n        if (rollingMax.size > 0) {\n            maxList\
    \ += rollingMax.last\n        }\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgcmnduvf.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgcmnduvf.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var index = 0\n        numbers.foreach{n =>\n \
    \           max = math.max(max, n)\n            rollingMax += max\n          \
    \  index += 1\n        }\n        rollingMax.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5d87nisx.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach{ number =>\n            rollingMax.clear()\n        \
    \    rollingMax.push(number)\n            while(rollingMax.nonEmpty) {\n     \
    \           rollingMax.lastOption match {\n                    case Some(number)\
    \ => rollingMax.lastOption match {\n                        case Some(number)\
    \ => rollingMax.lastOption match {\n                            case Some(number)\
    \ => rollingMax.lastOption match {\n                                case Some(number)\
    \ => rollingMax.lastOption match {\n                                    case Some(number)\
    \ => rollingMax.lastOption match {\n                                        case\
    \ Some(number) => rollingMax.lastOption match {\n                            \
    \                case Some(number) => rollingMax.lastOption match {\n        \
    \                                        case Some(number) => rollingMax.lastOption\
    \ match {\n                                                    case Some(number)\
    \ => rollingMax.lastOption match {\n                                         \
    \               case Some(number) => rollingMax.lastOption match {\n         \
    \                                                   case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                case\
    \ Some(number) => rollingMax.lastOption match {\n                            \
    \                                        case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \      case Some(number) => rollingMax.lastOption match {\n                  \
    \                                                          rollingMax.lastOption\
    \ match {\n                                                                  \
    \              case Some(number) => rollingMax.lastOption match {\n          \
    \                                                                          case\
    \ Some(number) => rollingMax.lastOption match {\n                            \
    \                                                            case Some(number)\
    \ => rollingMax.lastOption match {\n                                         \
    \                                                   case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \                              case Some(number) => rollingMax.lastOption match\
    \ {\n                                                                        \
    \                            case Some(number) => rollingMax.lastOption match\
    \ {\n                                                                        \
    \                                case Some(number) => rollingMax.lastOption match\
    \ {\n                                                                        \
    \                                    case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                              case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                  case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                      case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                          case Some(number) =>\
    \ rollingMax.lastOption match {\n                                            \
    \                                                                            \
    \        case Some(number) => rollingMax.lastOption match {\n                \
    \                                                                            \
    \                                        case Some(number) => rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                                      case Some(number)\
    \ => roll\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpabn3enz0.scala:27:76 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                                                    \
    \                        rollingMax.lastOption \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   'case'\
    \ expected, but identifier found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpabn3enz0.scala:7:25\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m               \
    \          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val rollingMaxNumber = rollingMax.lastOption.orElse(number)\
    \ + number\n            rollingMax.append(rollingMaxNumber)\n        }\n     \
    \   rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbe4tdr2.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val rollingMaxList = mutable.ListBuffer.empty[Long]\n        numbers.foreach\
    \ { number =>\n            val maxIndex = maxList.lastIndex\n            val maxValue\
    \ = maxList(maxIndex)\n            if (number > maxValue) {\n                maxList\
    \ += number\n                rollingMaxList += maxValue\n            }\n     \
    \   }\n        rollingMaxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7fh49qt0.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7fh49qt0.scala:8:29 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                             Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660010817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var maxIndex = 0\n        var currentMax = 0L\n\
    \        var currentMaxIndex = 0\n        var currentMaxIndex2 = 0\n        var\
    \ currentMaxIndex3 = 0\n        var currentMaxIndex4 = 0\n        var currentMaxIndex5\
    \ = 0\n        var currentMaxIndex6 = 0\n        var currentMaxIndex7 = 0\n  \
    \      var currentMaxIndex8 = 0\n        var currentMaxIndex9 = 0\n        var\
    \ currentMaxIndex10 = 0\n        var currentMaxIndex11 = 0\n        var currentMaxIndex12\
    \ = 0\n        var currentMaxIndex13 = 0\n        var currentMaxIndex14 = 0\n\
    \        var currentMaxIndex15 = 0\n        var currentMaxIndex16 = 0\n      \
    \  var currentMaxIndex17 = 0\n        var currentMaxIndex18 = 0\n        var currentMaxIndex19\
    \ = 0\n        var currentMaxIndex20 = 0\n        var currentMaxIndex21 = 0\n\
    \        var currentMaxIndex22 = 0\n        var currentMaxIndex23 = 0\n      \
    \  var currentMaxIndex24 = 0\n        var currentMaxIndex25 = 0\n        var currentMaxIndex26\
    \ = 0\n        var currentMaxIndex27 = 0\n        var currentMaxIndex28 = 0\n\
    \        var currentMaxIndex29 = 0\n        var currentMaxIndex30 = 0\n      \
    \  var currentMaxIndex31 = 0\n        var currentMaxIndex32 = 0\n        var currentMaxIndex33\
    \ = 0\n        var currentMaxIndex34 = 0\n        var currentMaxIndex35 = 0\n\
    \        var currentMaxIndex36 = 0\n        var currentMaxIndex37 = 0\n      \
    \  var currentMaxIndex38 = 0\n        var currentMaxIndex39 = 0\n        var currentMaxIndex40\
    \ = 0\n        var currentMaxIndex41 = 0\n        var currentMaxIndex42 = 0\n\
    \        var currentMaxIndex43 = 0\n        var currentMaxIndex44 = 0\n      \
    \  var currentMaxIndex45 = 0\n        var currentMaxIndex46 = 0\n        var currentMaxIndex47\
    \ = 0\n        var currentMaxIndex48 = 0\n        var currentMaxIndex49 = 0\n\
    \        var currentMaxIndex50 = 0\n        var currentMaxIndex51 = 0\n      \
    \  var currentMaxIndex52 = 0\n        var currentMaxIndex53 = 0\n        var currentMaxIndex54\
    \ = 0\n        var currentMaxIndex55 = 0\n        var currentMaxIndex56 = 0\n\
    \        var currentMaxIndex57 = 0\n        var currentMaxIndex58 = 0\n      \
    \  var currentMaxIndex59 = 0\n        var currentMaxIndex60 = 0\n        var currentMaxIndex61\
    \ = 0\n        var currentMaxIndex62 = 0\n        var currentMaxIndex63 = 0\n\
    \        var currentMaxIndex64 = 0\n        var currentMaxIndex65 = 0\n      \
    \  var currentMaxIndex66 = 0\n        var currentMaxIndex67 = 0\n        var currentMaxIndex68\
    \ = 0\n        var currentMaxIndex69 = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp69b_dt67.scala:80:11 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp69b_dt67.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp69b_dt67.scala:81:5 ---------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            val index = maxIndex.last\n            if (number >\
    \ maxList(index)) {\n                maxList += number\n                maxIndex\
    \ += index\n            }\n        }\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbfxi3b0a.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbfxi3b0a.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                val maxValue = maxList(maxIndex)\n          \
    \      if (number > maxValue) {\n                    maxList += number\n     \
    \           }\n            }\n        }\n        maxList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd8pkc3gb.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        val currentMax = numbers.head\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n     \
    \   val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n     \
    \   val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n     \
    \   val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n     \
    \   val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n     \
    \   val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n     \
    \   val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n\
    \        val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex\
    \ = numbers.indexOf(0)\n        val currentMaxIndex = numbers.indexOf(0)\n   \
    \     val currentMaxIndex = numbers.indexOf(0)\n        val currentMaxIndex =\
    \ numbers.indexOf(0)\n        val current\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfva05ob0.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfva05ob0.scala:10:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcurrentMaxIndex\e[0m = numbers.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mcurrentMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfva05ob0.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcurrentMaxIndex\e[0m = numbers.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mcurrentMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfva05ob0.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcurrentMaxIndex\e[0m = numbers.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mcurrentMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfva05ob0.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcurrentMaxIndex\e[0m = numbers.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mcurrentMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplev"
  stdout: ''
  timestamp: 1660010826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxList = max.toList.sortBy(_._1).reverse\n        val maxElement\
    \ = maxList.head._2\n        val maxElements = maxList.tail.filter(_._2 > maxElement)\n\
    \        val maxElementsUntilMoment = maxElements.takeWhile(_._2 < maxElement)\n\
    \        val maxElementsUntilMomentList = maxElementsUntilMoment.toList\n    \
    \    val maxElementsUntilMomentListWithIndex = maxElementsUntilMomentList\n  \
    \          .zipWithIndex\n            .sortBy(_._1)\n            .map(_._2)\n\
    \        val maxElementsUntilMomentListWithIndexList = maxElementsUntilMomentListWithIndex\n\
    \            .zipWithIndex\n            .map(_._1)\n        val maxElementsUntilMomentListWithIndexListWithIndex\
    \ = maxElementsUntilMomentListWithIndexList\n            .zipWithIndex\n     \
    \       .map(_._2)\n        val maxElementsUntilMomentListWithIndexListWithIndexList\
    \ = maxElementsUntilMomentListWithIndexListWithIndex\n            .zipWithIndex\n\
    \            .map(_._1)\n        val maxElementsUntilMomentListWithIndexListWithIndexListWithIndex\
    \ = maxElementsUntilMomentListWithIndexListWithIndexListWithIndex\n          \
    \  .zipWithIndex\n            .map(_._2)\n        val maxElementsUntilMomentListWithIndexListWithIndexListWithIndexList\
    \ = maxElementsUntilMomentListWithIndexListWithIndexListWithIndex\n          \
    \  .zipWithIndex\n            .map(_._1)\n        val maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndex\n\
    \            .zipWithIndex\n            .map(_._2)\n        val maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndexList\
    \ = maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndex\n\
    \            .zipWithIndex\n            .map(_._1)\n        val maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\n\
    \            .zipWithIndex\n            .map(_._2)\n        val maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\
    \ = maxElementsUntil\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgntm35qo.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgntm35qo.scala:27:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementsUntilMomentListWithIndexListWithIndexListWithIndex\e[0m = maxElementsUntilMomentListWithIndexListWithIndexListWithIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxElementsUntilMomentListWithIndexListWithIndexListWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgntm35qo.scala:33:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndex\e\
    [0m = maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mmaxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgntm35qo.scala:39:102\
    \ --------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\e\
    [0m = maxElementsUntilMomentListWithIndexListWithIndexListWithIndexListWithIndexListWithIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              ^\e[0m\n"
  stdout: ''
  timestamp: 1660010828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            if (max.containsKey(n))\
    \ {\n                val max = max.updated(n, max(n) + 1)\n            } else\
    \ {\n                val max = max.updated(n, 1)\n            }\n        }\n \
    \       val maxList = max.values.toList\n        val maxIndex = max.keys.toList\n\
    \        val maxElement = maxList.max\n        val maxIndex = maxIndex.max\n \
    \       val maxElementIndex = maxIndex.min\n        val maxElementIndex = maxElementIndex.max\n\
    \        val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val max\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuriw79mf.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuriw79mf.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex.max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuriw79mf.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuriw79mf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.min\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuriw79mf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuriw79mf.scal"
  stdout: ''
  timestamp: 1660010828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val rollingMaxElement = number\
    \ + rollingMax.last\n            rollingMax += rollingMaxElement\n        }\n\
    \        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmq0w8pl6.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var rolling = 0L\n        numbers.foreach(n =>\
    \ {\n            rolling += n\n            max = Math.max(rolling, max)\n    \
    \        maxRolling.append(max)\n        })\n        return maxRolling\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsuks6u4b.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \            rollingMax.lastOption match {\n                case Some(lastNumber)\
    \ =>\n                    rollingMax.lastOption match {\n                    \
    \    case Some(lastNumber) =>\n                            rollingMax.lastOption\
    \ match {\n                                case Some(lastNumber) =>\n        \
    \                            rollingMax.lastOption match {\n                 \
    \                       case Some(lastNumber) =>\n                           \
    \                 rollingMax.lastOption match {\n                            \
    \                    case Some(lastNumber) =>\n                              \
    \                      rollingMax.lastOption match {\n                       \
    \                                 case Some(lastNumber) =>\n                 \
    \                                           rollingMax.lastOption match {\n  \
    \                                                              case Some(lastNumber)\
    \ =>\n                                                                    rollingMax.lastOption\
    \ match {\n                                                                  \
    \      case Some(lastNumber) =>\n                                            \
    \                                rollingMax.lastOption match {\n             \
    \                                                                   case Some(lastNumber)\
    \ =>\n                                                                       \
    \             rollingMax.lastOption match {\n                                \
    \                                                        case Some(lastNumber)\
    \ =>\n                                                                       \
    \                     rollingMax.lastOption match {\n                        \
    \                                                                        case\
    \ Some(lastNumber) =>\n                                                      \
    \                                              rollingMax.lastOption match {\n\
    \                                                                            \
    \                            case Some(lastNumber) =>\n                      \
    \                                                                            \
    \          rollingMax.lastOption match {\n                                   \
    \                                                                            \
    \ case Some(lastNumber) =>\n                                                 \
    \                                                                   rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                      case Some(lastNumber) =>\n\
    \                                                                            \
    \                                                rollingMax.lastOption match {\n\
    \                                                                            \
    \                                                    case Some(lastNumber) =>\n\
    \                                                                            \
    \                                                        rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                                      case Some(lastNumber)\
    \ =>\n                                                                       \
    \                                                                     rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                                            \
    \  case Some(lastNumber) =>\n                                                \
    \                                                                            \
    \                        rollingMax.lastOption match {\n                     \
    \                                                                            \
    \                                                       case Some(lastNumber)\
    \ =>\n                                                                       \
    \                                                                            \
    \         rollingMax.lastOption match {\n                                    \
    \                                                                            \
    \                                                case Some(lastNumber) =>\n  \
    \                                                                            \
    \                                                                            \
    \          rollingMax.lastOption match {\n                                   \
    \                                                                            \
    \                                                         case Some(lastNumber)\
    \ =>\n                                                                       \
    \                                                                            \
    \                         rollingMax.lastOption match {\n                    \
    \                                                                            \
    \                                                                            \
    \    case Some(lastNumber) =>\n                                              \
    \                                                                            \
    \                                                          rollingMax.lastOption\
    \ match {\n                                                                  \
    \                                                                            \
    \                                          case Some(lastNumber) =>\n        \
    \                                                                            \
    \                                                                            \
    \                            rollingMax.lastOption match {\n                 \
    \                                                                            \
    \                                                                            \
    \                       case Some(lastNumber) =>\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7g7yz9c4.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7g7yz9c4.scala:7:25\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m               \
    \          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7g7yz9c4.scala:8:24 ---------------------\e[0m\e[0m\n\e[31m 8\
    \ |\e[0m        numbers.foreach { \e[36mnumber\e[0m =>\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m 9 |\e[0m            rollingMax.append(number)\n\
    \e[31m10 |\e[0m            rollingMax.lastOption \e[33mmatch\e[0m {\n\e[31m11\
    \ |\e[0m                \e[33mcase\e[0m Some(lastNumber) =>\n\e[31m12 |\e[0m \
    \                   rollingMax.lastOption \e[33mmatch\e[0m {\n\e[31m13 |\e[0m\
    \                        \e[33mcase\e[0m Some(lastNumber) =>\n\e[31m14 |\e[0m\
    \                            rollingMax.lastOption \e[33mmatch\e[0m {\n\e[31m15\
    \ |\e[0m                                \e[33mcase\e[0m Some(lastNumber) =>\n\e\
    [31m16 |\e[0m                                    rollingMax.lastOption \e[33mmatch\e\
    [0m {\n\e[31m17 |\e[0m                                        \e[33mcase\e[0m\
    \ Some(lastNumber) =>\n\e[31m18 |\e[0m                                       \
    \     rollingMax.lastOption \e[33mmatch\e[0m {\n\e[31m19 |\e[0m              \
    \                                  \e[33mcase\e[0m Some(lastNumber) =>\n\e[31m20\
    \ |\e[0m                                                    rollingMax.lastOption\
    \ \e[33mmatch\e[0m {\n\e[31m21 |\e[0m                                        \
    \                \e[33mcase\e[0m Some(lastNumber) =>\n\e[31m22 |\e[0m        \
    \                                                    rollingMax.lastOption \e\
    [33mmatch\e[0m {\n\e[31m23 |\e[0m                                   "
  stdout: ''
  timestamp: 1660010834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var index = 0\n        for(i <- 0 until numbers.size)\
    \ {\n            val currentMax = numbers(i)\n            val currentIndex = i\n\
    \            val currentMaxIndex = index\n            val currentMaxValue = max\n\
    \            val currentMaxIndexValue = maxList.size\n            val currentMaxValueIndex\
    \ = maxList.indexOf(max)\n            val currentMaxValueValue = maxList.getOrElse(currentMaxIndexValue,\
    \ 0)\n            val currentMaxValueIndexValue = maxList.indexOf(currentMaxValue)\n\
    \            val currentMaxValueValueValue = maxList.getOrElse(currentMaxValueIndexValue,\
    \ 0)\n            val currentMaxValueIndexValueValue = maxList.indexOf(currentMaxValueValue)\n\
    \            val currentMaxValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValue = maxList.indexOf(currentMaxValueValueValue)\n\
    \            val currentMaxValueValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValueValue = maxList.indexOf(currentMaxValueValueValueValue)\n\
    \            val currentMaxValueValueValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValueValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValueValueValue = maxList.indexOf(currentMaxValueValueValueValueValue)\n\
    \            val currentMaxValueValueValueValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValueValueValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValueValueValueValue = maxList.indexOf(currentMaxValueValueValueValueValueValue)\n\
    \            val currentMaxValueValueValueValueValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValueValueValueValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValueValueValueValue = maxList.indexOf(currentMaxValueValueValueValueValueValue)\n\
    \            val currentMaxValueValueValueValueValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValueValueValueValueValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValueValueValueValueValue\
    \ = maxList.indexOf(currentMaxValueValueValueValueValueValue)\n            val\
    \ currentMaxValueValueValueValueValueValueValueValueValue = maxList.getOrElse(currentMaxValueIndexValueValueValueValueValueValueValueValue,\
    \ 0)\n            val currentMaxValueIndexValueValueValueValueValueValueValueValue\
    \ = maxList.indexOf(currentMaxValueValueValueValueValueValue)\n            val\
    \ currentMaxValueValueValueValue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpne4cq89s.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpne4cq89s.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpne4cq89s.scala:7:26 -------------------------\e[0m\e[0m\n\
    \e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpne4cq89s.scala:44:1 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpne4cq89s.scala:37:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnq6h5mz.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, Math.max(max.getOrElse(x, 0),\
    \ x)))\n        max.values.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9557h9fj.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => rollingMax += x)\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpei08h85m.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            rollingMax += number\n     \
    \   }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptqipmh4r.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var maxIndex = 0\n        numbers.foreach{ n =>\n\
    \            max = Math.max(max, n)\n            rollingMax += max\n        }\n\
    \        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc4xuhx1v.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.append(math.max(rollingMax.last,\
    \ number))\n        }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v374m6z.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val rollingMax = math.max(number,\
    \ maxRolling.last)\n            maxRolling.append(rollingMax)\n        }\n   \
    \     return maxRolling.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3ge5j34.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0L) + x))\n\
    \        val maxList = max.toList\n        val rollingMax = maxList.sliding(numbers.size)\n\
    \        rollingMax.map(x => x.max).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpapbzeqls.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        val rollingMaxIndex = mutable.ListBuffer[Int]()\n        val rollingMaxIndex\
    \ = numbers.zipWithIndex.foreach { case (number, index) =>\n            rollingMax.add(number)\n\
    \            rollingMaxIndex.add(index)\n        }\n        rollingMaxIndex.foreach\
    \ { index =>\n            val rollingMaxIndex = rollingMaxIndex.drop(index)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n\
    \            val rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val\
    \ rollingMaxIndex = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex\
    \ = rollingMaxIndex.dropRight(1)\n            val rollingMaxIndex = rollingMaxIndex.drop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpru5r076b.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpru5r076b.scala:9:12\
    \ ----------------------------\e[0m\e[0m\n\e[31m 9 |\e[0m        \e[33mval\e[0m\
    \ \e[36mrollingMaxIndex\e[0m = numbers.zipWithIndex.foreach { \e[33mcase\e[0m\
    \ (number, index) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mrollingMaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mrollingMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m10 |\e[0m            rollingMax.add(number)\n\
    \e[31m11 |\e[0m            rollingMaxIndex.add(index)\n\e[31m12 |\e[0m       \
    \ }\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpru5r076b.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpru5r076b.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndex\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpru5r076b.scala:51:1 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpru5r076b.scala:44:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m"
  stdout: ''
  timestamp: 1660010835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        val maxRollingIndex = new mutable.ListBuffer[Int]()\n        val maxRollingIndexIndex\
    \ = new mutable.ListBuffer[Int]()\n        numbers.foreach { number =>\n     \
    \       if (maxRolling.length < number) {\n                maxRolling.append(number)\n\
    \                maxRollingIndex.append(0)\n                maxRollingIndexIndex.append(0)\n\
    \            } else {\n                val maxRollingIndex = maxRollingIndexIndex.last\n\
    \                val maxRollingIndexIndex = maxRollingIndexIndex.last\n      \
    \          if (maxRollingIndexIndex < number - maxRollingIndex + 1) {\n      \
    \              maxRolling.append(number)\n                    maxRollingIndex.append(maxRollingIndexIndex\
    \ + 1)\n                    maxRollingIndexIndex.append(number - maxRollingIndex\
    \ + 1)\n                } else {\n                    maxRolling.append(maxRolling(maxRollingIndexIndex))\n\
    \                    maxRollingIndex.append(maxRollingIndexIndex + 1)\n      \
    \              maxRollingIndexIndex.append(0)\n                }\n           \
    \ }\n        }\n        maxRolling\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8gn49y2c.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8gn49y2c.scala:8:34\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxRollingIndex\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8gn49y2c.scala:9:39 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingIndexIndex\e[0m\
    \ = \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                                       ^^^^^^^\e[0m\n\e[31m  |\e[0m         \
    \                              Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => maxList += x)\n        val maxIndex = maxList.indexOf(maxList.max)\n\
    \        maxList.take(maxIndex + 1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiej5gf17.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxes = max.toList.sortBy(_._2).reverse.takeWhile(_._2 > 0)\n   \
    \     val result: List[Long] = maxes.map(x => x._1)\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3w8kww7t.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => maxList += x)\n        val maxIndex = maxList.indexOf(maxList.max)\n\
    \        val maxElement = maxList.take(maxIndex).max\n        maxList.drop(maxIndex).takeWhile(x\
    \ => x <= maxElement).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4srshom7.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(rollingMax.append(_))\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnydoqld.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val result: List[Long] = new mutable.ListBuffer[Long]()\n        max.values.foreach(x\
    \ => if (x > 0) result += x)\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfvcjlin.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfvcjlin.scala:9:37\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                     Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = numbers.indexWhere(x\
    \ => x > number)\n            if (maxIndex > 0) {\n                maxes += numbers(maxIndex\
    \ - 1)\n            }\n        }\n        maxes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr467gsyo.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val max = max.getOrElseUpdate(n,\
    \ 0L)\n            max.update(n + n, n)\n        }\n        val maxList = max.toList\n\
    \        val maxListWithMax = maxList.map { case (k, v) => k -> v }\n        val\
    \ maxListWithMaxSorted = maxListWithMax.sortBy(_._1)\n        val maxListWithMaxSortedWithMax\
    \ = maxListWithMaxSorted.take(numbers.size).toList\n        maxListWithMaxSortedWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkcp5yqz.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val result = new mutable.ListBuffer[Long]()\n        max.foreach(x =>\
    \ result += max.getOrElse(x, 0))\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe53zl96b.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe53zl96b.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ArrayList[Long]()\n        numbers.foreach(n\
    \ => {\n            val maxKey = max.minKey()\n            if (maxKey == null\
    \ || n > maxKey) {\n                max.put(n, n)\n            } else {\n    \
    \            val maxValue = max.getOrElse(n, 0L)\n                max.put(n, maxValue\
    \ + n)\n            }\n        })\n        rollingMax.clear()\n        max.foreach(n\
    \ => {\n            val maxKey = max.minKey()\n            if (maxKey == null\
    \ || n > maxKey) {\n                rollingMax.add(n)\n            }\n       \
    \ })\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuyuhw9x4.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuyuhw9x4.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var rolling = 0L\n        numbers.foreach(n =>\
    \ {\n            if (rolling == 0) {\n                max = n\n              \
    \  maxRolling.clear()\n                maxRolling.append(max)\n              \
    \  rolling = 1\n            } else {\n                if (n > max) {\n       \
    \             max = n\n                    maxRolling.clear()\n              \
    \      maxRolling.append(max)\n                    rolling = 1\n             \
    \   } else {\n                    rolling += 1\n                }\n          \
    \  }\n        })\n        return maxRolling.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpscy36fhe.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max.maxKey\n\
    \            if (maxKey == null || n < maxKey) {\n                max.put(n, n)\n\
    \            } else {\n                val maxValue = max.get(maxKey)\n      \
    \          if (maxValue == null || n > maxValue) {\n                    max.put(maxKey,\
    \ n)\n                }\n            }\n        }\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_q0osdt.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, if (max.getOrElse(x, 0) > x)\
    \ max.getOrElse(x, 0) + 1 else 1))\n        max.values.toList.sortWith(_ < _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp612p7fx3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \            rollingMax.lastOption.append(number)\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5x1_rwf.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(rollingMax.append(_))\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnydoqld.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val maxIndex = numbers.indexOf(Math.max(number,\
    \ maxRolling.last))\n            if (maxIndex == -1) {\n                maxRolling.append(number)\n\
    \            } else {\n                maxRolling.append(numbers(maxIndex))\n\
    \            }\n        }\n        return maxRolling.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3f66b8kd.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \        }\n        rollingMax.reverse.takeWhile(number => number <= numbers.last).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpey1pnzfa.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            val index = maxIndex.lastOption.orElse(maxIndex.size\
    \ + 1)\n            val maxValue = math.max(number, maxList.get(index))\n    \
    \        maxList += maxValue\n            maxIndex += index\n        }\n     \
    \   maxList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklqld_u9.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpklqld_u9.scala:8:23 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var current = 0L\n        var index = 0\n     \
    \   while(index < numbers.size) {\n            max = numbers(index)\n        \
    \    current = numbers(index + 1)\n            index += 1\n            while(current\
    \ > max) {\n                maxList += max\n                max += 1L\n      \
    \      }\n        }\n        return maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjliyedkd.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        val rollingMax = mutable.ListBuffer[Long]()\n        val rollingMaxIndex\
    \ = mutable.ListBuffer[Int]()\n        numbers.foreach(x => {\n            rollingMax.append(x)\n\
    \            rollingMaxIndex.append(0)\n        })\n        rollingMax.foreach(x\
    \ => {\n            val maxIndex = rollingMaxIndex.last\n            val maxValue\
    \ = rollingMax.last\n            if (maxValue > x) {\n                maxList.append(maxValue)\n\
    \                maxList.append(x)\n                maxList.append(maxIndex)\n\
    \                maxList.append(maxIndex + 1)\n                maxList.append(maxIndex\
    \ + 2)\n                maxList.append(maxIndex + 3)\n                maxList.append(maxIndex\
    \ + 4)\n                maxList.append(maxIndex + 5)\n                maxList.append(maxIndex\
    \ + 6)\n                maxList.append(maxIndex + 7)\n                maxList.append(maxIndex\
    \ + 8)\n                maxList.append(maxIndex + 9)\n                maxList.append(maxIndex\
    \ + 10)\n                maxList.append(maxIndex + 11)\n                maxList.append(maxIndex\
    \ + 12)\n                maxList.append(maxIndex + 13)\n                maxList.append(maxIndex\
    \ + 14)\n                maxList.append(maxIndex + 15)\n                maxList.append(maxIndex\
    \ + 16)\n                maxList.append(maxIndex + 17)\n                maxList.append(maxIndex\
    \ + 18)\n                maxList.append(maxIndex + 19)\n                maxList.append(maxIndex\
    \ + 20)\n                maxList.append(maxIndex + 21)\n                maxList.append(maxIndex\
    \ + 22)\n                maxList.append(maxIndex + 23)\n                maxList.append(maxIndex\
    \ + 24)\n                maxList.append(maxIndex + 25)\n                maxList.append(maxIndex\
    \ + 26)\n                maxList.append(maxIndex + 27)\n                maxList.append(maxIndex\
    \ + 28)\n                maxList.append(maxIndex + 29)\n                maxList.append(maxIndex\
    \ + 30)\n                maxList.append(maxIndex + 31)\n                maxList.append(maxIndex\
    \ + 32)\n                maxList.append(maxIndex + 33)\n                maxList.append(maxIndex\
    \ + 34)\n                maxList.append(maxIndex + 35)\n                maxList.append(maxIndex\
    \ + 36)\n                maxList.append(maxIndex + 37)\n                maxList.append(maxIndex\
    \ + 38)\n                maxList.append(maxIndex + 39)\n                maxList.append(maxIndex\
    \ + 40)\n                maxList.append(maxIndex + 41)\n                maxList.append(maxIndex\
    \ + 42)\n                maxList.append(maxIndex + 43)\n                maxList.append(maxIndex\
    \ + 44)\n                maxList.append(maxIndex + 45)\n                maxList.append(maxIndex\
    \ + 46)\n                maxList.append(maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppurb5fvx.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppurb5fvx.scala:77:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmppurb5fvx.scala:7:22 -------------------------\e[0m\e[0m\n\
    \e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppurb5fvx.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppurb5fvx.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndex\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmppurb5fvx.scala:69:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ListBuffer[Long]()\n        numbers.foreach\
    \ { number =>\n            val maxKey = max + (number % max.getOrElse(number,\
    \ number))\n            if (maxKey > number) {\n                max.remove(maxKey)\n\
    \                rollingMax += maxKey\n            }\n            max += (number\
    \ % max.getOrElse(number, number))\n        }\n        rollingMax.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8ax7ko2.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8ax7ko2.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(rollingMax.append(_))\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnydoqld.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            rollingMax.append(number)\n\
    \            if (rollingMax.size > rollingMax.last)\n                rollingMax.last\
    \ = max(rollingMax.last, rollingMax.last)\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvsmxsk9.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val result: List[Long] = new mutable.ListBuffer[Long]()\n        max.foreach\
    \ {\n            case (k, v) => if (v > 0) result += k\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplw5qwd0y.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplw5qwd0y.scala:9:37\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                     Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max.getOrElse(x, 0) + x))\n        max.foreach { case (k, v) =>\
    \ rollingMax += v }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46naqn26.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46naqn26.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => maxList += x)\n        val maxIndex = maxList.size\
    \ - 1\n        val maxElement = maxList(maxIndex)\n        val maxElements = maxList.take(maxIndex\
    \ + 1)\n        val maxElementsUntilMoment = maxList.drop(maxIndex + 1)\n    \
    \    val rollingMax = maxElements.foldLeft(maxElement)(_ + _)\n        rollingMax.zip(maxElementsUntilMoment).map(x\
    \ => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uswkrjk.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0L) + x))\n\
    \        val maxList = max.toList.sortBy(_._1).reverse\n        val rollingMax\
    \ = maxList.takeWhile(_._2 > numbers(0)).map(_._1)\n        rollingMax\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6j2gusvs.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            if (max.containsKey(n))\
    \ {\n                max.update(n, max(max(n), n))\n            } else {\n   \
    \             max.update(n, n)\n            }\n        })\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9jxomv3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach{ number =>\n            val maxIndex = maxes.indexWhere(_\
    \ > number)\n            if (maxIndex == -1) {\n                maxes += number\n\
    \            } else {\n                maxes(maxIndex) = max(maxes(maxIndex),\
    \ number)\n            }\n        }\n        maxes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxn8bp31.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = rollingMax.lastIndex\n\
    \            rollingMax.updated(maxIndex, number)\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiva3_y1b.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { n =>\n            val maxIndex = maxes.indexWhere(x\
    \ => x > n)\n            if (maxIndex == -1) maxes += n\n            else maxes(maxIndex)\
    \ = max(maxes(maxIndex), n)\n        }\n        maxes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp774apwgs.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRollingNumbers = mutable.ListBuffer.empty[Long]\n\
    \        var maxRollingNumber = 0L\n        var currentMax = 0L\n        numbers.foreach{\
    \ number =>\n            currentMax = math.max(currentMax, number)\n         \
    \   maxRollingNumbers += currentMax\n        }\n        return maxRollingNumbers\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgdrn6ocf.scala:7:32 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingNumbers\e[0m =\
    \ mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m            \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                            \
    \    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { x =>\n            val maxKey = max + (x ->\
    \ x)\n            if (maxKey._2 > x)\n                max += (x -> x)\n      \
    \  }\n        max.values.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv_hg2ne7.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(number => rollingMax += math.max(number))\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_z1hjbg.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(rollingMax.append(_))\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnydoqld.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.max.key\n\
    \            if (maxKey == null || n > maxKey) {\n                max.put(n, n)\n\
    \            } else {\n                val maxValue = max.max.value\n        \
    \        if (maxValue == null || n > maxValue) {\n                    max.put(n,\
    \ maxValue)\n                } else {\n                    val maxKeyValue = max.max.keyValue\n\
    \                    if (maxKeyValue == null || n > maxKeyValue) {\n         \
    \               max.put(n, maxKeyValue)\n                    } else {\n      \
    \                  val maxKeyValueValue = max.max.keyValueValue\n            \
    \            if (maxKeyValueValue == null || n > maxKeyValueValue) {\n       \
    \                     max.put(n, maxKeyValueValue)\n                        }\
    \ else {\n                            val maxKeyValueValueValue = max.max.keyValueValueValue\n\
    \                            if (maxKeyValueValueValue == null || n > maxKeyValueValueValue)\
    \ {\n                                max.put(n, maxKeyValueValueValue)\n     \
    \                       } else {\n                                val maxKeyValueValueValueValue\
    \ = max.max.keyValueValueValueValue\n                                if (maxKeyValueValueValueValue\
    \ == null || n > maxKeyValueValueValueValue) {\n                             \
    \       max.put(n, maxKeyValueValueValueValue)\n                             \
    \   } else {\n                                    val maxKeyValueValueValueValueValue\
    \ = max.max.keyValueValueValueValueValue\n                                   \
    \ if (maxKeyValueValueValueValueValue == null || n > maxKeyValueValueValueValueValue)\
    \ {\n                                        max.put(n, maxKeyValueValueValueValueValue)\n\
    \                                    } else {\n                              \
    \          val maxKeyValueValueValueValueValueValue = max.max.keyValueValueValueValueValueValue\n\
    \                                        if (maxKeyValueValueValueValueValueValue\
    \ == null || n > maxKeyValueValueValueValueValueValue) {\n                   \
    \                         max.put(n, maxKeyValueValueValueValueValueValue)\n \
    \                                       } else {\n                           \
    \                 val maxKeyValueValueValueValueValueValueValue = max.max.keyValueValueValueValueValueValueValue\n\
    \                                            if (maxKeyValueValueValueValueValueValueValue\
    \ == null || n > maxKeyValueValueValueValueValueValueValue) {\n              \
    \                                  max.put(n, maxKeyValueValueValueValueValueValueValue)\n\
    \                                            } else {\n                      \
    \                          val maxKeyValueValueValueValueValueValueValueValue\
    \ = max.max.keyValueValueValueValueValueValueValueValue\n                    \
    \                            if (maxKeyValueValueValueValueValueValueValueValue\
    \ == null || n > maxKeyValueValueValueValueValueValueValueValue) {\n         \
    \                                           max.put(n, maxKeyValueValueValueValueValueValueValueValue)\n\
    \                                                } else {\n                  \
    \                                  val maxKeyValueValueValueValueValueValueValueValueValue\
    \ = max.max.keyValueValueValueValueValueValueValueValueValue\n               \
    \                                     if (maxKeyValueValueValueValueValueValueValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0tt3i8e.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0tt3i8e.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpj0tt3i8e.scala:7:22 -------------------------\e[0m\e[0m\n\
    \e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpj0tt3i8e.scala:52:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => {\n            val maxIndex = maxRolling.lastIndex\n\
    \            val maxValue = maxRolling.last\n            if (x > maxValue) {\n\
    \                maxRolling.clear()\n                maxRolling.append(x)\n  \
    \          } else if (x == maxValue) {\n                maxRolling.append(x)\n\
    \            } else {\n                maxRolling.insert(maxIndex + 1, x)\n  \
    \          }\n        })\n        maxRolling.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptgn_azt6.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        val rollingMaxIndex = mutable.ListBuffer.empty[Int]\n        numbers.foreach\
    \ { number =>\n            rollingMax.add(number)\n            rollingMaxIndex\
    \ += number\n        }\n        rollingMax.foreach { number =>\n            val\
    \ index = rollingMaxIndex.indexOf(number)\n            if (index != -1) {\n  \
    \              rollingMaxIndex.remove(index)\n                rollingMax.add(number)\n\
    \            }\n        }\n        rollingMax.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0bd02iva.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0bd02iva.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mrollingMaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660010848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                maxList += maxList.last\n            }\n    \
    \    }\n        maxList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpweq94tug.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val rollingMaxNumber = rollingMax.last\n\
    \            if (rollingMaxNumber < number) {\n                rollingMax.append(number)\n\
    \            } else {\n                rollingMax.append(rollingMaxNumber)\n \
    \           }\n        }\n        rollingMax.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix5qvw1v.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0L) + x))\n\
    \        val maxes = max.toList.sortBy(_._2).reverse\n        val maxesWithMax\
    \ = maxes.takeWhile(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(0)).map(_._1)\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjy5v2vhs.scala:26:76 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxesWithMaxAndIndex\e[0m\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(\n\e[31m\e[31m   |\e[0m         \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjy5v2vhs.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxesWithMaxAndIndex\e[0m = maxes.zipWithIndex.filter(_._2 > numbers(\e\
    [31m0\e[0m)).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxesWithMaxAndIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxesWithMaxAndIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjy5v2vhs.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxesWithMaxAndIndex\e[0m\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(\e[31m0\e[0m)).map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxesWithMaxAndIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxesWithMaxAndIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjy5v2vhs.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxesWithMaxAndIndex\e[0m\
    \ = maxes.zipWithIndex.filter(_._2 > numbers(\e[31m0\e[0m)).map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxesWithMaxAndIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxesWithMaxAndIndex\e"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                maxList += maxList[maxIndex] + number\n     \
    \       }\n        }\n        maxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yzseltj.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => maxList += x)\n        val maxIndex = maxList.lastIndex\n\
    \        val maxElement = maxList(maxIndex)\n        val maxList = maxList.drop(maxIndex)\n\
    \        val maxList2 = maxList.takeRight(numbers.size)\n        val maxList3\
    \ = maxList2.takeRight(numbers.size)\n        val maxList4 = maxList3.takeRight(numbers.size)\n\
    \        val maxList5 = maxList4.takeRight(numbers.size)\n        val maxList6\
    \ = maxList5.takeRight(numbers.size)\n        val maxList7 = maxList6.takeRight(numbers.size)\n\
    \        val maxList8 = maxList7.takeRight(numbers.size)\n        val maxList9\
    \ = maxList8.takeRight(numbers.size)\n        val maxList10 = maxList9.takeRight(numbers.size)\n\
    \        val maxList11 = maxList10.takeRight(numbers.size)\n        val maxList12\
    \ = maxList11.takeRight(numbers.size)\n        val maxList13 = maxList12.takeRight(numbers.size)\n\
    \        val maxList14 = maxList13.takeRight(numbers.size)\n        val maxList15\
    \ = maxList14.takeRight(numbers.size)\n        val maxList16 = maxList15.takeRight(numbers.size)\n\
    \        val maxList17 = maxList16.takeRight(numbers.size)\n        val maxList18\
    \ = maxList17.takeRight(numbers.size)\n        val maxList19 = maxList18.takeRight(numbers.size)\n\
    \        val maxList20 = maxList19.takeRight(numbers.size)\n        val maxList21\
    \ = maxList20.takeRight(numbers.size)\n        val maxList22 = maxList21.takeRight(numbers.size)\n\
    \        val maxList23 = maxList22.takeRight(numbers.size)\n        val maxList24\
    \ = maxList23.takeRight(numbers.size)\n        val maxList25 = maxList24.takeRight(numbers.size)\n\
    \        val maxList26 = maxList25.takeRight(numbers.size)\n        val maxList27\
    \ = maxList26.takeRight(numbers.size)\n        val maxList28 = maxList27.takeRight(numbers.size)\n\
    \        val maxList29 = maxList28.takeRight(numbers.size)\n        val maxList30\
    \ = maxList29.takeRight(numbers.size)\n        val maxList31 = maxList30.takeRight(numbers.size)\n\
    \        val maxList32 = maxList31.takeRight(numbers.size)\n        val maxList33\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbfqcn3rx.scala:43:23 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmaxList33\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbfqcn3rx.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.drop(maxIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbfqcn3rx.scala:7:22 -------------------------\e[0m\e[0m\n\e[31m7 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbfqcn3rx.scala:44:5 ---------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(number => {\n            rollingMax.append(math.max(number))\n\
    \        })\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdtih82pa.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxRoll = new mutable.HashMap[Long, Long]()\n        numbers.foreach(n\
    \ => {\n            if (max.containsKey(n)) {\n                val maxValue =\
    \ max.get(n)\n                val maxRoll = maxRoll.updated(n, maxValue + n)\n\
    \                max.remove(maxValue)\n            } else {\n                val\
    \ maxValue = n\n                val maxRoll = maxRoll.updated(n, maxValue + n)\n\
    \                max.put(maxValue, maxRoll)\n            }\n        })\n     \
    \   max.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcbb3ro0.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcbb3ro0.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxRoll\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(number => {\n            val maxIndex = numbers.indexOf(Math.max(number))\n\
    \            val maxValue = numbers(maxIndex)\n            maxRolling += maxValue\n\
    \        })\n        return maxRolling.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplwal5c2i.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmplwal5c2i.scala:9:48\
    \ ------------------------------\e[0m\e[0m\n\e[31m9 |\e[0m            \e[33mval\e\
    [0m \e[36mmaxIndex\e[0m = numbers.indexOf(Math.max(number))\n\e[31m\e[31m  |\e\
    [0m                                           ^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mobject\e\
    [0m \e[35mMath\e[0m with types\n\e[31m  |\e[0m (x$0: Double, x$1: Double): Double\n\
    \e[31m  |\e[0m (x$0: Float, x$1: Float): Float\n\e[31m  |\e[0m (x$0: Long, x$1:\
    \ Long): Long\n\e[31m  |\e[0m (x$0: Int, x$1: Int): Int\n\e[31m  |\e[0mmatch arguments\
    \ ((number : Long))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var i = 0\n        while(i < numbers.length) {\n\
    \            max = numbers(i)\n            while(i < numbers.length && numbers(i)\
    \ < max) {\n                max = numbers(i)\n                i += 1\n       \
    \     }\n            maxList += max\n        }\n        maxList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmperinbgnq.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList.add(x));\n\
    \        val maxList = maxList.sortWith((x, y) => x._1 < y._1)\n        val maxList\
    \ = maxList.takeWhile(x => x <= numbers(numbers.size))\n        maxList.foreach(x\
    \ => max.put(x, \n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpotwzsj9w.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotwzsj9w.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxList\e[0m = maxList.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x._1 <\
    \ y._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpotwzsj9w.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.takeWhile(\e\
    [36mx\e[0m => x <= numbers(numbers.size))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpotwzsj9w.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x._1 < y._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpotwzsj9w.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = maxList.takeWhile(\e\
    [36mx\e[0m => x <= numbers(numbers.size))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1660010854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.foreach(x => maxList\
    \ += max(x.getOrElse(x, 0L)));\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5tyeaex.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5tyeaex.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(number => {\n            val maxIndex = numbers.indexOf(number)\
    \ + 1\n            val maxValue = numbers.take(maxIndex).max\n            maxRolling\
    \ += maxValue\n        })\n        return maxRolling.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo42ovnda.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndex = new mutable.HashMap[Long, Int]()\n        numbers.foreach(x\
    \ => max.put(x, x))\n        numbers.foreach(x => {\n            val maxValue\
    \ = max.get(x)\n            val maxIndex = maxIndex.getOrElse(x, 0)\n        \
    \    if (maxValue > max.getOrElse(maxIndex + 1, 0)) {\n                max.put(maxIndex\
    \ + 1, maxValue)\n                maxIndex += 1\n            }\n            maxIndex\
    \ += 1\n        })\n        val maxList = max.values.toList\n        val maxIndex\
    \ = max.keys.toList\n        val maxIndex = maxIndex.sortBy(x => x)\n        val\
    \ maxIndex = maxIndex.take(numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x - 1)\n        val maxIndex = maxIndex.map(x => x + 1)\n        val maxIndex\
    \ = maxIndex.map(x => x - numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x + numbers.size)\n        val maxIndex = maxIndex.map(x => x - numbers.size)\n\
    \        val maxIndex = maxIndex.map(x => x + numbers.size)\n        val maxIndex\
    \ = maxIndex.map(x => x - numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x + numbers.size)\n        val maxIndex = maxIndex.map(x => x - numbers.size)\n\
    \        val maxIndex = maxIndex.map(x => x + numbers.size)\n        val maxIndex\
    \ = maxIndex.map(x => x - numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x + numbers.size)\n        val maxIndex = maxIndex.map(x => x - numbers.size)\n\
    \        val maxIndex = maxIndex.map(x => x + numbers.size)\n        val maxIndex\
    \ = maxIndex.map(x => x - numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x + numbers.size)\n        val maxIndex = maxIndex.map(x => x - numbers.size)\n\
    \        val maxIndex = maxIndex.map(x => x + numbers.size)\n        val maxIndex\
    \ = maxIndex.map(x => x - numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x + numbers.size)\n        val maxIndex = maxIndex.map(x => x - numbers.size)\n\
    \        val maxIndex = maxIndex.map(x => x + numbers.size)\n        val maxIndex\
    \ = maxIndex.map(x => x - numbers.size)\n        val maxIndex = maxIndex.map(x\
    \ => x + numbers.size)\n        val maxIndex = maxIndex.map(x => x - numbers.size)\n\
    \        val maxIndex = maxIndex.map(x => x + numbers.size)\n        val maxIndex\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpth8l011e.scala:49:22 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpth8l011e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = max.keys.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpth8l011e.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.sortBy(\e[36mx\e\
    [0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpth8l011e.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.take(numbers.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpth8l011e.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.map(\e[36mx\e\
    [0m => x - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1660010860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(number => {\n            val rollingMaxNumber = rollingMax.last\n\
    \            if (number > rollingMaxNumber) {\n                rollingMax.append(number)\n\
    \            }\n        })\n        rollingMax.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bm_ijn6.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxes = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { n =>\n            val maxIndex = maxes.indexWhere(x\
    \ => x > n)\n            if (maxIndex == -1) maxes += n\n            else maxes(maxIndex)\
    \ = max(maxes(maxIndex), n)\n        }\n        maxes.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp774apwgs.scala:7:20 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxes\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max max n\n\
    \            if (maxKey > n) max += n -> maxKey\n        }\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyocem9ds.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRollingMax = new mutable.ListBuffer[Long]()\n\
    \        val rollingMax = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => {\n            rollingMax.append(x)\n            if (rollingMax.size == numbers.size)\
    \ {\n                maxRollingMax.append(rollingMax.max)\n                rollingMax.clear()\n\
    \            }\n        })\n        if (rollingMax.nonEmpty) maxRollingMax.append(rollingMax.max)\n\
    \        maxRollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp732exz8e.scala:7:32 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRollingMax\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \                  ^^^^^^^\e[0m\n\e[31m  |\e[0m                              \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp732exz8e.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = new mutable.ListBuffer[Long]()\n\
    \        val maxNumber = numbers.head\n        val maxIndex = numbers.indexOf(0)\n\
    \        numbers.tail.foreach(number => {\n            if (number > maxNumber)\
    \ {\n                maxList += maxNumber\n                maxNumber = number\n\
    \                maxIndex = numbers.indexOf(number)\n            }\n         \
    \   else {\n                maxNumber += number\n            }\n        })\n \
    \       maxList += maxNumber\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20k6x2am.scala:7:26 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp20k6x2am.scala:13:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                maxNumber\
    \ = number\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxNumber\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp20k6x2am.scala:14:25 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                maxIndex = numbers.indexOf(number)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp20k6x2am.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                maxNumber += number\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value += is not\
    \ a member of Long - did you mean maxNumber.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max.max.key\n\
    \            val maxValue = max.max.value\n            val newMaxValue = if (maxKey\
    \ == n) maxValue else maxValue + 1\n            max.put(maxKey, newMaxValue)\n\
    \        }\n        max.values.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7mej3zdi.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxes = max.toList.sortBy(_._1).reverse\n        val maxesWithMax\
    \ = maxes.takeWhile(_._2 > numbers.size).reverse\n        val maxesWithMaxAndIndex\
    \ = maxes.zipWithIndex.filter(_._2 > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndex.map(_._1).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMaxAndIndexWithMax.zipWithIndex.filter(_._2 > numbers.size).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMax = maxesWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex = maxesWithMaxAndIndexWithMaxAndIndexWithMax.zipWithIndex.filter(_._2\
    \ > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n   \
    \     val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex =\
    \ maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax.zipWithIndex.filter(_._2\
    \ > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax.zipWithIndex.filter(_._2\
    \ > numbers.size).reverse\n        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMax\
    \ = maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex.map(_._1).reverse\n\
    \        val maxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\
    \ = maxesWithMaxAndIndexWith\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptr7dikdx.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptr7dikdx.scala:21:110\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxesWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndexWithMaxAndIndex\e\
    [0m = maxesWithMaxAndIndexWith\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 Not found: maxesWithMaxAndIndexWith\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptr7dikdx.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.minKey\n\
    \            if (maxKey == null || n < maxKey) {\n                max.put(n, n)\n\
    \            } else {\n                val maxValue = max.getOrElse(n, n)\n  \
    \              max.put(n, maxValue + n)\n            }\n        })\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgsaocic.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max.max.key\n\
    \            if (maxKey == null || n > maxKey) {\n                max.put(n, n)\n\
    \            } else {\n                max.put(maxKey, max)\n            }\n \
    \       }\n        val maxList = max.values.toList\n        val maxListLength\
    \ = maxList.size\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = maxListLength - 1\n        val maxListLength = maxListLength\
    \ - 1\n        val maxListLength = maxListLength - 1\n        val maxListLength\
    \ = maxListLength - 1\n        val maxListLength = maxListLength - 1\n       \
    \ val maxListLength = \n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpiyjsdubp.scala:61:27 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiyjsdubp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiyjsdubp.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiyjsdubp.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiyjsdubp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListLength is already de"
  stdout: ''
  timestamp: 1660010863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxList = new mutable.ListBuffer[Long]()\n        for(x <- max.keys)\
    \ {\n            val maxValue = max.get(x)\n            val maxKey = if (maxValue\
    \ > 0) x else maxValue - 1\n            val maxIndex = maxList.indexOf(maxKey)\n\
    \            if (maxIndex == -1) maxList += maxKey\n            else maxList +=\
    \ maxKey :: maxList.drop(maxIndex + 1)\n        }\n        return maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3om8951d.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3om8951d.scala:9:26\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val rollingMax = new mutable.ArrayBuffer[Long]()\n        for\
    \ (i <- 0 until numbers.size) {\n            val max = numbers(i)\n          \
    \  if (max.isDefined) {\n                val maxKey = max.key\n              \
    \  if (maxKey > rollingMax.last) {\n                    rollingMax.clear()\n \
    \               }\n                rollingMax += maxKey\n            }\n     \
    \   }\n        rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxw4ffky.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcxw4ffky.scala:8:29\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                           Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcxw4ffky.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (max.isDefined) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value isDefined is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcxw4ffky.scala:12:33 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m                \e[33mval\e[0m \e[36mmaxKey\e[0m = max.key\n\e[31m\e[31m  \
    \ |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  value key is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                maxList += maxList[maxIndex] + number\n     \
    \       }\n        }\n        maxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2yzseltj.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        max.values.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpski9dpw3.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var i = 0\n        while (i < numbers.length) {\n\
    \            max = numbers(i)\n            rollingMax += max\n            i +=\
    \ 1\n        }\n        rollingMax.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpss0i23dj.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = math.max(max(n),\
    \ n)\n            max.put(maxKey, max(n))\n        })\n        max.values.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nrxvhno.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            if (max.containsKey(n))\
    \ {\n                max.update(n, max(n) + 1)\n            } else {\n       \
    \         max.update(n, 1L)\n            }\n        })\n        val rollingMax\
    \ = new mutable.HashMap[Long, Long]()\n        max.foreach(n => {\n          \
    \  val maxValue = max(n)\n            val maxKey = n - maxValue\n            if\
    \ (rollingMax.containsKey(maxKey)) {\n                rollingMax.update(maxKey,\
    \ rollingMax(maxKey) + maxValue)\n            } else {\n                rollingMax.update(maxKey,\
    \ maxValue)\n            }\n        })\n        rollingMax.keys.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptgvx2ui6.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptgvx2ui6.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(rollingMax += _)\n        rollingMax.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitw9etg7.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach(x => rollingMax += x)\n        rollingMax.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpei08h85m.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => {\n            val maxKey = max.keySet().toList.max\n            if (maxKey\
    \ < x) {\n                max.put(x, x)\n            } else {\n              \
    \  val maxValue = max.get(maxKey)\n                if (maxValue < x) {\n     \
    \               max.put(x, maxValue)\n                } else {\n             \
    \       max.put(x, maxValue + 1)\n                }\n            }\n        })\n\
    \        max.keys.toList.foreach(x => maxList += max.get(x))\n        return maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_4f0bwf_.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_4f0bwf_.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxList = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            val maxIndex = maxList.lastIndex\n\
    \            if (maxIndex == -1) {\n                maxList += number\n      \
    \      } else {\n                maxList += maxList.last\n            }\n    \
    \    }\n        maxList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5b7tt6id.scala:7:26 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => max.put(x, max(x.getOrElse(x, 0L) + 1)));\n        max.values.foreach(x =>\
    \ maxList.add(x));\n        maxList.sortWith((x, y) => x > y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphf4j475s.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphf4j475s.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(x => rollingMax.append(x))\n        rollingMax.takeWhile(x\
    \ => x <= numbers(numbers.size-1))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz92sl1f.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, Math.max(max.getOrElse(x, 0),\
    \ x)))\n        max.values.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9557h9fj.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.minKey\n\
    \            if (maxKey == null || n > maxKey) {\n                max += n ->\
    \ n\n            }\n        })\n        max.values.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_j_px0yv.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(x\
    \ => {\n            if (max.contains(x)) {\n                val max = max(x)\n\
    \                val maxList = maxList.toList\n                maxList.add(max)\n\
    \                max.clear()\n            } else {\n                max.put(x,\
    \ x)\n            }\n        })\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2zy42ut.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2zy42ut.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val rollingMaxNumber = rollingMax.lastOption.getOrElse(number)\
    \ + number\n            rollingMax.append(rollingMaxNumber)\n        }\n     \
    \   rollingMax.toList\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5idb0tcr.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.getOrElse(n,\
    \ 0)\n            max.update(n, maxKey + 1)\n        })\n        val maxList =\
    \ max.toList.sortBy(_._1).reverse\n        val maxElement = maxList.head._2\n\
    \        val maxList = maxList.tail.sortBy(_._1).reverse\n        val maxElements\
    \ = maxList.map(x => x._2)\n        val maxElementsIndex = maxList.indexOf(maxElement)\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = maxElementsIndex - 1\n        val maxElementsIndex\
    \ = maxElementsIndex - 1\n        val maxElementsIndex = maxElementsIndex - 1\n\
    \        val maxElementsIndex = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph1qu60r4.scala:50:30 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsIndex\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph1qu60r4.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxList\e[0m = maxList.tail.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxList\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxList\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph1qu60r4.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElementsIndex\e[0m = maxElementsIndex + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxElementsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph1qu60r4.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsIndex\e[0m = maxElementsIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxElementsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph1qu60r4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsIndex\e[0m =\
    \ maxElementsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        numbers.foreach { number =>\n            val rollingMaxIndex = rollingMax.lastIndex\n\
    \            rollingMax.lastOption = rollingMax.lastOption.getOrElse(number) +\
    \ 1\n            if (rollingMax.lastOption.getOrElse(number) == number) {\n  \
    \              rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == 0) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -1) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -2) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -3) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -4) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -5) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -6) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -7) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -8) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -9) {\n                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - 1\n            }\n            if (rollingMax.lastOption.getOrElse(number)\
    \ == -10) {\n                rollingMax.lastOption = rollingMax.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkmcg9v90.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmcg9v90.scala:7:25\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mrollingMax\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e[0m               \
    \          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkmcg9v90.scala:8:24 ---------------------\e[0m\e[0m\n\e[31m 8\
    \ |\e[0m        numbers.foreach { \e[36mnumber\e[0m =>\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m 9 |\e[0m            \e[33mval\e[0m \e[36mrollingMaxIndex\e\
    [0m = rollingMax.lastIndex\n\e[31m10 |\e[0m            rollingMax.lastOption =\
    \ rollingMax.lastOption.getOrElse(number) + \e[31m1\e[0m\n\e[31m11 |\e[0m    \
    \        \e[33mif\e[0m (rollingMax.lastOption.getOrElse(number) == number) {\n\
    \e[31m12 |\e[0m                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - \e[31m1\e[0m\n\e[31m13 |\e[0m            }\n\e[31m14 |\e[0m            \e\
    [33mif\e[0m (rollingMax.lastOption.getOrElse(number) == \e[31m0\e[0m) {\n\e[31m15\
    \ |\e[0m                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - \e[31m1\e[0m\n\e[31m16 |\e[0m            }\n\e[31m17 |\e[0m            \e\
    [33mif\e[0m (rollingMax.lastOption.getOrElse(number) == -\e[31m1\e[0m) {\n\e[31m18\
    \ |\e[0m                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - \e[31m1\e[0m\n\e[31m19 |\e[0m            }\n\e[31m20 |\e[0m            \e\
    [33mif\e[0m (rollingMax.lastOption.getOrElse(number) == -\e[31m2\e[0m) {\n\e[31m21\
    \ |\e[0m                rollingMax.lastOption = rollingMax.lastOption.getOrElse(number)\
    \ - \e[31m1\e[0m\n\e[31m22 |\e[0m            }\n\e[31m23 |\e[0m            \e\
    [33mif\e[0m (rollingMax.lastOption.getOrElse(number) == -\e[31m3\e[0m) {\n\e[31m24\
    \ |\e[0m      "
  stdout: ''
  timestamp: 1660010871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer.empty[Long]\n\
    \        var max = 0L\n        var i = 0\n        while(i < numbers.length) {\n\
    \            max = numbers(i)\n            while(max > numbers(i+1)) {\n     \
    \           max -= numbers(i+1)\n                i += 1\n            }\n     \
    \       rollingMax.append(max)\n            i += 1\n        }\n        rollingMax.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9n7q2x6.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRolling = new mutable.ListBuffer[Long]()\n\
    \        val rolling = new mutable.ListBuffer[Long]()\n        numbers.foreach(x\
    \ => {\n            rolling.clear()\n            rolling += x\n            while\
    \ (rolling.nonEmpty) {\n                val maxRollingIndex = rolling.max\n  \
    \              maxRolling += maxRollingIndex\n                rolling.remove(maxRollingIndex)\n\
    \            }\n        })\n        maxRolling\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xny5q97.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxRolling\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m              \
    \               ^^^^^^^\e[0m\n\e[31m  |\e[0m                             Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8xny5q97.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mrolling\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val maxRollingNumbers = mutable.ListBuffer[Long]()\n\
    \        val maxRollingNumbersSize = numbers.size + 1\n        val maxRollingNumbersIndex\
    \ = 0\n        val maxRollingNumbersIndexSize = numbers.size + 1\n        val\
    \ maxRollingNumbersIndexIndex = 0\n        val maxRollingNumbersIndexIndexSize\
    \ = numbers.size + 1\n        val maxRollingNumbersIndexIndexIndexSize = 1\n \
    \       val maxRollingNumbersIndexIndexIndexIndexSize = 2\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 3\n        val maxRollingNumbersIndexIndexIndexIndexSize = 4\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 5\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 6\n        val maxRollingNumbersIndexIndexIndexIndexSize = 7\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 8\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 9\n        val maxRollingNumbersIndexIndexIndexIndexSize = 10\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 11\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 12\n        val maxRollingNumbersIndexIndexIndexIndexSize = 13\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 14\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 15\n        val maxRollingNumbersIndexIndexIndexIndexSize = 16\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 17\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 18\n        val maxRollingNumbersIndexIndexIndexIndexSize = 19\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 20\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 21\n        val maxRollingNumbersIndexIndexIndexIndexSize = 22\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 23\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 24\n        val maxRollingNumbersIndexIndexIndexIndexSize = 25\n        val\
    \ maxRollingNumbersIndexIndexIndexIndexSize = 26\n        val maxRollingNumbersIndexIndexIndexIndexSize\
    \ = 27\n        val maxRollingNumbersIndexIndexIndexSize = 28\n        val maxRollingNumbersIndexIndexIndexSize\
    \ = 29\n        val maxRollingNumbersIndexIndexIndexSize = 30\n        val maxRollingNumbersIndexIndexIndexSize\
    \ = 31\n        val maxRollingNumber\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxe010x1k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxe010x1k.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m = \e[31m3\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxRollingNumbersIndexIndexIndexIndexSize is already defined as \e\
    [33mvalue\e[0m \e[35mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxe010x1k.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m = \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxRollingNumbersIndexIndexIndexIndexSize is already defined as \e\
    [33mvalue\e[0m \e[35mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxe010x1k.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m = \e[31m5\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxRollingNumbersIndexIndexIndexIndexSize is already defined as \e\
    [33mvalue\e[0m \e[35mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxe010x1k.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxRollingNumbersIndexIndexIndexIndexSize\e[0m = \e[31m6\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.getOrElseUpdate(n,\
    \ 0L)\n            if (maxKey > n) max.update(n, maxKey)\n        })\n       \
    \ max.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynaakys5.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- numbers) {\n            val max = i\n            if (max.isDefined) {\n \
    \               val maxKey = max.key\n                if (maxKey > maxList.last)\
    \ {\n                    maxList += maxKey\n                }\n              \
    \  max.remove(maxKey)\n            }\n        }\n        maxList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi854w42n.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi854w42n.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpi854w42n.scala:11:20 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m            \e[33mif\e[0m (max.isDefined) {\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value isDefined is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi854w42n.scala:12:33\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e\
    [0m \e[36mmaxKey\e[0m = max.key\n\e[31m\e[31m   |\e[0m                       \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                             value key is\
    \ not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi854w42n.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                max.remove(maxKey)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        value remove is not a member of Long\n5 errors found\n"
  stdout: ''
  timestamp: 1660010872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        val maxList = new mutable.ArrayList[Long]()\n        numbers.foreach(n\
    \ => {\n            val maxKey = max + (n - 1)\n            if (maxKey > max)\
    \ {\n                maxList.clear()\n                maxList.add(n)\n       \
    \         max = maxKey\n            } else {\n                maxList.add(n)\n\
    \            }\n        })\n        maxList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzjvl2x6j.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzjvl2x6j.scala:8:26\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpzjvl2x6j.scala:14:20 -----------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m                max = maxKey\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val max\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => {\n            val maxKey = max.getOrElse(n,\
    \ 0)\n            val maxValue = max.getOrElse(n, 0)\n            max.put(n, maxValue\
    \ + 1)\n        })\n        max.values.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqsq3sic.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach { n =>\n            val maxKey = max.minKey\n\
    \            if (maxKey == null || n > maxKey) {\n                max += n ->\
    \ n\n            }\n        }\n        val maxList = max.values.toList\n     \
    \   val maxIndex = maxList.indexWhere(_ > 0)\n        val maxElement = maxList[maxIndex]\n\
    \        val maxElementIndex = numbers.indexWhere(_ == maxElement)\n        val\
    \ maxElementIndex = maxElementIndex + 1\n        val maxElements = numbers.take(maxElementIndex)\n\
    \        val maxElementsIndex = numbers.indexWhere(_ == maxElement)\n        val\
    \ maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex\
    \ + 1\n        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = maxElementsIndex + 1\n\
    \        val maxElementsIndex = maxElementsIndex + 1\n        val maxElementsIndex\
    \ = maxElementsIndex + 1\n        val maxElementsIndex = max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fl_q4s5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxElementIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2fl_q4s5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsIndex\e[0m =\
    \ maxElementsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxElementsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2fl_q4s5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsIndex\e[0m =\
    \ maxElementsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxElementsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2fl_q4s5.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsIndex\e[0m =\
    \ maxElementsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElementsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxElementsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2fl_q4s5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxElementsI"
  stdout: ''
  timestamp: 1660010872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(n => max.put(n, Math.max(n, max.getOrElse(n,0L))))\n\
    \        val maxList = max.values.toList\n        val rollingMax = maxList.sliding(numbers.size)\n\
    \        rollingMax.map(_.max).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n    assert(rollingMax((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong, 3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
    \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
    \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwnhiee1t.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val max = new mutable.HashMap[Long,\
    \ Long]()\n        numbers.foreach(x => max.put(x, max.getOrElse(x, 0) + x))\n\
    \        val maxes = max.toList.sortBy(_._1).reverse.take(numbers.size)\n    \
    \    val maxesWithIndex = maxes.zipWithIndex.filter(_._1 == maxes.max)\n     \
    \   val maxesWithIndex = maxesWithIndex.map(_._2)\n        val maxesWithIndex\
    \ = maxesWithIndex.map(x => numbers.indexOf(x) + 1)\n        maxesWithIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jd7ui0f.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxesWithIndex\e[0m = maxesWithIndex.map(_._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxesWithIndex is already defined as \e[33mvalue\e[0m \e[35mmaxesWithIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jd7ui0f.scala:12:12 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxesWithIndex\e[0m = maxesWithIndex.map(\e\
    [36mx\e[0m => numbers.indexOf(x) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxesWithIndex is already defined as \e[33mvalue\e[0m \e[35mmaxesWithIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp5jd7ui0f.scala:7:22 -------------------------\e[0m\e[0m\n\
    \e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                      Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    // in the sequence.\n    def rollingMax(numbers\
    \ : List[Long]) : List[Long] = {\n        val rollingMax = mutable.ListBuffer[Long]()\n\
    \        var max = 0L\n        var maxIndex = 0\n        numbers.foreach(number\
    \ => {\n            rollingMax.append(number)\n            max = math.max(max,\
    \ number)\n            maxIndex += 1\n        })\n        rollingMax.takeWhile(number\
    \ => number != max).reverse.drop(maxIndex).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
    \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong,\
    \ 3l.toLong, 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoculrrv8.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mrollingMax\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010871
