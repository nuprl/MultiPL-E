language: scala
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfu9a_tp.scala:19)\n\tat Problem.main(tmpcfu9a_tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ptx5a2x.scala:17)\n\tat Problem.main(tmp8ptx5a2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbl56m1f.scala:16)\n\tat Problem.main(tmplbl56m1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)\n\
    \            .forall(_.toString.toLowerCase != \"word\")\n        isLetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwfyxne6y.scala:13:13 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.splitAt(txt.length-\e\
    [31m1\e[0m)\n\e[31m13 |\e[0m            .forall(_.toString.toLowerCase != \e[31m\"\
    word\"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e\
    [0m                        value forall is not a member of (String, String)\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(!isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6dq6ap4.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e\
    [0m = txt.dropRight(\e[31m1\e[0m).forall(!isLetter)\n\e[31m\e[31m   |\e[0m   \
    \                                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Found:    Boolean\n\e[31m   |\e\
    [0m                                               Required: \e[1m\e[32mChar\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.contains(lastChar))\n        isLetter && !isNotWord\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnj4fb0lc.scala:17)\n\tat Problem.main(tmpnj4fb0lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.isLetter\n        val isLastCharNotALetter = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5tnindg3.scala:32:51 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = txt.split(\n\e[31m\e[31m   |\e[0m                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5tnindg3.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5tnindg3.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = txt.split(\e[31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5tnindg3.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = txt.split(\e[31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(x\
    \ => x != ' ')\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq527my4x.scala:19)\n\tat Problem.main(tmpq527my4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        while (lastChar != ' ') {\n            if (lastChar.isLetter)\
    \ {\n                isLastCharALetter = false\n            }\n            lastChar\
    \ = txt.last\n        }\n        return isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfu9a_tp.scala:19)\n\tat Problem.main(tmpcfu9a_tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharAlpha\
    \ = lastChar != ' ' && lastChar.isLetter\n        val isLastCharNotWord = lastChar\
    \ != ' ' && !isLastCharAlpha\n        isLastCharNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5b46dej.scala:17)\n\tat Problem.main(tmpj5b46dej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = lastChar.toString.isLetter\n        val isNotALetter = lastChar.toString.isNotLetter\n\
    \        val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isALetter\
    \ && !isNotALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdu_0g21n.scala:11:42 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdu_0g21n.scala:12:45 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value isNotLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(x\
    \ => x != ' ')\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq527my4x.scala:19)\n\tat Problem.main(tmpq527my4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ptx5a2x.scala:17)\n\tat Problem.main(tmp8ptx5a2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharAlpha\
    \ = lastChar.isLetter\n        val isLastCharNotWord = lastChar != ' ' && lastChar\
    \ != '-' && lastChar != '_'\n        isLastCharAlpha && !isLastCharNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplkjofrvk.scala:17)\n\tat Problem.main(tmplkjofrvk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split().lastOption.exists(_.toString.contains(lastChar))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpo0sqy6er.scala:12:28 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split().lastOption.exists(_.toString.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Array[String]\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m   |\e[0mmatch arguments\
    \ ()\n1 error found\n"
  stdout: ''
  timestamp: 1659978697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        var isLastCharNotALetter = false\n        for(i <- 0 until txt.length){\n\
    \            if(txt(i) == lastChar){\n                isLastCharALetter = false\n\
    \            }\n        }\n        return isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8gdvfnc.scala:22)\n\tat Problem.main(tmpb8gdvfnc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.isLetter\n        val isLastCharNotALetter = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetterOrWord = lastChar.toString.isNotLetter || lastChar.toString.contains(\"\
    \ \")\n        val isLastCharNotALetterOrWordOrNotLetter = lastChar.toString.isNotLetter\
    \ || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\n       \
    \ val isLastCharNotALetterOrWordOrNotLetterOrNotWord = lastChar.toString.isNotLetter\
    \ || lastChar.toString.contains(\" \") || lastChar.toString.isLetter || lastChar.toString.isNotWord\n\
    \        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetter = lastChar.toString.isNotLetter\
    \ || lastChar.toString.contains(\" \") || lastChar.toString.isLetter || lastChar.toString.isNotWord\
    \ || lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\
    \ || lastChar.toString.isNotWord || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\n\
    \        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetter\
    \ = lastChar.toString.isNotLetter || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\
    \ || lastChar.toString.isNotWord || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\
    \ || lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetterOrNotWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\
    \ || lastChar.toString.isNotWord || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\
    \ || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\n        val\
    \ isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetter\
    \ = lastChar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7qlqdc8.scala:11:50 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpw7qlqdc8.scala:12:53 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7qlqdc8.scala:13:59\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrWord\e[0m = lastChar.toString.isNotLetter || lastChar.toString.contains(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      value isNotLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpw7qlqdc8.scala:14:70 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrWordOrNotLetter\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.contains(\e[31m\" \"\e\
    [0m) || lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                    \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                             value isNotLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7qlqdc8.scala:15:79 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrWordOrNotLetterOrNotWord\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.contains(\e[31m\" \"\e\
    [0m) || lastChar.toString.isLetter || lastChar.toString.isNotWord\n\e[31m\e[31m\
    \   |\e[0m                                                             ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.toString.contains(lastChar))\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp81chnfy.scala:17)\n\tat Problem.main(tmpp81chnfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfu9a_tp.scala:19)\n\tat Problem.main(tmpcfu9a_tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => true\n        }\n        isLetter && !isNotWord\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2yvcqht3.scala:19)\n\tat Problem.main(tmp2yvcqht3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(lastChar => lastChar != lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxklcjs0.scala:16)\n\tat Problem.main(tmpjxklcjs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.contains(lastChar))\n        isLetter && !isNotWord\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnj4fb0lc.scala:17)\n\tat Problem.main(tmpnj4fb0lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)(0)\
    \ != txt\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82b6s54j.scala:17)\n\tat Problem.main(tmp82b6s54j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.matches(\"[a-zA-Z]\") && !lastChar.contains(\" \")\n        isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcikvxdkr.scala:11:41 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m) && !lastChar.contains(\e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.isLetter\n        val isLastCharNotALetter = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWord = txt.split(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5tnindg3.scala:32:51 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = txt.split(\n\e[31m\e[31m   |\e[0m                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5tnindg3.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5tnindg3.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = txt.split(\e[31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5tnindg3.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = txt.split(\e[31m\" \"\e[0m).last.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        return isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpioqct2r3.scala:17)\n\tat Problem.main(tmpioqct2r3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(lastChar => lastChar != lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxklcjs0.scala:16)\n\tat Problem.main(tmpjxklcjs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(!_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltu8qfk7.scala:16)\n\tat Problem.main(tmpltu8qfk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(c\
    \ => c.toLowerCase == lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmfpswmdq.scala:12:55 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.dropRight(\e\
    [31m1\e[0m).forall(\e[36mc\e[0m => c.toLowerCase == lastChar)\n\e[31m\e[31m  \
    \ |\e[0m                                                     ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbl56m1f.scala:16)\n\tat Problem.main(tmplbl56m1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbl56m1f.scala:16)\n\tat Problem.main(tmplbl56m1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        while (lastChar != ' ') {\n            if (lastChar.matches(\"\
    [a-zA-Z]\")) {\n                isLastCharALetter = false\n            }\n   \
    \         lastChar = txt.last\n        }\n        return isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpif0823es.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (lastChar.matches(\e[31m\"\
    [a-zA-Z]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value matches is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.toLowerCase == lastChar\n        val isLastCharNotALetter\
    \ = txt.dropRight(1).forall(_.toString.toLowerCase != lastChar)\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk4knnkou.scala:11:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.toLowerCase == lastChar\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpk4knnkou.scala:12:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = txt.dropRight(\e[31m1\e[0m).forall(_.toString.toLowerCase != lastChar)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ptx5a2x.scala:17)\n\tat Problem.main(tmp8ptx5a2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotALetter = lastChar !=\
    \ 'a' && lastChar != 'z'\n        isALetter && !isNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90sd4atw.scala:17)\n\tat Problem.main(tmp90sd4atw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(lastChar => lastChar != lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxklcjs0.scala:16)\n\tat Problem.main(tmpjxklcjs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        while(lastChar != ' ' && lastChar != '\\n' && lastChar != '\\\
    r' && lastChar != '\\t') {\n            lastChar = txt.last\n            if(!Character.isLetter(lastChar))\
    \ {\n                isLastCharALetter = false\n            }\n        }\n   \
    \     return isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') ||\n                                (lastChar\
    \ >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp780t_uom.scala:17)\n\tat Problem.main(tmp780t_uom.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(lastChar => lastChar != lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxklcjs0.scala:16)\n\tat Problem.main(tmpjxklcjs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.equals(lastChar))\n        isLetter && !isNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb__1vp3.scala:16)\n\tat Problem.main(tmppb__1vp3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(lastChar => lastChar != lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxklcjs0.scala:16)\n\tat Problem.main(tmpjxklcjs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') ||\n            (lastChar >= 'A' && lastChar\
    \ <= 'Z')\n        !isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8rm7o1rq.scala:17)\n\tat Problem.main(tmp8rm7o1rq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ptx5a2x.scala:17)\n\tat Problem.main(tmp8ptx5a2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfu9a_tp.scala:19)\n\tat Problem.main(tmpcfu9a_tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)\n\
    \            .map(_.toLower)\n            .exists(_ != \"word\")\n        isLetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpmv37h6m6.scala:13:17 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            .map(_.toLower)\n\e[31m\e[31m   |\e[0m  \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => _$1.toLower.\n1 error found\n"
  stdout: ''
  timestamp: 1659978708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        while(lastChar != ' ') {\n            if(lastChar.isLetter)\
    \ {\n                isLastCharALetter = false\n            }\n            lastChar\
    \ = txt.last\n        }\n        return isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.equals(lastChar))\n        isLetter && !isNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb__1vp3.scala:16)\n\tat Problem.main(tmppb__1vp3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbl56m1f.scala:16)\n\tat Problem.main(tmplbl56m1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ptx5a2x.scala:17)\n\tat Problem.main(tmp8ptx5a2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isALetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplurrqbbj.scala:19)\n\tat Problem.main(tmplurrqbbj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(!isLetter)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphi1l3zs6.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e\
    [0m = txt.split(\e[31m\" \"\e[0m).lastOption.exists(!isLetter)\n\e[31m\e[31m \
    \  |\e[0m                                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    Boolean\n\
    \e[31m   |\e[0m                                             Required: \e[1m\e\
    [32mString\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m\
    \ \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(!isLetter)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphi1l3zs6.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e\
    [0m = txt.split(\e[31m\" \"\e[0m).lastOption.exists(!isLetter)\n\e[31m\e[31m \
    \  |\e[0m                                                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    Boolean\n\
    \e[31m   |\e[0m                                             Required: \e[1m\e\
    [32mString\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m\
    \ \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_lwg9wm.scala:19)\n\tat Problem.main(tmpi_lwg9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfu9a_tp.scala:19)\n\tat Problem.main(tmpcfu9a_tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgscs9p2.scala:19)\n\tat Problem.main(tmpqgscs9p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(c\
    \ => c >= 'a' && c <= 'z')\n        isALetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprt85xy3e.scala:19)\n\tat Problem.main(tmprt85xy3e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpanszjjg1.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)(0)\
    \ != txt\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82b6s54j.scala:17)\n\tat Problem.main(tmp82b6s54j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfu9a_tp.scala:19)\n\tat Problem.main(tmpcfu9a_tp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        var isLastCharNotALetter = false\n        while(lastChar !=\
    \ \" \") {\n            if(lastChar.isLetter) {\n                isLastCharALetter\
    \ = true\n            } else {\n                isLastCharNotALetter = true\n\
    \            }\n            lastChar = txt.last\n        }\n        return isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcjwu_zgo.scala:13:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp67cdkn7u.scala:12:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(c\
    \ => c != ' ')\n        isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcjmhtx1r.scala:19)\n\tat Problem.main(tmpcjmhtx1r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(lastChar => lastChar != lastChar)\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxklcjs0.scala:16)\n\tat Problem.main(tmpjxklcjs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cdmm77.scala:16)\n\tat Problem.main(tmpp3cdmm77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36nr0uv0.scala:17)\n\tat Problem.main(tmp36nr0uv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.toString.contains(lastChar))\n        isLetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp81chnfy.scala:17)\n\tat Problem.main(tmpp81chnfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        var lastChar = txt.last\n        var isLastCharALetter\
    \ = true\n        var isLastCharNotALetter = false\n        while(lastChar !=\
    \ \" \") {\n            if(lastChar.matches(\"[a-zA-Z]\")) {\n               \
    \ isLastCharALetter = true\n            } else {\n                isLastCharNotALetter\
    \ = true\n            }\n            lastChar = txt.last\n        }\n        return\
    \ isLastCharALetter && !isLastCharNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3ql_vou5.scala:13:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ql_vou5.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(lastChar.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ryjs4ci.scala:17)\n\tat Problem.main(tmp2ryjs4ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    def checkIfLastCharIsALetter(txt\
    \ : String) : Boolean = {\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'A' && lastChar <= 'Z') || (lastChar >= 'a' && lastChar <= 'z')\n\
    \        !isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq110ys4.scala:16)\n\tat Problem.main(tmptq110ys4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978711
