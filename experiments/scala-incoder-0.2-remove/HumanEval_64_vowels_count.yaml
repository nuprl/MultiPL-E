name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    def vowelsCount(s\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n   \
    \     val vowelsCount = s.filter(x => vowels.contains(x)).length\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowels_count = s.count(vowels.indexOf(_))\n\
    \        vowels_count", "        val vowels = \"aeiouAEIOU\".toSet\n        val\
    \ vowelsCount = s.toList.filter(x => vowels.contains(x)).size\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(vowels.contains(s.charAt(i))){\n\
    \                vowelsCount += s.charAt(i)\n            }\n        }\n      \
    \  vowelsCount.size", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = mutable.HashMap[Char, Int]()\n        for (i <- 0 until s.length)\n      \
    \      if (vowels.contains(s.charAt(i)))\n                vowelsCount(s.charAt(i))\
    \ += 1\n        vowelsCount.values.sum", "        val vowels = \"aeiou\"\n   \
    \     val vowelsCount = s.count(vowels.toCharArray)\n        vowelsCount", " \
    \       val vowels = \"aeiou\"\n        val vowels_count = s.count(vowels)\n \
    \       vowels_count + vowels.count(s.last)", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowels_count = s.filter(x => vowels.contains(x)).length\n\
    \        vowels_count", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n\
    \        val vowels_count = s.length\n        val vowels_count_in_string = vowels.count(s\
    \ => s == \"y\")\n        vowels_count_in_string", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x => vowels.contains(x)).size\n\
    \        vowelsCount", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n\
    \        val vowels_count = mutable.ListBuffer[String]()\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                vowels_count += c\n\
    \            }\n        }\n        vowels_count.length", "        val vowels =\
    \ Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(vowels(i) == s.charAt(i))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char, Int]()\n\
    \        for(c <- s) {\n            vowelsCount(c) += 1\n        }\n        vowelsCount.filter(_._2\
    \ > 0).map(_._1).length", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        var count = 0\n        var lastVowel = s.last\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u'){\n                count\
    \ += 1\n            }\n            else if(s.charAt(i) == lastVowel){\n      \
    \          count += 1\n            }\n            lastVowel = s.charAt(i)\n  \
    \      }\n        count", "        val vowels = \"aeiou\".toSet\n        val vowelsCount\
    \ = s.filter(c => vowels.contains(c)).size\n        vowelsCount", "        var\
    \ count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        if (s.charAt(s.length\
    \ - 1) == 'y')\n            count += 1\n        return count", "        val vowels\
    \ = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char, Int]()\n      \
    \  for (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount(c)\
    \ = vowelsCount(c) + 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = mutable.HashSet[String]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) == s(i) && vowelsCount.contains(s(i)))\n                vowelsCount\
    \ += s(i)\n        vowelsCount.size", "        var count = 0\n        for(i <-\
    \ 0 until s.length)\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' ||\
    \ s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n          \
    \      count += 1\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ == 'y')\n                count += 1\n        count * 2", "        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count = s.filter(x => vowels.contains(x)).length\n\
    \        vowels_count", "        val vowels = \"aeiou\"\n        var count = 0\n\
    \        val words = s.split(\" \")\n        for(word <- words) {\n          \
    \  for(letter <- word) {\n                if(vowels.contains(letter)) {\n    \
    \                count += 1\n                }\n            }\n        }\n   \
    \     count", "        val vowels = Set('a','e','i','o','u')\n        val vowels_count\
    \ = s.length\n        val vowels_count_in_s = vowels.count(s.last)\n        vowels_count_in_s",
  "        val vowels = Array('a','e','i','o','u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = \"aeiou\"\n        var count = 0\n        var lastVowel =\
    \ s.last\n        for(i <- 0 until s.length){\n            if(vowels.contains(s.charAt(i))){\n\
    \                count += 1\n            }\n            else{\n              \
    \  if(lastVowel != s.charAt(i)){\n                    lastVowel = s.charAt(i)\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n      \
    \  var count = 0\n        for(i <- 0 until s.length)\n            if(vowels(i)\
    \ == s.charAt(i))\n                count += 1\n        count", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.count(vowels)\n\
    \        val yIndex = s.lastIndexOf('y')\n        if (yIndex != -1) vowelsCount\
    \ += (yIndex - s.lastIndexOf('y'))\n        vowelsCount", "        val vowels\
    \ = Array('a','e','i','o','u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(vowels(i) != s.charAt(i)){\n\
    \                vowelsCount += s.charAt(i)\n            }\n        }\n      \
    \  vowelsCount.size", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowelsCount = s.toCharArray.filter(x => vowels.contains(x)).size\n\
    \        vowelsCount", "        val vowels = Array('a','e','i','o','u')\n    \
    \    var count = 0\n        for(i <- 0 until s.length)\n            if(vowels(i)\
    \ == s.charAt(i))\n                count += 1\n        count", "        val vowels\
    \ = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n   \
    \             vowelsCount += s.charAt(i)\n        vowelsCount.size", "       \
    \ val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count\
    \ = s.count(c => vowels.contains(c))\n        vowels_count", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count = s.toCharArray.filter(x\
    \ => vowels.contains(x)).length\n        vowels_count", "        val vowels =\
    \ Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until s.length - 1) {\n            val c = s.charAt(i)\n\
    \            if (vowels.contains(c)) {\n                vowelsCount.getOrElse(s.substring(0,\
    \ i), 0L) += 1\n            }\n        }\n        vowelsCount.values.sum", " \
    \       val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = Array(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i) == s(i)) {\n                count += 1\n          \
    \  }\n        count", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        var count = 0\n        for (i <- 0 until s.length)\n           \
    \ if (vowels(s(i)))\n                count += 1\n        count ", "        val\
    \ vowels = \"aeiou\".toSet\n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n\
    \        vowelsCount", "        var vowelCount = 0\n        var vowelCountIndex\
    \ = 0\n        var vowelCountLastIndex = 0\n        var vowelCountLastIndexIndex\
    \ = 0\n        var vowelCountLastIndexLastIndex = 0\n        var vowelCountLastIndexLastIndexIndex\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndex = 0\n        var vowelCountLastIndexLastIndexLastIndexIndex\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndex = 0\n      \
    \  var vowelCountLastIndexLastIndexLastIndexLastIndex = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n  \
    \      var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var\
    \ vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n  \
    \      var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var\
    \ vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n  \
    \      var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var\
    \ vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n  \
    \      var vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var\
    \ vowelCountLastIndexLastIndexLastIndexLastIndexLast = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLast\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n\
    \        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n    \
    \    var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n        var\
    \ vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n\
    \        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n    \
    \    var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n        var\
    \ vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast\
    \ = 0\n        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n\
    \        var vowelCountLastIndexLastIndexLastIndexLastIndexLastLast = 0\n    \
    \    var ", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val\
    \ vowelsCount = mutable.Map[Char, Int]()\n        for (c <- s) {\n           \
    \ vowelsCount(c) += 1\n        }\n        vowelsCount.filter(_._2 > 0).map(_._1).sum",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        count += s.length -\
    \ vowelsCount(s.substring(s.length - 1))\n        count", "        val vowels\
    \ = \"aeiou\".toSet\n        val vowelsCount = mutable.Map[Char, Long]()\n   \
    \     for (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount(c)\
    \ = vowelsCount(c) + 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = \"aeiou\"\n        val vowelsCount = s.count(vowels)\n   \
    \     val lastVowel = s.last\n        if (lastVowel == \"y\") {\n            vowelsCount\
    \ += 1\n        }\n        return vowelsCount", "        val vowels = \"aeiou\"\
    \n        val vowelsCount = s.count(vowels.contains)\n        vowelsCount", " \
    \       val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count\
    \ = mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowels_count += c\n            }\n        }\n        vowels_count.length",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count =\
    \ mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowels_count(c) = vowels_count(c) + 1\n            }\n  \
    \      }\n        vowels_count.values.sum", "        val vowels = Array('a', 'e',\
    \ 'i', 'o', 'u')\n        val vowelsCount = mutable.HashMap[Char, Long]()\n  \
    \      for (c <- s) {\n            if (vowels.contains(c)) {\n               \
    \ vowelsCount(c) = vowelsCount(c) + 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count =\
    \ s.length\n        val vowels_count_in_string = 0\n        for (i <- 0 until\
    \ vowels_count_in_string) {\n            if (vowels(i) == s(i)) {\n          \
    \      vowels_count_in_string += 1\n            }\n        }\n        return vowels_count_in_string",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.count(x => vowels.contains(x))\n        vowelsCount", "        val vowels\
    \ = \"aeiouAEIOU\".toSet\n        val vowelsCount = s.count(vowels)\n        vowelsCount",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            vowelsCount\
    \ += vowels(s(i))\n        vowelsCount.size", "        val vowels = \"aeiou\"\n\
    \        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                count += 1\n        count", "        var count = 0\n        var\
    \ vowels = \"aeiou\"\n        var lastVowel = vowels.last\n        var lastChar\
    \ = s.last\n        while (lastChar != lastVowel) {\n            count += vowels.indexOf(lastChar)\n\
    \            lastChar = s.last\n        }\n        count", "        val vowels\
    \ = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char, Long]()\n     \
    \   for(c <- s) {\n            if(vowels.contains(c)) {\n                vowelsCount(c)\
    \ += 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Set('a','e','i','o','u')\n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n\
    \        vowelsCount", "        val vowels = \"aeiou\"\n        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                count += 1\n        count", "        val vowels = Array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) == s.charAt(i))\n                count\
    \ += 1\n        count", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.filter(c => vowels.contains(c)).size\n        vowelsCount", "        val\
    \ vowels = \"aeiou\"\n        val vowelsCount = s.count(vowels)\n        val lastVowel\
    \ = s.last\n        if (vowelsCount == 0 && lastVowel == 'y') {\n            1\n\
    \        } else {\n            vowelsCount\n        }", "        val vowels =\
    \ Array('a','e','i','o','u')\n        val vowels_count = s.length\n        val\
    \ vowels_count_in_string = vowels.count(s => s.toLowerCase == s)\n        vowels_count_in_string",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val vowelsCount = mutable.HashMap[Char,\
    \ Long]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n   \
    \             vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        var vowels = 0 // number of vowels\n        var vowelsCount = 0 // number\
    \ of vowels found in string\n        var vowelsCountInWord = 0 // number of vowels\
    \ found in word\n        var vowelsCountInWordInWord = 0 // number of vowels found\
    \ in word and in word\n        var vowelsCountInWordInWordInWord = 0 // number\
    \ of vowels found in word, word and in word\n        var vowelsCountInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word and in word\n        var vowelsCountInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word and in word\n      \
    \  var vowelsCountInWordInWordInWordInWordInWordInWord = 0 // number of vowels\
    \ found in word, word, word, word, word and in word\n        var vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word and in word\n\
    \        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = 0 //\
    \ number of vowels found in word, word, word, word, word, word, word and in word\n\
    \        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word, word, word\
    \ and in word\n        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word, word, word,\
    \ word, word and in word\n        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word, word, word,\
    \ word, word, word and in word\n        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word, word, word,\
    \ word, word, word, word, word and in word\n        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word, word, word,\
    \ word, word, word, word, word, word, word and in word\n        var vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = 0 // number of vowels found in word, word, word, word, word, word, ", "  \
    \      val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = \"aeiou\".toSet\n        val vowels_count = s.toSet.count(vowels)\n\
    \        vowels_count", "        val vowels = \"aeiou\"\n        val vowels_count\
    \ = s.count(vowels)\n        vowels_count + (if (s.endsWith(\"y\")) 1 else 0)",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            vowelsCount(c) += 1\n        }\n\
    \        vowelsCount.filter(_._2 > 0).size", "        val vowels = \"aeiou\"\n\
    \        var count = 0\n        for (i <- 0 until s.length) count += vowels.indexOf(s.charAt(i))\
    \ match {\n            case -1 => 1\n            case _ => 0\n        }\n    \
    \    count", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val\
    \ vowelsCount = mutable.HashMap[Char, Int]()\n        for(i <- 0 until s.length)\n\
    \            if(vowels(i) == s.charAt(i))\n                vowelsCount(s.charAt(i))\
    \ += 1\n        vowelsCount.values.sum", "        val vowels = Set('a','e','i','o','u')\n\
    \        val vowelsCount = s.filter(x => vowels.contains(x)).length\n        vowelsCount",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = mutable.HashMap[String, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = \"aeiou\"\n   \
    \     var count = 0\n        var lastVowel : Option[Char] = None\n        for\
    \ (c <- s) {\n            if (vowels.contains(c)) {\n                count +=\
    \ 1\n                lastVowel = Some(c)\n            }\n        }\n        if\
    \ (lastVowel.isDefined) {\n            count += vowels.count(lastVowel.get)\n\
    \        }\n        count", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).size\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) == s(i))\n                count += 1\n\
    \        count", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val vowelsCount = s.filter(x => vowels.contains(x)).size\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.contains(s.charAt(i)))\n                count\
    \ += 1\n        count ", "        val vowels = Set('a','e','i','o','u')\n    \
    \    val vowelsCount = s.count(x => vowels.contains(x))\n        vowelsCount",
  "        val vowels = \"aeiou\".toSet\n        var count = 0\n        var lastVowel\
    \ = vowels.last\n        for(i <- 0 until s.length)\n            if(vowels(s(i)))\n\
    \                count += 1\n            else\n                if(lastVowel !=\
    \ s(i))\n                    lastVowel = s(i)\n        count", "        val vowels\
    \ = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char, Int]()\n      \
    \  for (c <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount(c)\
    \ += 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.count(x\
    \ => vowels.contains(x))\n        vowelsCount", "        var count = 0\n     \
    \   for (i <- 0 until s.length)\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                count += 1\n        if (s.charAt(s.length - 1) == 'y')\n    \
    \        count += 1\n        count", "        val vowels = Array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashMap[String, Long]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount.getOrElseUpdate(c, 0L) += 1\n            }\n        }\n      \
    \  vowelsCount.values.sum", "        val vowels = Array(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val vowelsCount = mutable.HashMap[String, Long]()\n     \
    \   for (i <- 0 until s.length)\n            if (vowels(i) == s(i)) {\n      \
    \          vowelsCount(s(i)) = vowelsCount(s(i)) + 1\n            }\n        vowelsCount.values.sum",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.filter(x => vowels.contains(x)).length\n        vowelsCount", "        val\
    \ vowels = \"aeiou\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.contains(s.charAt(i)))\n                count += 1\n \
    \       count", "        val vowels = \"aeiou\"\n        var count = 0\n     \
    \   for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                count += 1\n        count ", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowels_count = mutable.Map[Char, Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowels_count(c) += 1\n\
    \            }\n        }\n        vowels_count.values.sum", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val vowelsCount = s.toList.count(x => vowels.contains(x))\n\
    \        vowelsCount", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n\
    \        val vowelsCount = mutable.HashSet[Char]()\n        for (c <- s) {\n \
    \           if (vowels.contains(c)) {\n                vowelsCount += c\n    \
    \        }\n        }\n        vowelsCount.size", "        val vowels = \"aeiou\"\
    \n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n       \
    \ vowelsCount", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n       \
    \ val vowelsCount = mutable.HashMap[Char, Int]()\n        for (c <- s) {\n   \
    \         if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Set('a','e','i','o','u')\n        val vowelsCount = s.count(c => vowels.contains(c))\n\
    \        vowelsCount", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n\
    \        val vowelsCount = mutable.HashMap[Char, Int]()\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                vowelsCount(c) +=\
    \ 1\n            }\n        }\n        vowelsCount.values.sum", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count = s.toCharArray.filter(x\
    \ => vowels.contains(x)).length\n        vowels_count", "        val vowels =\
    \ \"aeiou\"\n        var count = 0\n        for(i <- 0 until s.length){\n    \
    \        if(vowels.contains(s.charAt(i))){\n                count += 1\n     \
    \       }\n        }\n        count", "        val vowels = \"aeiou\"\n      \
    \  val vowelsCount = mutable.HashSet[Char]()\n        val vowelsCountList = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n            else\n              \
    \  vowelsCountList += vowelsCount.size\n        vowelsCountList.toList", "   \
    \     val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        val vowelsCounts = mutable.HashMap[Char, Long]()\n        val vowelsCountArray\
    \ = mutable.Array[Long]()\n        val vowelsCountArrays = mutable.Array[Array[Long]]()\n\
    \        val vowelsCountArrayOfArrays = mutable.Array[Array[Array[Long]]]()\n\
    \        val vowelsCountArrayOfArraysOfArrays = mutable.Array[Array[Array[Array[Long]]]]()\n\
    \        val vowelsCountArrayOfArraysOfArraysOfArrays = mutable.Array[Array[Array[Array[Array[Long]]]]]()\n\
    \        val vowelsCountArrayOfArraysOfArraysOfArraysOfArrays = mutable.Array[Array[Array[Array[Array[Array[Long]]]]]]()\n\
    \        val vowelsCountArrayOfArraysOfArraysOfArraysOfArraysOfArrays = mutable.Array[Array[Array[Array[Array[Array[Array[Long]]]]]]]()\n\
    \        val vowelsCountArrayOfArraysOfArraysOfArraysOfArraysOfArraysOfArrays\
    \ = mutable.Array[Array[Array[Array[Array[Array[Array[Long]]]]]]]()\n        val\
    \ vowelsCountArrayOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArrays = mutable.Array[Array[Array[Array[Array[Array[Array[Array[Long]]]]]]]]()\n\
    \        val vowelsCountArrayOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArrays\
    \ = mutable.Array[Array[Array[Array[Array[Array[Array[Array[Long]]]]]]]]()\n \
    \       val vowelsCountArrayOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArrays\
    \ = mutable.Array[Array[Array[Array[Array[Array[Array[Array[Long]]]]]]]]()\n \
    \       val vowelsCountArrayOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArraysOfArrays\
    \ = mutable.Array[Array[Array[Array[Array[Array[Array[Array[Long]]]]]]]]", " \
    \       var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        if (s.charAt(s.length\
    \ - 1) == 'y')\n            count += 1\n        return count", "        val vowels\
    \ = \"aeiou\"\n        val vowels_count = s.count(vowels)\n        vowels_count\
    \ + (if (s.endsWith(\"y\")) 1 else 0)", "        val vowels = Array('a', 'e',\
    \ 'i', 'o', 'u')\n        val vowels_count = s.length\n        val vowels_count_in_string\
    \ = vowels.count(s => s.equals(s.last))\n        vowels_count_in_string", "  \
    \      val vowels = \"aeiou\".toSet\n        val vowels_count = s.toSet.count(x\
    \ => vowels.contains(x))\n        vowels_count", "        val vowels = \"aeiou\"\
    \n        val vowels_count = s.count(vowels)\n        vowels_count + vowels.count(s.last)",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        if (s.charAt(s.length\
    \ - 1) == 'y')\n            count += 1\n        count", "        val vowels =\
    \ Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x\
    \ => vowels.contains(x)).size\n        vowelsCount", "        val vowels = \"\
    aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n        for (c <-\
    \ s) {\n            if (vowels.contains(c)) {\n                vowelsCount +=\
    \ c\n            }\n        }\n        vowelsCount.size", "        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       var vowels = mutable.Set[Char]()\n        var count = 0\n        for (c\
    \ <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n                vowels += c\n            }\n        }\n        for (c\
    \ <- vowels) {\n            if (c == 'y') {\n                count += 1\n    \
    \        }\n        }\n        count", "        val vowels = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        val vowelsCount = s.filter(x => vowels.contains(x)).length\n\
    \        vowelsCount", "        val vowels = \"aeiou\"\n        val vowelsCount\
    \ = s.count(vowels)\n        vowelsCount + (if (s.endsWith(\"y\")) 1 else 0)",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for(c <- s) {\n            if(vowels.contains(c)) {\n      \
    \          vowelsCount(c) = vowelsCount(c) + 1\n            }\n        }\n   \
    \     vowelsCount.values.sum", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowelsCount = mutable.Map[Char,Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount(c) = vowelsCount(c)\
    \ + 1\n            }\n        }\n        vowelsCount.values.sum", "        val\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n \
    \       for(i <- 0 until s.length)\n            if(vowels(i) == s.charAt(i))\n\
    \                count += 1\n        count", "        val vowels = \"aeiou\".toSet\n\
    \        val vowelsCount = s.toList.count(vowels.contains)\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) = vowelsCount(c) + 1\n            }\n        }\n \
    \       vowelsCount.values.sum", "        val vowels = \"aeiou\"\n        val\
    \ vowels_count = s.count(vowels)\n        vowels_count", "        val vowels =\
    \ \"aeiouAEIOU\".toSet\n        val vowelsCount = s.toSet.size\n        vowelsCount\
    \ - vowels.size - vowels.toSet.diff(s.toSet)", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val vowels_count = s.count(c => vowels.contains(c))\n\
    \        vowels_count", "        val vowels = \"aeiou\"\n        val vowels_count\
    \ = s.count(vowels)\n        val vowels_count_with_y = s.count(vowels + \"y\"\
    )\n        vowels_count + vowels_count_with_y", "        val vowels = \"aeiou\"\
    \n        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                count += 1\n        count", "        val vowels = \"aeiou\"\n\
    \        val vowelsCount = mutable.Map[Char, Int]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowelsCount(c) += 1\n\
    \            }\n        }\n        vowelsCount.values.sum", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.count(x\
    \ => vowels.contains(x))\n        vowelsCount", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashMap[Char, Int]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count =\
    \ s.filter(x => vowels.contains(x)).length\n        vowels_count", "        val\
    \ vowels = \"aeiou\"\n        val vowelsCount = s.count(vowels.indexOf)\n    \
    \    vowelsCount", "        val vowels = \"aeiou\"\n        val vowelsCount =\
    \ s.count(vowels.indexOf(_))\n        vowelsCount", "        val vowels = \"aeiou\"\
    \n        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                count += 1\n        count", "        val vowels = \"aeiou\".toSet\n\
    \        val vowelsCount = s.count(vowels)\n        val lastVowel = vowels.last\n\
    \        val lastVowelIndex = s.lastIndexOf(lastVowel)\n        if (lastVowelIndex\
    \ == s.length - 1)\n            vowelsCount + 1\n        else\n            vowelsCount",
  "        val vowels = Set('a','e','i','o','u')\n        val vowels_count = s.count(c\
    \ => vowels.contains(c))\n        vowels_count", "        val vowels = Array('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[String]()\n \
    \       for(i <- 0 until s.length){\n            if(vowels.contains(s.charAt(i))){\n\
    \                vowelsCount += s.charAt(i)\n            }\n        }\n      \
    \  vowelsCount.size", "        val vowels = Set('a','e','i','o','u')\n       \
    \ val vowels_count = s.count(c => vowels.contains(c))\n        vowels_count",
  "        val vowels = List('a','e','i','o','u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                vowelsCount += s.charAt(i)\n        vowelsCount.size", "    \
    \    val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(vowels(s(i)) && !vowelsCount(s(i)))\
    \ {\n                vowelsCount(s(i)) = 1\n            }\n        vowelsCount.size",
  "        val vowels = \"aeiou\".toSet\n        val vowelsCount = s.count(c => vowels.contains(c))\n\
    \        vowelsCount", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\")\n        val vowels_count = s.length\n        val vowels_count_in_s = vowels.count(s.last)\n\
    \        vowels_count_in_s + vowels_count_in_s", "        val vowels = Set('a','e','i','o','u')\n\
    \        val vowelsCount = s.filter(x => vowels.contains(x)).length\n        vowelsCount",
  "        var count = 0\n        var lastVowel = s.charAt(s.length - 1)\n       \
    \ for (i <- 0 until s.length - 1) {\n            if (s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n\
    \                count += 1\n            }\n            if (s.charAt(i) == lastVowel)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = mutable.HashMap[String, Long]()\n        for (letter <- s) {\n           \
    \ if (vowels.contains(letter)) {\n                vowelsCount.put(letter, vowelsCount.getOrElse(letter,\
    \ 0L) + 1)\n            }\n        }\n        vowelsCount.values.sum", "     \
    \   val vowels = Array('a','e','i','o','u')\n        val vowels_count = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowels_count += c\n            }\n        }\n        vowels_count.size", " \
    \       val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count\
    \ = s.length\n        var count = 0\n        for (i <- 0 until vowels_count) {\n\
    \            if (vowels(i) == s(i)) {\n                count += 1\n          \
    \  }\n        }\n        count", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val vowels_count = s.length\n        val vowels_count_in_s\
    \ = vowels.count(s => s.equals(s))\n        vowels_count_in_s + vowels_count_in_s",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = s.toCharArray.filter(c => vowels.contains(c)).length\n        vowelsCount",
  "        val vowels = Set('a','e','i','o','u')\n        val vowelsCount = s.filter(x\
    \ => vowels.contains(x)).length\n        vowelsCount", "        var vowels = 0\
    \ // number of vowels\n        var vowelsCount = 0 // number of vowels counted\n\
    \        var lastVowel = false // true if last vowel was 'y'\n        for (c <-\
    \ s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n                vowels += 1\n            }\n            if (c == 'y' && lastVowel)\
    \ {\n                vowelsCount += 1\n            }\n            lastVowel =\
    \ c == 'y'\n        }\n        vowelsCount", "        val vowels = \"aeiou\"\n\
    \        var count = 0\n        var lastVowel = vowels.last\n        for (i <-\
    \ 0 until s.length)\n            if (vowels.contains(s.charAt(i))) {\n       \
    \         if (lastVowel == s.charAt(i)) {\n                    count += 1\n  \
    \              } else {\n                    count = 0\n                }\n  \
    \              lastVowel = s.charAt(i)\n            }\n        count", "     \
    \   var count = 0\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        if(s.charAt(s.length\
    \ - 1) == 'y')\n            count += 1\n        count", "        val vowels =\
    \ \"aeiou\"\n        val vowels_count = s.count(vowels.indexOf)\n        vowels_count",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count =\
    \ s.filter(x => vowels.contains(x)).size\n        vowels_count", "        val\
    \ vowels = mutable.Set[Char]('a','e','i','o','u')\n        val vowels_count =\
    \ mutable.Map[Char, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowels_count(c) = vowels_count(c) + 1\n            }\n  \
    \      }\n        vowels_count.values.sum", "        val vowels = \"aeiou\"\n\
    \        var count = 0\n        for(i <- 0 until s.length)\n            if(vowels.contains(s.charAt(i)))\n\
    \                count += 1\n        count + (s.length - vowels.size)", "    \
    \    val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = mutable.Map[Char, Int]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount(c) = vowelsCount(c) + 1\n            }\n    \
    \    }\n        vowelsCount.values.sum", "        val vowels = \"aeiou\"\n   \
    \     val vowels_count = s.count(vowels.toCharArray)\n        vowels_count", " \
    \       val vowels = \"aeiou\"\n        val vowels_count = s.count(vowels)\n \
    \       vowels_count + vowels.count(s.last)", "        val vowels = Set('a','e','i','o','u')\n\
    \        val vowelsCount = s.filter(x => vowels.contains(x)).size\n        vowelsCount",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowels_count\
    \ = s.count(vowels)\n        vowels_count", "        var vowels = 0 \n       \
    \ for(i <- 0 until s.length)\n            if(s.charAt(i) == 'a' || s.charAt(i)\
    \ == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n\
    \                vowels += 1\n        vowels", "        val vowels = \"aeiou\"\
    \n        val vowelsCount = mutable.HashMap[Char, Long]()\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                vowelsCount(c) +=\
    \ 1\n            }\n        }\n        vowelsCount.values.sum", "        val vowels\
    \ = \"aeiou\"\n        val vowelsCount = mutable.HashSet[Char]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n   \
    \             vowelsCount += s.charAt(i)\n        vowelsCount.size", "       \
    \ val vowels = Array('a','e','i','o','u')\n        val vowelsCount = s.filter(x\
    \ => vowels.contains(x)).size\n        vowelsCount", "        var count = 0\n\
    \        var lastVowel = s.charAt(s.length - 1)\n        for(i <- 0 until s.length\
    \ - 1) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i)\
    \ == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count\
    \ += 1\n            }\n            if(s.charAt(i) == lastVowel) {\n          \
    \      count += 1\n            }\n        }\n        count", "        val vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashSet[String]()\n\
    \        for (c <- s) {\n            if (vowels.contains(c)) {\n             \
    \   vowelsCount += c\n            }\n        }\n        vowelsCount.size", " \
    \       val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count\
    \ = 0\n        for(i <- 0 until s.length)\n            if(vowels(i) == s(i))\n\
    \                count += 1\n        count ", "        val vowels = Array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = mutable.HashMap[String,\
    \ Long]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n   \
    \             vowelsCount(c) = vowelsCount(c) + 1\n            }\n        }\n\
    \        vowelsCount.values.sum", "        val vowels = mutable.Set[Char]('a','e','i','o','u')\n\
    \        val vowels_count = mutable.Map[Char, Long]()\n        for (c <- s) {\n\
    \            if (vowels.contains(c)) {\n                vowels_count(c) = vowels_count(c)\
    \ + 1\n            }\n        }\n        vowels_count.values.sum", "        val\
    \ vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count = s.filter(x\
    \ => vowels.contains(x)).size\n        vowels_count", "        val vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i) == s.charAt(i))\n                count\
    \ += 1\n        count", "        val vowels = Set('a','e','i','o','u')\n     \
    \   val vowelsCount = s.filter(x => vowels.contains(x)).length\n        vowelsCount",
  "        val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount\
    \ = mutable.HashMap[String, Long]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount.getOrElseUpdate(c.toString, 0L) += 1\n      \
    \      }\n        }\n        vowelsCount.values.sum", "        val vowels = Array('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashSet[String]()\n \
    \       for (i <- 0 until s.length)\n            if (vowels(i) == s(i) && s(i)\
    \ != 'y')\n                vowelsCount += s(i)\n        vowelsCount.size", " \
    \       var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        return count", "  \
    \      val vowels = \"aeiou\"\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        val vowels = \"aeiou\"\n        val vowelsCount = s.count(vowels)\n   \
    \     val lastVowel = s.last\n        if (vowelsCount == 0 || lastVowel == \"\
    y\")\n            vowelsCount\n        else\n            vowelsCount + vowels.count(lastVowel)",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount =\
    \ mutable.HashSet[Char]()\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                vowelsCount += c\n            }\n        }\n        vowelsCount.size",
  "        val vowels = Set('a','e','i','o','u')\n        val vowelsCount = s.filter(x\
    \ => vowels.contains(x)).length\n        vowelsCount", "        val vowels = \"\
    aeiou\".toSet\n        val vowelsCount = s.filter(c => vowels.contains(c)).length\n\
    \        vowelsCount", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val vowels_count = s.toCharArray.filter(c => vowels.contains(c)).length\n\
    \        vowels_count", "        val vowels = \"aeiouAEIOU\".toSet\n        val\
    \ vowelsCount = s.toList.filter(x => vowels.contains(x)).length\n        vowelsCount",
  "        val vowels = Set('a','e','i','o','u')\n        var count = 0\n        for\
    \ (c <- s) {\n            if (vowels.contains(c)) {\n                count +=\
    \ 1\n            }\n        }\n        count ", "        val vowels = \"aeiou\"\
    \n        val vowels_count = s.count(vowels)\n        vowels_count", "       \
    \ val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = mutable.HashMap[Char,\
    \ Int]()\n        for (c <- s) {\n            if (vowels.contains(c)) {\n    \
    \            vowelsCount(c) += 1\n            }\n        }\n        vowelsCount.values.sum",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        if (s.charAt(s.length\
    \ - 1) == 'y')\n            count += 1\n        return count", "        val vowels\
    \ = \"aeiou\"\n        val vowels_count = s.count(vowels)\n        vowels_count\
    \ + (if (s.endsWith(\"y\")) 1 else 0)", "        val vowels = List('a', 'e', 'i',\
    \ 'o', 'u')\n        val vowels_count = s.count(x => vowels.contains(x))\n   \
    \     vowels_count", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'\
    \ || s.charAt(i) == 'o' || s.charAt(i) == 'u')\n                count += 1\n \
    \       if (s.charAt(s.length - 1) == 'y')\n            count += 1\n        return\
    \ count", "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowels_count\
    \ = mutable.HashMap[Char, Int]()\n        for(i <- 0 until s.length){\n      \
    \      val c = s.charAt(i)\n            vowels_count(c) match {\n            \
    \    case Some(count) => vowels_count.update(c, count + 1)\n                case\
    \ None => vowels_count.update(c, 1L)\n            }\n        }\n        vowels_count.values.sum",
  "        val vowels = \"aeiou\"\n        var count = 0\n        var lastChar = s.charAt(s.length\
    \ - 1)\n        while (lastChar != ' ') {\n            if (vowels.contains(lastChar))\
    \ {\n                count += 1\n            }\n            lastChar = s.charAt(s.length\
    \ - 1)\n        }\n        count", "        val vowels = \"aeiou\"\n        val\
    \ vowelsCount = s.count(vowels)\n        val vowelsCount2 = s.count(vowels.toList)\n\
    \        val vowelsCount3 = s.count(vowels.toSet)\n        val vowelsCount4 =\
    \ s.count(vowels.toSeq)\n        val vowelsCount5 = s.count(vowels.toSeq.tail)\n\
    \        vowelsCount", "        val vowels = Array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val vowelsCount = mutable.HashSet[String]()\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(i) == s(i)) {\n               \
    \ vowelsCount += s(i)\n            }\n        vowelsCount.size", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = s.count(vowels)\n\
    \        val yCount = s.lastIndexOf('y')\n        if (yCount > 0) vowelsCount\
    \ - yCount\n        else vowelsCount", "        val vowels = Array('a', 'e', 'i',\
    \ 'o', 'u')\n        val vowelsCount = mutable.Map[Char, Int]()\n        for (c\
    \ <- s) {\n            if (vowels.contains(c)) {\n                vowelsCount(c)\
    \ = vowelsCount(c) + 1\n            }\n        }\n        vowelsCount.values.sum",
  "        var count = 0\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' ||\
    \ s.charAt(i) == 'u')\n                count += 1\n        return count", "  \
    \      var vowels = mutable.Set[Char]()\n        var vowelCount = 0\n        for\
    \ (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n                vowels += c\n            }\n        }\n       \
    \ vowelCount += vowels.count\n        vowelCount", "        val vowels = \"aeiou\"\
    \n        val vowelsCount = s.count(vowels.toCharArray)\n        vowelsCount +\
    \ (if (s.endsWith(\"y\")) 1 else 0)"]
stop_tokens:
- "\n    }\n"
