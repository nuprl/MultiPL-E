name: HumanEval_2_truncate_number
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive floating point number, it can be decomposed into\n    //\
  \ and integer part (largest integer smaller than given number) and decimals\n  \
  \  // (leftover part always smaller than 1).\n    // Return the decimal part of\
  \ the number.\n    def truncateNumber(number : Float) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f))\
  \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
  \ == (0.0f));\n    }\n\n}\n"
completions: ["        val fraction = number.toInt\n        val decimal = number -\
    \ fraction\n        fraction", "        val intPart = math.floor(number)\n   \
    \     val decimalPart = number - intPart\n        intPart + decimalPart", "  \
    \      val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ * Math.pow(10, decimalPart)", "        val fractionalPart = number % 1\n   \
    \     val integerPart = number - fractionalPart\n        val decimalPart = fractionalPart\
    \ * 10\n        decimalPart", "        val intPart = math.floor(number)\n    \
    \    val decimalPart = number - intPart\n        intPart + decimalPart", "   \
    \     val intPart = math.ceil(number).toInt\n        val decimalPart = number\
    \ - intPart\n        decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fraction = number % 1\n        number\
    \ - fraction", "        val fraction = number.toInt\n        val decimal = number\
    \ - fraction\n        fraction", "        val fraction = number.toInt\n      \
    \  val decimal = number - fraction\n        fraction", "        val fraction =\
    \ number.toInt\n        val decimal = number - fraction\n        fraction", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = number - fractionalPart\n        val decimalPart = fractionalPart\
    \ * 10\n        decimalPart", "        val fractionalPart = number % 1\n     \
    \   val integerPart = math.floor(number)\n        val decimalPart = math.min(fractionalPart,\
    \ 1)\n        integerPart * 10 + decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.ceil(number)\n        val decimalPart = number - intPart\n\
    \        decimalPart", "        val fraction = number.toInt\n        val decimal\
    \ = number - fraction\n        decimal", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fractionalPart = number % 1\n        val integerPart = number - fractionalPart\n\
    \        val decimalPart = fractionalPart * 10\n        decimalPart", "      \
    \  val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.ceil(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = math.floor(number)\n        val decimalPart = math.abs(number\
    \ - integerPart)\n        fractionalPart * Math.pow(10, decimalPart)", "     \
    \   val fraction = number.toInt\n        val fractionalPart = number - fraction\n\
    \        fractionalPart / 10", "        val intPart = math.floor(number)\n   \
    \     val decimalPart = number - intPart\n        intPart + decimalPart", "  \
    \      val intPart = math.ceil(number).toInt\n        val decimalPart = number\
    \ - intPart\n        decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        decimalPart", "        val fraction = number % 1\n        number - fraction",
  "        val fraction = number - math.floor(number)\n        val decimal = math.round(fraction\
    \ * 10).toInt\n        decimal / 10", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fraction = number.toInt\n        val decimal = number - fraction\n\
    \        fraction", "        val fraction = number % 1\n        number - fraction",
  "        val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = math.floor(number)\n        val decimalPart = fractionalPart\
    \ * 10\n        decimalPart", "        val fraction = number.toInt\n        val\
    \ decimal = number - fraction\n        fraction", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        decimalPart", "        val\
    \ fractionalPart = number % 1\n        val integerPart = number - fractionalPart\n\
    \        val decimalPart = fractionalPart * 10\n        decimalPart", "      \
    \  val fraction = number.toInt\n        val decimal = number - fraction\n    \
    \    fraction", "        val fraction = number % 1\n        number - fraction",
  "        val fractionalPart = number % 1\n        val integerPart = number - fractionalPart\n\
    \        val decimalPart = fractionalPart * 10\n        decimalPart", "      \
    \  val fraction = number.toInt\n        val decimal = number - fraction\n    \
    \    fraction", "        val intPart = math.ceil(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val fraction =\
    \ number.toInt\n        val fractionalPart = number - fraction\n        fractionalPart\
    \ / Math.pow(10, fraction)", "        val fraction = number.toInt\n        val\
    \ decimal = number - fraction\n        fraction", "        val fraction = number.toInt\n\
    \        val decimal = number - fraction\n        fraction", "        val intPart\
    \ = math.floor(number)\n        val decimalPart = number - intPart\n        intPart\
    \ + decimalPart", "        val fraction = number.toInt\n        val decimal =\
    \ number - fraction\n        fraction", "        val fractionalPart = number %\
    \ 1\n        val integerPart = math.floor(number)\n        val decimalPart = math.round(number\
    \ * 100) / 100\n        fractionalPart + integerPart + decimalPart", "       \
    \ val intPart = math.ceil(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = number - intPart\n        decimalPart", "        val\
    \ fraction = number.toInt\n        val remainder = number - fraction\n       \
    \ fraction", "        val fractionalPart = number % 1\n        val integerPart\
    \ = number - fractionalPart\n        val decimalPart = fractionalPart * 10\n \
    \       decimalPart", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        decimalPart", "        val\
    \ intPart = math.ceil(number)\n        val decimalPart = number - intPart\n  \
    \      intPart + decimalPart", "        val fractionalPart = number % 1\n    \
    \    val integerPart = math.floor(number)\n        val decimalPart = math.abs(number\
    \ - integerPart)\n        fractionalPart * Math.pow(10, decimalPart)", "     \
    \   val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = math.floor(number)\n        val decimalPart = math.abs(number\
    \ - integerPart)\n        fractionalPart * 10 + decimalPart", "        val fraction\
    \ = number % 1\n        number - fraction", "        val fraction = number % 1\n\
    \        number - fraction", "        val intPart = math.floor(number)\n     \
    \   val decimalPart = number - intPart\n        intPart + decimalPart", "    \
    \    val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ * Math.pow(10, decimalPart)", "        val intPart = math.ceil(number)\n   \
    \     val decimalPart = number - intPart\n        decimalPart", "        val fraction\
    \ = number.toInt\n        val decimal = number - fraction\n        fraction",
  "        val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fraction = number % 1\n        number\
    \ - fraction", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.ceil(number).toInt\n        val decimalPart = number\
    \ - intPart\n        decimalPart", "        val fraction = number.toInt\n    \
    \    val decimal = number - fraction\n        fraction", "        val fractionalPart\
    \ = number - math.floor(number)\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = fractionalPart % 1\n        integerPart + decimalPart",
  "        val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ * Math.pow(10, decimalPart)", "        val fractionalPart = number - math.floor(number)\n\
    \        val integerPart = math.floor(number)\n        fractionalPart * Math.pow(10,\
    \ integerPart.toInt)", "        val intPart = math.floor(number)\n        val\
    \ decimalPart = number - intPart\n        intPart + decimalPart", "        val\
    \ intPart = math.floor(number)\n        val decimalPart = math.abs(number - intPart)\n\
    \        intPart + (decimalPart * Math.pow(10, -decimalPart.toInt))", "      \
    \  val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number - math.floor(number)\n\
    \        val integerPart = math.floor(number)\n        val decimalPart = fractionalPart\
    \ % 1\n        integerPart + decimalPart", "        val fraction = number % 1\n\
    \        number - fraction", "        val intPart = math.ceil(number).toInt\n\
    \        val decimalPart = number - intPart\n        decimalPart", "        val\
    \ fraction = number.toInt\n        val decimal = number - fraction\n        fraction",
  "        val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        decimalPart", "        val intPart = math.floor(number)\n        val\
    \ decimalPart = number - intPart\n        decimalPart", "        val intPart =\
    \ math.floor(number)\n        val decimalPart = number - intPart\n        intPart\
    \ + decimalPart", "        val fractionalPart = number % 1\n        val integerPart\
    \ = math.floor(number)\n        val decimalPart = math.abs(number - integerPart)\n\
    \        fractionalPart * Math.pow(10, decimalPart)", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ * Math.pow(10, decimalPart)", "        val fraction = number - math.floor(number)\n\
    \        val decimal = math.floor(number * 10) % 10\n        fraction + decimal",
  "        val fraction = number % 1\n        number - fraction", "        val intPart\
    \ = math.floor(number)\n        val decimalPart = number - intPart\n        intPart\
    \ + decimalPart", "        val fraction = number % 1\n        number - fraction",
  "        val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fraction = number.toInt\n        val decimal = number - fraction\n\
    \        decimal", "        val fraction = number.toInt\n        val decimal =\
    \ number - fraction\n        fraction", "        val intPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - intPart)\n        intPart + (decimalPart\
    \ * Math.pow(10, -decimalPart.toInt))", "        val fraction = number % 1\n \
    \       number - fraction", "        val intPart = math.floor(number)\n      \
    \  val decimalPart = number - intPart\n        intPart + decimalPart", "     \
    \   val fractionalPart = number - Math.floor(number)\n        val integerPart\
    \ = Math.floor(number)\n        val decimalPart = fractionalPart % 1\n       \
    \ integerPart + decimalPart", "        val fractionalPart = number % 1\n     \
    \   val integerPart = math.floor(number / 1)\n        fractionalPart * 1", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = number - fractionalPart\n        val decimalPart = fractionalPart\
    \ * 10\n        decimalPart", "        val intPart = math.floor(number)\n    \
    \    val decimalPart = math.min(math.abs(number - intPart), 1.0)\n        intPart\
    \ + decimalPart", "        val fraction = number.toInt\n        val decimal =\
    \ number - fraction\n        decimal", "        val fraction = number.toInt\n\
    \        val decimal = number - fraction\n        decimal", "        val fraction\
    \ = number.toInt\n        val decimal = number - fraction\n        fraction",
  "        val intPart = math.ceil(number).toInt\n        val decimalPart = number\
    \ - intPart\n        decimalPart", "        val fractionalPart = number - math.floor(number)\n\
    \        val integerPart = math.floor(number)\n        val decimalPart = fractionalPart\
    \ * 10\n        decimalPart", "        val fraction = number.toInt\n        val\
    \ decimal = number - fraction\n        fraction", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fraction = number - math.floor(number)\n\
    \        val decimal = math.round(fraction * 100) / 100\n        decimal", " \
    \       val fraction = number - math.floor(number)\n        val decimal = math.round(fraction\
    \ * 100) / 100\n        decimal + fraction", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = math.abs(number - intPart)\n        intPart + decimalPart",
  "        val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ * Math.pow(10, decimalPart)", "        val fraction = number.toInt\n       \
    \ val decimal = number - fraction\n        fraction", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fraction = number.toInt\n        val decimal = number - fraction\n\
    \        fraction", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        decimalPart", "        val fraction = number.toInt\n\
    \        val decimal = number - fraction\n        fraction", "        val fraction\
    \ = number % 1\n        number - fraction", "        val fraction = number.toInt\n\
    \        val decimal = number - fraction\n        fraction", "        val fraction\
    \ = number.toInt\n        val decimal = number - fraction\n        fraction",
  "        val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fraction = number % 1\n        number\
    \ - fraction", "        val fraction = number - math.floor(number)\n        val\
    \ integerPart = math.floor(number)\n        val decimalPart = math.round(fraction)\n\
    \        decimalPart", "        val fractionalPart = number % 1\n        val integerPart\
    \ = math.ceil(number / 1)\n        fractionalPart * Math.pow(10, integerPart)",
  "        val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ + (decimalPart * Math.pow(10, -decimalPart.toInt))", "        val intPart =\
    \ math.floor(number)\n        val decimalPart = number - intPart\n        decimalPart",
  "        val fraction = number % 1\n        number - fraction", "        val intPart\
    \ = math.floor(number)\n        val decimalPart = math.abs(number - intPart)\n\
    \        intPart + decimalPart", "        val fraction = number.toInt\n      \
    \  val decimal = number - fraction\n        fraction", "        val fraction =\
    \ number.toInt\n        val decimal = number - fraction\n        fraction", " \
    \       val fraction = number % 1\n        number - fraction", "        val fraction\
    \ = number.toInt\n        val fractionalPart = number - fraction\n        fractionalPart\
    \ / 10", "        val intPart = math.floor(number)\n        val decimalPart =\
    \ number - intPart\n        intPart + decimalPart", "        val fraction = number\
    \ % 1\n        number - fraction", "        val fractionalPart = number % 1\n\
    \        val integerPart = math.floor(number)\n        val decimalPart = math.abs(number\
    \ - integerPart)\n        fractionalPart * Math.pow(10, decimalPart)", "     \
    \   val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        decimalPart", "        val intPart = math.floor(number)\n        val\
    \ decimalPart = number - intPart\n        intPart + decimalPart", "        val\
    \ intPart = math.floor(number)\n        val decimalPart = number - intPart\n \
    \       intPart + decimalPart", "        val fraction = number - math.floor(number)\n\
    \        val decimal = math.round(fraction * 100) / 100\n        decimal", " \
    \       val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - integerPart)\n        fractionalPart\
    \ * Math.pow(10, decimalPart)", "        val intPart = math.floor(number)\n  \
    \      val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fraction = number.toInt\n        val decimal = number - fraction\n\
    \        fraction", "        val fraction = number.toInt\n        val decimal\
    \ = number - fraction\n        fraction", "        val intPart = math.floor(number)\n\
    \        val decimalPart = math.min(math.abs(number - intPart), 1.0)\n       \
    \ intPart + decimalPart", "        val fractionalPart = number % 1\n        val\
    \ integerPart = math.floor(number)\n        val decimalPart = math.abs(number\
    \ - integerPart)\n        fractionalPart * Math.pow(10, decimalPart)", "     \
    \   val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = math.floor(number)\n        val decimalPart = math.min(fractionalPart,\
    \ 1)\n        integerPart * 10 + decimalPart", "        val fractionalPart = number\
    \ - math.floor(number)\n        val integerPart = math.floor(number)\n       \
    \ val decimalPart = fractionalPart % 1\n        integerPart + decimalPart", " \
    \       val intPart = math.ceil(number).toInt\n        val decimalPart = number\
    \ - intPart\n        decimalPart", "        val fraction = number.toInt\n    \
    \    val remainder = number - fraction\n        fraction", "        val intPart\
    \ = math.floor(number)\n        val decimalPart = number - intPart\n        intPart\
    \ + decimalPart", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        decimalPart", "        val\
    \ fraction = number.toInt\n        val decimal = number - fraction\n        decimal",
  "        val fraction = number - math.floor(number)\n        val decimal = math.round(fraction\
    \ * 10).toInt\n        decimal / 10", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = number - fractionalPart\n        integerPart * Math.pow(10,\
    \ fractionalPart.toInt)", "        val fraction = number % 1\n        number -\
    \ fraction", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val fraction =\
    \ number.toInt\n        val decimal = number - fraction\n        fraction", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fraction = number.toInt\n      \
    \  val decimal = number - fraction\n        fraction", "        val fraction =\
    \ number.toInt\n        val decimal = number - fraction\n        fraction", " \
    \       val fraction = number.toInt\n        val decimal = number - fraction\n\
    \        fraction", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        decimalPart", "        val fraction = number.toInt\n\
    \        val decimal = number - fraction\n        fraction", "        val intPart\
    \ = math.floor(number)\n        val decimalPart = number - intPart\n        intPart\
    \ + decimalPart", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val fractionalPart\
    \ = number % 1\n        val integerPart = math.floor(number)\n        val decimalPart\
    \ = math.abs(number - integerPart)\n        fractionalPart * Math.pow(10, decimalPart)",
  "        val fractionalPart = number % 1\n        val integerPart = number - fractionalPart\n\
    \        val decimalPart = fractionalPart * 10\n        decimalPart", "      \
    \  val fraction = number.toInt\n        val decimal = number - fraction\n    \
    \    fraction", "        val intPart = math.ceil(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val fraction =\
    \ number % 1\n        val integerPart = number - fraction\n        val decimalPart\
    \ = fraction\n        decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fractionalPart = number % 1\n  \
    \      val integerPart = number - fractionalPart\n        val decimalPart = fractionalPart\
    \ * 10\n        decimalPart", "        val fraction = number.toInt\n        val\
    \ remainder = number - fraction\n        fraction", "        val fractionalPart\
    \ = number % 1\n        val integerPart = math.floor(number)\n        val decimalPart\
    \ = fractionalPart * 10\n        decimalPart", "        val fractionalPart = number\
    \ % 1\n        val integerPart = math.floor(number / 1)\n        fractionalPart\
    \ * 1", "        val fraction = number.toInt\n        val decimal = number - fraction\n\
    \        fraction", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        decimalPart", "        val\
    \ intPart = math.floor(number)\n        val decimalPart = number - intPart\n \
    \       decimalPart", "        val fraction = number % 1\n        val integer\
    \ = number - fraction\n        integer + fraction", "        val fractionalPart\
    \ = number % 1\n        val integerPart = number - fractionalPart\n        fractionalPart",
  "        val fraction = number.toInt\n        val remainder = number - fraction\n\
    \        fraction", "        val fraction = number % 1\n        number - fraction",
  "        val fractionalPart = number % 1\n        val integerPart = number - fractionalPart\n\
    \        val decimalPart = fractionalPart * 10\n        decimalPart", "      \
    \  val fraction = number % 1\n        number - fraction"]
stop_tokens:
- "\n    }\n"
