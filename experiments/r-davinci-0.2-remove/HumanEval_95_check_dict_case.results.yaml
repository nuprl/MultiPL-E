language: r
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(c(a\
    \ = 1, b = 2, c = 3))\ncheck_dict_case(c(A = 1, B = 2, C = 3))\ncheck_dict_case(c(A\
    \ = 1, B = 2, C = 3, a = 4))\ncheck_dict_case(c())\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict)\
    \ == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ncheck_dict_case(dict1)\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: 'NULL

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(c(a\
    \ = 1, b = 2, c = 3))\ncheck_dict_case(c(A = 1, B = 2, C = 3))\ncheck_dict_case(c(a\
    \ = 1, B = 2, c = 3))\ncheck_dict_case(c())\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # YOUR CODE HERE\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\ncheck_dict_case(dict5)\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\ncheck_dict_case(dict3)\n\
    check_dict_case(dict4)\ncheck_dict_case(dict5)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    if(all(tolower(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else if(all(toupper(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        keys <- names(dict)\n        if (all(tolower(keys)\
    \ == keys)) {\n            return(TRUE)\n        }\n        else if (all(toupper(keys)\
    \ == keys)) {\n            return(TRUE)\n        }\n        else {\n         \
    \   return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b'\
    \ = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n   \
    \ if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP'\
    \ = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    if (all(tolower(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else if (all(toupper(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  lower <- all(str_detect(keys, \"^[a-z]+$\"))\n  upper <- all(str_detect(keys,\
    \ \"^[A-Z]+$\"))\n  return(lower | upper)\n}\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\n\
    check_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Check if the dictionary is empty\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  \n  # Check if all keys are strings in lower\
    \ case\n  if (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n\
    \  }\n  \n  # Check if all keys are strings in upper case\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  \n  # If none of the above conditions\
    \ are met, return FALSE\n  return(FALSE)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    keys <- names(dict)\n    if (all(tolower(keys) == keys)) {\n      return(TRUE)\n\
    \    }\n    else if (all(toupper(keys) == keys)) {\n      return(TRUE)\n    }\n\
    \    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  if(all(tolower(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  if(all(toupper(names(dict)) ==\
    \ names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) {\n   \
    \     return(FALSE)\n    }\n    else {\n        if(all(tolower(names(dict)) ==\
    \ names(dict))) {\n            return(TRUE)\n        }\n        else if(all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict)\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict) : object ''dict'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  \n  # check if the dictionary is empty\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  \n  # check if all keys are lower case\n\
    \  if (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  \n\
    \  # check if all keys are upper case\n  if (all(toupper(names(dict)) == names(dict)))\
    \ {\n    return(TRUE)\n  }\n  \n  # if neither of the above is true, return FALSE\n\
    \  return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(names(dict) == tolower(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    if (all(names(dict) == toupper(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) return(FALSE)\n\
    \    if(all(sapply(dict, is.character))) {\n        if(all(sapply(dict, toupper)\
    \ == names(dict))) return(TRUE)\n        if(all(sapply(dict, tolower) == names(dict)))\
    \ return(TRUE)\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\ncheck_dict_case(dict3)\n\
    check_dict_case(dict4)\ncheck_dict_case(dict5)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) {\n   \
    \     return(FALSE)\n    }\n    else {\n        if(all(tolower(names(dict)) ==\
    \ names(dict))) {\n            return(TRUE)\n        }\n        else if(all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\n\
    check_dict_case(dict3)\ncheck_dict_case(dict4)\ncheck_dict_case(dict5)\ncheck_dict_case(dict6)\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if (length(dict) == 0) {\n  \
    \      return(FALSE)\n    }\n    else {\n        if (all(tolower(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\ncheck_dict_case(list(a = 1, b =\
    \ 2, c = 3))\ncheck_dict_case(list(A = 1, B = 2, C = 3))\ncheck_dict_case(list(A\
    \ = 1, B = 2, C = 3, a = 4))\ncheck_dict_case(list())\n \ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) {\n   \
    \     return(FALSE)\n    }\n    if(all(tolower(names(dict)) == names(dict))) {\n\
    \        return(TRUE)\n    }\n    if(all(toupper(names(dict)) == names(dict)))\
    \ {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ncheck_dict_case(list(a = 1, b\
    \ = 2, c = 3))\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: 'NULL

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) {\n   \
    \     return(FALSE)\n    }\n    if(all(names(dict) == tolower(names(dict)))) {\n\
    \        return(TRUE)\n    }\n    if(all(names(dict) == toupper(names(dict))))\
    \ {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # check if the dictionary is empty\n  if (length(dict)\
    \ == 0) {\n    return(FALSE)\n  }\n  # check if all keys are strings in lower\
    \ case\n  if (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n\
    \  }\n  # check if all keys are strings in upper case\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  # if none of the above conditions\
    \ are met, return False\n  return(FALSE)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n    return(TRUE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\ncheck_dict_case(dict5)\n\
    \ \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] TRUE

    [1] TRUE

    [1] TRUE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  for\
    \ (key in names(dict)) {\n    if (any(str_detect(key, \"[A-Z]\"))) {\n      return(FALSE)\n\
    \    }\n  }\n  return(TRUE)\n}\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\n\
    check_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) return(FALSE)\n\
    \    if(all(sapply(names(dict), function(x) {grepl(\"^[A-Z]+$\", x)}))) return(TRUE)\n\
    \    if(all(sapply(names(dict), function(x) {grepl(\"^[a-z]+$\", x)}))) return(TRUE)\n\
    \    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n    return(NULL)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\ncheck_dict_case(dict5)\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if (length(dict) == 0) {\n  \
    \      return(FALSE)\n    }\n    if (all(tolower(names(dict)) == names(dict)))\
    \ {\n        return(TRUE)\n    }\n    if (all(toupper(names(dict)) == names(dict)))\
    \ {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if(all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n\
    \  if(all(toupper(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(names(dict) == tolower(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    if (all(names(dict) == toupper(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\n\
    check_dict_case(dict3)\ncheck_dict_case(dict4)\ncheck_dict_case(dict5)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict)\
    \ == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ncheck_dict_case(c(\"a\" = 1, \"b\" = 2))\ncheck_dict_case(c(\"\
    A\" = 1, \"B\" = 2))\ncheck_dict_case(c(\"a\" = 1, \"B\" = 2))\ncheck_dict_case(c(\"\
    A\" = 1, \"b\" = 2))\ncheck_dict_case(c())\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict)\
    \ == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ncheck_dict_case(c(a = 1, b =\
    \ 2, c = 3))\ncheck_dict_case(c(A = 1, B = 2, C = 3))\ncheck_dict_case(c(A = 1,\
    \ B = 2, C = 3, a = 4))\ncheck_dict_case(c())\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\ncheck_dict_case(dict5)\n\
    check_dict_case(dict6)\ncheck_dict_case(dict7)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    lower_keys <- sapply(dict, function(x) {\n        if (is.character(names(x)))\
    \ {\n            return(all(tolower(names(x)) == names(x)))\n        }\n     \
    \   return(FALSE)\n    })\n    upper_keys <- sapply(dict, function(x) {\n    \
    \    if (is.character(names(x))) {\n            return(all(toupper(names(x)) ==\
    \ names(x)))\n        }\n        return(FALSE)\n    })\n    return(all(lower_keys)\
    \ | all(upper_keys))\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ncheck_dict_case(dict1)\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: 'NULL

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # YOUR CODE HERE\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if(all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n\
    \  if(all(toupper(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\
    check_dict_case(dict5)\ncheck_dict_case(dict6)\ncheck_dict_case(dict7)\ncheck_dict_case(dict8)\n\
    check_dict_case(dict9)\ncheck_dict_case(dict10)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  key_types\
    \ <- sapply(names(dict), function(x) {\n    if (is.na(x)) {\n      return(NA)\n\
    \    }\n    if (all(x == toupper(x))) {\n      return(\"upper\")\n    }\n    if\
    \ (all(x == tolower(x))) {\n      return(\"lower\")\n    }\n    return(\"mixed\"\
    )\n  })\n  if (all(key_types == \"upper\")) {\n    return(TRUE)\n  }\n  if (all(key_types\
    \ == \"lower\")) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict\
    \ = list(a = 1, b = 2, c = 3))\ncheck_dict_case(dict = list(A = 1, B = 2, C =\
    \ 3))\ncheck_dict_case(dict = list(A = 1, B = 2, C = 3, a = 4))\ncheck_dict_case(dict\
    \ = list(a = 1, b = 2, c = 3, A = 4))\ncheck_dict_case(dict = list())\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: OK
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if(length(dict) == 0) {\n        return(FALSE)\n  \
    \  }\n    if(all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if(all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict)\
    \ == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if(length(dict) == 0) {\n        return(FALSE)\n  \
    \  }\n    if(all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if(all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # write your code here\n  # return True or False\n}\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  if(all(tolower(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  if(all(toupper(names(dict)) ==\
    \ names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(c(a\
    \ = 1, b = 2, c = 3))\ncheck_dict_case(c(A = 1, B = 2, C = 3))\ncheck_dict_case(c(A\
    \ = 1, B = 2, C = 3, a = 4))\ncheck_dict_case(c())\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        keys <- names(dict)\n        lower_keys <- tolower(keys)\n\
    \        upper_keys <- toupper(keys)\n        if (all(keys == lower_keys) | all(keys\
    \ == upper_keys)) {\n            return(TRUE)\n        }\n        else {\n   \
    \         return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(names(dict) == tolower(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    if (all(names(dict) == toupper(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  is_lower <- all(tolower(keys) == keys)\n  is_upper <- all(toupper(keys)\
    \ == keys)\n  return(is_lower | is_upper)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    lower_keys <- sapply(dict, function(x) {\n        if (is.character(names(x)))\
    \ {\n            return(all(tolower(names(x)) == names(x)))\n        }\n     \
    \   return(FALSE)\n    })\n    upper_keys <- sapply(dict, function(x) {\n    \
    \    if (is.character(names(x))) {\n            return(all(toupper(names(x)) ==\
    \ names(x)))\n        }\n        return(FALSE)\n    })\n    return(all(lower_keys)\
    \ | all(upper_keys))\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n    return(TRUE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) {\n   \
    \     return(FALSE)\n    }\n    if(all(tolower(names(dict)) == names(dict))) {\n\
    \        return(TRUE)\n    }\n    if(all(toupper(names(dict)) == names(dict)))\
    \ {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\n\
    check_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(c(a\
    \ = 1, b = 2, c = 3))\ncheck_dict_case(c(A = 1, B = 2, C = 3))\ncheck_dict_case(c(A\
    \ = 1, B = 2, C = 3, a = 4))\ncheck_dict_case(c())\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # Your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # YOUR CODE HERE\n  if(length(dict)==0){\n    return(FALSE)\n\
    \  }\n  if(all(tolower(names(dict))==names(dict))){\n    return(TRUE)\n  }\n \
    \ if(all(toupper(names(dict))==names(dict))){\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        lower <- TRUE\n        upper <- TRUE\n        for (key\
    \ in names(dict)) {\n            if (is.na(key)) {\n                return(FALSE)\n\
    \            }\n            if (is.na(dict[[key]])) {\n                return(FALSE)\n\
    \            }\n            if (is.na(tolower(key))) {\n                return(FALSE)\n\
    \            }\n            if (is.na(toupper(key))) {\n                return(FALSE)\n\
    \            }\n            if (tolower(key) != key) {\n                lower\
    \ <- FALSE\n            }\n            if (toupper(key) != key) {\n          \
    \      upper <- FALSE\n            }\n        }\n        return(lower | upper)\n\
    \    }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if(length(dict) == 0) {\n        return(FALSE)\n  \
    \  }\n    if(all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if(all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ncheck_dict_case(dict = c(a = 1, b = 2, c = 3))\n\
    check_dict_case(dict = c(A = 1, B = 2, C = 3))\ncheck_dict_case(dict = c(A = 1,\
    \ B = 2, C = 3, a = 4))\ncheck_dict_case(dict = c())\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if(length(dict) == 0) {\n        return(FALSE)\n  \
    \  }\n    if(all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if(all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\n\
    check_dict_case(dict3)\ncheck_dict_case(dict4)\n \ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: 'NULL

    NULL

    NULL

    NULL

    '
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # Your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(names(dict) == tolower(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    if (all(names(dict) == toupper(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  is_lower\
    \ <- TRUE\n  is_upper <- TRUE\n  for (key in names(dict)) {\n    if (is.na(key))\
    \ {\n      return(FALSE)\n    }\n    is_lower <- is_lower & (key == tolower(key))\n\
    \    is_upper <- is_upper & (key == toupper(key))\n  }\n  return(is_lower | is_upper)\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    lower_keys <- sapply(dict, function(x) {\n        if (is.character(names(x)))\
    \ {\n            return(all(tolower(names(x)) == names(x)))\n        }\n     \
    \   return(FALSE)\n    })\n    upper_keys <- sapply(dict, function(x) {\n    \
    \    if (is.character(names(x))) {\n            return(all(toupper(names(x)) ==\
    \ names(x)))\n        }\n        return(FALSE)\n    })\n    return(all(lower_keys)\
    \ | all(upper_keys))\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    if (all(tolower(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else if (all(toupper(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # Your code here\n    if (length(dict) == 0) {\n  \
    \      return(FALSE)\n    }\n    if (all(names(dict) == tolower(names(dict))))\
    \ {\n        return(TRUE)\n    } else if (all(names(dict) == toupper(names(dict))))\
    \ {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    if (all(tolower(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else if (all(toupper(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict)\
    \ == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # YOUR CODE HERE\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(names(dict) == tolower(names(dict)))) {\n    return(TRUE)\n  }\n  if (all(names(dict)\
    \ == toupper(names(dict)))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(sapply(dict, is.character))) {\n    if (all(sapply(dict, is.upper))) {\n\
    \      return(TRUE)\n    } else if (all(sapply(dict, is.lower))) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in match.fun(FUN) : object ''is.upper'' not found

    Calls: test_humaneval -> candidate -> sapply -> match.fun

    Execution halted

    '
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  if (all(tolower(keys) == keys)) {\n    return(TRUE)\n  } else\
    \ if (all(toupper(keys) == keys)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(tolower(names(dict)) == names(dict))) {\n \
    \           return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    if (all(tolower(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else if (all(toupper(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  keys\
    \ <- names(dict)\n  is_lower <- all(tolower(keys) == keys)\n  is_upper <- all(toupper(keys)\
    \ == keys)\n  return(is_lower | is_upper)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    keys <- names(dict)\n    if (all(tolower(keys) == keys)) {\n      \
    \  return(TRUE)\n    }\n    if (all(toupper(keys) == keys)) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    is_lower <- TRUE\n    is_upper <- TRUE\n    for (key in names(dict))\
    \ {\n        if (!is.na(key)) {\n            if (is.na(str_detect(key, \"[a-z]\"\
    ))) {\n                is_lower <- FALSE\n            }\n            if (is.na(str_detect(key,\
    \ \"[A-Z]\"))) {\n                is_upper <- FALSE\n            }\n        }\n\
    \    }\n    return(is_lower | is_upper)\n}\n\ncheck_dict_case(c(\"a\" = 1, \"\
    b\" = 2))\ncheck_dict_case(c(\"A\" = 1, \"B\" = 2))\ncheck_dict_case(c(\"a\" =\
    \ 1, \"B\" = 2))\ncheck_dict_case(c(\"A\" = 1, \"b\" = 2))\ncheck_dict_case(c())\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in str_detect(key, "[a-z]") : could not find function "str_detect"

    Calls: check_dict_case

    Execution halted

    '
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    keys <- names(dict)\n    if (all(str_detect(keys, \"^[a-z]+$\"))) {\n\
    \        return(TRUE)\n    }\n    if (all(str_detect(keys, \"^[A-Z]+$\"))) {\n\
    \        return(TRUE)\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: "Error in str_detect(keys, \"^[a-z]+$\") : \n  could not find function \"\
    str_detect\"\nCalls: test_humaneval -> candidate\nExecution halted\n"
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if (length(dict) == 0) {\n  \
    \      return(FALSE)\n    }\n    else {\n        if (all(tolower(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else if (all(toupper(names(dict))\
    \ == names(dict))) {\n            return(TRUE)\n        }\n        else {\n  \
    \          return(FALSE)\n        }\n    }\n}\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  if(all(tolower(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  if(all(toupper(names(dict)) ==\
    \ names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    else {\n        if (all(names(dict) == tolower(names(dict)))) {\n \
    \           return(TRUE)\n        }\n        else if (all(names(dict) == toupper(names(dict))))\
    \ {\n            return(TRUE)\n        }\n        else {\n            return(FALSE)\n\
    \        }\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) return(FALSE)\n  if (all(tolower(names(dict))\
    \ == names(dict))) return(TRUE)\n  if (all(toupper(names(dict)) == names(dict)))\
    \ return(TRUE)\n  return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b'\
    \ = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n   \
    \ if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP'\
    \ = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  if(all(tolower(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  if(all(toupper(names(dict)) ==\
    \ names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict\
    \ = list(a = 1, b = 2, c = 3))\ncheck_dict_case(dict = list(A = 1, B = 2, C =\
    \ 3))\ncheck_dict_case(dict = list(A = 1, b = 2, C = 3))\ncheck_dict_case(dict\
    \ = list())\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if(length(dict) == 0) {\n    return(FALSE)\n  }\n  else\
    \ {\n    if(all(tolower(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else if(all(toupper(names(dict)) == names(dict))) {\n      return(TRUE)\n\
    \    }\n    else {\n      return(FALSE)\n    }\n  }\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) return(FALSE)\n    if (all(tolower(names(dict))\
    \ == names(dict))) return(TRUE)\n    if (all(toupper(names(dict)) == names(dict)))\
    \ return(TRUE)\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b'\
    \ = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n   \
    \ if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP'\
    \ = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(list(a\
    \ = 1, b = 2, c = 3))\ncheck_dict_case(list(A = 1, B = 2, C = 3))\ncheck_dict_case(list(A\
    \ = 1, B = 2, C = 3, a = 4))\ncheck_dict_case(list())\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: '[1] TRUE

    [1] TRUE

    [1] FALSE

    [1] FALSE

    '
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # YOUR CODE HERE\n  if(length(dict) == 0) {\n    return(FALSE)\n\
    \  }\n  if(all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n\
    \  if(all(toupper(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n\
    }\n\ncheck_dict_case(dict1)\ncheck_dict_case(dict2)\ncheck_dict_case(dict3)\n\
    check_dict_case(dict4)\ncheck_dict_case(dict5)\ncheck_dict_case(dict6)\ncheck_dict_case(dict7)\n\
    check_dict_case(dict8)\ncheck_dict_case(dict9)\ncheck_dict_case(dict10)\ncheck_dict_case(dict11)\n\
    check_dict_case(dict12)\ncheck_dict_case(dict13)\ncheck_dict_case(dict14)\ncheck_dict_case(dict15)\n\
    check_dict_case(dict16)\ncheck_dict_case(dict17)\ncheck_dict_case(dict18)\ncheck_dict_case(dict19)\n\
    check_dict_case(dict20)\ncheck_dict_case(dict21)\ncheck_dict_case(dict22)\ncheck_dict_case(dict23)\n\
    check_dict_case(dict24)\ncheck_dict_case(dict25)\ncheck_dict_case(dict26)\ncheck_dict_case(dict27)\n\
    check_dict_case(dict28)\ncheck_dict_case(dict29)\ncheck_dict_case(dict30)\ncheck_dict_case(dict31)\n\
    check_dict_case(dict32)\ncheck_dict_case(dict33)\ncheck_dict_case(dict34)\ncheck_dict_case(dict35)\n\
    check_dict_case(dict36)\ncheck_dict_case(dict37)\ncheck_dict_case(dict38)\ncheck_dict_case(dict39)\n\
    check_dict_case(dict40)\ncheck_dict_case(dict41)\ncheck_\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if(length(dict) == 0) {\n        return(FALSE)\n  \
    \  }\n    for(key in names(dict)) {\n        if(!is.na(key)) {\n            if(!(key\
    \ == tolower(key) | key == toupper(key))) {\n                return(FALSE)\n \
    \           }\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(names(dict) == tolower(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    if (all(names(dict) == toupper(names(dict)))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # YOUR CODE HERE\n    if(length(dict) == 0) return(FALSE)\n\
    \    if(all(sapply(dict, function(x) {is.character(x) && x == tolower(x)}))) return(TRUE)\n\
    \    if(all(sapply(dict, function(x) {is.character(x) && x == toupper(x)}))) return(TRUE)\n\
    \    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(tolower(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    if (all(toupper(names(dict)) == names(dict))) {\n        return(TRUE)\n\
    \    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n\
    \    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no',\
    \ 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B'\
    \ = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
    \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(sapply(dict, is.character))) {\n    if (all(sapply(dict, is.lower))) {\n\
    \      return(TRUE)\n    } else if (all(sapply(dict, is.upper))) {\n      return(TRUE)\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in match.fun(FUN) : object ''is.lower'' not found

    Calls: test_humaneval -> candidate -> sapply -> match.fun

    Execution halted

    '
  stdout: ''
  timestamp: 1660015264
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict1)\n\
    check_dict_case(dict2)\ncheck_dict_case(dict3)\ncheck_dict_case(dict4)\n\ntest_humaneval\
    \ <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict1) : object ''dict1'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    # your code here\n}\n\ntest_humaneval <- function()\
    \ {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  if (length(dict) == 0) {\n    return(FALSE)\n  }\n  if\
    \ (all(tolower(names(dict)) == names(dict))) {\n    return(TRUE)\n  }\n  if (all(toupper(names(dict))\
    \ == names(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_dict_case(dict)\n\
    \ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'Error in check_dict_case(dict) : object ''dict'' not found

    Execution halted

    '
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n  # your code here\n}\n\ntest_humaneval <- function() {\n\
    candidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple',\
    \ 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n  \
    \  if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age'\
    \ = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
    \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015263
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ncheck_dict_case\
    \ <- function(dict) {\n    if (length(dict) == 0) {\n        return(FALSE)\n \
    \   }\n    if (all(sapply(dict, is.character))) {\n        if (all(sapply(dict,\
    \ function(x) {\n            nchar(x) == nchar(tolower(x))\n        }))) {\n \
    \           return(TRUE)\n        } else if (all(sapply(dict, function(x) {\n\
    \            nchar(x) == nchar(toupper(x))\n        }))) {\n            return(TRUE)\n\
    \        }\n    }\n    return(FALSE)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b'\
    \ = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' =\
    \ 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
    \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n   \
    \ if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')),\
    \ FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP'\
    \ = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
    \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
    \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: ''
  stdout: ''
  timestamp: 1660015264
