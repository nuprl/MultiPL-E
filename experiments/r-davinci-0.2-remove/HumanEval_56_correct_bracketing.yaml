name: HumanEval_56_correct_bracketing
language: r
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\ncorrect_bracketing <- function(brackets)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- correct_bracketing\n    if(!identical(candidate('<>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<><>>'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('<<<><>>>>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('><<>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<<<'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('>'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('<<>'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('<><><<><>><>><<>'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('<><><<><>><>>><>'), FALSE)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncorrect_bracketing(\"\

  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == '<') {\n      stack <- c(stack, '<')\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n", "\n    # YOUR CODE HERE\n\
    \    stack <- c()\n    for (i in 1:nchar(brackets)){\n        if (substr(brackets,\
    \ i, i) == \"<\"){\n            stack <- c(stack, \"<\")\n        } else if (substr(brackets,\
    \ i, i) == \">\"){\n            if (length(stack) == 0){\n                return(FALSE)\n\
    \            } else {\n                stack <- stack[-length(stack)]\n      \
    \      }\n        }\n    }\n    if (length(stack) == 0){\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n    # your code here\n \
    \   # use a stack\n    stack <- c()\n    for (i in 1:nchar(brackets)) {\n    \
    \    if (substr(brackets, i, i) == \"<\") {\n            stack <- c(stack, \"\
    <\")\n        } else {\n            if (length(stack) == 0) {\n              \
    \  return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    return(length(stack) == 0)\n}\n\ncorrect_bracketing(\"\
    <<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><", "\n  #\
    \ YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    if(length(brackets)\
    \ == 0) {\n        return(TRUE)\n    }\n    if(substr(brackets, 1, 1) == \"<\"\
    ) {\n        if(substr(brackets, length(brackets), length(brackets)) == \">\"\
    ) {\n            return(TRUE)\n        }\n        else {\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets))))\n        }\n    }\n    else {\n        return(FALSE)\n\
    \    }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<><\")\ncorrect_bracketing(\"\
    <><><\")\ncorrect_bracketing(\"<><><><\")\ncorrect_bracketing(\"<><><><><\")\n\
    correct_bracketing(\"<><><><><><\")\ncorrect_bracketing(\"<><><><><><><\")\ncorrect_bracketing(\"\
    <><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><\")\ncorrect_bracketing(\"\
    <><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><><><\")\n\
    correct_bracketing(\"<><><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><\")\ncorrect_br",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n   \
    \ # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets)) {\n   \
    \     if (substr(brackets, i, i) == \"<\") {\n            stack <- c(stack, \"\
    <\")\n        } else {\n            if (length(stack) == 0) {\n              \
    \  return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<>>>>\"\
    )\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\">\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\
    <><\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><><\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><><\")\ncorrect_bracketing(\"<><><><>\")\n\
    correct_bracketing(\"<><><><><\")\ncorrect_bracketing(\"<><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><\"\
    )\ncorrect_bracketing(\"<><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><\"\
    )", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n\
    \    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\
    \ else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if (length(brackets)\
    \ == 0) {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == '<') {\n   \
    \ if (substr(brackets, length(brackets), length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(is.null(brackets)){\n\
    \    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == '<'){\n    if(substr(brackets,\
    \ 2, 2) == '>'){\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"<\") {\n            stack <- c(stack,\
    \ \"<\")\n        } else {\n            if (length(stack) == 0) {\n          \
    \      return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n    # YOUR CODE HERE\n \
    \   return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if(nchar(brackets) == 0) return(TRUE)\n\
    \  if(nchar(brackets) == 1) return(FALSE)\n  if(substr(brackets, 1, 1) == \">\"\
    ) return(FALSE)\n  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets,\
    \ 2, 2) == \">\") return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    else return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n \
    \ }\n}\n", "\n  # your code here\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n\ncorrect_bracketing(\"<><<>><>\")\n", "\n  \
    \  # YOUR CODE HERE\n    if(length(brackets)==0){\n        return(TRUE)\n    }\n\
    \    if(substr(brackets,1,1)==\">\"){\n        return(FALSE)\n    }\n    if(substr(brackets,1,1)==\"\
    <\"){\n        return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \    }\n    if(substr(brackets,1,1)==\">\"){\n        return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \    }\n}\n", "\n    # YOUR CODE HERE\n    if(brackets == \"\"){\n        return(TRUE)\n\
    \    }\n    if(substr(brackets,1,1) == \">\"){\n        return(FALSE)\n    }\n\
    \    if(substr(brackets,1,1) == \"<\"){\n        return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \    }\n    if(substr(brackets,1,1) == \">\"){\n        return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \    }\n    return(FALSE)\n}\ncorrect_bracketing(\"<><<><>><><>\")\ncorrect_bracketing(\"\
    <><<><>><><\")\ncorrect_bracketing(\"<><<><>><><><>\")\ncorrect_bracketing(\"\
    <><<><>><><><><>\")\ncorrect_bracketing(\"<><<><>><><><><><>\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><>\")\ncorrect_bracketing(\"<><<><>><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><>\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><><", "\n  # your code\
    \ here\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ your code here\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  if(length(brackets)\
    \ == 0){\n    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\"){\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    }\n    else{\n      return(FALSE)\n    }\n \
    \ }\n  else{\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><<>>\")\ncorrect_bracketing(\"<><<>><>\")\ncorrect_bracketing(\"\
    <><<>><><>\")\ncorrect_bracketing(\"<><<>><><><>\")\ncorrect_bracketing(\"<><<>><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<>><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<>><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><><><><><><><><><>\"\
    )", "\n  # YOUR CODE HERE\n  if (length(brackets) == 0) {\n    return(TRUE)\n\
    \  } else if (brackets[1] == '<') {\n    if (length(brackets) == 1) {\n      return(FALSE)\n\
    \    } else {\n      return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \    }\n  } else if (brackets[1] == '>') {\n    if (length(brackets) == 1) {\n\
    \      return(FALSE)\n    } else {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n  }\n}\n", "\n    # YOUR CODE HERE\n    if(length(brackets)\
    \ == 0) return(TRUE)\n    if(substr(brackets, 1, 1) == '<'){\n        if(substr(brackets,\
    \ length(brackets), length(brackets)) == '>'){\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets)-1)))\n        }\n        else return(FALSE)\n    }\n   \
    \ else return(FALSE)\n}\n", "\n  # your code here\n  return(TRUE)\n}\n", "\n \
    \ # YOUR CODE HERE\n  stack = c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      stack = c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack = stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><", "\n    # your code here\n\
    \    return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  # use a stack\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(length(brackets)\
    \ == 0) return(TRUE)\n  if(substr(brackets, 1, 1) == '<'){\n    if(substr(brackets,\
    \ length(brackets), length(brackets)) == '>'){\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets)-1)))\n    }else{\n      return(FALSE)\n    }\n  }else{\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i\
    \ in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n      stack\
    \ <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"<>>\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\">\")\ncorrect_bracketing(\"\
    \")\n", "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"<\") {\n            stack <- c(stack,\
    \ \"<\")\n        } else {\n            if (length(stack) == 0) {\n          \
    \      return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<>>>\"\
    )\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><\")\ncorrect_bracketing(\"\
    <><><><>>\")\n", "\n  # YOUR CODE HERE\n  open <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      open <- open + 1\n    }\
    \ else {\n      open <- open - 1\n    }\n    if (open < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  if (open == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"<><<><<\")\n\
    correct_bracketing(\"<><<><>>\")\ncorrect_bracketing(\"<><<><>><\")\ncorrect_bracketing(\"\
    <><<><>><><\")\n ", "\n    # YOUR CODE HERE\n    if (brackets == \"\") {\n   \
    \     return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == \">\") {\n      \
    \  return(FALSE)\n    }\n    if (substr(brackets, 1, 1) == \"<\") {\n        return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n    if (substr(brackets, 1, 1) == \">\") {\n \
    \       return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n   \
    \ }\n}\n", "\n  # YOUR CODE HERE\n  stack <- list()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ncorrect_bracketing(\"<<<<<>\")\ncorrect_bracketing(\"<<<<<\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<<<><\")\ncorrect_bracketing(\"<<<><>\")\ncorrect_bracketing(\"\
    <<<><>>\")\ncorrect_bracketing(\"<<<><>>>\")\ncorrect_bracketing(\"<<<><>>>>\"\
    )\ncorrect_bracketing(\"<<<><>>>><\")\ncorrect_bracketing(\"<<<><>>>><>\")\ncorrect_bracketing(\"\
    <<<><>>>><>>\")\ncorrect_bracketing(\"<<<><>>>><>>>\")\ncorrect_bracketing(\"\
    <<<><>>>><>>>>\")\ncorrect_bracketing(\"<<<><>>>><>>>><\")\ncorrect_bracketing(\"\
    <<<><>>>><>>>><>\")\ncorrect_bracketing(\"<<<><>>>><>>>><>>\")\ncorrect_bracketing(\"\
    <<<><>>>><>>>><>>>\")\ncorrect_bracketing(\"<<<><>>>><>>>><>>>>\")\ncorrect_bracketing(\"\
    <<<><>>>><>>>><>>>><\")\ncorrect_bracketing(\"<<<><>>>><>>>><>>>><>\")\ncorrect_bracketing(\"\
    <<<><>>>><>>>><>>>><>>\")\ncorrect_bracketing(\"<<<><>>>><>>>><>>>><>>>\")\ncorrect_bracketing(\"\
    <<<><>>>><>>>><>>>><>>>>\")\ncorrect_bracketing(\"<<<><>>>><>>>><>>>><>>>><\"\
    )\ncorrect_bracketing(\"<<<><>>>><>>>><>>>><>>>><>\")\n", "\n  # YOUR CODE HERE\n\
    \  # Hint: You can use the function \"substr\" to get a substring of a string.\n\
    \  # For example, substr(\"abc\", 2, 3) returns \"bc\".\n  # You can also use\
    \ the function \"nchar\" to get the length of a string.\n  # For example, nchar(\"\
    abc\") returns 3.\n  # You can also use the function \"paste\" to concatenate\
    \ strings.\n  # For example, paste(\"a\", \"b\", \"c\", sep = \"\") returns \"\
    abc\".\n  # You can also use the function \"sub\" to replace a substring with\
    \ another string.\n  # For example, sub(\"a\", \"b\", \"abc\") returns \"bbc\"\
    .\n  # You can also use the function \"grepl\" to check if a string contains a\
    \ substring.\n  # For example, grepl(\"a\", \"abc\") returns TRUE.\n  # You can\
    \ also use the function \"gsub\" to replace all occurrences of a substring with\
    \ another string.\n  # For example, gsub(\"a\", \"b\", \"abc\") returns \"bbc\"\
    .\n  # You can also use the function \"gsub\" to remove all occurrences of a substring\
    \ from a string.\n  # For example, gsub(\"a\", \"\", \"abc\") returns \"bc\".\n\
    \  # You can also use the function \"nchar\" to get the length of a string.\n\
    \  # For example, nchar(\"abc\") returns 3.\n  # You can also use the function\
    \ \"nchar\" to get the length of a string.\n  # For example, nchar(\"abc\") returns\
    \ 3.\n  # You can also use the function \"nchar\" to get the length of a string.\n\
    \  # For example, nchar(\"abc\") returns 3.\n  # You can also use the function\
    \ \"nchar\" to get the length of a string.\n  # For example, nchar(\"abc\") returns\
    \ 3.\n  # You can also use the function \"nchar\" to get the length of a string.\n\
    \  # For example, nchar(\"abc\") returns 3.\n  # You can also use the function\
    \ \"nchar\" to get the length of a string.\n  # For example, nchar(\"abc\") returns\
    \ 3.\n ", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><<>\")\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"\
    <><<><><>\")\ncorrect_bracketing(\"<><<><><><>\")\ncorrect_bracketing(\"<><<><><><><>\"\
    )\ncorrect_bracketing(\"<><<><><><><><>\")\ncorrect_bracketing(\"<><<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><><><><><><><>\")\ncorrect_bracketing(\"<><<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i,\
    \ i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    stack <- c()\n\
    \    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == '<')\
    \ {\n            stack <- c(stack, '<')\n        } else {\n            if (length(stack)\
    \ == 0) {\n                return(FALSE)\n            } else {\n             \
    \   stack <- stack[-length(stack)]\n            }\n        }\n    }\n    return(length(stack)\
    \ == 0)\n}\n", "\n  # YOUR CODE HERE\n  if(length(brackets) == 0) {\n    return(TRUE)\n\
    \  }\n  if(substr(brackets, 1, 1) == '<') {\n    if(substr(brackets, length(brackets),\
    \ length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    if (brackets ==\
    \ \"\") {\n        return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == \"<\"\
    ) {\n        if (substr(brackets, 2, 2) == \">\") {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        } else {\n            return(FALSE)\n       \
    \ }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  # your code here\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n\ncorrect_bracketing(\"\
    <<>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<>><\")\ncorrect_bracketing(\"\
    <><<>>\")\ncorrect_bracketing(\"<><<>\")\ncorrect_bracketing(\"<><<>><\")\ncorrect_bracketing(\"\
    <><<>><><\")\ncorrect_bracketing(\"<><<>><><<\")\ncorrect_bracketing(\"<><<>><><<>\"\
    )\ncorrect_bracketing(\"<><<>><><<><\")\ncorrect_bracketing(\"<><<>><><<><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><\")\ncorrect_bracketing(\"<><<>><><<><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><\")\ncorrect_bracketing(\"<><<>><><<><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><><\")\ncorrect_bracketing(\"<><<>><><<><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><><><\")\ncorrect_bracketing(\"<><<>><><<><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><><><><\")\ncorrect_bracketing(\"<><<>><><<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><><><><><\")\ncorrect_bracketing(\"<><<>><><<><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><><><><><><\")\ncorrect_bracketing(\"<><<>><><<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<>><><<><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<>><><<><><><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><<><><><><><",
  "\n    # YOUR CODE HERE\n    if(length(brackets)==0){\n        return(TRUE)\n  \
    \  }\n    else{\n        if(substr(brackets,1,1)==\"<\"){\n            if(substr(brackets,length(brackets),length(brackets))==\"\
    >\"){\n                return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n\
    \            }\n            else{\n                return(FALSE)\n           \
    \ }\n        }\n        else{\n            return(FALSE)\n        }\n    }\n}\n",
  "\n  # YOUR CODE HERE\n  # check if the length of the string is even\n  if (length(brackets)\
    \ %% 2 == 0) {\n    # check if the first element is a '<'\n    if (substr(brackets,\
    \ 1, 1) == '<') {\n      # check if the last element is a '>'\n      if (substr(brackets,\
    \ length(brackets), length(brackets)) == '>') {\n        # check if the number\
    \ of '<' is equal to the number of '>'\n        if (length(grep('<', brackets))\
    \ == length(grep('>', brackets))) {\n          return(TRUE)\n        }\n     \
    \ }\n    }\n  }\n  return(FALSE)\n}\n", "\n  # your code here\n}\n\ncorrect_bracketing(\"\
    <><><><><>\")", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, substr(brackets,\
    \ i, i))\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"<\") {\n            stack <- c(stack,\
    \ \"<\")\n        } else {\n            if (length(stack) == 0) {\n          \
    \      return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<>>>>\"\
    )\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<<<><><>\")\ncorrect_bracketing(\"\
    <<<><><>>\")\ncorrect_bracketing(\"<<<><><<>>\")\ncorrect_bracketing(\"<<<><><<><>\"\
    )\ncorrect_bracketing(\"<<<><><<><>>\")\ncorrect_bracketing(\"<<<><><<><<>>\"\
    )\ncorrect_bracketing(\"<<<><><<><<><>\")\ncorrect_bracketing(\"<<<><><<><<><>>\"\
    )\ncorrect_bracketing(\"<<<><><<><<><<>>\")\ncorrect_bracketing(\"<<<><><<><<><<><>\"\
    )\ncorrect_bracketing(\"<<<><><<><<><<><>>\")\ncorrect_bracketing(\"<<<><><<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<<<><><<><<><<><<><>\")\ncorrect_bracketing(\"<<<><><<><<><<><<><>>\"\
    )\ncorrect_bracketing(\"<<<><><<><<><<><<><<>>\")\ncorrect_bracketing(\"<<<><><<><<><<><<><<><>\"\
    )\ncorrect_bracketing(\"<<<><><<><<><<><<><<><>>\")\ncorrect_bracketing(\"", "\n\
    \    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n    if\
    \ (length(brackets) == 0) {\n        return(TRUE)\n    } else if (substr(brackets,\
    \ 1, 1) == \"<\") {\n        return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n\
    \    } else if (substr(brackets, 1, 1) == \">\") {\n        return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    } else {\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<><\")\ncorrect_bracketing(\"<><<>>\")\ncorrect_bracketing(\"\
    <><<>><\")\ncorrect_bracketing(\"<><<>><>\")\ncorrect_bracketing(\"<><<>><><\"\
    )\ncorrect_bracketing(\"<><<>><><>\")\ncorrect_bracketing(\"<><<>><><><\")\ncorrect_bracketing(\"\
    <><<>><><><>\")\ncorrect_bracketing(\"<><<>><><><><\")\ncorrect_bracketing(\"\
    <><<>><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><\")\ncorrect_bracketing(\"\
    <><<>><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><\")\ncorrect_bracketing(\"\
    <><<>><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><\")\ncorrect_bracketing(\"\
    <><<>><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<>><><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<>><><><><><><><><><>\")\ncorrect_bracketing(\"<><<>><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<", "\n  # YOUR CODE HERE\n  if(length(brackets) == 0)\
    \ {\n    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == \"<\") {\n    if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\
    \") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if\
    \ (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # your code here\n  return(TRUE)\n}\n", "\n\
    \  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack)\
    \ == 0)\n}\n", "\n  # YOUR CODE HERE\n  stack <- list()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"<><<><>>\")\ncorrect_bracketing(\"\
    <><<><<>\")\ncorrect_bracketing(\"<><<><><\")\n", "\n    # your code here\n}\n",
  "\n  # YOUR CODE HERE\n  # Use the stack data structure\n  stack <- list()\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  # Hint: use the stack\
    \ data structure\n  stack <- list()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == '<') {\n      stack <- c(stack, '<')\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ your code here\n}", "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in\
    \ 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"<\") {\n     \
    \       stack <- c(stack, \"<\")\n        } else {\n            if (length(stack)\
    \ == 0) {\n                return(FALSE)\n            } else {\n             \
    \   stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack)\
    \ == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n\
    }\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n\
    \  if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(length(brackets)\
    \ == 0) return(TRUE)\n  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\"){\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets)-1)))\n    }\n    else return(FALSE)\n  }\n  else return(FALSE)\n\
    }\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\")\ncorrect_br",
  "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets)){\n \
    \       if (substr(brackets, i, i) == \"<\"){\n            stack <- c(stack, \"\
    <\")\n        } else if (substr(brackets, i, i) == \">\"){\n            if (length(stack)\
    \ == 0){\n                return(FALSE)\n            } else {\n              \
    \  stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack)\
    \ == 0){\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
  "\n    # YOUR CODE HERE\n    if (brackets == \"\") {\n        return(TRUE)\n   \
    \ }\n    if (substr(brackets, 1, 1) == \">\") {\n        return(FALSE)\n    }\n\
    \    if (substr(brackets, 1, 1) == \"<\") {\n        return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n    if (substr(brackets, 1, 1) == \">\") {\n \
    \       return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n   \
    \ }\n}\n \ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\"<><<>>\")\ncorrect_bracketing(\"<><<><>>\")\ncorrect_bracketing(\"\
    <><<><<>>\")\ncorrect_bracketing(\"<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<><<><<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<><", "\n  # YOUR CODE HERE\n  if(length(brackets)\
    \ == 0){\n    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets,\
    \ 2, 2) == \">\"){\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n  }\n\
    \  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets, 2, 2) == \">\"\
    ){\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n \
    \   }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"\
    <><<><><>\")\ncorrect_bracketing(\"<><<><<><>\")\ncorrect_bracketing(\"<><<><<><><>\"\
    )\ncorrect_bracketing(\"<><<><<><><><>\")\ncorrect_bracketing(\"<><<><<><><><><>\"\
    )\ncorrect_bracketing(\"<><<><<><><><><><>\")\ncorrect_bracketing(\"<><<><<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><<><><><><><><><>\")\ncorrect_bracketing(\"<><<><<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><<><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><<><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><<><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><<><<><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><<><<><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><<><<><><><", "\n  # YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n\
    \  }\n  if(substr(brackets,1,1) == \"<\"){\n    if(substr(brackets,2,2) == \"\
    >\"){\n      return(correct_bracketing(substr(brackets,3,nchar(brackets))))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n    # YOUR\
    \ CODE HERE\n    if(length(brackets) == 0) {\n        return(TRUE)\n    }\n  \
    \  if(substr(brackets, 1, 1) == '<') {\n        if(substr(brackets, length(brackets),\
    \ length(brackets)) == '>') {\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n        } else {\n            return(FALSE)\n  \
    \      }\n    } else {\n        return(FALSE)\n    }\n}\n\ncorrect_bracketing(\"\
    <><<><>>\")\ncorrect_bracketing(\"<><<><>><\")\ncorrect_bracketing(\"<><<><>><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><\")\ncorrect_bracketing(\"<><<><>><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><", "\n  # YOUR CODE HERE\n\
    \  if(length(brackets)==0){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1)==\"\
    <\"){\n    if(substr(brackets,length(brackets),length(brackets))==\">\"){\n  \
    \    return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n    }\n\
    \    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n\
    \    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\
    \ else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ your code here\n}\n", "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i\
    \ in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"<\") {\n  \
    \          stack <- c(stack, \"<\")\n        } else {\n            if (length(stack)\
    \ == 0) {\n                return(FALSE)\n            } else {\n             \
    \   stack <- stack[-length(stack)]\n            }\n        }\n    }\n    return(length(stack)\
    \ == 0)\n}\n\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>\")\n\
    correct_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<><><><><>\")\ncorrect_bracketing(\"<><><><><\")\n\
    correct_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <><\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\"\")\n", "\n  # YOUR CODE HERE\n  open <- 0\n  close\
    \ <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"\
    <\") {\n      open <- open + 1\n    } else {\n      close <- close + 1\n    }\n\
    \  }\n  if (open == close) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"<><<><\")\ncorrect_bracketing(\"\
    <><<><><\")\ncorrect_bracketing(\"<><<><><>\")\n", "\n    # your code here\n \
    \   return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n    if(length(brackets) == 0)\
    \ {\n        return(TRUE)\n    } else if(substr(brackets, 1, 1) == \"<\") {\n\
    \        if(substr(brackets, length(brackets), length(brackets)) == \">\") {\n\
    \            return(correct_bracketing(substr(brackets, 2, length(brackets) -\
    \ 1)))\n        } else {\n            return(FALSE)\n        }\n    } else {\n\
    \        return(FALSE)\n    }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>>\")\ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"\
    >>>\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><", "\n  # your code here\n  return(TRUE)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"\
    <><><><>\")\ncorrect_bracketing(\"<><><><><>\")\ncorrect_bracketing(\"<><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><", "\n  # YOUR CODE HERE\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\">>>\")\ncorrect_bracketing(\"\
    >>>>\")\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    \")\ncorrect_bracketing(\">\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\"\
    >>>\")\ncorrect_bracketing(\">>>>\")\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\">\")\ncorrect_bracketing(\"\
    >>\")\ncorrect_bracketing(\">>>\")\ncorrect_bracketing(\">>>>\")\ncorrect_bracketing(\"\
    <<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    >\")\ncorrect", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)){\n\
    \    if (substr(brackets, i, i) == \"<\"){\n      stack <- c(stack, substr(brackets,\
    \ i, i))\n    } else if (substr(brackets, i, i) == \">\"){\n      if (length(stack)\
    \ == 0){\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0){\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i\
    \ in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n      stack\
    \ <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)){\n\
    \    if (substr(brackets, i, i) == \"<\"){\n      stack <- c(stack, \"<\")\n \
    \   } else if (substr(brackets, i, i) == \">\"){\n      if (length(stack) == 0){\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0){\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i\
    \ in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n      stack\
    \ <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"<\"){\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0){\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0){\n    return(TRUE)\n  } else {\n\
    \    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"\
    <><<><>>\")\ncorrect_bracketing(\"<><<><<>\")\ncorrect_bracketing(\"<><<><<>>\"\
    )\ncorrect_bracketing(\"<><<><<><>\")\ncorrect_bracketing(\"<><<><<><>>\")\ncorrect_bracketing(\"\
    <><<><<><<>\")\ncorrect_bracketing(\"<><<><<><<>>\")\ncorrect_bracketing(\"<><<><<><<><>\"\
    )\ncorrect_bracketing(\"<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<>>\")\ncorrect_bracketing(\"<><<><<><<><<><>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<><<>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<>>\")\ncorrect_bracketing(\"<><<><<><<><<><<><>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<><>>\")\ncorrect_bracketing(\"<><<><<><<><<><<><<>\"\
    )\ncorrect_bracketing(\"<><<><<><<><<><<><<>>\")\ncorrect_bracketing(\"<><<><<><<><<><<><<><>",
  "\n  # your code here\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>>>>\")\n\
    correct_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\n\
    correct_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\n\
    correct_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\n\
    correct_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\n\
    correct_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\n\
    correct_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\n\
    correct_bracket", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n\
    \    # YOUR CODE HERE\n    if(length(brackets) == 0) {\n        return(TRUE)\n\
    \    }\n    if(substr(brackets, 1, 1) == \"<\") {\n        if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\") {\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n        } else {\n            return(FALSE)\n  \
    \      }\n    } else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR CODE HERE\n\
    \  if(length(brackets) == 0) {\n    return(TRUE)\n  }\n  if(substr(brackets, 1,\
    \ 1) == \"<\") {\n    if(substr(brackets, length(brackets), length(brackets))\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  # check if the length of brackets is even\n\
    \  if (length(brackets) %% 2 != 0) {\n    return(FALSE)\n  }\n  # check if the\
    \ first character is '<'\n  if (substr(brackets, 1, 1) != '<') {\n    return(FALSE)\n\
    \  }\n  # check if the last character is '>'\n  if (substr(brackets, length(brackets),\
    \ length(brackets)) != '>') {\n    return(FALSE)\n  }\n  # check if the number\
    \ of '<' is equal to the number of '>'\n  if (sum(substr(brackets, 1, length(brackets))\
    \ == '<') != sum(substr(brackets, 1, length(brackets)) == '>')) {\n    return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n    # YOUR CODE HERE\n    stack <- c()\n    for\
    \ (i in 1:nchar(brackets)){\n        if (substr(brackets, i, i) == \"<\"){\n \
    \           stack <- c(stack, \"<\")\n        }\n        else if (substr(brackets,\
    \ i, i) == \">\"){\n            if (length(stack) == 0){\n                return(FALSE)\n\
    \            }\n            else{\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0){\n        return(TRUE)\n\
    \    }\n    else{\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<>>>>\"\
    )\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <<<>>><<\")\ncorrect_bracketing(\"<<<>>><<>>\")\ncorrect_bracketing(\"<<<>>><<>>><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><>\")\ncorrect_bracketing(\"<<<>>><<>>><><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><><>\")\ncorrect_bracketing(\"<<<>>><<>>><><><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><><><>\")\ncorrect_bracketing(\"<<<>>><<>>><><><><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><><><><>\")\ncorrect_bracketing(\"<<<>>><<>>><><><><><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><><><><><>\")\ncorrect_bracketing(\"<<<>>><<>>><><><><><><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><><><><><><>\")\ncorrect_bracketing(\"<<<>>><<>>><><><><><><><\"\
    )\ncorrect_bracketing(\"<<<>>><<>>><><><><><><><>\")\ncorrect_bracketing(\"<<<>>><<>>><><><><><><><><\"\
    )\ncorrect_bracketing(\"<<", "\n  # your code here\n  stack <- c()\n  for (i in\
    \ 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n      stack\
    \ <- c(stack, substr(brackets, i, i))\n    } else {\n      if (length(stack) ==\
    \ 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n", "\n  # your code here\n\
    }\n", "\n    # your code here\n}\n", "\n    # YOUR CODE HERE\n    if (length(brackets)\
    \ == 0) {\n        return(TRUE)\n    }\n    if (substr(brackets, 1, 1) == '<')\
    \ {\n        if (substr(brackets, 2, 2) == '>') {\n            return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n        } else {\n            return(FALSE)\n       \
    \ }\n    } else {\n        return(FALSE)\n    }\n}\n\ncorrect_bracketing(\"<<>>\"\
    )\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"\
    <><><><>\")\ncorrect_bracketing(\"<><><><><>\")\ncorrect_bracketing(\"<><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ your code here\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<\"\
    )\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"\
    <><><><>\")\ncorrect_bracketing(\"<><><><><>\")\ncorrect_bracketing(\"<><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<", "\n  # YOUR CODE HERE\n  if(length(brackets)==0){\n\
    \    return(TRUE)\n  }\n  if(substr(brackets,1,1)==\"<\"){\n    if(substr(brackets,length(brackets),length(brackets))==\"\
    >\"){\n      return(FALSE)\n    }\n    return(correct_bracketing(substr(brackets,2,length(brackets))))\n\
    \  }\n  if(substr(brackets,1,1)==\">\"){\n    if(substr(brackets,length(brackets),length(brackets))==\"\
    <\"){\n      return(FALSE)\n    }\n    return(correct_bracketing(substr(brackets,2,length(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, substr(brackets,\
    \ i, i))\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2)\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 3, nchar(brackets))))\n\
    \    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\")", "\n    #\
    \ YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE\
    \ HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n    # YOUR CODE HERE\n   \
    \ # YOUR CODE HERE\n", "\n  # YOUR CODE HERE\n  if (length(brackets) == 0) {\n\
    \    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets,\
    \ length(brackets), length(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  open <- 0\n  close\
    \ <- 0\n  for (i in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"\
    <\"){\n      open <- open + 1\n    }\n    if (substr(brackets, i, i) == \">\"\
    ){\n      close <- close + 1\n    }\n  }\n  if (open == close){\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n\
    }\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n\
    \  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i,\
    \ i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  if(brackets == \"\"){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1)\
    \ == \"<\"){\n    if(substr(brackets,2,2) == \">\"){\n      return(correct_bracketing(substr(brackets,3,nchar(brackets))))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n", "\n  # YOUR CODE HERE\n\
    \  if(brackets == \"\"){\n    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) ==\
    \ \"<\"){\n    if(substr(brackets, length(brackets), length(brackets)) == \">\"\
    ){\n      return(correct_bracketing(substr(brackets, 2, length(brackets)-1)))\n\
    \    }\n    else{\n      return(FALSE)\n    }\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"", "\n  if (length(brackets) == 0) {\n    return(TRUE)\n\
    \  } else if (substr(brackets, 1, 1) == \"<\") {\n    if (substr(brackets, length(brackets),\
    \ length(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for\
    \ (i in 1:nchar(brackets)){\n    if (substr(brackets, i, i) == \"<\"){\n     \
    \ stack <- c(stack, substr(brackets, i, i))\n    }\n    else if (substr(brackets,\
    \ i, i) == \">\"){\n      if (length(stack) == 0){\n        return(FALSE)\n  \
    \    }\n      else{\n        stack <- stack[-length(stack)]\n      }\n    }\n\
    \  }\n  if (length(stack) == 0){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n\
    \  }\n}\n", "\n  # your code here\n}\n", "\n    # YOUR CODE HERE\n    stack <-\
    \ c()\n    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i)\
    \ == \"<\") {\n            stack <- c(stack, substr(brackets, i, i))\n       \
    \ } else {\n            if (length(stack) == 0) {\n                return(FALSE)\n\
    \            } else {\n                stack <- stack[-length(stack)]\n      \
    \      }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n    # YOUR CODE HERE\n \
    \   if(length(brackets) == 0) {\n        return(TRUE)\n    }\n    if(substr(brackets,\
    \ 1, 1) == \"<\") {\n        if(substr(brackets, length(brackets), length(brackets))\
    \ == \">\") {\n            return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n        } else {\n            return(FALSE)\n        }\n    } else {\n\
    \        return(FALSE)\n    }\n}\n\ncorrect_bracketing
  "\n  # YOUR CODE HERE\n  if (length(brackets) == 0) {\n    return(TRUE)\n  }\n \
    \ if (brackets[1] == '<') {\n    if (length(brackets) == 1) {\n      return(FALSE)\n\
    \    }\n    if (brackets[2] == '>') {\n      return(correct_bracketing(brackets[3:length(brackets)]))\n\
    \    }\n    return(correct_bracketing(brackets[2:length(brackets)]))\n  }\n  return(FALSE)\n\
    }\n \ncorrect_bracketing(\"<><<>>>>\")\ncorrect_bracketing(\"<><<>>>><\")\ncorrect_bracketing(\"\
    <><<>>>><><\")\ncorrect_bracketing(\"<><<>>>><><><\")\ncorrect_bracketing(\"<><<>>>><><><><\"\
    )\ncorrect_bracketing(\"<><<>>>><><><><><\")\ncorrect_bracketing(\"<><<>>>><><><><><><\"\
    )\ncorrect_bracketing(\"<><<>>>><><><><><><><\")\ncorrect_bracketing(\"<><<>>>><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<>>>><><><><><><><><><\")\ncorrect_bracketing(\"<><<>>>><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<>>>><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<>>>><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><<>>>><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<>>>><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<>>>><><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><<>>>><><><><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<>>>><><><><><><><><><><><><><><><><><\")\ncorrect_",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, substr(brackets,\
    \ i, i))\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)){\n    if (substr(brackets,\
    \ i, i) == \"<\"){\n      stack <- c(stack, substr(brackets, i, i))\n    }\n \
    \   else if (substr(brackets, i, i) == \">\"){\n      if (length(stack) == 0){\n\
    \        return(FALSE)\n      }\n      else{\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0){\n    return(TRUE)\n  }\n  else{\n\
    \    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (nchar(brackets) ==\
    \ 0) {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    if\
    \ (substr(brackets, nchar(brackets), nchar(brackets)) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"\
    <<<>>\")\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>\")\ncorrect_bracketing(\"<<<>>>>><\")\ncorrect_bracketing(\"<<<>>>>><<\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<\")\ncorrect_bracketing(\"<<<>>>>><<<>\")\n\
    correct_bracketing(\"<<<>>>>><<<>>\")\ncorrect_bracketing(\"<<<>>>>><<<>>>\")\n\
    correct_bracketing(\"<<<>>>>><<<>>>>\")\ncorrect_bracketing(\"<<<>>>>><<<>>>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<>>>>><\")\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<\")\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>\")\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>>>\")\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>>>><\")\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>>>><<\"\
    )\ncorrect_bracketing(\"<<<>>>>><<<>>>>><<<>>>>><<<\")\ncorrect_bracketing(\"\
    <<<>>>>><<<>>>>><<<>>>>><<<>\")\ncorrect_", "\n  # YOUR CODE HERE\n  count <-\
    \ 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\"\
    ) {\n      count <- count + 1\n    } else {\n      count <- count - 1\n    }\n\
    \    if (count < 0) {\n      return(FALSE)\n    }\n  }\n  if (count == 0) {\n\
    \    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE\
    \ HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets,\
    \ i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # TODO: implement this function\n  return(FALSE)\n\
    }\n", "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"<\") {\n            stack <- c(stack,\
    \ \"<\")\n        } else {\n            if (length(stack) == 0) {\n          \
    \      return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<<<>>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>>\")\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>\")\ncorrect_bracketing(\"<<<<<>>>>\")\ncorrect_bracketing(\"<<<<>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>><\")\ncorrect_bracketing(\"<<<<>>>>><\")\ncorrect_bracketing(\"\
    <<<<>>>>><<\")\ncorrect_bracketing(\"<<<<>>>>><<<\")\ncorrect_bracketing(\"<<<<>>>>><<<>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>>>\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>><\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>>\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>>>>\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>>>>><\")\ncorrect_bracketing(\"<<<<>>>>><<<>>>><>>>>>>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>><<<", "\n  # YOUR CODE HERE\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    # check if there\
    \ is an equal number of opening and closing brackets\n    if (sum(brackets ==\
    \ \"<\") != sum(brackets == \">\")) {\n        return(FALSE)\n    }\n    # check\
    \ if there are any closing brackets before opening brackets\n    if (sum(brackets\
    \ == \">\") > sum(brackets == \"<\")) {\n        return(FALSE)\n    }\n    return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, substr(brackets,\
    \ i, i))\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n\
    \      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n\
    \  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- list()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n\
    \    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n\
    \    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\
    \ else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\
    <<<<<>>>>\")\ncorrect_bracketing(\"<<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>\"\
    )\ncorrect_bracketing(\"<<>>>>\")\ncorrect_bracketing(\"<>>>>\")\ncorrect_bracketing(\"\
    <<<<<>>>>>\")\ncorrect_bracketing(\"<<<<>>>>>\")\ncorrect_bracketing(\"<<<>>>>>\"\
    )\ncorrect_bracketing(\"<<>>>>>\")\ncorrect_bracketing(\"<>>>>>\")\ncorrect_bracketing(\"\
    <<<<<>>>>>>\")\ncorrect_bracketing(\"<<<<>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>\"\
    )\ncorrect_bracketing(\"<<>>>>>>\")\ncorrect_bracketing(\"<>>>>>>\")\ncorrect_bracketing(\"\
    <<<<<>>>>>>>\")\ncorrect_bracketing(\"<<<<>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>\"\
    )\ncorrect_bracketing(\"<<>>>>>>>\")\ncorrect_bracketing(\"<>>>>>>>\")\ncorrect_bracketing(\"\
    <<<<<>>>>>>>>\")\ncorrect_bracketing(\"<<<<>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>\")\ncorrect_bracketing(\"<<>>>>>>>>\")\ncorrect_bracketing(\"<>>>>>>>>\"\
    )\ncorrect_bracketing(\"<<<<<>>>>>>>>>\")\ncorrect_bracketing(\"<<<<>>>>>>>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>>>>>>\")\ncorrect_bracketing(\"<<>>>>>>>>>\")\n\
    correct_bracketing(\"<>>>>>>>>>\")\ncorrect_bracketing(\"<<<<<>>>>>>>>>>\")\n\
    correct_bracketing(\"<<<<>>>>>>>>>>\")\n", "\n  if (length(brackets) == 0) {\n\
    \    return(TRUE)\n  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(length(brackets)==0){\n\
    \    return(TRUE)\n  }\n  if(substr(brackets,1,1)==\">\"){\n    return(FALSE)\n\
    \  }\n  if(substr(brackets,1,1)==\"<\"){\n    return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \  }\n  if(substr(brackets,1,1)==\">\"){\n    return(correct_bracketing(substr(brackets,2,nchar(brackets))))\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ncorrect_bracketing(\"<><<><>\")\ncorrect_bracketing(\"<><<><><\")\ncorrect_bracketing(\"\
    <><<><><<\")\ncorrect_bracketing(\"<><<><><<>\")\ncorrect_bracketing(\"<><<><><<>>\"\
    )\ncorrect_bracketing(\"<><<><><<>>>\")\ncorrect_bracketing(\"<><<><><<>>>>\"\
    )\ncorrect_bracketing(\"<><<><><<>>>><\")\ncorrect_bracketing(\"<><<><><<>>>>><\"\
    )\ncorrect_bracketing(\"<><<><><<>>>>><<\")\ncorrect_bracketing(\"<><<><><<>>>>><><\"\
    )\ncorrect_bracketing(\"<><<><><<>>>>><><<\")\ncorrect_bracketing(\"<><<><><<>>>>><><<>\"\
    )\ncorrect_bracketing(\"<><<><><<>>>>><><<>>\")\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>\"\
    )\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>>\")\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>><\"\
    )\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>>><\")\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>>><<\"\
    )\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>>><><\")\ncorrect_bracketing(\"<><<><><<>>>>><><<>>>>><><<\"\
    )\ncorrect_bracketing", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n \
    \ stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i,\
    \ i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\">>>\")\ncorrect_bracketing(\"\
    >>>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\">>>\")\ncorrect_bracketing(\"\
    >>>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\">>>\")\ncorrect_bracketing(\"\
    >>>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    >\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\">>>\")\ncorrect_bracketing(\"\
    >>>>\")\ncorrect_bracketing(\"<><>\")", "\n  # YOUR CODE HERE\n  return(TRUE)\n\
    }\n", "\n    # YOUR CODE HERE\n    open_brackets <- 0\n    for (i in 1:nchar(brackets))\
    \ {\n        if (substr(brackets, i, i) == \"<\") {\n            open_brackets\
    \ <- open_brackets + 1\n        } else {\n            open_brackets <- open_brackets\
    \ - 1\n        }\n        if (open_brackets < 0) {\n            return(FALSE)\n\
    \        }\n    }\n    if (open_brackets == 0) {\n        return(TRUE)\n    }\
    \ else {\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<>>>\")\n\
    correct_bracketing(\"<<<>\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\
    <<<><>\")\ncorrect_bracketing(\"<<<>><><>\")\ncorrect_bracketing(\"<<<>><><>>\"\
    )\ncorrect_bracketing(\"<<<>><><>><\")\ncorrect_bracketing(\"<<<>><><>><<\")\n\
    correct_bracketing(\"<<<>><><>><<<\")\ncorrect_bracketing(\"<<<>><><>><<<<\")\n\
    correct_bracketing(\"<<<>><><>><<<<<\")\ncorrect_bracketing(\"<<<>><><>><<<<<<\"\
    )\ncorrect_bracketing(\"<<<>><><>><<<<<<<\")\ncorrect_bracketing(\"<<<>><><>><<<<<<<<\"\
    )\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<\")\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<\"\
    )\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<<\")\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<<<\"\
    )\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<<<<\")\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<<<<<\"\
    )\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<<<<<<\")\ncorrect_bracketing(\"<<<>><><>><<<<<<<<<<<<<<<<",
  "\n    # YOUR CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets)) {\n\
    \        if (substr(brackets, i, i) == '<') {\n            stack <- c(stack, '<')\n\
    \        } else {\n            if (length(stack) == 0) {\n                return(FALSE)\n\
    \            } else {\n                stack <- stack[-length(stack)]\n      \
    \      }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n", "\n  # YOUR CODE HERE\n  #\
    \ stack <- c()\n  # for (i in 1:length(brackets)) {\n  #   if (brackets[i] ==\
    \ \"<\") {\n  #     stack <- c(stack, brackets[i])\n  #   } else {\n  #     if\
    \ (length(stack) == 0) {\n  #       return(FALSE)\n  #     } else {\n  #     \
    \  stack <- stack[-length(stack)]\n  #     }\n  #   }\n  # }\n  # if (length(stack)\
    \ == 0) {\n  #   return(TRUE)\n  # } else {\n  #   return(FALSE)\n  # }\n  stack\
    \ <- c()\n  for (i in 1:length(brackets)) {\n    if (brackets[i] == \"<\") {\n\
    \      stack <- c(stack, brackets[i])\n    } else {\n      if (length(stack) ==\
    \ 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE\
    \ HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n",
  "\n  # your code here\n  return(TRUE)\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><", "\n  # your code here\n  return(TRUE)\n}\n", "\n\
    \    # YOUR CODE HERE\n    if(length(brackets) == 0){\n        return(TRUE)\n\
    \    }\n    if(substr(brackets, 1, 1) == '<'){\n        return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n    }\n    if(substr(brackets, 1, 1) == '>'){\n     \
    \   return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n    }\n\
    \    return(FALSE)\n}\n \ncorrect_bracketing('<<<>>>')\n\ncorrect_bracketing('<<<>')\n\
    \ncorrect_bracketing('<<<>>')\n\ncorrect_bracketing('<<<')\n\ncorrect_bracketing('<>')\n\
    \ncorrect_bracketing('<')\n\ncorrect_bracketing('>')\n\ncorrect_bracketing('')\n\
    \ncorrect_bracketing('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\
    <><<><>><\")\ncorrect_bracketing(\"<><<><>><><\")\ncorrect_bracketing(\"<><<><>><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><><><\"\
    )\ncorrect_bracketing(\"<><<><>><><><><><><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><<><>><><><><><><><><><><><><><><", "\n    # YOUR CODE HERE\n    stack = c()\n\
    \    for (i in 1:nchar(brackets)){\n        if (substr(brackets, i, i) == \"<\"\
    ){\n            stack = c(stack, \"<\")\n        }\n        else if (substr(brackets,\
    \ i, i) == \">\"){\n            if (length(stack) == 0){\n                return(FALSE)\n\
    \            }\n            else{\n                stack = stack[-length(stack)]\n\
    \            }\n        }\n    }\n    if (length(stack) == 0){\n        return(TRUE)\n\
    \    }\n    else{\n        return(FALSE)\n    }\n}\n", "\n  # YOUR CODE HERE\n\
    \  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i,\
    \ i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack)\
    \ == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack = c()\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   stack = c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n \
    \       return(FALSE)\n      } else {\n        stack = stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for\
    \ (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n   \
    \   stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  return(length(stack) == 0)\n}\n", "\n  # YOUR CODE HERE\n\
    \  open <- 0\n  for (i in 1:nchar(brackets)){\n    if (substr(brackets, i, i)\
    \ == \"<\"){\n      open <- open + 1\n    } else if (substr(brackets, i, i) ==\
    \ \">\"){\n      open <- open - 1\n    }\n    if (open < 0){\n      return(FALSE)\n\
    \    }\n  }\n  if (open == 0){\n    return(TRUE)\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  if (nchar(brackets) == 0) {\n    return(TRUE)\n\
    \  } else if (substr(brackets, 1, 1) == '<') {\n    if (substr(brackets, nchar(brackets),\
    \ nchar(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    stack <- c()\n\
    \    for (i in 1:nchar(brackets)) {\n        if (substr(brackets, i, i) == \"\
    <\") {\n            stack <- c(stack, \"<\")\n        } else {\n            if\
    \ (length(stack) == 0) {\n                return(FALSE)\n            } else {\n\
    \                stack <- stack[-length(stack)]\n            }\n        }\n  \
    \  }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n    \
    \    return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<<<>>>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><\")\n\
    correct_bracketing(\"<><><><<>>\")\n", "\n    # YOUR CODE HERE\n    if(length(brackets)\
    \ == 0){\n        return(TRUE)\n    }\n    if(substr(brackets,1,1) == \"<\"){\n\
    \        if(substr(brackets,length(brackets),length(brackets)) == \">\"){\n  \
    \          return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n\
    \        }\n        else{\n            return(FALSE)\n        }\n    }\n    else{\n\
    \        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"<><<>>\")\ncorrect_bracketing(\"\
    <><<>><\")\ncorrect_bracketing(\"<><<>><><\")\ncorrect_bracketing(\"<><<>><><<>>\"\
    )\ncorrect_bracketing(\"<><<>><><<>><\")\ncorrect_bracketing(\"<><<>><><<>><><\"\
    )\ncorrect_bracketing(\"<><<>><><<>><><<>>\")\ncorrect_bracketing(\"<><<>><><<>><><<>><\"\
    )\ncorrect_bracketing(\"<><<>><><<>><><<>><><\")\ncorrect_bracketing(\"<><<>><><<>><><<>><><<>>\"\
    )\ncorrect_bracketing(\"<><<>><><<>><><<>><><<>><\")\ncorrect_bracketing(\"<><<>><><<>><><<>><><<>><><\"\
    )\ncorrect_bracketing(\"<><<>><><<>><><<>><><<>><><<>>\")\ncorrect_bracketing(\"\
    <><<>><><<>><><<>><><<>><><<>><\")\ncorrect_bracketing(\"<><<>><><<>><><<>><><<>><><<>><><\"\
    )\ncorrect_bracketing(\"<><<>><><<>><><<>><><<>><><<>><><<>>\")\ncorrect_bracketing(\"\
    <><<>><><<>><><<>><><<>><><<>><><<", "\n  # your code here\n}\n", "\n  open_brackets\
    \ <- 0\n  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"\
    <\") {\n      open_brackets <- open_brackets + 1\n    } else {\n      open_brackets\
    \ <- open_brackets - 1\n    }\n    if (open_brackets < 0) {\n      return(FALSE)\n\
    \    }\n  }\n  return(open_brackets == 0)\n}\n", "\n  # your code here\n}\n",
  "\n    # YOUR CODE HERE\n    if(length(brackets) == 0){\n        return(TRUE)\n\
    \    }\n    if(substr(brackets, 1, 1) == \"<\"){\n        if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\"){\n            return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n        }\n        else{\n            return(FALSE)\n\
    \        }\n    }\n    else{\n        return(FALSE)\n    }\n}\n \ncorrect_bracketing(\"\
    <<<>>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets,\
    \ 1, 1) == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\

  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<<<\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\"\
    \")\ncorrect_bracketing(\">\")\ncorrect_bracketing(\">>\")\ncorrect_bracketing(\"\
    >>>\")\ncorrect_bracketing(\">>>>\")\ncorrect_bracketing(\">>>>>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<", "\n  # YOUR CODE HERE\n\
    \  if (brackets == \"\") {\n    return(TRUE)\n  }\n  if (substr(brackets, 1, 1)\
    \ == \"<\") {\n    if (substr(brackets, 2, 2) == \">\") {\n      return(correct_bracketing(substr(brackets,\
    \ 3, nchar(brackets))))\n    } else {\n      return(FALSE)\n    }\n  } else {\n\
    \    return(FALSE)\n  }\n}\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n}\n",
  "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets)) {\n    if\
    \ (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\")\n    } else\
    \ {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n\
    \        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack)\
    \ == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n", "\n  #\
    \ YOUR CODE HERE\n  if(nchar(brackets) == 0) {\n    return(TRUE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == '<') {\n    if(substr(brackets, nchar(brackets), nchar(brackets)) ==\
    \ '>') {\n      return(correct_bracketing(substr(brackets, 2, nchar(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><><>\"\
    )\ncorrect", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n\
    \  for (i in 1:nchar(brackets)) {\n    if (substr(brackets, i, i) == \"<\") {\n\
    \      stack <- c(stack, \"<\")\n    } else {\n      if (length(stack) == 0) {\n\
    \        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n\
    \      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<><<>>>>><<>\")\ncorrect_bracketing(\"\
    <<><<>>>>><<\")\ncorrect_bracketing(\"<<><<>>>>><<><\")\ncorrect_bracketing(\"\
    <<><<>>>>><<><><\")\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n",
  "\n  # YOUR CODE HERE\n  # if brackets is empty, return TRUE\n  if (nchar(brackets)\
    \ == 0) {\n    return(TRUE)\n  }\n  # if brackets is not empty, check if the first\
    \ character is '<'\n  else if (substr(brackets, 1, 1) == '<') {\n    # if yes,\
    \ check if the last character is '>'\n    if (substr(brackets, nchar(brackets),\
    \ nchar(brackets)) == '>') {\n      # if yes, return TRUE\n      return(TRUE)\n\
    \    }\n    # if no, return FALSE\n    else {\n      return(FALSE)\n    }\n  }\n\
    \  # if the first character is not '<', return FALSE\n  else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # your code here\n}", "\n  # YOUR CODE HERE\n  if(nchar(brackets)\
    \ == 0) return(TRUE)\n  if(substr(brackets, 1, 1) == '<'){\n    if(substr(brackets,\
    \ nchar(brackets), nchar(brackets)) == '>'){\n      return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets)-1)))\n    }else{\n      return(FALSE)\n    }\n  }else{\n\
    \    return(FALSE)\n  }\n}\n", "\n  if (length(brackets) == 0) {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == \"<\") {\n    return(correct_bracketing(substr(brackets,\
    \ 2, nchar(brackets))))\n  }\n  if (substr(brackets, 1, 1) == \">\") {\n    return(FALSE)\n\
    \  }\n}\n\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"<><><>\")\ncorrect_bracketing(\"\
    <><><><>\")\n", "\n    # YOUR CODE HERE\n    if(length(brackets) == 0) {\n   \
    \     return(TRUE)\n    } else if(substr(brackets, 1, 1) == \"<\") {\n       \
    \ if(substr(brackets, length(brackets), length(brackets)) == \">\") {\n      \
    \      return(correct_bracketing(substr(brackets, 2, length(brackets) - 1)))\n\
    \        } else {\n            return(FALSE)\n        }\n    } else {\n      \
    \  return(FALSE)\n    }\n}\n", "\n  # your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  if(length(brackets) == 0){\n    return(TRUE)\n  }\n  if(substr(brackets,1,1)\
    \ == \"<\"){\n    if(substr(brackets,length(brackets),length(brackets)) == \"\
    >\"){\n      return(FALSE)\n    }\n    return(correct_bracketing(substr(brackets,2,length(brackets))))\n\
    \  }\n  if(substr(brackets,1,1) == \">\"){\n    if(substr(brackets,length(brackets),length(brackets))\
    \ == \"<\"){\n      return(FALSE)\n    }\n    return(correct_bracketing(substr(brackets,2,length(brackets))))\n\
    \  }\n}\n", "\n    # YOUR CODE HERE\n    if(length(brackets)==0){\n        return(TRUE)\n\
    \    }\n    if(substr(brackets,1,1)==\"<\"){\n        if(substr(brackets,length(brackets),length(brackets))==\"\
    >\"){\n            return(correct_bracketing(substr(brackets,2,length(brackets)-1)))\n\
    \        }\n        else{\n            return(FALSE)\n        }\n    }\n    else{\n\
    \        return(FALSE)\n    }\n}\n", "\n  # your code here\n}\n", "\n    # YOUR\
    \ CODE HERE\n    stack <- c()\n    for (i in 1:nchar(brackets)) {\n        if\
    \ (substr(brackets, i, i) == '<') {\n            stack <- c(stack, '<')\n    \
    \    } else {\n            if (length(stack) == 0) {\n                return(FALSE)\n\
    \            } else {\n                stack <- stack[-length(stack)]\n      \
    \      }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n\
    \    } else {\n        return(FALSE)\n    }\n}\n\ncorrect_bracketing(\"<<<>>>>\"\
    )\ncorrect_bracketing(\"<<<<>>>>\")\ncorrect_bracketing(\"<<<>>>>>\")\ncorrect_bracketing(\"\
    <<<>\")\ncorrect_bracketing
  "\n  # YOUR CODE HERE\n  if(length(brackets) == 0) {\n    return(TRUE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == \"<\") {\n    if(substr(brackets, length(brackets), length(brackets))\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  open_brackets <- 0\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == '<') {\n      open_brackets <- open_brackets\
    \ + 1\n    } else {\n      open_brackets <- open_brackets - 1\n    }\n    if (open_brackets\
    \ < 0) {\n      return(FALSE)\n    }\n  }\n  if (open_brackets == 0) {\n    return(TRUE)\n\
    \  } else {\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(length(brackets)\
    \ == 0){\n    return(TRUE)\n  }\n  if(substr(brackets, 1, 1) == \"<\"){\n    if(substr(brackets,\
    \ length(brackets), length(brackets)) == \">\"){\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    }\n    else{\n      return(FALSE)\n    }\n \
    \ }\n  else{\n    return(FALSE)\n  }\n}\n", "\n  # YOUR CODE HERE\n  if (brackets\
    \ == \"\") {\n    return(TRUE)\n  }\n  else if (substr(brackets, 1, 1) == \">\"\
    ) {\n    return(FALSE)\n  }\n  else if (substr(brackets, 1, 1) == \"<\") {\n \
    \   return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n  }\n  else\
    \ {\n    return(correct_bracketing(substr(brackets, 2, nchar(brackets))))\n  }\n\
    }\n \ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"<><>\")\ncorrect_bracketing(\"\
    <>\")\ncorrect_bracketing(\"<\")\ncorrect_bracketing(\">\")\ncorrect_bracketing(\"\
    <<<\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"<<<>>>\")\ncorrect_bracketing(\"\
    <<<>>>>\")\ncorrect_bracketing(\"<<<>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>>>>>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>>>>>>>>>\"\
    )\ncorrect_bracketing(\"<<<>>>>>>>>>>>>>>>>>>>>>>>>>\")\ncorrect_bracketing(\"\
    <<<>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n", "\n    # YOUR CODE HERE\n    return(TRUE)\n\
    }\n", "\n  # YOUR CODE HERE\n  if (length(brackets) == 0) {\n    return(TRUE)\n\
    \  }\n  if (substr(brackets, 1, 1) == '<') {\n    if (substr(brackets, length(brackets),\
    \ length(brackets)) == '>') {\n      return(correct_bracketing(substr(brackets,\
    \ 2, length(brackets) - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else\
    \ {\n    return(FALSE)\n  }\n}\n\ncorrect_bracketing(\"<<>>\")\ncorrect_bracketing(\"\
    <><>\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<<>>\")\ncorrect_bracketing(\"\
    <><><>\")\ncorrect_bracketing(\"<><><><>\")\ncorrect_bracketing(\"<><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><>\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><><><><><>\")\ncorrect_bracketing(\"<><><><><><><><><><><><><><><><><><",
  "\n  # YOUR CODE HERE\n  if(length(brackets) == 0) {\n    return(TRUE)\n  }\n  if(substr(brackets,\
    \ 1, 1) == \"<\") {\n    if(substr(brackets, length(brackets), length(brackets))\
    \ == \">\") {\n      return(correct_bracketing(substr(brackets, 2, length(brackets)\
    \ - 1)))\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  stack <- c()\n  for (i in 1:nchar(brackets))\
    \ {\n    if (substr(brackets, i, i) == \"<\") {\n      stack <- c(stack, \"<\"\
    )\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n    \
    \  } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if\
    \ (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n\
    }\n\ncorrect_bracketing(\"<<<<<\")\ncorrect_bracketing(\"<<<<<>\")\ncorrect_bracketing(\"\
    <><><><><>\")\ncorrect_bracketing(\"<><><><><><\")\ncorrect_bracketing(\"<><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><\")\ncorrect_bracketing(\"<><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><\")\ncorrect_bracketing(\"<><><><><><><><><><><><><>\"\
    )\ncorrect_bracketing(\"<><><><><><><><><><><><><><\")\ncorrect_bracketing(\"\
    <><><><><><><><><><><><><><>\")"]
stop_tokens:
- "\n#"
- "\n```"
