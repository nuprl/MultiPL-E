name: HumanEval_49_modp
language: r
prompt: "# Return 2^n modulo p (be aware of numerics).\nmodp <- function(n, p) {"
tests: "test_humaneval <- function() {\ncandidate <- modp\n    if(!identical(candidate(3,\
  \ 5), 3)){quit('no', 1)}\n    if(!identical(candidate(1101, 101), 2)){quit('no',\
  \ 1)}\n    if(!identical(candidate(0, 101), 1)){quit('no', 1)}\n    if(!identical(candidate(3,\
  \ 11), 8)){quit('no', 1)}\n    if(!identical(candidate(100, 101), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(30, 5), 4)){quit('no', 1)}\n    if(!identical(candidate(31,\
  \ 5), 3)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if\
    \ (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n\
    \  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n\
    \    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n\
    \  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n\
    \  if (n %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %%\
    \ p)\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n    if (n == 0) {\n        return(1)\n    }\n \
    \   if (n == 1) {\n        return(2)\n    }\n    if (n %% 2 == 0) {\n        return(modp(n/2,\
    \ p)^2 %% p)\n    }\n    return(2 * modp(n-1, p) %% p)\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n\
    \ %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %% p)\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2*modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) return(modp(n/2,\
    \ p)^2 %% p)\n  return(2 * modp(n-1, p) %% p)\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n\
    \  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n\
    \  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n\
    \    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n\
    \  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2\
    \ == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1,\
    \ p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n \
    \ if (n %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %% p)\n\
    }\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1,\
    \ p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2\
    \ * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n\
    \  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n\
    \  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n\
    \    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n\
    \  # Compute 2^n modulo p.\n  # n: integer\n  # p: prime number\n  # return: integer\n\
    \  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(2)\n  }\n  if\
    \ (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  }\n  return(2 * modp(n-1,\
    \ p) %% p)\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2*modp(n-1,\
    \ p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n \
    \ if (n %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %% p)\n\
    }\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0)\
    \ {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p)\
    \ %% p)\n  }\n}\n", "\n  # Check if n is negative.\n  if (n < 0) {\n    return(0)\n\
    \  }\n  # Check if n is 0.\n  if (n == 0) {\n    return(1)\n  }\n  # Check if\
    \ n is even.\n  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  }\n  #\
    \ Check if n is odd.\n  if (n %% 2 == 1) {\n    return(2 * modp(n-1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2*modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n\
    \    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n\
    \  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2\
    \ == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1,\
    \ p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2\
    \ * modp(n - 1, p) %% p)\n  }\n}\n", "\n  # TODO: Implement me!\n  return(0)\n\
    }\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0)\
    \ {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p)\
    \ %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2\
    \ * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  n <- n %% p\n\
    \  if (n < 0) n <- n + p\n  n\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) return(modp(n/2,\
    \ p)^2 %% p)\n  return(2 * modp(n-1, p) %% p)\n}\n", "\n  if (n == 0) return(1)\n\
    \  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n\
    \  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n\
    \    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n\
    \  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n\
    \  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    t <- modp(n/2, p)\n    return((t*t)\
    \ %% p)\n  }\n  return((2*modp(n-1, p)) %% p)\n}\n", "\n  n <- n %% p\n  if (n\
    \ < 0) n <- n + p\n  n\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n\
    \    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n\
    \  if (n %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %%\
    \ p)\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) return(modp(n/2, p)^2\
    \ %% p)\n  return(2 * modp(n-1, p) %% p)\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n\
    \  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2\
    \ * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n\
    \ %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1,\
    \ p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2\
    \ * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n\
    \  if (n %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %%\
    \ p)\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n\
    \  if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2\
    \ * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n    if (n == 0) return(1)\n    if (n ==\
    \ 1) return(2)\n    if (n %% 2 == 0) {\n        return(modp(n/2, p)^2 %% p)\n\
    \    } else {\n        return(2 * modp(n-1, p) %% p)\n    }\n}\n", "\n  if (n\
    \ == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n\
    }\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0)\
    \ {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p)\
    \ %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2\
    \ * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  # Compute the binary representation of\
    \ n.\n  b <- integer(0)\n  while (n > 0) {\n    b <- c(b, n %% 2)\n    n <- n\
    \ %/% 2\n  }\n  # Compute 2^n mod p.\n  s <- 1\n  for (i in 1:length(b)) {\n \
    \   s <- (s * s) %% p\n    if (b[i] == 1) {\n      s <- (s * 2) %% p\n    }\n\
    \  }\n  return(s)\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2\
    \ * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  n <- n %% p\n\
    \  if (n < 0) n <- n + p\n  n\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n\
    \  if (n %% 2 == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %%\
    \ p)\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2\
    \ == 0) return(modp(n/2, p)^2 %% p)\n  return(2 * modp(n-1, p) %% p)\n}\n", "\n\
    \  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n\
    \ %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2 * modp(n-1,\
    \ p) %% p)\n  }\n}\n", "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n \
    \ if (n %% 2 == 0) {\n    return(modp(n/2, p)^2 %% p)\n  } else {\n    return(2\
    \ * modp(n-1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  #\
    \ TODO: Implement me!\n  return(0)\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else\
    \ {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) return(1)\n  if (n == 1) return(2)\n  if (n %% 2 == 0) {\n    return(modp(n/2,\
    \ p)^2 %% p)\n  } else {\n    return(2 * modp(n-1, p) %% p)\n  }\n}\n", "\n  if\
    \ (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n\
    \  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n\
    \ - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n  \
    \  return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n\
    \  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n", "\n  if (n == 0)\
    \ {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %% p)\n  }\n}\n",
  "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 * modp(n - 1, p) %%\
    \ p)\n  }\n}\n", "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(2 *\
    \ modp(n - 1, p) %% p)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
