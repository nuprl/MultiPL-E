language: r
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  # Filter the list\
    \ of strings.\n  filtered <- strings[startsWith(strings, prefix)]\n  # Return\
    \ the filtered list.\n  return(filtered)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  prefix_len <- nchar(prefix)\n\
    \  strings[startsWith(strings, prefix)]\n}\n\ntest_humaneval <- function() {\n\
    candidate <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  # Filter the strings\
    \ by prefix.\n  filtered <- strings[startsWith(strings, prefix)]\n  # Return the\
    \ filtered strings.\n  return(filtered)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  prefix <- paste0(prefix,\
    \ \".\")\n  strings <- sub(\"^\", prefix, strings)\n  strings <- sub(\"\\\\.\"\
    , \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\
    \\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings\
    \ <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n\
    \  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\"\
    , strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\\
    .\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <-\
    \ sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n\
    \  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\"\
    , strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\\
    .\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <-\
    \ sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n\
    \  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\"\
    , strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\\
    .\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <-\
    \ sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n\
    \  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\"\
    , strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\\
    .\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <-\
    \ sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n\
    \  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\"\
    , strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\\
    .\", \"\", strings)\n  strings <- sub(\"\\\\.\", \"\", strings)\n  strings <-\
    \ sub(\"\\\\.\", \"\", strings)\n  strings <- sub(\"\\\\.\",\ntest_humaneval <-\
    \ function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd',\
    \ 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: SyntaxError
  stderr: 'b''Error: unexpected symbol in:\n"}\ntest_humaneval"\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  filtered <- strings[startsWith(strings,\
    \ prefix)]\n  return(filtered)\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  prefix <- paste0(prefix,\
    \ \".\")\n  strings <- gsub(prefix, \"\", strings)\n  strings <- gsub(\"^\\\\\
    .\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\", strings)\n  strings <-\
    \ gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <- gsub(\"^\\\\.\", \"\", strings)\n\
    \  strings <- gsub(\"\\\\.$\", \"\", strings)\n  strings <- gsub(\"\\\\.\\\\.\"\
    , \".\", strings)\n  strings <- gsub(\"^\\\\.\", \"\", strings)\n  strings <-\
    \ gsub(\"\\\\.$\", \"\", strings)\n  strings <- gsub(\"\\\\.\\\\.\", \".\", strings)\n\
    \  strings <- gsub(\"^\\\\.\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\
    \", strings)\n  strings <- gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <-\
    \ gsub(\"^\\\\.\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\", strings)\n\
    \  strings <- gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <- gsub(\"^\\\\\
    .\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\", strings)\n  strings <-\
    \ gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <- gsub(\"^\\\\.\", \"\", strings)\n\
    \  strings <- gsub(\"\\\\.$\", \"\", strings)\n  strings <- gsub(\"\\\\.\\\\.\"\
    , \".\", strings)\n  strings <- gsub(\"^\\\\.\", \"\", strings)\n  strings <-\
    \ gsub(\"\\\\.$\", \"\", strings)\n  strings <- gsub(\"\\\\.\\\\.\", \".\", strings)\n\
    \  strings <- gsub(\"^\\\\.\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\
    \", strings)\n  strings <- gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <-\
    \ gsub(\"^\\\\.\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\", strings)\n\
    \  strings <- gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <- gsub(\"^\\\\\
    .\", \"\", strings)\n  strings <- gsub(\"\\\\.$\", \"\", strings)\n  strings <-\
    \ gsub(\"\\\\.\\\\.\", \".\", strings)\n  strings <- gsub(\"^\\\\.\", \"\", strings)\n\
    test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd',\
    \ 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: SyntaxError
  stderr: 'b''Error: unexpected end of input\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    strings[grepl(paste0(\"\
    ^\", prefix), strings)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  prefix <- paste0(prefix,\
    \ \".\")\n  strings <- as.character(strings)\n  strings[startsWith(strings, prefix)]\n\
    }\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
    \ 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd',\
    \ 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    strings[startsWith(strings,\
    \ prefix)]\n}\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix])\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  out <- strings[grepl(paste0(\"\
    ^\", prefix), strings)]\n  return(out)\n}\n\ntest_humaneval <- function() {\n\
    candidate <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[grepl(paste0(\"\
    ^\", prefix), strings)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[substr(strings,\
    \ 1, nchar(prefix)) == prefix]\n}\n\ntest_humaneval <- function() {\ncandidate\
    \ <- filter_by_prefix\n    if(!identical(candidate(c(), 'john'), list())){quit('no',\
    \ 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n}\ntest_humaneval()"
  status: AssertionError
  stderr: b''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n  strings[startsWith(strings,\
    \ prefix)]\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfilter_by_prefix <- function(strings, prefix) {\n    return(strings[startsWith(strings,\
    \ prefix)])\n}\n\ntest_humaneval <- function() {\ncandidate <- filter_by_prefix\n\
    \    if(!identical(candidate(c(), 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
    \ 1)}\n}\ntest_humaneval()"
  status: Exception
  stderr: 'b''Error in startsWith(strings, prefix) : non-character object(s)\nCalls:
    test_humaneval -> identical -> candidate -> startsWith\nExecution halted\n'''
  stdout: b''
  timestamp: 1659978210
