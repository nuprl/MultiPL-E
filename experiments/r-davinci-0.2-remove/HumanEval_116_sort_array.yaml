name: HumanEval_116_sort_array
language: r
prompt: "# In this Kata, you have to sort an array of non-negative integers according\
  \ to\n# number of ones in their binary representation in ascending order.\n# For\
  \ similar number of ones, sort based on decimal value.\n# It must be implemented\
  \ like this:\nsort_array <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- sort_array\n    if(!identical(candidate(c(1,\
  \ 5, 2, 3, 4)), list(1, 2, 4, 3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(-2,\
  \ -3, -4, -5, -6)), list(-4, -2, -6, -5, -3))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 0, 2, 3, 4)), list(0, 1, 2, 4, 3))){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ list())){quit('no', 1)}\n    if(!identical(candidate(c(2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4)), list(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))){quit('no', 1)}\n    if(!identical(candidate(c(3,\
  \ 6, 44, 12, 32, 5)), list(32, 3, 5, 6, 12, 44))){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 8, 16, 32)), list(2, 4, 8, 16, 32))){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 8, 16, 32)), list(2, 4, 8, 16, 32))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code\
    \ here\n}", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your\
    \ code here\n}", "\n  # your code here\n}", "\n  # your code here\n}", "\n  #\
    \ your code here\n}\n", "\n  # your code here\n}", "\n  # your code here\n}\n",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  arr[order(sapply(arr, function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n",
  "\n    arr <- sort(arr, decreasing = FALSE, index.return = TRUE)\n    arr$x <- sapply(arr$x,\
    \ function(x) {\n        sum(intToBits(x))\n    })\n    arr <- sort(arr, decreasing\
    \ = FALSE, index.return = TRUE)\n    arr$x\n}\n", "\n  # your code here\n}\n",
  "\n  # your code here\n}", "\n  # your code here\n}\n", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}\n", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}\n", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sprintf(\"%b\", x)\n  }), sapply(arr, function(x) {\n   \
    \ x\n  }))]\n}\n", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n\
    \  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }\n", "\n  # your code here\n}\n", "\n  # your code here\n}\n", "\n  # your code\
    \ here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr, function(x)\
    \ {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n}", "\n\
    \  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n}",
  "\n  # your code here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  arr[order(sapply(arr, function(x) {\n    sum(intToBits(x))\n\
    \  }), arr)]\n}\n", "\n  # your code here\n}", "\n  # your code here\n}", "\n\
    \  # your code here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    paste(sum(as.integer(strsplit(as.character(x), \"\")[[1]])),\
    \ x, sep = \"\")\n  }))]\n}\n", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}\n", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}\n", "\n  # your code here\n\
    }\n", "\n  # your code here\n}", "\n  # your code here\n}", "\n  sort(arr, decreasing\
    \ = TRUE, index.return = TRUE)$ix\n}\n", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}\n", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}\n", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  arr[order(sapply(arr,\
    \ function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  # your code here\n}", "\n  # your code here\n}", "\n  # your code here\n\
    }", "\n  arr[order(sapply(arr, function(x) sum(intToBits(x))), arr)]\n}\n", "\n\
    \  arr[order(sapply(arr, function(x) {\n    sum(intToBits(x))\n  }), arr)]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
