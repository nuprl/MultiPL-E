name: HumanEval_113_odd_count
language: r
prompt: "# Given a list of strings, where each string consists of only digits, return\
  \ a list.\n# Each element i of the output should be \"the number of odd elements\
  \ in the\n# string i of the input.\" where all the i's should be replaced by the\
  \ number\n# of odd digits in the i'th string of the input.\nodd_count <- function(lst)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- odd_count\n    if(!identical(candidate(c('1234567')),\
  \ list('the number of odd elements 4n the str4ng 4 of the 4nput.'))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c('3', '11111111')), list('the number of odd\
  \ elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng\
  \ 8 of the 8nput.'))){quit('no', 1)}\n    if(!identical(candidate(c('271', '137',\
  \ '314')), list('the number of odd elements 2n the str2ng 2 of the 2nput.', 'the\
  \ number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements\
  \ 2n the str2ng 2 of the 2nput.'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # your code here\n  sapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  # your code here\n  lst <- strsplit(lst,\
    \ \"\")\n  lst <- lapply(lst, function(x) sum(as.numeric(x) %% 2 != 0))\n  return(lst)\n\
    }\n", "\n  # Create a vector to store the results\n  result <- c()\n  # Loop through\
    \ each string in the list\n  for (i in 1:length(lst)) {\n    # Create a variable\
    \ to store the number of odd digits in the string\n    num_odd <- 0\n    # Loop\
    \ through each character in the string\n    for (j in 1:nchar(lst[i])) {\n   \
    \   # If the character is odd, add 1 to the number of odd digits\n      if (as.numeric(substr(lst[i],\
    \ j, j)) %% 2 == 1) {\n        num_odd <- num_odd + 1\n      }\n    }\n    # Add\
    \ the number of odd digits to the result vector\n    result <- c(result, num_odd)\n\
    \  }\n  # Return the result vector\n  return(result)\n}\n", "\n  lst <- strsplit(lst,\
    \ \"\")\n  lst <- lapply(lst, function(x) sum(as.numeric(x) %% 2 == 1))\n  return(lst)\n\
    }\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  sapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- sapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n  return(lst)\n\
    }\n", "\n  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst,\
    \ function(x) {\n    x <- as.numeric(x)\n    sum(x %% 2 == 1)\n  })\n  return(lst)\n\
    }\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1)\n  })\n}\n", "\n  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  # Your code here\n  return(lapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)))\n}\n", "\n \
    \ lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 ==\
    \ 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\"\
    )[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n", "\n  # YOUR CODE HERE\n  return(lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)))\n}\n", "\n  # Your code here\n}\n", "\n  lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n\
    }\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\
    \")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <-\
    \ lapply(lst, function(x) {\n    x <- as.numeric(x)\n    sum(x %% 2 == 1)\n  })\n\
    \  lst\n}\n", "\n  # Your code here\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 != 0)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n}\n", "\n  lst <- unlist(lst)\n\
    \  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst, function(x) {\n    x <- as.numeric(x)\n\
    \    x <- x[x %% 2 == 1]\n    return(length(x))\n  })\n  return(lst)\n}\n", "\n\
    \  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\"\
    )[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- lapply(lst,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 ==\
    \ 1)\n  })\n  return(lst)\n}\n", "\n  # Your code here\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst %>%\n   \
    \ map(~ str_count(., \"[13579]\"))\n}\n", "\n  lapply(lst, function(x) {\n   \
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lst <- lapply(lst,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 ==\
    \ 1)\n  })\n  return(lst)\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # your code here\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Write your\
    \ code here\n  # Hint: Use the function sum()\n  # Hint: Use the function %in%\n\
    \  # Hint: Use the function as.numeric()\n  # Hint: Use the function length()\n\
    \  # Hint: Use the function sapply()\n  # Hint: Use the function is.na()\n  #\
    \ Hint: Use the function any()\n  # Hint: Use the function is.integer()\n  # Hint:\
    \ Use the function is.numeric()\n  # Hint: Use the function is.vector()\n  # Hint:\
    \ Use the function is.list()\n  # Hint: Use the function is.character()\n  # Hint:\
    \ Use the function is.factor()\n  # Hint: Use the function is.data.frame()\n \
    \ # Hint: Use the function is.matrix()\n  # Hint: Use the function is.array()\n\
    \  # Hint: Use the function is.atomic()\n  # Hint: Use the function is.recursive()\n\
    \  # Hint: Use the function is.na()\n  # Hint: Use the function is.null()\n  #\
    \ Hint: Use the function is.logical()\n  # Hint: Use the function is.function()\n\
    \  # Hint: Use the function is.environment()\n  # Hint: Use the function is.symbol()\n\
    \  # Hint: Use the function is.expression()\n  # Hint: Use the function is.language()\n\
    \  # Hint: Use the function is.call()\n  # Hint: Use the function is.single()\n\
    \  # Hint: Use the function is.double()\n  # Hint: Use the function is.complex()\n\
    \  # Hint: Use the function is.character()\n  # Hint: Use the function is.raw()\n\
    \  # Hint: Use the function is.object()\n  # Hint: Use the function is.vector()\n\
    \  # Hint: Use the function is.numeric()\n  # Hint: Use the function is.integer()\n\
    \  # Hint: Use the function is.complex()\n  # Hint: Use the function is.double()\n\
    \  # Hint: Use the", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\
    \")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- sapply(lst, function(x) {\n    x <- strsplit(x,\
    \ \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n\
    \  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    }\n", "\n  # Your code here\n}\n", "\n    lapply(lst, function(x) {\n        sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n    })\n}\n", "\n  lst <- lapply(lst, function(x) {\n\
    \    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  return(lst)\n\
    }\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1)\n  })\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x <- as.numeric(strsplit(x,\
    \ \"\")[[1]])\n    sum(x %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n  # your code\
    \ here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst,\
    \ function(x) sum(x %% 2 == 1))\n  return(lst)\n}\n", "\n  lst <- sapply(lst,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 ==\
    \ 1)\n  })\n  return(lst)\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Write your code here\n  return(lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  }))\n\
    }\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n    lst <- sapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n    return(lst)\n}\n", "\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n    # Create a\
    \ vector of the number of odd digits in each string\n    # of the input.\n   \
    \ num_odds <- sapply(lst, function(x) {\n        # Convert the string to a vector\
    \ of digits.\n        digits <- as.numeric(strsplit(x, \"\")[[1]])\n        #\
    \ Count the number of odd digits.\n        sum(digits %% 2 == 1)\n    })\n   \
    \ # Convert the vector to a list.\n    as.list(num_odds)\n}\n", "\n  lapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst\
    \ <- lapply(lst, function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x)\
    \ %% 2 == 1)\n  })\n  unlist(lst)\n}\n", "\n  # Your code here\n  lapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n\
    }\n", "\n  # Your code here\n  lst %>%\n    str_split(\"\") %>%\n    lapply(function(x)\
    \ {\n      sum(as.numeric(x) %% 2 == 1)\n    })\n}\n", "\n  # Create an empty\
    \ vector to store the results\n  results <- vector()\n  # Loop through each string\
    \ in the list\n  for (i in 1:length(lst)) {\n    # Create a vector to store the\
    \ digits in the string\n    digits <- vector()\n    # Loop through each character\
    \ in the string\n    for (j in 1:nchar(lst[i])) {\n      # Add the digit to the\
    \ vector\n      digits <- c(digits, substr(lst[i], j, j))\n    }\n    # Create\
    \ a vector to store the odd digits\n    odd_digits <- vector()\n    # Loop through\
    \ each digit in the vector\n    for (k in 1:length(digits)) {\n      # If the\
    \ digit is odd, add it to the vector\n      if (digits[k] %% 2 == 1) {\n     \
    \   odd_digits <- c(odd_digits, digits[k])\n      }\n    }\n    # Add the number\
    \ of odd digits to the results vector\n    results <- c(results, length(odd_digits))\n\
    \  }\n  # Return the results vector\n  return(results)\n}\n", "\n  lst %>%\n \
    \   str_split(\"\") %>%\n    lapply(function(x) sum(as.numeric(x) %% 2 == 1))\n\
    }\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1))\n}\n", "\n    lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # your code here\n  lst <- lapply(lst, function(x)\
    \ {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n\
    \  return(lst)\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst, function(x)\
    \ sum(as.numeric(x) %% 2 == 1))\n  lst <- unlist(lst)\n  return(lst)\n}\n", "\n\
    \  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    }\n", "\n  # Use the sapply function to apply the function to each element of\
    \ the list\n  sapply(lst, function(x) {\n    # Convert the string to a vector\
    \ of characters\n    x <- strsplit(x, \"\")[[1]]\n    # Convert the vector of\
    \ characters to a vector of integers\n    x <- as.integer(x)\n    # Find the number\
    \ of odd integers\n    sum(x %% 2 == 1)\n  })\n}\n", "\n  lst %>%\n    str_count(pattern\
    \ = \"[13579]\")\n}\n", "\n  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    x <- as.numeric(x)\n    sum(x %% 2 == 1)\n  })\n\
    \  lst\n}\n", "\n  lst <- sapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n  # Create a vector of\
    \ the number of odd digits in each string\n  odd_counts <- sapply(lst, function(x)\
    \ sum(as.numeric(unlist(strsplit(x, \"\"))) %% 2 == 1))\n  # Return a list of\
    \ the number of odd digits in each string\n  return(odd_counts)\n}\n", "\n  lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n\
    }\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n  # Your code here\n  return(lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  # your code here\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst %>%\n   \
    \ str_split(\"\") %>%\n    lapply(function(x) {\n      x %>%\n        as.numeric()\
    \ %>%\n        sum(., na.rm = TRUE)\n    })\n}\n", "\n  lst %>%\n    map_dbl(function(x)\
    \ {\n      x %>%\n        str_split(\"\") %>%\n        unlist() %>%\n        as.numeric()\
    \ %>%\n        sum(., na.rm = TRUE)\n    })\n}\n", "\n  # Your code here\n  lapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  #\
    \ Your code here\n}", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # YOUR CODE HERE\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- sapply(lst,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 ==\
    \ 1)\n  })\n  return(lst)\n}\n", "\n  lst <- sapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2))\n  return(lst)\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- sapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n  lapply(lst, function(x)\
    \ {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n\
    }\n\nodd_count(c(\"123\", \"1234\", \"1235\"))\n", "\n  lapply(lst, function(x)\
    \ {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  #\
    \ Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1))\n}\n", "\n  # Your code here\n  # Hint: Use the function is_odd()\n\
    \  # Hint: Use the function str_count()\n  # Hint: Use the function map_dbl()\n\
    \  map_dbl(lst, function(x) str_count(x, pattern = \"[13579]\"))\n}\n", "\n  #\
    \ Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1))\n}\n", "\n  # your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(unlist(strsplit(x,\
    \ \"\"))) %% 2 == 1))\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst,\
    \ function(x) sum(as.numeric(x) %% 2 == 1))\n  return(lst)\n}\n", "\n  lst <-\
    \ sapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    \  return(lst)\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  return(lst)\n\
    }\n", "\n  # your code here\n  return(lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)))\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  return(lst)\n\
    }\n", "\n  # Your code here\n  lst <- lapply(lst, function(x) {\n    x <- strsplit(x,\
    \ \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n\
    \  # YOUR CODE HERE\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  # YOUR CODE HERE\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  return(sapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)))\n}\n", "\n \
    \ lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    }\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n  lst %>%\n    str_split(\"\") %>%\n    lapply(function(x)\
    \ {\n      x %>%\n        as.numeric() %>%\n        sum(., na.rm = TRUE)\n   \
    \ })\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x <- strsplit(x, \"\")[[1]]\n\
    \    sum(as.numeric(x) %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n  lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n\
    }\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1)\n  })\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst,\
    \ function(x) sum(x %% 2 == 1))\n  return(lst)\n}\n", "\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- sapply(lst,\
    \ function(x) {\n    x <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 ==\
    \ 1)\n  })\n  return(lst)\n}\n", "\n  lst %>%\n    str_count(pattern = \"[13579]\"\
    )\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lst %>%\n    map_dbl(~ sum(as.numeric(strsplit(.,\
    \ \"\")[[1]]) %% 2))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # YOUR CODE HERE\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n\
    \  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    }\n", "\n  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  lst\n}\n",
  "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst, function(x) sum(as.numeric(x)\
    \ %% 2 == 1))\n  lst <- unlist(lst)\n  return(lst)\n}\n", "\n    # Your code here\n\
    \    lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    }\n", "\n  lst <- sapply(lst, function(x) {\n    sum(as.numeric(strsplit(x, \"\
    \")[[1]]) %% 2 == 1)\n  })\n  return(lst)\n}\n", "\n  # Your code here\n  lst\
    \ <- sapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    \  return(lst)\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n    lapply(lst, function(x) {\n        sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n    })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- lapply(lst, function(x) {\n    x\
    \ <- strsplit(x, \"\")[[1]]\n    sum(as.numeric(x) %% 2 == 1)\n  })\n  lst\n}\n",
  "\n  # YOUR CODE HERE\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\"\
    )[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n    # Your code here\n    return(lapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)))\n}\n\nodd_count(c(\"\
    1234\", \"56789\"))\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n\
    \  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n\
    }\n\nodd_count(c(\"123\", \"12\", \"1234\"))\n", "\n  lst %>%\n    str_split(\"\
    \") %>%\n    lapply(function(x) {\n      x %>%\n        as.numeric() %>%\n   \
    \     sum(., na.rm = TRUE)\n    })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # Your code here\n  lst <- strsplit(lst,\
    \ \"\")\n  lst <- lapply(lst, function(x) sum(as.numeric(x) %% 2 == 1))\n  return(lst)\n\
    }\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2\
    \ == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst %>%\n    str_split(\"\") %>%\n    lapply(function(x)\
    \ sum(as.numeric(x) %% 2 == 1))\n}\n", "\n  lst <- sapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n  return(lst)\n}\n", "\n    lst <- strsplit(lst, \"\
    \")\n    lst <- lapply(lst, function(x) sum(as.numeric(x) %% 2 != 0))\n    return(lst)\n\
    }\n", "\n  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  # YOUR CODE HERE\n  lapply(lst, function(x)\
    \ sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x)\
    \ {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n}\n\nodd_count(c(\"\
    123\", \"12\", \"1234\"))", "\n  # Your code here\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n    lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <-\
    \ lapply(lst, function(x) sum(as.numeric(x) %% 2 != 0))\n  return(lst)\n}\n",
  "\n  # Your code here\n  lapply(lst, function(x) {sum(as.numeric(strsplit(x, \"\"\
    )[[1]]) %% 2)})\n}\n", "\n    count <- 0\n    for (i in lst) {\n        for (j\
    \ in strsplit(i, \"\")[[1]]) {\n            if (as.numeric(j) %% 2 == 1) {\n \
    \               count <- count + 1\n            }\n        }\n        print(count)\n\
    \        count <- 0\n    }\n}\n\nodd_count(c(\"123\", \"1234\", \"1235\", \"1236\"\
    ))\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %%\
    \ 2 == 1))\n}\n", "\n  # Your code here\n  return(lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)))\n}\n", "\n  lapply(lst, function(x) sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst,\
    \ function(x) sum(x %% 2 == 1))\n  return(lst)\n}\n", "\n  return(lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  }))\n\
    }\n", "\n  lst <- sapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1))\n  return(lst)\n}\n", "\n  # Your code here\n  count <- 0\n  for\
    \ (i in lst) {\n    for (j in strsplit(i, \"\")[[1]]) {\n      if (as.numeric(j)\
    \ %% 2 == 1) {\n        count <- count + 1\n      }\n    }\n    print(count)\n\
    \    count <- 0\n  }\n}\n\nodd_count(c(\"123\", \"1234\", \"12\"))\n", "\n  lapply(lst,\
    \ function(x) sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1))\n}\n", "\n  lapply(lst,\
    \ function(x) {\n    sum(as.numeric(strsplit(x, \"\")[[1]]) %% 2 == 1)\n  })\n\
    }\n", "\n  lst <- sapply(lst, function(x) sum(as.numeric(strsplit(x, \"\")[[1]])\
    \ %% 2 == 1))\n  return(lst)\n}\n", "\n  lst %>%\n    map_dbl(str_count, pattern\
    \ = \"[13579]\")\n}\n\nodd_count(c(\"123\", \"1234\", \"12345\"))\n", "\n  lst\
    \ %>%\n    map_dbl(~sum(str_detect(., \"[13579]\")))\n}\n\nodd_count(c(\"123\"\
    , \"12\", \"1234\"))", "\n  lapply(lst, function(x) {\n    sum(as.numeric(strsplit(x,\
    \ \"\")[[1]]) %% 2 == 1)\n  })\n}\n", "\n  # YOUR CODE HERE\n  count <- 0\n  for\
    \ (i in lst) {\n    for (j in strsplit(i, \"\")[[1]]) {\n      if (as.numeric(j)\
    \ %% 2 == 1) {\n        count <- count + 1\n      }\n    }\n    print(count)\n\
    \    count <- 0\n  }\n}\n\nodd_count(c(\"123\", \"1234\", \"1235\", \"1236\"))\n"]
stop_tokens:
- "\n#"
- "\n```"
