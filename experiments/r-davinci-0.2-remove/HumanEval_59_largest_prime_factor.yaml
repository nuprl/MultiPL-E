name: HumanEval_59_largest_prime_factor
language: r
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  largest_prime_factor <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- largest_prime_factor\n    if(!identical(candidate(15),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(27), 3)){quit('no', 1)}\n    if(!identical(candidate(63),\
  \ 7)){quit('no', 1)}\n    if(!identical(candidate(330), 11)){quit('no', 1)}\n  \
  \  if(!identical(candidate(13195), 29)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  for(i\
    \ in 2:n){\n    if(n %% i == 0){\n      if(is.prime(i)){\n        return(i)\n\
    \      }\n    }\n  }\n}\n", "\n  factor <- 2\n  while (n > 1) {\n    if (n %%\
    \ factor == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor\
    \ + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n\
    \    if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n  \
    \  }\n  }\n  return(n)\n}\n", "\n  # Your code here\n  factor <- 2\n  while (n\
    \ > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n \
    \     factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor ==\
    \ 0) {\n      n <- n / factor\n    } else {\n      factor <- factor + 1\n    }\n\
    \  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # YOUR\
    \ CODE HERE\n  i <- 2\n  while (i <= n) {\n    if (n %% i == 0) {\n      n <-\
    \ n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  i\n}\n", "\n  # YOUR CODE\
    \ HERE\n  factor <- function(n){\n    for(i in 2:n){\n      if(n %% i == 0){\n\
    \        return(i)\n      }\n    }\n  }\n  while(n != 1){\n    n <- n/factor(n)\n\
    \  }\n  return(factor(n))\n}\n\nlargest_prime_factor(600851475143)\n", "\n  #\
    \ Your code here\n}\n", "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n\
    \    i <- 2\n    while (i < n) {\n        if (n %% i == 0) {\n            n <-\
    \ n / i\n        } else {\n            i <- i + 1\n        }\n    }\n    return(n)\n\
    }\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n\
    \    for(i in 2:n){\n      if(is.prime(i) && n%%i==0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  factor_list <- factor(n)\n  factor_list <- factor_list[factor_list != 1]\n\
    \  factor_list <- factor_list[factor_list != n]\n  return(max(factor_list))\n\
    }\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor\
    \ == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor + 1\n \
    \   }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n", "\n\
    \  # TODO: Fill in this function.\n  return(n)\n}\n", "\n  # Your code here\n\
    }\n", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0)\
    \ {\n      n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n\
    }\nlargest_prime_factor(600851475143)\n", "\n  # YOUR CODE HERE\n  stop(\"Not\
    \ yet implemented\")\n}\n", "\n  # Your code here\n  for (i in 2:n) {\n    if\
    \ (n %% i == 0) {\n      if (is_prime(i)) {\n        return(i)\n      }\n    }\n\
    \  }\n}\n", "\n  # Your code here\n  factor(n)\n}\n", "\n  # Your code here\n\
    }\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor\
    \ == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor + 1\n \
    \   }\n  }\n  return(factor)\n}\nlargest_prime_factor(600851475143)\n", "\n  #\
    \ Your code here\n}\n", "\n  # Your code here\n  i <- 2\n  while (i < n) {\n \
    \   if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n   \
    \ }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # YOUR\
    \ CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i in 2:n){\n\
    \      if(n %% i == 0){\n        return(largest_prime_factor(n/i))\n      }\n\
    \    }\n  }\n}\n", "\n  # Your code here\n  i <- 2\n  while (i < n) {\n    if\
    \ (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n    }\n \
    \ }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n  factor <- 2\n  while (n > 1) {\n    if\
    \ (n %% factor == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor\
    \ + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n  return(n)\n}\n", "\n  # Your code here\n}\n", "\n  # Your\
    \ code here\n}", "\n  # Your code here\n}\n", "\n  # Your code here\n  factor\
    \ <- 2\n  while (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n\
    \    } else {\n      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\n\
    largest_prime_factor(600851475143)\n", "\n  # Your code here\n  i = 2\n  while(i\
    \ < n){\n    if(n %% i == 0){\n      n = n / i\n    }\n    else{\n      i = i\
    \ + 1\n    }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n\
    \  # Initialize a variable to store the largest prime factor.\n  largest_prime\
    \ <- 1\n  # Initialize a variable to store the current prime factor.\n  current_prime\
    \ <- 2\n  # Loop until the current prime factor is greater than n.\n  while (current_prime\
    \ <= n) {\n    # If the current prime factor divides n, then update the largest\
    \ prime\n    # factor and divide n by the current prime factor.\n    if (n %%\
    \ current_prime == 0) {\n      largest_prime <- current_prime\n      n <- n /\
    \ current_prime\n    } else {\n      # Otherwise, increment the current prime\
    \ factor.\n      current_prime <- next_prime(current_prime)\n    }\n  }\n  # Return\
    \ the largest prime factor.\n  return(largest_prime)\n}\n", "\n  # TODO: Implement\
    \ this function.\n  # Hint: You may want to use the is_prime function.\n  # Hint:\
    \ You may want to use the seq function.\n  # Hint: You may want to use the which\
    \ function.\n  # Hint: You may want to use the max function.\n  # Hint: You may\
    \ want to use the %/% operator.\n  # Hint: You may want to use the %% operator.\n\
    \  # Hint: You may want to use the & operator.\n  # Hint: You may want to use\
    \ the | operator.\n  # Hint: You may want to use the ! operator.\n  # Hint: You\
    \ may want to use the ifelse function.\n  # Hint: You may want to use the sum\
    \ function.\n  # Hint: You may want to use the prod function.\n  # Hint: You may\
    \ want to use the all function.\n  # Hint: You may want to use the any function.\n\
    \  # Hint: You may want to use the which.max function.\n  # Hint: You may want\
    \ to use the which.min function.\n  # Hint: You may want to use the which.max\
    \ function.\n  # Hint: You may want to use the which.min function.\n  # Hint:\
    \ You may want to use the which.max function.\n  # Hint: You may want to use the\
    \ which.min function.\n  # Hint: You may want to use the which.max function.\n\
    \  # Hint: You may want to use the which.min function.\n  # Hint: You may want\
    \ to use the which.max function.\n  # Hint: You may want to use the which.min\
    \ function.\n  # Hint: You may want to use the which.max function.\n  # Hint:\
    \ You may want to use the which.min function.\n  # Hint: You may want to use the\
    \ which.max function.\n  # Hint: You may want to use the which.min function.\n\
    \  # Hint: You may want to use the which.max function.\n  # Hint: You may want\
    \ to use the which.min function.\n  # Hint: You may want to use the which.", "\n\
    \  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i\
    \ in 1:n){\n      if(is.prime(i) && n %% i == 0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n", "\n    # YOUR\
    \ CODE HERE\n    i <- 2\n    while (i <= n) {\n        if (n %% i == 0) {\n  \
    \          n <- n / i\n        } else {\n            i <- i + 1\n        }\n \
    \   }\n    return(i)\n}\nlargest_prime_factor(600851475143)\n", "\n  # YOUR CODE\
    \ HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n\
    \    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n", "\n  factor(n)[[1]]\n\
    }\n", "\n  # Your code here\n  # Hint: Use the is_prime function\n  # Hint: You\
    \ can use the modulo operator to check if a number is divisible by another number\n\
    \  # Hint: You can use the seq function to generate a sequence of numbers\n  #\
    \ Hint: You can use the which function to find the first element of a vector that\
    \ satisfies a condition\n  # Hint: You can use the max function to find the maximum\
    \ value of a vector\n  # Hint: You can use the which.max function to find the\
    \ index of the maximum value of a vector\n  # Hint: You can use the which.min\
    \ function to find the index of the minimum value of a vector\n  # Hint: You can\
    \ use the which.max function to find the index of the maximum value of a vector\n\
    \  # Hint: You can use the which.min function to find the index of the minimum\
    \ value of a vector\n  # Hint: You can use the which.max function to find the\
    \ index of the maximum value of a vector\n  # Hint: You can use the which.min\
    \ function to find the index of the minimum value of a vector\n  # Hint: You can\
    \ use the which.max function to find the index of the maximum value of a vector\n\
    \  # Hint: You can use the which.min function to find the index of the minimum\
    \ value of a vector\n  # Hint: You can use the which.max function to find the\
    \ index of the maximum value of a vector\n  # Hint: You can use the which.min\
    \ function to find the index of the minimum value of a vector\n  # Hint: You can\
    \ use the which.max function to find the index of the maximum value of a vector\n\
    \  # Hint: You can use the which.min function to find the index of the minimum\
    \ value of a vector\n  # Hint: You can use the which.max function to find the\
    \ index of the maximum value of a vector\n  # Hint: You can use the which.min\
    \ function to find the index of the minimum value of a vector\n  # Hint: You can\
    \ use the which.max function to find the index of the maximum value of a vector\n\
    \  # Hint: You can use the which.min function to find the index of the minimum\
    \ value of a vector\n  # Hint: You", "\n  # Your code here\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(is.prime(i) && n %%\
    \ i == 0){\n        return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n\
    \ ", "\n  # Your code here\n  for (i in seq(2, n)) {\n    if (is_prime(i) && n\
    \ %% i == 0) {\n      return(i)\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(n %% i == 0){\n   \
    \     return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  # YOUR\
    \ CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i in 2:n){\n\
    \      if(is.prime(i) && n%%i==0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # YOUR\
    \ CODE HERE\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor == 0) {\n \
    \     n <- n / factor\n    } else {\n      factor <- factor + 1\n    }\n  }\n\
    \  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code\
    \ here\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i in 2:n){\n\
    \      if(is.prime(i) && n %% i == 0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n >\
    \ 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n   \
    \   factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n    i <- 2\n    while (i <\
    \ n) {\n        if (n %% i == 0) {\n            n <- n / i\n        } else {\n\
    \            i <- i + 1\n        }\n    }\n    return(n)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n\
    \  }\n  else{\n    for(i in seq(2, n-1)){\n      if(n %% i == 0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n  i <- 2\n  while (i <= n)\
    \ {\n    if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n\
    \    }\n  }\n  return(i)\n}\n", "\n  # Your code here\n  return(NULL)\n}\n", "\n\
    \  # TODO: Fill in this function.\n  for (i in 2:n) {\n    if (n %% i == 0) {\n\
    \      n <- n / i\n    }\n  }\n  return(n)\n}\n", "\n  # Your code here\n}\n",
  "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n\
    \    if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n  \
    \  }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your\
    \ code here\n}\n ", "\n  # Your code here\n}\n ", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(n %% i == 0 && is.prime(i)){\n\
    \        return(i)\n      }\n    }\n  }\n}\n", "\n  # Your code here\n  for (i\
    \ in 2:n) {\n    if (is.prime(i) && n %% i == 0) {\n      return(i)\n    }\n \
    \ }\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # TODO: Fill in this function.\n\
    \  # Hint: Use the is_prime function.\n  # Hint: Use the seq function.\n  # Hint:\
    \ Use the which function.\n  # Hint: Use the max function.\n  # Hint: Use the\
    \ %/% operator.\n  # Hint: Use the %% operator.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n\
    \  # Hint: Use the which.max function.\n  # Hint: Use the which.max function.\n",
  "\n  # YOUR CODE HERE\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i))\
    \ {\n        return(i)\n      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  for(i in seq(2,n-1)){\n    if(n%%i==0){\n      if(is.prime(i)){\n\
    \        return(i)\n      }\n    }\n  }\n}\n", "\n    # YOUR CODE HERE\n    if(is.prime(n)){\n\
    \        return(n)\n    }\n    else{\n        for(i in 2:n){\n            if(n\
    \ %% i == 0){\n                return(largest_prime_factor(n/i))\n           \
    \ }\n        }\n    }\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  for (i in 2:n) {\n    if (n %% i == 0) {\n      return(largest_prime_factor(n/i))\n\
    \    }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # YOUR\
    \ CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i in 2:n){\n\
    \      if(is.prime(i) && n %% i == 0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  return(n)\n}\n", "\n    #\
    \ YOUR CODE HERE\n    # Hint: Use the function is_prime()\n    # Hint: Use the\
    \ function is_divisible()\n    # Hint: Use the function next_prime()\n    # Hint:\
    \ Use the function previous_prime()\n    # Hint: Use the function largest_divisor()\n\
    \    # Hint: Use the function smallest_divisor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function largest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n    # Hint: Use the function smallest_prime_factor()\n\
    \    # Hint: Use the function smallest_prime_factor()\n    # Hint: Use the function\
    \ smallest_prime_factor()\n   ", "\n  # Your code here\n  return(n)\n}\n", "\n\
    \  # TODO: Fill in this function\n  return(1)\n}\n", "\n  # Your code here\n \
    \ for (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i)) {\n       \
    \ return(i)\n      }\n    }\n  }\n}\n", "\n  # Your code here\n  for (i in seq(2,\
    \ n)) {\n    if (is_prime(i) && n %% i == 0) {\n      return(i)\n    }\n  }\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  for (i in 2:n) {\n    if (is.prime(i) && n %% i == 0) {\n      return(largest_prime_factor(n\
    \ / i))\n    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code\
    \ here\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n\
    \    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n   \
    \   n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n",
  "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n >\
    \ 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n   \
    \   factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  prime_factors <- factor(n)\n  max(prime_factors)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # YOUR CODE HERE\n}\n", "\n  # Your code here\n  #\n  # Hint: Use the function\
    \ is_prime() and the function is_factor()\n  #\n  # Hint: Use the function seq()\
    \ to generate a sequence of integers\n  #\n  # Hint: Use the function max() to\
    \ find the largest element in a vector\n  #\n  # Hint: Use the function which()\
    \ to find the index of the largest element in a vector\n  #\n  # Hint: Use the\
    \ function rev() to reverse the order of a vector\n  #\n  # Hint: Use the function\
    \ sort() to sort a vector\n  #\n  # Hint: Use the function unique() to remove\
    \ duplicates from a vector\n  #\n  # Hint: Use the function c() to concatenate\
    \ two vectors\n  #\n  # Hint: Use the function length() to find the length of\
    \ a vector\n  #\n  # Hint: Use the function sum() to find the sum of a vector\n\
    \  #\n  # Hint: Use the function prod() to find the product of a vector\n  #\n\
    \  # Hint: Use the function mean() to find the mean of a vector\n  #\n  # Hint:\
    \ Use the function median() to find the median of a vector\n  #\n  # Hint: Use\
    \ the function min() to find the minimum of a vector\n  #\n  # Hint: Use the function\
    \ which.min() to find the index of the minimum of a vector\n  #\n  # Hint: Use\
    \ the function which.max() to find the index of the maximum of a vector\n  #\n\
    \  # Hint: Use the function which.min() to find the index of the minimum of a\
    \ vector\n  #\n  # Hint: Use the function which.max() to find the index of the\
    \ maximum of a vector\n  #\n  # Hint: Use the function which.min() to find the\
    \ index of the minimum of a vector\n  #\n  # Hint: Use the function which.max()\
    \ to find the index of the maximum of a vector\n  #\n  # Hint: Use the function\
    \ which.min() to find the index of the minimum of a vector\n  #\n  # Hint: Use\
    \ the function which.max() to find the index of the maximum of a vector\n", "\n\
    \  # Your code here\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n   \
    \   n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n\n\
    largest_prime_factor(600851475143)\n", "\n  # Your code here\n  for (i in 2:n)\
    \ {\n    if (n %% i == 0) {\n      if (is_prime(i)) {\n        return(i)\n   \
    \   }\n    }\n  }\n}\n", "\n    # If n is even, divide by 2 until it is odd.\n\
    \    while (n %% 2 == 0) {\n        n <- n / 2\n    }\n    # Start with 3 and\
    \ increment by 2 until we reach the square root of n.\n    # If n is divisible\
    \ by the current number, divide it out and repeat.\n    # If we reach the square\
    \ root of n, then n is prime.\n    i <- 3\n    while (i <= sqrt(n)) {\n      \
    \  while (n %% i == 0) {\n            n <- n / i\n        }\n        i <- i +\
    \ 2\n    }\n    return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  #\
    \ Your code here\n  # Hint: Use the function is_prime()\n  # Hint: Use the function\
    \ next_prime()\n  # Hint: Use the function is_divisible_by()\n  # Hint: Use the\
    \ function largest_divisor()\n  # Hint: Use the function smallest_divisor()\n\
    \  # Hint: Use the function smallest_prime_divisor()\n  # Hint: Use the function\
    \ largest_prime_divisor()\n  # Hint: Use the function smallest_prime_factor()\n\
    \  # Hint: Use the function largest_prime_factor()\n  # Hint: Use the function\
    \ smallest_prime_divisor()\n  # Hint: Use the function largest_prime_divisor()\n\
    \  # Hint: Use the function smallest_prime_factor()\n  # Hint: Use the function\
    \ largest_prime_factor()\n  # Hint: Use the function smallest_prime_divisor()\n\
    \  # Hint: Use the function largest_prime_divisor()\n  # Hint: Use the function\
    \ smallest_prime_factor()\n  # Hint: Use the function largest_prime_factor()\n\
    \  # Hint: Use the function smallest_prime_divisor()\n  # Hint: Use the function\
    \ largest_prime_divisor()\n  # Hint: Use the function smallest_prime_factor()\n\
    \  # Hint: Use the function largest_prime_factor()\n  # Hint: Use the function\
    \ smallest_prime_divisor()\n  # Hint: Use the function largest_prime_divisor()\n\
    \  # Hint: Use the function smallest_prime_factor()\n  # Hint: Use the function\
    \ largest_prime_factor()\n  # Hint: Use the function smallest_prime_divisor()\n\
    \  # Hint: Use the function largest_prime_divisor()\n  # Hint: Use the function\
    \ smallest_prime_factor()\n  # Hint: Use the function largest_prime_factor()\n\
    \  # Hint: Use the function smallest_prime_divisor()\n  # Hint: Use the function\
    \ largest_prime_divisor()\n  # Hint: Use the function smallest_prime_factor()",
  "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor ==\
    \ 0) {\n      n <- n / factor\n    } else {\n      factor <- factor + 1\n    }\n\
    \  }\n  return(factor)\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n\
    \  for (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i)) {\n      \
    \  return(i)\n      }\n    }\n  }\n}\n", "\n  if (is.prime(n)) {\n    return(n)\n\
    \  }\n  else {\n    for (i in 2:n) {\n      if (n %% i == 0) {\n        return(largest_prime_factor(n\
    \ / i))\n      }\n    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n", "\n\
    \  # Your code here\n}", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n", "\n  # TODO: Fill in this function.\n  # Hint: You can use the is_prime\
    \ function.\n  # Hint: You can use the is_divisible function.\n  # Hint: You can\
    \ use the seq function.\n  # Hint: You can use the max function.\n  # Hint: You\
    \ can use the which function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.min function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.min function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.min function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.min function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.min\
    \ function.\n  # Hint: You can use the", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in seq(2,n-1)){\n      if(n%%i==0){\n\
    \        if(is.prime(i)){\n          return(i)\n        }\n      }\n    }\n  }\n\
    }\n", "\n  # TODO: Fill in this function.\n  return(1)\n}\n", "\n  # YOUR CODE\
    \ HERE\n  return(1)\n}\n", "\n  # Your code here\n  for (i in 2:n) {\n    if (n\
    \ %% i == 0) {\n      return(largest_prime_factor(n/i))\n    }\n  }\n  return(n)\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(n %% i == 0){\n   \
    \     return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  # Write\
    \ your code here\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while\
    \ (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n\
    \      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n  factors <- factor(n)\n  factors[length(factors)]\n}\n",
  "\n  # TODO: Implement this function.\n  # Hint: You may want to use the is_prime\
    \ function.\n  # Hint: You may want to use the seq function.\n  # Hint: You may\
    \ want to use the which function.\n  # Hint: You may want to use the max function.\n\
    \  # Hint: You may want to use the %/% operator.\n  # Hint: You may want to use\
    \ the %% operator.\n  # Hint: You may want to use the & operator.\n  # Hint: You\
    \ may want to use the | operator.\n  # Hint: You may want to use the ! operator.\n\
    \  # Hint: You may want to use the > operator.\n  # Hint: You may want to use\
    \ the < operator.\n  # Hint: You may want to use the == operator.\n  # Hint: You\
    \ may want to use the != operator.\n  # Hint: You may want to use the <= operator.\n\
    \  # Hint: You may want to use the >= operator.\n  # Hint: You may want to use\
    \ the && operator.\n  # Hint: You may want to use the || operator.\n  # Hint:\
    \ You may want to use the : operator.\n  # Hint: You may want to use the c function.\n\
    \  # Hint: You may want to use the length function.\n  # Hint: You may want to\
    \ use the which.max function.\n  # Hint: You may want to use the which.min function.\n\
    \  # Hint: You may want to use the sum function.\n  # Hint: You may want to use\
    \ the prod function.\n  # Hint: You may want to use the mean function.\n  # Hint:\
    \ You may want to use the median function.\n  # Hint: You may want to use the\
    \ sd function.\n  # Hint: You may want to use the var function.\n  # Hint: You\
    \ may want to use the min function.\n  # Hint: You may want to use the max function.\n\
    \  # Hint: You may want to use the sort function.\n  # Hint: You may want to use\
    \ the unique function.\n  # Hint: You may want to use the table", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n  factor(n)\n}\n", "\n  # Your code\
    \ here\n  return(1)\n}\n", "\n  # Your code here\n}\n", "\n  # TODO: Write your\
    \ code here.\n  return(1)\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while\
    \ (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n\
    \      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n  factors <- factor(n)\n  factors[length(factors)]\n}\n",
  "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n    return(0)\n}\n", "\n \
    \ # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n", "\n  # YOUR CODE HERE\n  for (i in 2:n) {\n    if (n %% i == 0) {\n    \
    \  if (is_prime(i)) {\n        return(i)\n      }\n    }\n  }\n}\n\nlargest_prime_factor(100)\n",
  "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n   \
    \   n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n\n\
    largest_prime_factor(600851475143)\n", "\n  # TODO\n  # Hint: Use the is_prime\
    \ function.\n  # Hint: Use the is_factor function.\n  # Hint: Use the is_divisible\
    \ function.\n  # Hint: Use the seq function.\n  # Hint: Use the max function.\n\
    \  # Hint: Use the which function.\n  # Hint: Use the is_prime function.\n  #\
    \ Hint: Use the is_factor function.\n  # Hint: Use the is_divisible function.\n\
    \  # Hint: Use the seq function.\n  # Hint: Use the max function.\n  # Hint: Use\
    \ the which function.\n  # Hint: Use the is_prime function.\n  # Hint: Use the\
    \ is_factor function.\n  # Hint: Use the is_divisible function.\n  # Hint: Use\
    \ the seq function.\n  # Hint: Use the max function.\n  # Hint: Use the which\
    \ function.\n  # Hint: Use the is_prime function.\n  # Hint: Use the is_factor\
    \ function.\n  # Hint: Use the is_divisible function.\n  # Hint: Use the seq function.\n\
    \  # Hint: Use the max function.\n  # Hint: Use the which function.\n  # Hint:\
    \ Use the is_prime function.\n  # Hint: Use the is_factor function.\n  # Hint:\
    \ Use the is_divisible function.\n  # Hint: Use the seq function.\n  # Hint: Use\
    \ the max function.\n  # Hint: Use the which function.\n  # Hint: Use the is_prime\
    \ function.\n  # Hint: Use the is_factor function.\n  # Hint: Use the is_divisible\
    \ function.\n  # Hint: Use the seq function.\n  # Hint: Use the max function.\n\
    \  # Hint: Use the which function.\n  # Hint: Use the is_prime function.\n  #\
    \ Hint: Use the is_factor function.\n  # Hint: Use the is_divisible function.\n\
    \  # Hint: Use the seq function.\n  # Hint: Use the max function.\n  # Hint:",
  "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i\
    \ in seq(2, n-1)){\n      if(n %% i == 0){\n        if(is.prime(i)){\n       \
    \   return(i)\n        }\n      }\n    }\n  }\n}\n", "\n  # TODO\n}\n", "\n  #\
    \ Your code here\n}\n", "\n  # TODO: Fill in this function.\n  # Hint: Use the\
    \ is_prime function.\n  # Hint: Use the seq function.\n  # Hint: Use the which\
    \ function.\n  # Hint: Use the max function.\n  # Hint: Use the %/% function.\n\
    \  # Hint: Use the %% function.\n  # Hint: Use the is.na function.\n  # Hint:\
    \ Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use\
    \ the is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use the\
    \ is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use the is.na<-\
    \ function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n\
    \  # Hint: Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n  #\
    \ Hint: Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint:\
    \ Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use\
    \ the is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use the\
    \ is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use the is.na<-\
    \ function.\n  # Hint: Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n\
    \  # Hint: Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n  #\
    \ Hint: Use the is.na<- function.\n  # Hint: Use the is.na<- function.\n  # Hint:\
    \ Use the is.na<- function.\n  # Hint: Use the is.na<", "\n  if (is.prime(n))\
    \ {\n    return(n)\n  } else {\n    for (i in 1:n) {\n      if (n %% i == 0 &&\
    \ is.prime(i)) {\n        return(i)\n      }\n    }\n  }\n}\n", "\n  # YOUR CODE\
    \ HERE\n  factor_list <- factor(n)\n  factor_list <- factor_list[factor_list !=\
    \ 1]\n  max(factor_list)\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while\
    \ (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n    } else {\n\
    \      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  # YOUR CODE HERE\n  factor <- 2\n  while (n > 1) {\n    if\
    \ (n %% factor == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor\
    \ + 1\n    }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n}\n", "\n  # TODO: implement this function\n  return(0)\n\
    }\n", "\n  # Your code here\n}\n", "\n  # Your code here\n  for (i in 2:n) {\n\
    \    if (is.prime(i) & n %% i == 0) {\n      return(i)\n    }\n  }\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    \  return(NULL)\n}\n ", "\n  # TODO: Fill in this function.\n  return(n)\n}\n ",
  "\n  factor(n)\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  for\
    \ (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i)) {\n        return(i)\n\
    \      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  # Hint: Use the function\
    \ is_prime()\n  # Hint: Use the function factors()\n  # Hint: Use the function\
    \ max()\n  # Hint: Use the function which()\n  # Hint: Use the function isTRUE()\n\
    \  # Hint: Use the function any()\n  # Hint: Use the function all()\n  # Hint:\
    \ Use the function length()\n  # Hint: Use the function seq()\n  # Hint: Use the\
    \ function rep()\n  # Hint: Use the function c()\n  # Hint: Use the function unique()\n\
    \  # Hint: Use the function sort()\n  # Hint: Use the function rev()\n  # Hint:\
    \ Use the function head()\n  # Hint: Use the function tail()\n  # Hint: Use the\
    \ function sum()\n  # Hint: Use the function prod()\n  # Hint: Use the function\
    \ mean()\n  # Hint: Use the function median()\n  # Hint: Use the function min()\n\
    \  # Hint: Use the function max()\n  # Hint: Use the function range()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n  # Hint: Use the function which.max()\n  # Hint:\
    \ Use the function which.min()\n", "\n  # Your code here\n  return(n)\n}\n", "\n\
    \  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i\
    \ in 2:n){\n      if(is.prime(i) & n %% i == 0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n  for (i in seq(2, n)) {\n\
    \    if (is_prime(i) && n %% i == 0) {\n      return(i)\n    }\n  }\n}\n", "\n\
    \  # Your code here\n  prime_factors <- c()\n  for (i in 2:n) {\n    if (is_prime(i)\
    \ && n %% i == 0) {\n      prime_factors <- c(prime_factors, i)\n    }\n  }\n\
    \  return(max(prime_factors))\n}\n\nlargest_prime_factor(600851475143)\n", "\n\
    \  # Your code here\n}\n", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n\
    \    if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n  \
    \  }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your\
    \ code here\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i))\
    \ {\n        return(i)\n      }\n    }\n  }\n}\n", "\n  # YOUR CODE HERE\n  for\
    \ (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i)) {\n        return(i)\n\
    \      }\n    }\n  }\n}\n", "\n  # Find the smallest prime factor of n.\n  p <-\
    \ smallest_prime_factor(n)\n  # If p is the only prime factor of n, return p.\n\
    \  if (p == n) {\n    return(p)\n  }\n  # Otherwise, return the largest prime\
    \ factor of n/p.\n  else {\n    return(largest_prime_factor(n/p))\n  }\n}\n ",
  "\n  # Your code here\n  return(n)\n}\n", "\n  # Your code here\n  for (i in seq(2,\
    \ n-1)) {\n    if (is.prime(i) && n %% i == 0) {\n      return(i)\n    }\n  }\n\
    }\n", "\n  # Your code here\n  i = 2\n  while(i < n){\n    if(n %% i == 0){\n\
    \      n = n / i\n    }\n    else{\n      i = i + 1\n    }\n  }\n  return(n)\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code here\n}\n", "\n \
    \ # YOUR CODE HERE\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor == 0)\
    \ {\n      n <- n / factor\n    } else {\n      factor <- factor + 1\n    }\n\
    \  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n", "\n  for (i\
    \ in 2:n) {\n    if (is.prime(i) && n %% i == 0) {\n      return(i)\n    }\n \
    \ }\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code here\n  for\
    \ (i in 2:n) {\n    if (n %% i == 0) {\n      if (is_prime(i)) {\n        return(i)\n\
    \      }\n    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n ", "\n  # Your\
    \ code here\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n      n <- n\
    \ / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n}", "\n  # TODO: Fill in this function.\n\
    \  # Hint: You can use the is_prime function.\n  # Hint: You can use the %/% operator.\n\
    \  # Hint: You can use the seq function.\n  # Hint: You can use the max function.\n\
    \  # Hint: You can use the which function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which.max function.\n\
    \  # Hint: You can use the which.max function.\n  # Hint: You can use the which.max\
    \ function.\n  # Hint: You can use the which.max function.\n  # Hint: You can\
    \ use the which.max function.\n  # Hint: You can use the which", "\n  # TODO:\
    \ Fill in the body of this function.\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n\
    \  for (i in 2:n) {\n    if (n %% i == 0) {\n      n <- n / i\n    }\n  }\n  return(n)\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  i <- 2\n  while (i < n) {\n \
    \   if (n %% i == 0) {\n      n <- n / i\n    } else {\n      i <- i + 1\n   \
    \ }\n  }\n  return(n)\n}\n", "\n  # YOUR CODE HERE\n  for (i in seq(2, n)) {\n\
    \    if (is_prime(i) && n %% i == 0) {\n      return(i)\n    }\n  }\n}\n", "\n\
    \  # Your code here\n  for (i in 2:n) {\n    if (n %% i == 0) {\n      n <- n\
    \ / i\n    }\n  }\n  return(n)\n}\n", "\n  # Your code here\n}\n", "\n  # YOUR\
    \ CODE HERE\n  # return(n)\n  factors <- factor(n)\n  return(factors[length(factors)])\n\
    }\n", "\n  # Your code here\n}\n", "\n    # Your code here\n    return(n)\n}\n",
  "\n  if (is.prime(n)) {\n    return(n)\n  }\n  else {\n    for (i in 2:n) {\n  \
    \    if (n %% i == 0) {\n        return(largest_prime_factor(n/i))\n      }\n\
    \    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code here\n\
    \  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(is.prime(i)\
    \ && n %% i == 0){\n        return(largest_prime_factor(n/i))\n      }\n    }\n\
    \  }\n}\n", "\n  # YOUR CODE HERE\n  for (i in 2:n) {\n    if (n %% i == 0) {\n\
    \      if (is_prime(i)) {\n        return(i)\n      }\n    }\n  }\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n    return(n)\n  }\n  else{\n    for(i\
    \ in 2:n){\n      if(n %% i == 0){\n        return(largest_prime_factor(n/i))\n\
    \      }\n    }\n  }\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n", "\n  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0)\
    \ {\n      n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n\
    }\n", "\n  # Your code here\n  x <- 2\n  while (x <= n) {\n    if (n %% x == 0)\
    \ {\n      n <- n / x\n    } else {\n      x <- x + 1\n    }\n  }\n  return(x)\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n  # Your code here\n}\n", "\n \
    \   # Your code here\n    return(NULL)\n}\n", "\n  # Your code here\n  factor\
    \ <- 2\n  while (n > 1) {\n    if (n %% factor == 0) {\n      n <- n / factor\n\
    \    } else {\n      factor <- factor + 1\n    }\n  }\n  return(factor)\n}\n\n\
    largest_prime_factor(600851475143)\n", "\n  # Your code here\n  return(n)\n}\n",
  "\n  # Your code here\n}\n", "\n  factor <- 2\n  while (n > 1) {\n    if (n %% factor\
    \ == 0) {\n      n <- n / factor\n    } else {\n      factor <- factor + 1\n \
    \   }\n  }\n  return(factor)\n}\n\nlargest_prime_factor(600851475143)\n", "\n\
    \  # YOUR CODE HERE\n  i <- 2\n  while (i < n) {\n    if (n %% i == 0) {\n   \
    \   n <- n / i\n    } else {\n      i <- i + 1\n    }\n  }\n  return(n)\n}\n",
  "\n  factor(n) %>%\n    as.data.frame() %>%\n    arrange(desc(n)) %>%\n    .$n %>%\n\
    \    .[1]\n}\n\nlargest_prime_factor(600851475143)\n", "\n  # The largest prime\
    \ factor of n is the largest prime factor of n/p, where p is the smallest prime\
    \ factor of n.\n  # So, we can use recursion to find the largest prime factor\
    \ of n.\n  # If n is prime, then n is the largest prime factor of n.\n  if (is_prime(n))\
    \ {\n    return(n)\n  }\n  # Otherwise, find the smallest prime factor of n.\n\
    \  p <- smallest_prime_factor(n)\n  # Return the largest prime factor of n/p.\n\
    \  return(largest_prime_factor(n/p))\n}\n", "\n  # YOUR CODE HERE\n  i <- 2\n\
    \  while (i < n) {\n    if (n %% i == 0) {\n      n <- n / i\n    } else {\n \
    \     i <- i + 1\n    }\n  }\n  return(n)\n}\n\nlargest_prime_factor(600851475143)\n",
  "\n  # Your code here\n}\n", "\n    # YOUR CODE HERE\n    factor <- 2\n    while\
    \ (n > 1) {\n        if (n %% factor == 0) {\n            n <- n / factor\n  \
    \      } else {\n            factor <- factor + 1\n        }\n    }\n    return(factor)\n\
    }\nlargest_prime_factor(600851475143)\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(n %% i == 0){\n   \
    \     return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n", "\n  # Your\
    \ code here\n}\n", "\n    # Your code here\n    factor <- 2\n    while (n > 1)\
    \ {\n        if (n %% factor == 0) {\n            n <- n / factor\n        } else\
    \ {\n            factor <- factor + 1\n        }\n    }\n    return(factor)\n\
    }\n\nlargest_prime_factor(600851475143)\n", "\n    # Your code here\n    return(0)\n\
    }\n", "\n  # Your code here\n}\n", "\n  # Return the largest prime factor of n.\n\
    \  # Assume n > 1 and is not a prime.\n  #\n  # This is a naive implementation.\n\
    \  #\n  # @param n The number to factor.\n  # @return The largest prime factor\
    \ of n.\n  #\n  # @author James Eady <jeady@berkeley.edu>\n  # @date 2013-06-13\n\
    \n  # The largest prime factor of n.\n  largest_prime_factor <- 1\n\n  # The current\
    \ factor of n.\n  factor <- 2\n\n  # The current value of n.\n  n_current <- n\n\
    \n  # While n_current is not prime,\n  while (!is_prime(n_current)) {\n    # If\
    \ n_current is divisible by factor,\n    if (n_current %% factor == 0) {\n   \
    \   # Update the largest prime factor.\n      largest_prime_factor <- factor\n\
    \n      # Divide n_current by factor.\n      n_current <- n_current / factor\n\
    \    } else {\n      # Increment factor.\n      factor <- factor + 1\n    }\n\
    \  }\n\n  # Update the largest prime factor.\n  largest_prime_factor <- n_current\n\
    \n  # Return the largest prime factor.\n  return(largest_prime_factor)\n}\n",
  "\n  # Your code here\n  factor(n)\n}\n", "\n  # YOUR CODE HERE\n  if(is.prime(n)){\n\
    \    return(n)\n  }\n  else{\n    for(i in 2:n){\n      if(n %% i == 0){\n   \
    \     return(largest_prime_factor(n/i))\n      }\n    }\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
