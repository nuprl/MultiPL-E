language: java
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        for\
    \ (long i : lst) {\n            if (i > last) {\n                return false;\n\
    \            }\n            last = i;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbx3jjdz.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean isSorted = true;\n        Set<Long>\
    \ set = new HashSet<Long>();\n        for (Long i : lst) {\n            if (!set.contains(i))\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            set.add(i);\n        }\n        return isSorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1fshb4n.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        boolean\
    \ sorted = false;\n        for (long i : lst) {\n            if (i == last) {\n\
    \                continue;\n            }\n            if (i > last) {\n     \
    \           return false;\n            }\n            last = i;\n            sorted\
    \ = true;\n        }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_slej0t9.java:45)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = lst.get(0);\n        for\
    \ (long cur : lst) {\n            if (prev > cur) {\n                return false;\n\
    \            }\n            prev = cur;\n        }\n        return true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmpd7zpw6s9.java:30)\n\tat Problem.main(tmpd7zpw6s9.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long first = lst.get(0);\n        long\
    \ last = lst.get(lst.size() - 1);\n        boolean isSorted = true;\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > last) {\n \
    \               isSorted = false;\n                break;\n            }\n   \
    \     }\n        return isSorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaxdsiwca.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prevVal = lst.get(0);\n      \
    \  for (long val : lst) {\n            if (prevVal > val) {\n                return\
    \ false;\n            }\n            prevVal = val;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmp_eo5pgrn.java:30)\n\tat Problem.main(tmp_eo5pgrn.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        boolean\
    \ sorted = false;\n        for (long i : lst) {\n            if (i > last) {\n\
    \                sorted = false;\n                break;\n            }\n    \
    \        sorted = true;\n            last = i;\n        }\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvsx9jb4.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean result = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for(Long l : lst) {\n            set.add(l);\n\
    \        }\n        for(Long l : set) {\n            if(!lst.contains(l)) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9hql38x.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean sorted = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for(Long i : lst) {\n            if(!set.contains(i))\
    \ {\n                sorted = false;\n                break;\n            }\n\
    \            set.add(i);\n        }\n        return sorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_5svo4g.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        boolean\
    \ isSorted = false;\n        for (int i = 1; i < lst.size(); i++) {\n        \
    \    if (lst.get(i) > last) {\n                isSorted = false;\n           \
    \     break;\n            }\n            if (lst.get(i) == last) {\n         \
    \       isSorted = true;\n                break;\n            }\n            last\
    \ = lst.get(i);\n        }\n        return isSorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2o799co.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        Set<Long> set = new HashSet<Long>(lst);\n\
    \        boolean result = true;\n        for (Long i : set) {\n            if\
    \ (set.size() > 1) {\n                result = false;\n                break;\n\
    \            }\n            if (i != lst.get(set.size() - 1)) {\n            \
    \    result = false;\n                break;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdy3mglh7.java:46)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = lst.get(0);\n        long\
    \ current = lst.get(1);\n        for(int i = 2; i < lst.size(); i++) {\n     \
    \       if(lst.get(i) > current) {\n                return false;\n          \
    \  }\n            else if(lst.get(i) < prev) {\n                return false;\n\
    \            }\n            else {\n                prev = current;\n        \
    \        current = lst.get(i);\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 1, Size: 1\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmp5ghsltne.java:31)\n\tat Problem.main(tmp5ghsltne.java:47)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long last = lst.get(0);\n        boolean\
    \ isSorted = true;\n        for (long i : lst) {\n            if (i > last) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          last = i;\n        }\n        return isSorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00jodybl.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long lastValue = lst.get(0);\n    \
    \    boolean isSorted = false;\n        for(int i = 1; i < lst.size(); i++) {\n\
    \            if(lst.get(i) > lastValue) {\n                isSorted = true;\n\
    \                break;\n            }\n            lastValue = lst.get(i);\n\
    \        }\n        return isSorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdilkyrr7.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        Set<Long> set = new HashSet<Long>();\n\
    \        for (Long i : lst) {\n            if (!set.contains(i)) {\n         \
    \       set.add(i);\n            } else {\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprteduyk5.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        Set<Long> set = new HashSet<Long>();\n\
    \        for (Long i : lst) {\n            if (!set.contains(i)) {\n         \
    \       set.add(i);\n            } else {\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprteduyk5.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        if (lst.size() == 1) {\n          \
    \  return true;\n        }\n        long first = lst.get(0);\n        long last\
    \ = lst.get(lst.size() - 1);\n        boolean isSorted = true;\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst.get(i) > last) {\n                isSorted = false;\n          \
    \      break;\n            }\n        }\n        return isSorted;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzt6u_elr.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        boolean isSorted = true;\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long i : lst) {\n            if (!set.contains(i))\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            set.add(i);\n        }\n        return isSorted;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp69ps19rf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : lst) {\n            if (!set.contains(i)) {\n         \
    \       set.add(i);\n            } else {\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList()))) == (true));\n   \
    \ assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l))))\
    \ == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphlp54gho.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
    \    // (true)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))\n\
    \    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l))))\n    // (true)\n    // >>> isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l))))\n    // (false)\n    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))\n    // (true)\n    //\
    \ >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l,\
    \ (long)2l, (long)3l, (long)4l))))\n    // (false)\n    public static boolean\
    \ isSorted(ArrayList<Long> lst) {\n        long prev = 0;\n        long curr =\
    \ lst.get(0);\n        boolean isSorted = true;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst.get(i) == curr) {\n\
    \                if (prev != lst.get(i)) {\n                    isSorted = false;\n\
    \                    break;\n                }\n            }\n            prev\
    \ = curr;\n            curr = lst.get(i);\n        }\n        return isSorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)5l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)4l, (long)5l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l)))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))) == (true));\n\
    \    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList()))) == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (true));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)1l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)2l, (long)3l, (long)4l)))) == (false));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l,\
    \ (long)4l)))) == (false));\n    assert(isSorted((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)2l, (long)3l, (long)3l, (long)4l)))) == (true));\n    assert(isSorted((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) ==\
    \ (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.isSorted(tmpk8geg1x6.java:31)\n\tat Problem.main(tmpk8geg1x6.java:56)\n"
  stdout: ''
