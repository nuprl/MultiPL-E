name: HumanEval_58_common
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique common elements for two lists.\n  \
  \  // >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l,\
  \ (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    // (new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    // >>> common((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long>\
  \ l2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l,\
  \ (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l,\
  \ (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n\
  \    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l,\
  \ (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long>\
    \ set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        Set<Long> common = new HashSet<Long>();\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        common.addAll(set1);\n        return common;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        set1.removeAll(set2);\n \
    \       set2.removeAll(set1);\n        result.addAll(set1);\n        result.addAll(set2);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long l : set1) {\n            if(set2.contains(l)) {\n          \
    \      result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set2.remove(l);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> common =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 =\
    \ new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \                set1.remove(l);\n                set2.remove(l);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set2.remove(l);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long val : set1) {\n            if(set2.contains(val))\
    \ {\n                result.add(val);\n                set1.remove(val);\n   \
    \             set2.remove(val);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        Set<Long> commonSet = new HashSet<Long>();\n        commonSet.addAll(set1);\n\
    \        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n       \
    \ commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n\
    \        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n    \
    \    commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n\
    \        commonSet.removeAll(set2);\n        commonSet.addAll(set1);\n       \
    \ commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n        commonSet.removeAll(set2);\n\
    \        commonSet.addAll(set1);\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Set<Long> common = new HashSet<>();\n        for(Long l : set1) {\n \
    \           if(set2.contains(l)) {\n                common.add(l);\n         \
    \   }\n        }\n        for(Long l : set2) {\n            if(set1.contains(l))\
    \ {\n                common.add(l);\n            }\n        }\n        for(Long\
    \ l : common) {\n            result.add(l);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> common =\
    \ new HashSet<>();\n        for(Long l : l1) {\n            common.add(l);\n \
    \       }\n        for(Long l : l2) {\n            if(!common.contains(l)) {\n\
    \                result.add(l);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \                set1.remove(l);\n                set2.remove(l);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long val : set1) {\n \
    \           if(set2.contains(val)) {\n                result.add(val);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long i : set1) {\n            if(set2.contains(i)) {\n             \
    \   result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Set<Long> set = new HashSet<>(common);\n        set.retainAll(l1);\n\
    \        set.retainAll(l2);\n        return set;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        result.addAll(set1);\n        result.addAll(set2);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \                set1.remove(l);\n                set2.remove(l);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> common = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n  \
    \      set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        common.addAll(set1);\n        return common;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.addAll(l1);\n        set1.addAll(l2);\n\
    \        common.addAll(set1);\n        return common;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long val : set1) {\n\
    \            if(set2.contains(val)) {\n                result.add(val);\n    \
    \            set1.remove(val);\n                set2.remove(val);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            Long i1 = it1.next();\n            Long i2 = it2.next();\n\
    \            if (i1 == i2) {\n                result.add(i1);\n              \
    \  it1.remove();\n                it2.remove();\n            }\n        }\n  \
    \      return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Set<Long> set = new HashSet<Long>(common);\n        common.removeAll(set);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long common = 0;\n        for (long i : l1) {\n            if (l2.contains(i))\
    \ {\n                common += i;\n            }\n        }\n        for (long\
    \ i : l2) {\n            if (l1.contains(i)) {\n                common += i;\n\
    \            }\n        }\n        if (common > 0) {\n            result.add(common);\n\
    \        }\n        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        result.addAll(set1);\n        return result;", "        ArrayList<Long>\
    \ common = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        common.addAll(set1);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        Iterator<Long>\
    \ it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n    \
    \    while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next())\
    \ {\n                result.add(it1.next());\n            }\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long>\
    \ it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n \
    \           Long a = it1.next();\n            Long b = it2.next();\n         \
    \   if (a == b) {\n                result.add(a);\n            } else if (a >\
    \ b) {\n                it1.remove();\n            } else {\n                it2.remove();\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set1.remove(l);\n       \
    \         set2.remove(l);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        Set<Long> common = new HashSet<Long>();\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common.removeAll(set2);\n        common.removeAll(set1);\n\
    \        common.removeAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        common.removeAll(set1);\n        common", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n\
    \            if(set2.contains(i)) {\n                result.add(i);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            Long a = it1.next();\n            Long b = it2.next();\n\
    \            if (a == b) {\n                result.add(a);\n            } else\
    \ if (a > b) {\n                it1.remove();\n            } else {\n        \
    \        it2.remove();\n            }\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        result.addAll(set1);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n  \
    \          if(set2.contains(l)) {\n                result.add(l);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Set<Long> common = new HashSet<>();\n        for (Long i : set1) {\n\
    \            if (set2.contains(i)) {\n                common.add(i);\n       \
    \     }\n        }\n        for (Long i : set2) {\n            if (!set1.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        result.addAll(common);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> common = new HashSet<>();\n        Set<Long> common1 = new\
    \ HashSet<>();\n        Set<Long> common2 = new HashSet<>();\n        for (Long\
    \ l : l1) {\n            if (common.contains(l)) {\n                common1.add(l);\n\
    \            } else {\n                common.add(l);\n            }\n       \
    \ }\n        for (Long l : l2) {\n            if (common.contains(l)) {\n    \
    \            common2.add(l);\n            } else {\n                common.add(l);\n\
    \            }\n        }\n        for (Long l : common1) {\n            if (!common2.contains(l))\
    \ {\n                result.add(l);\n            }\n        }\n        for (Long\
    \ l : common2) {\n            if (!common1.contains(l)) {\n                result.add(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long val : set1) {\n            if(set2.contains(val))\
    \ {\n                result.add(val);\n                set1.remove(val);\n   \
    \             set2.remove(val);\n            }\n        }\n        for(Long val\
    \ : set2) {\n            if(set1.contains(val)) {\n                result.add(val);\n\
    \                set2.remove(val);\n                set1.remove(val);\n      \
    \      }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long l : set1) {\n            if(set2.contains(l)) {\n          \
    \      result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long l : set1) {\n\
    \            if(set2.contains(l)) {\n                result.add(l);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set2.remove(l);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set1.remove(l);\n       \
    \         set2.remove(l);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \                set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        Set<Long> commonSet = new HashSet<Long>();\n        for (Long i : set1)\
    \ {\n            if (set2.contains(i)) {\n                commonSet.add(i);\n\
    \            }\n        }\n        common.addAll(commonSet);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> common =\
    \ new HashSet<>();\n        for (Long l : l1) {\n            if (common.contains(l))\
    \ {\n                continue;\n            }\n            common.add(l);\n  \
    \          result.add(l);\n        }\n        for (Long l : l2) {\n          \
    \  if (common.contains(l)) {\n                continue;\n            }\n     \
    \       common.add(l);\n            result.add(l);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long i : set1) {\n            if(set2.contains(i)) {\n             \
    \   result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.addAll(l1);\n        set1.addAll(l2);\n        return set1;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        result.addAll(set1);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \                set1.remove(l);\n                set2.remove(l);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n   \
    \         if(set2.contains(i)) {\n                result.add(i);\n           \
    \     set1.remove(i);\n                set2.remove(i);\n            }\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long element : set1) {\n            if(set2.contains(element)) {\n\
    \                result.add(element);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Set<Long> set = new HashSet<Long>(common);\n        Collections.sort(set);\n\
    \        return set;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        set1.retainAll(set2);\n        result.addAll(set1);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Set<Long> common =\
    \ new HashSet<>();\n        for (Long i : l1) {\n            if (common.contains(i))\
    \ {\n                continue;\n            }\n            common.add(i);\n  \
    \          for (Long j : l2) {\n                if (common.contains(j)) {\n  \
    \                  continue;\n                }\n                common.add(j);\n\
    \                if (i == j) {\n                    result.add(i);\n         \
    \       }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n  \
    \          if(set2.contains(l)) {\n                result.add(l);\n          \
    \      set1.remove(l);\n                set2.remove(l);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Set<Long> set = new HashSet<Long>(common);\n        set.retainAll(l1);\n\
    \        set.retainAll(l2);\n        common.addAll(set);\n        return common;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long e : set1) {\n            if(set2.contains(e))\
    \ {\n                result.add(e);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     set1.retainAll(set2);\n        result.addAll(set1);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n\
    \            if(set2.contains(i)) {\n                result.add(i);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n  \
    \      Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n\
    \            if(set2.contains(i)) {\n                result.add(i);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n  \
    \      Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        result.addAll(set1);\n        result.addAll(set2);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Collections.sort(common);\n        return common;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> common = new HashSet<>();\n \
    \       Set<Long> common2 = new HashSet<>();\n        Set<Long> common3 = new\
    \ HashSet<>();\n        Set<Long> common4 = new HashSet<>();\n        Set<Long>\
    \ common5 = new HashSet<>();\n        Set<Long> common6 = new HashSet<>();\n \
    \       Set<Long> common7 = new HashSet<>();\n        Set<Long> common8 = new\
    \ HashSet<>();\n        Set<Long> common9 = new HashSet<>();\n        Set<Long>\
    \ common10 = new HashSet<>();\n        Set<Long> common11 = new HashSet<>();\n\
    \        Set<Long> common12 = new HashSet<>();\n        Set<Long> common13 = new\
    \ HashSet<>();\n        Set<Long> common14 = new HashSet<>();\n        Set<Long>\
    \ common15 = new HashSet<>();\n        Set<Long> common16 = new HashSet<>();\n\
    \        Set<Long> common17 = new HashSet<>();\n        Set<Long> common18 = new\
    \ HashSet<>();\n        Set<Long> common19 = new HashSet<>();\n        Set<Long>\
    \ common20 = new HashSet<>();\n        Set<Long> common21 = new HashSet<>();\n\
    \        Set<Long> common22 = new HashSet<>();\n        Set<Long> common23 = new\
    \ HashSet<>();\n        Set<Long> common24 = new HashSet<>();\n        Set<Long>\
    \ common25 = new HashSet<>();\n        Set<Long> common26 = new HashSet<>();\n\
    \        Set<Long> common27 = new HashSet<>();\n        Set<Long> common28 = new\
    \ HashSet<>();\n        Set<Long> common29 = new HashSet<>();\n        Set<Long>\
    \ common30 = new HashSet<>();\n        Set<Long> common31 = new HashSet<>();\n\
    \        Set<Long> common32 = new HashSet<>();\n        Set<Long> common33 = new\
    \ HashSet<>();\n        Set<Long> common34 = new HashSet<>();\n        Set<Long>\
    \ common35 = new HashSet<>();\n        Set<Long> common36 = new HashSet<>();\n\
    \        Set<Long> common37 = new HashSet<>();\n        Set<Long> common38 = new\
    \ HashSet<>();\n        Set<Long> common39 = new ", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        common.addAll(set1);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \                set1.remove(i);\n                set2.remove(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n                set2.remove(l);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long l : set1) {\n            if(set2.contains(l)) {\n          \
    \      common.add(l);\n            }\n        }\n        return common;", "  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.retainAll(set1);\n        result.addAll(set1);\n\
    \        result.addAll(set2);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        Set<Long> common = new HashSet<>();\n\
    \        set1.retainAll(set2);\n        set2.retainAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.addAll(set2);\n        set2.addAll(",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n\
    \            if(!set2.contains(i)) {\n                result.add(i);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n  \
    \      Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n\
    \            if(set2.contains(i)) {\n                result.add(i);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> common =\
    \ new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n  \
    \      Set<Long> set2 = new HashSet<Long>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1 =\
    \ new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n  \
    \      set1.retainAll(set2);\n        result.addAll(set1);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        result.addAll(set1);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n  \
    \          if(set2.contains(i)) {\n                result.add(i);\n          \
    \      set1.remove(i);\n                set2.remove(i);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n\
    \        while (it1.hasNext() && it2.hasNext()) {\n            Long i1 = it1.next();\n\
    \            Long i2 = it2.next();\n            if (i1.equals(i2)) {\n       \
    \         result.add(i1);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set1.remove(l);\n       \
    \         set2.remove(l);\n            }\n        }\n        for(Long l : set2)\
    \ {\n            if(set1.contains(l)) {\n                result.add(l);\n    \
    \            set2.remove(l);\n                set1.remove(l);\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long val : set1) {\n            if(set2.contains(val)) {\n      \
    \          result.add(val);\n                set1.remove(val);\n             \
    \   set2.remove(val);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long common = 0;\n\
    \        for (long l : l1) {\n            if (l2.contains(l)) {\n            \
    \    common++;\n            }\n        }\n        for (long l : l2) {\n      \
    \      if (l1.contains(l)) {\n                common++;\n            }\n     \
    \   }\n        if (common == 0) {\n            return result;\n        }\n   \
    \     long minCommon = common;\n        for (long l : l1) {\n            if (l2.contains(l))\
    \ {\n                minCommon--;\n            }\n        }\n        for (long\
    \ l : l2) {\n            if (l1.contains(l)) {\n                minCommon--;\n\
    \            }\n        }\n        if (minCommon > 0) {\n            for (long\
    \ l : l1) {\n                if (l2.contains(l)) {\n                    minCommon--;\n\
    \                }\n            }\n            for (long l : l2) {\n         \
    \       if (l1.contains(l)) {\n                    minCommon--;\n            \
    \    }\n            }\n        }\n        if (minCommon > 0) {\n            for\
    \ (long l : l1) {\n                if (l2.contains(l)) {\n                   \
    \ minCommon--;\n                }\n            }\n            for (long l : l2)\
    \ {\n                if (l1.contains(l)) {\n                    minCommon--;\n\
    \                }\n            }\n        }\n        if (minCommon > 0) {\n \
    \           for (long l : l1) {\n                if (l2.contains(l)) {\n     \
    \               minCommon--;\n                }\n            }\n            for\
    \ (long l : l2) {\n                if (l1.contains(l)) {\n                   \
    \ minCommon--;\n                }\n            }\n        }\n        if (minCommon\
    \ > 0) {\n            for (long l : l1) {\n                if (l2.contains(l))\
    \ {\n                    minCommon--;\n                }\n            }\n    \
    \        for (long l : l2) {\n                if (l1.contains(l)) {\n        \
    \            minCommon--;\n                }\n            }\n        }\n     \
    \   if (minCommon > 0) {\n            for (long l : l1) {\n                if\
    \ (l2.contains(l)) {\n                    minCommon--;\n                }\n  \
    \          }\n            for (long l : l2) {\n                if (l1.contains(l))\
    \ {\n                    minCommon--;\n                }\n            }\n    \
    \    }\n        if (minCommon > 0) {\n            for (long l : l1) {\n      \
    \          if (l2.contains(l)) {\n                    minCommon--;\n         \
    \       }\n            }\n            for (long l : l2) {\n                if\
    \ (l1.contains(l)) {\n                    minCommon--;\n                }\n  \
    \          }\n        }\n        if (minCommon > 0) {\n            for (long l\
    \ : l1) {\n                if (l2.contains(l)) {\n                    minCommon--;\n\
    \                }\n            }\n            for (long l : l2) {\n         \
    \       if (l1.contains(l)) {\n                    minCommon--;\n            \
    \    }\n            }\n        }\n        if (minCommon > 0) {\n            for ",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.retainAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Set<Long>\
    \ set = new HashSet<Long>(common);\n        common.removeAll(set);\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     Set<Long> common = new HashSet<>();\n        common.addAll(set1);\n    \
    \    common.addAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        for (Long val : common) {\n            result.add(val);\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        result.addAll(set1);\n\
    \        result.addAll(set2);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n  \
    \          if(set2.contains(i)) {\n                result.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(!set2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long common = 0;\n        for (long i : l1) {\n\
    \            for (long j : l2) {\n                if (i == j) {\n            \
    \        common++;\n                }\n            }\n        }\n        for (long\
    \ i : l2) {\n            for (long j : l1) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l1) {\n            for (long j : l2) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l2) {\n            for (long j : l1) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l1) {\n            for (long\
    \ j : l2) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l2) {\n    \
    \        for (long j : l1) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l1) {\n            for (long j : l2) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l2) {\n            for (long j : l1) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l1) {\n            for (long j : l2) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l2) {\n            for (long\
    \ j : l1) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l1) {\n    \
    \        for (long j : l2) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l2) {\n            for (long j : l1) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l1) {\n            for (long j : l2) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l2) {\n            for (long j : l1) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l1) {\n            for (long\
    \ j : l2) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l2) {\n    \
    \        for (long j : l1) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l1) {\n            for (long j : l2) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        common.addAll(set1);\n        return common;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long val : set1)\
    \ {\n            if(set2.contains(val)) {\n                result.add(val);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            Long i1 = it1.next();\n            Long i2 = it2.next();\n\
    \            if (i1.equals(i2)) {\n                result.add(i1);\n         \
    \   }\n        }\n        return result;", "        ArrayList<Long> common = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        common.addAll(set1);\n   \
    \     common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long i : set1) {\n            if(set2.contains(i)) {\n             \
    \   result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long common = 0;\n        for (long i : l1)\
    \ {\n            for (long j : l2) {\n                if (i == j) {\n        \
    \            common++;\n                }\n            }\n        }\n        for\
    \ (long i : l2) {\n            for (long j : l1) {\n                if (i == j)\
    \ {\n                    common++;\n                }\n            }\n       \
    \ }\n        for (long i : l1) {\n            for (long j : l2) {\n          \
    \      if (i == j) {\n                    common++;\n                }\n     \
    \       }\n        }\n        for (long i : l2) {\n            for (long j : l1)\
    \ {\n                if (i == j) {\n                    common++;\n          \
    \      }\n            }\n        }\n        for (long i : l1) {\n            for\
    \ (long j : l2) {\n                if (i == j) {\n                    common++;\n\
    \                }\n            }\n        }\n        for (long i : l2) {\n  \
    \          for (long j : l1) {\n                if (i == j) {\n              \
    \      common++;\n                }\n            }\n        }\n        for (long\
    \ i : l1) {\n            for (long j : l2) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l2) {\n            for (long j : l1) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l1) {\n            for (long j : l2) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l2) {\n            for (long\
    \ j : l1) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l1) {\n    \
    \        for (long j : l2) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l2) {\n            for (long j : l1) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l1) {\n            for (long j : l2) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l2) {\n            for (long j : l1) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l1) {\n            for (long\
    \ j : l2) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l2) {\n    \
    \        for (long j : l1) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l1) {\n            for (long j : l2) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            Long i1 = it1.next();\n            Long i2 = it2.next();\n\
    \            if (i1 == i2) result.add(i1);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long common = l1.stream().filter(x\
    \ -> l2.contains(x)).count();\n        long common2 = l2.stream().filter(x ->\
    \ l1.contains(x)).count();\n        if (common == common2) {\n            result.addAll(l1);\n\
    \            result.addAll(l2);\n        } else {\n            ArrayList<Long>\
    \ common3 = new ArrayList<>();\n            common3.addAll(l1);\n            common3.addAll(l2);\n\
    \            common3.removeAll(result.stream().filter(x -> l1.contains(x)).collect(Collectors.toList()));\n\
    \            common3.removeAll(result.stream().filter(x -> l2.contains(x)).collect(Collectors.toList()));\n\
    \            result.addAll(common3);\n        }\n        return result;", "  \
    \      ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Collections.sort(common);\n\
    \        return common;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Set<Long> unique = new HashSet<Long>(common);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n        unique.removeAll(set2);\n\
    \        unique.removeAll(set1);\n        unique.removeAll(set2);\n        unique.removeAll(set1);\n\
    \        unique.removeAll(set2);\n        unique.removeAll(set1);\n", "      \
    \  ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1 = new\
    \ HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n      \
    \  set1.retainAll(set2);\n        set2.retainAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long val : set1) {\n            if(set2.contains(val)) {\n         \
    \       result.add(val);\n                set1.remove(val);\n                set2.remove(val);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        common.addAll(set1);\n        return common;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n \
    \       set2.removeAll(set1);\n        result.addAll(set1);\n        result.addAll(set2);\n\
    \        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        set2.retainAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        common.addAll(set1);\n        return common;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \                set1.remove(l);\n                set2.remove(l);\n          \
    \  }\n        }\n        for(Long l : set2) {\n            if(set1.contains(l))\
    \ {\n                result.add(l);\n                set2.remove(l);\n       \
    \         set1.remove(l);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long commonElements\
    \ = 0;\n        long commonElementsCount = 0;\n        long commonElementsCount2\
    \ = 0;\n        long commonElementsCount3 = 0;\n        long commonElementsCount4\
    \ = 0;\n        long commonElementsCount5 = 0;\n        long commonElementsCount6\
    \ = 0;\n        long commonElementsCount7 = 0;\n        long commonElementsCount8\
    \ = 0;\n        long commonElementsCount9 = 0;\n        long commonElementsCount10\
    \ = 0;\n        long commonElementsCount11 = 0;\n        long commonElementsCount12\
    \ = 0;\n        long commonElementsCount13 = 0;\n        long commonElementsCount14\
    \ = 0;\n        long commonElementsCount15 = 0;\n        long commonElementsCount16\
    \ = 0;\n        long commonElementsCount17 = 0;\n        long commonElementsCount18\
    \ = 0;\n        long commonElementsCount19 = 0;\n        long commonElementsCount20\
    \ = 0;\n        long commonElementsCount21 = 0;\n        long commonElementsCount22\
    \ = 0;\n        long commonElementsCount23 = 0;\n        long commonElementsCount24\
    \ = 0;\n        long commonElementsCount25 = 0;\n        long commonElementsCount26\
    \ = 0;\n        long commonElementsCount27 = 0;\n        long commonElementsCount28\
    \ = 0;\n        long commonElementsCount29 = 0;\n        long commonElementsCount30\
    \ = 0;\n        long commonElementsCount31 = 0;\n        long commonElementsCount32\
    \ = 0;\n        long commonElementsCount33 = 0;\n        long commonElementsCount34\
    \ = 0;\n        long commonElementsCount35 = 0;\n        long commonElementsCount36\
    \ = 0;\n        long commonElementsCount37 = 0;\n        long commonElementsCount38\
    \ = 0;\n        long commonElementsCount39 = 0;\n        long commonElementsCount40\
    \ = 0;\n        long commonElementsCount41 = 0;\n        long commonElementsCount42\
    \ = 0;\n        long commonElementsCount43 = 0;\n        long commonElementsCount44\
    \ = 0;\n        long commonElementsCount45 = 0;\n        long commonElementsCount46\
    \ = 0;\n        long commonElementsCount47 = 0;\n        long commonElementsCount48\
    \ = 0;\n        long commonElementsCount49 = 0;\n        long commonElementsCount50\
    \ = 0;\n        long commonElementsCount51 = 0;\n        long commonElementsCount52\
    \ = 0;\n        long commonElementsCount53 = 0;\n        long commonElementsCount54\
    \ = 0;\n        long commonElementsCount55 = 0;\n        long commonElementsCount56",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \                set2.remove(l);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long l : set1) {\n            if(set2.contains(l)) {\n             \
    \   result.add(l);\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        Set<Long> common = new\
    \ HashSet<Long>();\n        for (Long i : set1) {\n            if (set2.contains(i))\
    \ {\n                common.add(i);\n            }\n        }\n        for (Long\
    \ i : set2) {\n            if (!set1.contains(i)) {\n                common.add(i);\n\
    \            }\n        }\n        for (Long i : common) {\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long i : set1) {\n            if(set2.contains(i)) {\n             \
    \   result.add(i);\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long commonElements =\
    \ 0;\n        long commonElementsCount = 0;\n        long commonElementsSum =\
    \ 0;\n        long commonElementsSumCount = 0;\n        long commonElementsSumSum\
    \ = 0;\n        long commonElementsSumSumCount = 0;\n        long commonElementsSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long commonElementsSumSumSumCount = 0;\n        long commonElementsSumSumSumSum\
    \ = 0;\n        long common", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long val : set1) {\n            if(set2.contains(val)) {\n      \
    \          result.add(val);\n                set1.remove(val);\n             \
    \   set2.remove(val);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Set<Long> common =\
    \ new HashSet<>();\n        for(Long l : l1) {\n            common.add(l);\n \
    \       }\n        for(Long l : l2) {\n            if(!common.contains(l)) {\n\
    \                result.add(l);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long common = l1.stream().filter(x\
    \ -> l2.contains(x)).count();\n        if (common == 0) {\n            return\
    \ result;\n        }\n        long max = Math.max(l1.size(), l2.size());\n   \
    \     for (int i = 0; i < max; i++) {\n            if (l1.get(i) == l2.get(i))\
    \ {\n                result.add(l1.get(i));\n            }\n        }\n      \
    \  return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \                set1.remove(i);\n                set2.remove(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> common = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        Set<Long> set = new HashSet<>(common);\n        common.removeAll(set);\n\
    \        return common;", "        ArrayList<Long> common = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Set<Long>\
    \ set = new HashSet<>(common);\n        common.removeAll(set);\n        return\
    \ common;", "        ArrayList<Long> common = new ArrayList<Long>();\n       \
    \ Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set", "        ArrayList<Long> common = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        common.addAll(set1);\n   \
    \     common.addAll(set2);\n        Set<Long> set = new HashSet<Long>(common);\n\
    \        set.retainAll(l1);\n        set.retainAll(l2);\n        return set;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \                set1.remove(i);\n                set2.remove(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n   \
    \         if(set2.contains(i)) {\n                result.add(i);\n           \
    \ }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n            if(set2.contains(l))\
    \ {\n                result.add(l);\n                set2.remove(l);\n       \
    \     }\n        }\n        for(Long l : set2) {\n            if(set1.contains(l))\
    \ {\n                result.add(l);\n                set1.remove(l);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n            \
    \    result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.retainAll(set1);\n        common.addAll(set1);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n\
    \        while (it1.hasNext() && it2.hasNext()) {\n            long a = it1.next();\n\
    \            long b = it2.next();\n            if (a == b) continue;\n       \
    \     if (result.contains(a) && result.contains(b)) continue;\n            if\
    \ (result.contains(b) && result.contains(a)) continue;\n            result.add(a);\n\
    \            result.add(b);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long l : set1) {\n  \
    \          if(set2.contains(l)) {\n                result.add(l);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            Long i1 = it1.next();\n            Long i2 = it2.next();\n\
    \            if (i1 == i2) {\n                result.add(i1);\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long l : set1) {\n            if(set2.contains(l)) {\n          \
    \      result.add(l);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> common = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.retainAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.removeAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.", "        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n\
    \        while (it1.hasNext() && it2.hasNext()) {\n            Long i1 = it1.next();\n\
    \            Long i2 = it2.next();\n            if (i1 == i2) {\n            \
    \    result.add(i1);\n            }\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        result.addAll(set1);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long val : set1) {\n\
    \            if(set2.contains(val)) {\n                result.add(val);\n    \
    \            set1.remove(val);\n                set2.remove(val);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            long a = it1.next();\n            long b = it2.next();\n\
    \            if (a == b) {\n                result.add(a);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long common = Long.MIN_VALUE;\n        for (long i : l1) {\n        \
    \    for (long j : l2) {\n                if (i == j) {\n                    common\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        for (long i : l2) {\n            for (long j : l1) {\n          \
    \      if (i == j) {\n                    common = i;\n                    break;\n\
    \                }\n            }\n        }\n        result.add(common);\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n\
    \        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next()\
    \ == it2.next()) {\n                result.add(it1.next());\n            }\n \
    \       }\n        return result;", "        ArrayList<Long> common = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set", "  \
    \      ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set", "        ArrayList<Long> common = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n  \
    \      set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n            \
    \    result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long i : set1) {\n            if(!set2.contains(i)) {\n         \
    \       result.add(i);\n            }\n        }\n        return result;", " \
    \       ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Set<Long>\
    \ set = new HashSet<Long>(common);\n        set.retainAll(l1);\n        set.retainAll(l2);\n\
    \        return set;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        common.addAll(set1);\n        common.addAll(set2);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long l : set1) {\n            if(set2.contains(l)) {\n          \
    \      result.add(l);\n                set1.remove(l);\n                set2.remove(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n\
    \            if(set2.contains(i)) {\n                result.add(i);\n        \
    \    }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(!set2.contains(i))\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        Iterator<Long>\
    \ it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n    \
    \    while (it1.hasNext() && it2.hasNext()) {\n            Long i1 = it1.next();\n\
    \            Long i2 = it2.next();\n            if (i1 == i2) {\n            \
    \    result.add(i1);\n            }\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n\
    \        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next()\
    \ == it2.next()) {\n                result.add(it1.next());\n            }\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> common\
    \ = new ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n\
    \        Set<Long> set2 = new HashSet<Long>(l2);\n        common.addAll(set1);\n\
    \        common.addAll(set2);\n        Collections.sort(common);\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     Set<Long> common = new HashSet<>();\n        set1.retainAll(set2);\n   \
    \     set2.retainAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(common);\n\
    \        set2.removeAll(common);\n        set1.addAll(common);\n        set2.addAll(common);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(common);\n        set2.removeAll(common);\n        set1.addAll(common);\n\
    \        set2.addAll(common);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(common);\n        set2.removeAll(common);\n\
    \        set1.addAll(common);\n        set2.addAll(common);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(common);\n\
    \        set2.removeAll(common);\n        set1.addAll(common);\n        set2.addAll(common);\n\
    \        set1.addAll(set2);\n        set2.addAll(set1);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(common);\n        set2.removeAll(common);\n        set1.addAll(common);\n\
    \        set2.addAll(common);\n        set1.addAll(set2);\n        set2.addAll(set1);\n\
    \        set1.removeAll(set2);\n        set2.removeAll(set1);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(common);\n        set2.removeAll(common);\n\
    \        set1.addAll(common);\n        set2.addAll(common);\n        set1.addAll(set2);\n\
    \        set2.addAll(set1);\n        set1.removeAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.addAll(set2);\n        set2.addAll(", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n            if(set2.contains(i))\
    \ {\n                result.add(i);\n                set1.remove(i);\n       \
    \         set2.remove(i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1\
    \ = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        common.addAll(set1);\n        common.addAll(set2);\n        Set<Long>\
    \ set = new HashSet<Long>(common);\n        common.removeAll(set);\n        return\
    \ common;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ common = 0;\n        for (long i : l1) {\n            for (long j : l2) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l2) {\n            for (long\
    \ j : l1) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l1) {\n    \
    \        for (long j : l2) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l2) {\n            for (long j : l1) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l1) {\n            for (long j : l2) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l2) {\n            for (long j : l1) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l1) {\n            for (long\
    \ j : l2) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l2) {\n    \
    \        for (long j : l1) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l1) {\n            for (long j : l2) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l2) {\n            for (long j : l1) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l1) {\n            for (long j : l2) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l2) {\n            for (long\
    \ j : l1) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l1) {\n    \
    \        for (long j : l2) {\n                if (i == j) {\n                \
    \    common++;\n                }\n            }\n        }\n        for (long\
    \ i : l2) {\n            for (long j : l1) {\n                if (i == j) {\n\
    \                    common++;\n                }\n            }\n        }\n\
    \        for (long i : l1) {\n            for (long j : l2) {\n              \
    \  if (i == j) {\n                    common++;\n                }\n         \
    \   }\n        }\n        for (long i : l2) {\n            for (long j : l1) {\n\
    \                if (i == j) {\n                    common++;\n              \
    \  }\n            }\n        }\n        for (long i : l1) {\n            for (long\
    \ j : l2) {\n                if (i == j) {\n                    common++;\n  \
    \              }\n            }\n        }\n        for (long i : l", "      \
    \  ArrayList<Long> common = new ArrayList<Long>();\n        Set<Long> set1 = new\
    \ HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n      \
    \  set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set2);\n        set2.removeAll(set1);\n\
    \        set1.removeAll(set2);\n        set1.addAll(set2);\n        set1.retainAll(set2);\n\
    \        set2.removeAll(set1);\n        set1.removeAll(set2);\n        set1.addAll(set2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        set1.removeAll(set2);\n\
    \        set1.addAll(set2);\n        set1.retainAll(set", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n  \
    \          if(set2.contains(i)) {\n                result.add(i);\n          \
    \      set1.remove(i);\n                set2.remove(i);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long l : set1) {\n            if(set2.contains(l)) {\n          \
    \      result.add(l);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long common = 0;\n\
    \        for (long i : l1) {\n            if (l2.contains(i)) {\n            \
    \    common += i;\n            }\n        }\n        for (long i : l2) {\n   \
    \         if (l1.contains(i)) {\n                common -= i;\n            }\n\
    \        }\n        if (common > 0) {\n            result.add(common);\n     \
    \   }\n        return result;"]
stop_tokens:
- "\n    }\n"
